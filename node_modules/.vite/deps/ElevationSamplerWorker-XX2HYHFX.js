import {
  _
} from "./chunk-C3M7GLTQ.js";
import "./chunk-EQ3EWUVK.js";
import {
  h
} from "./chunk-25Y2OKSP.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-FFHGE66H.js";
import "./chunk-MOZ4GR2L.js";
import "./chunk-MQBVOUKB.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YG6VFATO.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import "./chunk-2QOWZFCU.js";
import "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  a,
  r
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var o = class {
  async createIndex(e, n) {
    const o2 = new Array();
    if (!e.vertexAttributes || !e.vertexAttributes.position)
      return new h();
    const s2 = this._createMeshData(e), a2 = r(n) ? await n.invoke("createIndexThread", s2, { transferList: o2 }) : this.createIndexThread(s2).result;
    return this._createPooledRBush().fromJSON(a2);
  }
  createIndexThread(e) {
    const t = new Float64Array(e.position), r2 = this._createPooledRBush();
    return e.components ? this._createIndexComponentsThread(r2, t, e.components.map((e2) => new Uint32Array(e2))) : this._createIndexAllThread(r2, t);
  }
  _createIndexAllThread(e, t) {
    const r2 = new Array(t.length / 9);
    let n = 0;
    for (let o2 = 0; o2 < t.length; o2 += 9)
      r2[n++] = s(t, o2 + 0, o2 + 3, o2 + 6);
    return e.load(r2), { result: e.toJSON() };
  }
  _createIndexComponentsThread(e, t, r2) {
    let n = 0;
    for (const s2 of r2)
      n += s2.length / 3;
    const o2 = new Array(n);
    let a2 = 0;
    for (const i of r2)
      for (let e2 = 0; e2 < i.length; e2 += 3)
        o2[a2++] = s(t, 3 * i[e2 + 0], 3 * i[e2 + 1], 3 * i[e2 + 2]);
    return e.load(o2), { result: e.toJSON() };
  }
  _createMeshData(e) {
    const t = (e.transform ? _({ position: e.vertexAttributes.position, normal: null, tangent: null }, e.transform, e.spatialReference).position : e.vertexAttributes.position).buffer;
    return !e.components || e.components.some((e2) => !e2.faces) ? { position: t } : { position: t, components: e.components.map((e2) => e2.faces) };
  }
  _createPooledRBush() {
    return new h(9, a("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
  }
};
function s(e, t, r2, n) {
  return { minX: Math.min(e[t + 0], e[r2 + 0], e[n + 0]), maxX: Math.max(e[t + 0], e[r2 + 0], e[n + 0]), minY: Math.min(e[t + 1], e[r2 + 1], e[n + 1]), maxY: Math.max(e[t + 1], e[r2 + 1], e[n + 1]), p0: [e[t + 0], e[t + 1], e[t + 2]], p1: [e[r2 + 0], e[r2 + 1], e[r2 + 2]], p2: [e[n + 0], e[n + 1], e[n + 2]] };
}
export {
  o as default
};
//# sourceMappingURL=ElevationSamplerWorker-XX2HYHFX.js.map
