import {
  n
} from "./chunk-OIPX3EDD.js";
import {
  D
} from "./chunk-U3PSONS6.js";
import {
  a,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/2d/engine/DisplayObject.js
var r = 1 / a("mapview-transitions-duration");
var a2 = class extends n {
  constructor() {
    super(...arguments), this._fadeOutResolver = null, this._fadeInResolver = null, this._clips = null, this.computedVisible = true, this.computedOpacity = 1, this.fadeTransitionEnabled = false, this.inFadeTransition = false, this._isReady = false, this._opacity = 1, this._stage = null, this._visible = true;
  }
  get clips() {
    return this._clips;
  }
  set clips(e) {
    this._clips = e, this.requestRender();
  }
  get isReady() {
    return this._isReady;
  }
  get opacity() {
    return this._opacity;
  }
  set opacity(e) {
    this._opacity !== e && (this._opacity = Math.min(1, Math.max(e, 0)), this.requestRender());
  }
  get stage() {
    return this._stage;
  }
  set stage(e) {
    if (this._stage === e)
      return;
    const t2 = this._stage;
    this._stage = e, e ? this._stage.untrashDisplayObject(this) || (this.onAttach(), this.emit("attach")) : t2.trashDisplayObject(this);
  }
  get transforms() {
    return this._getTransforms();
  }
  _getTransforms() {
    return t(this._transforms) && (this._transforms = this._createTransforms()), this._transforms;
  }
  get visible() {
    return this._visible;
  }
  set visible(e) {
    this._visible !== e && (this._visible = e, this.requestRender());
  }
  fadeIn() {
    return this._fadeInResolver || (this._fadeOutResolver && (this._fadeOutResolver(), this._fadeOutResolver = null), this.computedOpacity = 0, this.fadeTransitionEnabled = true, this._fadeInResolver = D(), this.requestRender()), this._fadeInResolver.promise;
  }
  fadeOut() {
    return this._fadeOutResolver || (this._fadeInResolver && (this._fadeInResolver(), this._fadeInResolver = null), this.fadeTransitionEnabled = true, this._fadeOutResolver = D(), this.requestRender()), this._fadeOutResolver.promise;
  }
  beforeRender(e) {
    this.updateTransitionProperties(e.deltaTime, e.state.scale);
  }
  afterRender(e) {
    this._fadeInResolver && this.computedOpacity === this.opacity ? (this._fadeInResolver(), this._fadeInResolver = null) : this._fadeOutResolver && 0 === this.computedOpacity && (this._fadeOutResolver(), this._fadeOutResolver = null);
  }
  remove() {
    var _a2;
    (_a2 = this.parent) == null ? void 0 : _a2.removeChild(this);
  }
  setTransform(e) {
  }
  processRender(e) {
    this.stage && this.computedVisible && this.doRender(e);
  }
  requestRender() {
    this.stage && this.stage.requestRender();
  }
  processDetach() {
    this._fadeInResolver && (this._fadeInResolver(), this._fadeInResolver = null), this._fadeOutResolver && (this._fadeOutResolver(), this._fadeOutResolver = null), this.onDetach(), this.emit("detach");
  }
  updateTransitionProperties(e, t2) {
    if (this.fadeTransitionEnabled) {
      const t3 = this._fadeOutResolver || !this.visible ? 0 : this.opacity, s = this.computedOpacity;
      if (s === t3)
        this.computedVisible = this.visible;
      else {
        const i = e * r;
        this.computedOpacity = s > t3 ? Math.max(t3, s - i) : Math.min(t3, s + i), this.computedVisible = this.computedOpacity > 0;
        const a3 = t3 === this.computedOpacity;
        this.inFadeTransition = !a3, a3 || this.requestRender();
      }
    } else
      this.computedOpacity = this.opacity, this.computedVisible = this.visible;
  }
  onAttach() {
  }
  onDetach() {
  }
  doRender(e) {
  }
  ready() {
    this._isReady || (this._isReady = true, this.emit("isReady"), this.requestRender());
  }
};

export {
  a2 as a
};
//# sourceMappingURL=chunk-RVR2DEVB.js.map
