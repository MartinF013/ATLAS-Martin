import {
  g,
  o
} from "./chunk-2EPPX4WN.js";
import {
  j
} from "./chunk-T7BEWVV3.js";
import {
  d,
  n2 as n,
  n8 as n2
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  f
} from "./chunk-U3PSONS6.js";

// node_modules/@arcgis/core/views/3d/layers/LayerView3D.js
var n3 = (n4) => {
  let c = class extends n4 {
    constructor() {
      super(...arguments), this.slicePlaneEnabled = false, this.supportsHeightUnitConversion = false;
    }
    postscript(e2) {
      super.postscript(e2), g(this.layer) && this.addResolvingPromise(this._validateHeightModelInfo());
    }
    async _validateHeightModelInfo() {
      const e2 = new AbortController(), o2 = e2.signal;
      this.handles.add(n(() => e2.abort())), await j(() => {
        var _a;
        return (_a = this.view.defaultsFromMap) == null ? void 0 : _a.heightModelInfoReady;
      }, o2), f(o2);
      const i = o(this.layer, this.view.heightModelInfo, this.supportsHeightUnitConversion);
      if (i)
        throw i;
    }
    canResume() {
      const e2 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
      return super.canResume() && (!e2 || !e2.minScale || !e2.maxScale || e2.minScale >= e2.maxScale);
    }
    getSuspendInfo() {
      const e2 = super.getSuspendInfo(), s = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
      return s && s.minScale && s.maxScale && s.minScale < s.maxScale && (e2.outsideScaleRange = true), e2;
    }
  };
  return e([d()], c.prototype, "view", void 0), e([d()], c.prototype, "slicePlaneEnabled", void 0), c = e([n2("esri.views.3d.layers.LayerView3D")], c), c;
};

export {
  n3 as n
};
//# sourceMappingURL=chunk-WLVMYWO2.js.map
