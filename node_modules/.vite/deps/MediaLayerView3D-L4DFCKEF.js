import {
  m
} from "./chunk-PT7GCS5M.js";
import {
  n as n3
} from "./chunk-WLVMYWO2.js";
import "./chunk-ZO4P57E5.js";
import {
  a as a2
} from "./chunk-W6C7NF62.js";
import "./chunk-LCW6FHIL.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import {
  _e
} from "./chunk-Y75V5CF3.js";
import "./chunk-PQM6RARY.js";
import "./chunk-2Y5KPYOJ.js";
import "./chunk-BBUIX72C.js";
import "./chunk-5ZS6RUSM.js";
import "./chunk-7LH2XNVI.js";
import "./chunk-PXOPYXIX.js";
import "./chunk-WSQIVEW5.js";
import "./chunk-ZTFWVZTL.js";
import "./chunk-ELZC3DZT.js";
import "./chunk-TGUQXVQU.js";
import "./chunk-4LQ6NAOX.js";
import "./chunk-K37I5IIG.js";
import "./chunk-GKYJJGE3.js";
import "./chunk-AWIG2DGF.js";
import "./chunk-3236UEJN.js";
import "./chunk-KSOWE6GO.js";
import "./chunk-ZLORWBMB.js";
import "./chunk-CNL2CHF7.js";
import "./chunk-HRAEK6P4.js";
import "./chunk-K6UIDSFF.js";
import {
  T
} from "./chunk-MHEQOIKQ.js";
import {
  E,
  e as e2
} from "./chunk-AIONJO5O.js";
import "./chunk-YLSPLHY5.js";
import "./chunk-4GGQTXXY.js";
import "./chunk-QMP4VG7M.js";
import "./chunk-5RP42VZJ.js";
import "./chunk-XEWFCJLT.js";
import "./chunk-ZEDAE7EU.js";
import "./chunk-YXFNNKMT.js";
import {
  g
} from "./chunk-7OZR6JFF.js";
import "./chunk-NXOQBIK7.js";
import "./chunk-ERNXFM5T.js";
import "./chunk-6ITXWFMK.js";
import "./chunk-SV4VP57N.js";
import {
  L
} from "./chunk-5LWMNFCG.js";
import "./chunk-PWYPPSAW.js";
import "./chunk-5EXPMKQP.js";
import "./chunk-B7F3T673.js";
import "./chunk-QXYW5CVF.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-XEIRRA3E.js";
import "./chunk-B3IXFXV6.js";
import "./chunk-XNOIZLCR.js";
import "./chunk-I22L7HNU.js";
import "./chunk-44UD36FH.js";
import "./chunk-ODYLXHP4.js";
import "./chunk-Y5AGUEHG.js";
import "./chunk-DVE4HUBR.js";
import "./chunk-RC6OMMF6.js";
import "./chunk-AWPZQDE5.js";
import "./chunk-OYNEZ5VG.js";
import "./chunk-R67CDTDF.js";
import "./chunk-UCWSHVC4.js";
import "./chunk-DHZ2TSD5.js";
import "./chunk-FAF3GP2W.js";
import "./chunk-YSWURJZW.js";
import "./chunk-5JKCNCL2.js";
import "./chunk-2YDCEMEJ.js";
import "./chunk-767LZ6IM.js";
import "./chunk-TTKSAULB.js";
import "./chunk-WJDUBZ7S.js";
import "./chunk-DNPZNIDB.js";
import "./chunk-WW7VYUQW.js";
import "./chunk-FCDEMPPS.js";
import "./chunk-TEJEYVH4.js";
import "./chunk-HEZ2ATGC.js";
import "./chunk-AALA53RH.js";
import "./chunk-BOVIIQLB.js";
import "./chunk-IJHFAZOW.js";
import "./chunk-DMGVDNFD.js";
import "./chunk-YAQGRU5B.js";
import "./chunk-M3GMIUQS.js";
import "./chunk-BMA2CXVS.js";
import "./chunk-46N7XS5M.js";
import "./chunk-4MKQUQD4.js";
import "./chunk-A3QLZKCF.js";
import "./chunk-OYAHQ564.js";
import "./chunk-LGILR4HN.js";
import "./chunk-I5UNY2WQ.js";
import "./chunk-EYJ2F5XB.js";
import "./chunk-TR3U55RZ.js";
import "./chunk-3DCTMZI6.js";
import "./chunk-33INAWJA.js";
import "./chunk-5WOO2FX6.js";
import {
  D
} from "./chunk-FPMD6IB4.js";
import "./chunk-MQBVOUKB.js";
import "./chunk-PLLZPG4O.js";
import "./chunk-WQLER7IU.js";
import "./chunk-7GTYHKA3.js";
import "./chunk-MOXYEJRV.js";
import "./chunk-EEJIELE6.js";
import "./chunk-Y55TYMBP.js";
import "./chunk-NAB3NF54.js";
import "./chunk-MHB3L22D.js";
import {
  l,
  o
} from "./chunk-MDCKEJ7B.js";
import "./chunk-MLAOYRDT.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-72PB636Q.js";
import "./chunk-53KI6WDE.js";
import "./chunk-W2HLA6I3.js";
import "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-2EPPX4WN.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZN2MGN4S.js";
import "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-YG6VFATO.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-6GPADSSO.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  a
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-TMBOFNWA.js";
import {
  f
} from "./chunk-56RHM4A6.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n2 as n,
  n8 as n2,
  r as r2,
  t2
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  k,
  x
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/3d/layers/MediaLayerView3D.js
var b = class extends n3(u) {
  constructor() {
    super(...arguments), this.type = "media-3d", this.drapeSourceType = e2.RasterImage, this.updatePolicy = o.ASYNC, this._uidToElement = /* @__PURE__ */ new Map(), this._renderedElements = /* @__PURE__ */ new Map(), this._lastDrapingExtent = null, this._update = x(async (e3, t3, r3) => {
      const i = await this._collectMediaElements(e3, t3, r3);
      this._synchronizeRenderElements(i);
    }, 0);
  }
  initialize() {
    this._renderer = this.view.basemapTerrain.overlayManager.registerGeometryDrapeSource(this), this.handles.add([n(() => this.view.basemapTerrain.overlayManager.unregisterDrapeSource(this)), a(() => this.layer.source, "refresh", () => this._updateWithLastDrapingExtent())]), this.updatingHandles.add(() => this.suspended, () => this._updateWithLastDrapingExtent());
  }
  setDrapingExtent(e3, t3) {
    this._lastDrapingExtent = { overlays: e3, spatialReference: t3 }, this._updateWithLastDrapingExtent();
  }
  getHit(e3) {
    const t3 = this._uidToElement.get(e3);
    return t3 ? { type: "media", element: t3, layer: this.layer } : null;
  }
  _updateWithLastDrapingExtent() {
    if (t(this._lastDrapingExtent) || this.suspended)
      return void (this._renderer && this._synchronizeRenderElements(/* @__PURE__ */ new Set()));
    const { overlays: e3, spatialReference: t3 } = this._lastDrapingExtent;
    this.updatingHandles.addPromise(this._update(e3, t3).catch(() => {
    }));
  }
  async _collectMediaElements(e3, t3, r3) {
    const i = this.layer.source;
    return t(i) ? /* @__PURE__ */ new Set() : new Set((await Promise.all(e3.map((e4) => i.queryElements(f(e4.extent, t3), { signal: r3 })))).flat());
  }
  _synchronizeRenderElements(e3) {
    this._synchronizeRenderElementsRemove(e3), this._synchronizeRenderElementsAdd(e3);
  }
  _synchronizeRenderElementsRemove(e3) {
    const t3 = /* @__PURE__ */ new Set(), r3 = [];
    this._renderedElements.forEach((i, s) => {
      e3.has(s) || (t3.add(s), r(i.renderData) && r3.push(i.renderData.renderGeometry), this._removeElement(s, i));
    }), this._renderer.removeGeometries(r3, E.Geometry.REMOVE);
  }
  _synchronizeRenderElementsAdd(e3) {
    for (const t3 of e3)
      this._renderedElements.has(t3) || this._createRenderElement(t3);
  }
  _removeElement(e3, { renderData: t3, handle: r3 }) {
    this._destroyRenderData(t3), this._renderedElements.delete(e3), this._uidToElement.delete(e3.uid), r3.remove();
  }
  async _createRenderElement(e3) {
    const t3 = new a2({ spatialReference: this.view.spatialReference, element: e3 }), s = { renderData: null, handle: r2([this.updatingHandles.add(() => e3.opacity, (e4) => {
      r(s.renderData) && s.renderData.material.setParameters({ opacity: e4 });
    }), this.updatingHandles.add(() => t3.coords, (e4) => {
      r(s.renderData) ? this._updateGeometry(s, s.renderData, e4) : this._initializeRenderData(t3, s);
    }), this.updatingHandles.add(() => e3.content, () => this._initializeRenderData(t3, s)), t2(t3)]) };
    this._renderedElements.set(e3, s), this._uidToElement.set(e3.uid, e3), this.updatingHandles.addPromise(e3.load().catch(() => {
    })), this._initializeRenderData(t3, s);
  }
  _initializeRenderData(e3, t3) {
    const { coords: r3, element: i } = e3;
    if (t(r3) || t(i.content))
      return void (t3.renderData = this._destroyRenderData(t3.renderData));
    if (r(t3.renderData))
      return;
    const n4 = this._createTexture(i.content);
    this.view._stage.add(n4);
    const d2 = this.view._stage.loadImmediate(n4);
    k(d2) && this.updatingHandles.addPromise(d2);
    const m2 = new m({ initTextureTransparent: true, textureId: n4.id, opacity: i.opacity, transparent: true }), l2 = this._positionVertexBufferFromCoordinates(r3), p = [0, 0, 1, 0, 1, 1, 0, 1], h = new Uint16Array([0, 1, 2, 0, 2, 3]), c = new g([[O.POSITION, { data: l2, size: 3, exclusive: true }], [O.UV0, { data: p, size: 2, exclusive: true }]], [[O.POSITION, h], [O.UV0, h]]), u2 = new T(c, m2, { layerUid: this.layer.uid, graphicUid: i.uid });
    this._renderer.addGeometries([u2], E.Geometry.ADD), t3.renderData = { renderGeometry: u2, texture: n4, material: m2 };
  }
  _updateGeometry(e3, t3, r3) {
    if (t(r3))
      return void (e3.renderData = this._destroyRenderData(e3.renderData));
    const i = this._positionVertexBufferFromCoordinates(r3);
    t3.renderGeometry.vertexAttributes.get(O.POSITION).data = i, this._renderer.modifyGeometries([t3.renderGeometry], E.State.VERTEXATTRS);
  }
  _positionVertexBufferFromCoordinates(e3) {
    const [t3, r3, i, s] = e3.rings[0];
    return new Float64Array([t3[0], t3[1], _e, s[0], s[1], _e, i[0], i[1], _e, r3[0], r3[1], _e]);
  }
  _destroyRenderData(e3) {
    return t(e3) || (this.view._stage.remove(e3.texture), this._renderer.removeGeometries([e3.renderGeometry], E.Geometry.REMOVE), e3.material.dispose()), null;
  }
  _createTexture(e3) {
    const t3 = e3 instanceof HTMLImageElement ? e3.naturalWidth : e3.width, r3 = e3 instanceof HTMLImageElement ? e3.naturalHeight : e3.height;
    return new L(e3, { wrap: { s: D.CLAMP_TO_EDGE, t: D.CLAMP_TO_EDGE }, preMultiplyAlpha: true, width: t3, height: r3, mipmap: true, powerOfTwoResizeMode: l.STRETCH, updateCallback: () => this.view.basemapTerrain.overlayManager.setDrawTexturesDirty() });
  }
  get test() {
    const e3 = this;
    return { get numberOfElements() {
      return e3._renderedElements.size;
    } };
  }
};
e([d({ readOnly: true })], b.prototype, "type", void 0), e([d()], b.prototype, "layer", void 0), b = e([n2("esri.views.3d.layers.MediaLayerView3D")], b);
var j = b;
export {
  j as default
};
//# sourceMappingURL=MediaLayerView3D-L4DFCKEF.js.map
