import {
  V
} from "./chunk-PVL2NLPX.js";
import {
  u as u2
} from "./chunk-3UQ4HI6Q.js";
import {
  _
} from "./chunk-TVBLDFP3.js";
import {
  s as s2
} from "./chunk-DSCM4HDL.js";
import {
  r as r4
} from "./chunk-KYD2B4O6.js";
import {
  h as h3
} from "./chunk-KW6WHTET.js";
import {
  O as O2,
  P,
  R,
  d2
} from "./chunk-EHWEX2VK.js";
import {
  H
} from "./chunk-Y75V5CF3.js";
import {
  T
} from "./chunk-MHEQOIKQ.js";
import {
  E,
  e as e4
} from "./chunk-AIONJO5O.js";
import {
  r as r3,
  t as t2
} from "./chunk-KD6KBT2L.js";
import {
  h
} from "./chunk-EYJ2F5XB.js";
import {
  h as h2
} from "./chunk-EEJIELE6.js";
import {
  o as o2
} from "./chunk-MDCKEJ7B.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  v
} from "./chunk-SOZCO2CU.js";
import {
  p,
  y as y2
} from "./chunk-HB4HVKJV.js";
import {
  Un
} from "./chunk-PZWU5EHT.js";
import {
  e as e3
} from "./chunk-U7B2WKBH.js";
import {
  x
} from "./chunk-LJLQIETB.js";
import {
  B,
  M,
  a as a2
} from "./chunk-TMBOFNWA.js";
import {
  s
} from "./chunk-H7JF6Q7A.js";
import {
  n as n3
} from "./chunk-OIPX3EDD.js";
import {
  l
} from "./chunk-FVPTCNCX.js";
import {
  D,
  a,
  r as r2
} from "./chunk-ZOKX6UGH.js";
import {
  o,
  q,
  u
} from "./chunk-PKZEO23A.js";
import {
  n as n2
} from "./chunk-AIRC226G.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  e as e2,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/interactive/editingTools/settings.js
var r5 = { main: new l([255, 127, 0]), selected: new l([255, 255, 255]), staged: new l([12, 207, 255]), outline: new l([0, 0, 0, 0.5]), selectedOutline: new l([255, 255, 255]) };
var h4 = 0.3;
function c(t3, e6) {
  const i = t3.clone();
  return i.a *= e6, i;
}
function a3(t3, l2) {
  const o3 = t3.clone(), s3 = y2(o3);
  s3.s *= l2;
  const n5 = p(s3);
  return o3.r = n5.r, o3.g = n5.g, o3.b = n5.b, o3;
}
function d3(t3, e6) {
  if (e6)
    for (const i in e6)
      t3[i] = e6[i];
}
var u3 = class {
  constructor(t3) {
    this.color = r5.main, this.height = 90, this.coneHeight = 40, this.coneWidth = 23, this.width = 3, this.renderOccluded = h2.Opaque, d3(this, t3);
  }
};
var p2 = class {
  constructor(t3) {
    this.size = 11, this.outlineSize = 1, this.collisionPadding = 9, this.color = r5.main, this.outlineColor = r5.outline, this.renderOccluded = h2.Opaque, this.hoverOutlineColor = r5.selectedOutline, d3(this, t3);
  }
  apply(t3, e6) {
    const i = this[t3];
    e6.setParameters({ color: P2(i), transparent: "color" !== t3 || i.a < 1, renderOccluded: this.renderOccluded });
  }
};
var g = class {
  constructor(t3) {
    this.size = 40, this.height = 0.2, this.offset = 0.25, this.collisionPadding = 2, this.color = c(r5.main, 0.5), this.hoverColor = r5.main, this.renderOccluded = h2.Transparent, this.minSquaredEdgeLength = 900, d3(this, t3);
  }
  apply(t3, e6) {
    const i = this[t3];
    e6.setParameters({ color: P2(i), transparent: i.a < 1, renderOccluded: this.renderOccluded });
  }
};
var f = class {
  constructor(t3) {
    this.vertex = new p2({ color: r5.main, outlineColor: r5.outline }), this.edge = new p2({ color: a3(c(r5.main, 2 / 3), 0.5), outlineColor: c(r5.outline, 0.5), size: 8, collisionPadding: 8 }), this.selected = new p2({ color: r5.selected, outlineColor: r5.outline }), this.edgeOffset = new g(), d3(this, t3);
  }
};
var w = class {
  constructor(t3) {
    this.color = r5.selected, this.width = 1.5, this.stipplePattern = r4(5), this.stippleOffColor = r5.outline, this.falloff = 0, this.innerWidth = 1.5, this.innerColor = r5.selected, this.renderOccluded = h2.OccludeAndTransparent, d3(this, t3);
  }
  apply(t3) {
    t3.color = P2(this.color), t3.width = this.width, t3.stipplePattern = this.stipplePattern, t3.stippleOffColor = P2(this.stippleOffColor), t3.falloff = this.falloff, t3.innerWidth = this.innerWidth, t3.innerColor = P2(this.innerColor), t3.renderOccluded = this.renderOccluded;
  }
};
var C = class {
  constructor(t3) {
    this.color = r5.selected, this.size = 4, this.outlineSize = 1, this.outlineColor = r5.outline, this.shape = "square", d3(this, t3);
  }
  apply(t3) {
    t3.color = P2(this.color), t3.size = this.size, t3.outlineSize = this.outlineSize, t3.outlineColor = P2(this.outlineColor), t3.primitive = this.shape;
  }
};
var m = class {
  constructor(t3) {
    this.innerColor = r5.selected, this.innerWidth = 1, this.glowColor = r5.main, this.glowWidth = 8, this.glowFalloff = 8, this.globalAlpha = h4, this.globalAlphaContrastBoost = 1.5, this.radius = 3, this.heightFillColor = r5.main, d3(this, t3);
  }
  apply(e6, i = 1) {
    const l2 = { glowColor: l.toUnitRGB(this.glowColor), glowFalloff: this.glowFalloff, glowWidth: this.glowWidth, innerColor: l.toUnitRGB(this.innerColor), innerWidth: this.innerWidth, globalAlpha: this.globalAlpha * i, globalAlphaContrastBoost: this.globalAlphaContrastBoost, intersectsLineRadius: this.radius };
    "style" in e6 ? e6.style = l2 : e6.laserlineStyle = l2;
  }
};
var O3 = class {
  constructor(t3) {
    this.outline = new w({ color: r5.outline, renderOccluded: h2.OccludeAndTransparentStencil, stippleOffColor: r5.selected, stipplePattern: r4(5), width: 1.5, innerWidth: 0 }), this.staged = new w({ color: r5.selected, renderOccluded: h2.OccludeAndTransparentStencil, innerColor: r5.staged, stippleOffColor: r5.outline, stipplePattern: r4(5), width: 1.5 }), this.shadowStyle = new m({ globalAlpha: h4, glowColor: r5.main, glowFalloff: 8, glowWidth: 8, innerColor: r5.selected, innerWidth: 1 }), d3(this, t3);
  }
};
var A = class {
  constructor(t3) {
    this.outline = new C({ color: r5.selected, outlineColor: r5.outline, outlineSize: 1, shape: "circle", size: 4 }), this.shadowStyle = new m({ globalAlpha: h4, glowColor: r5.main, glowFalloff: 1.5, glowWidth: 6, innerColor: r5.selected, innerWidth: 1, radius: 2 }), d3(this, t3);
  }
};
var W = class extends w {
  constructor(t3) {
    super(), this.extensionType = V.GROUND_RAY, d3(this, t3);
  }
};
var b = class {
  constructor(t3) {
    this.lineGraphics = new O3(), this.pointGraphics = new A(), this.heightPlane = new m({ globalAlpha: h4, glowColor: r5.main, glowFalloff: 8, glowWidth: 8, innerColor: r5.selected, innerWidth: 1 }), this.heightBox = new m({ globalAlpha: h4, glowColor: r5.main, glowFalloff: 8, glowWidth: 8, innerColor: r5.selected, innerWidth: 0, heightFillColor: r5.main }), this.zVerticalLine = new W({ color: c(r5.main, 5 * h4 / 3), falloff: 2, innerColor: c(r5.selected, 0), renderOccluded: h2.OccludeAndTransparent, stipplePattern: null, width: 5, extensionType: V.GROUND_RAY }), this.laserlineAlphaMultiplier = 1.5, this.heightPlaneAngleCutoff = 20, d3(this, t3);
  }
};
var z = class {
  constructor(t3) {
    this.visualElements = new b(), this.reshapeManipulators = new f(), this.zManipulator = new u3(), d3(this, t3);
  }
  colorToVec4(t3) {
    return P2(t3);
  }
};
function P2(e6) {
  return e3(l.toUnitRGBA(e6));
}
var y3 = new z();

// node_modules/@arcgis/core/views/3d/interactive/visualElements/DrapedVisualElementResources.js
var h5 = class {
  constructor(e6) {
    this.resourceFactory = e6, this._resources = null, this._visible = true, this._attached = false;
  }
  destroy() {
    this._destroyResources();
  }
  get resources() {
    return r(this._resources) ? this._resources.external : null;
  }
  get visible() {
    return this._visible;
  }
  set visible(e6) {
    e6 !== this._visible && (this._visible = e6, this._syncGeometriesToRenderer());
  }
  get attached() {
    return this._attached;
  }
  set attached(e6) {
    e6 !== this._attached && (this._attached = e6, this._createOrDestroyResources());
  }
  recreate() {
    this.attached && this._createResources();
  }
  recreateGeometry() {
    this.resourceFactory.recreateGeometry ? t(this._resources) || (this._ensureRenderGeometriesRemoved(), this.resourceFactory.recreateGeometry(this._resources.external), this._syncGeometriesToRenderer()) : this.recreate();
  }
  _createOrDestroyResources() {
    this._attached ? t(this._resources) && this._createResources() : this._destroyResources();
  }
  _createResources() {
    var _a;
    this._destroyResources();
    const e6 = this.resourceFactory.createResources(), r6 = new n4({ view: this.resourceFactory.view }), s3 = (_a = this.resourceFactory.view.basemapTerrain) == null ? void 0 : _a.overlayManager;
    this._resources = { layerView: new n4({ view: this.resourceFactory.view }), external: e6, geometriesAdded: false }, s3 && (this._resources.drapeSourceRenderer = s3.registerGeometryDrapeSource(r6)), this._syncGeometriesToRenderer();
  }
  _destroyResources() {
    var _a;
    if (t(this._resources))
      return;
    this._ensureRenderGeometriesRemoved();
    const e6 = (_a = this.resourceFactory.view.basemapTerrain) == null ? void 0 : _a.overlayManager;
    e6 && e6.unregisterDrapeSource(this._resources.layerView), this._resources = null;
  }
  _syncGeometriesToRenderer() {
    this._visible ? this._ensureRenderGeometriesAdded() : this._ensureRenderGeometriesRemoved();
  }
  _ensureRenderGeometriesRemoved() {
    if (t(this._resources) || t(this._resources.drapeSourceRenderer))
      return;
    if (!this._resources.geometriesAdded)
      return;
    this._resources.drapeSourceRenderer.removeGeometries(this._resources.external.geometries, E.Geometry.UPDATE), this._resources.geometriesAdded = false;
  }
  _ensureRenderGeometriesAdded() {
    if (t(this._resources) || t(this._resources.drapeSourceRenderer))
      return;
    if (this._resources.geometriesAdded)
      return;
    this._resources.drapeSourceRenderer.addGeometries(this._resources.external.geometries, E.Geometry.UPDATE), this._resources.geometriesAdded = true;
  }
};
var n4 = class extends s(y) {
  constructor(e6) {
    super(e6), this.drapeSourceType = e4.Features, this.updatePolicy = o2.SYNC;
  }
};
e([d({ constructOnly: true })], n4.prototype, "view", void 0), e([d({ readOnly: true })], n4.prototype, "drapeSourceType", void 0), n4 = e([n("DrapedVisualElementLayerView")], n4);

// node_modules/@arcgis/core/views/3d/interactive/visualElements/OutlineVisualElement.js
var S = class {
  constructor(t3) {
    this.view = null, this._attachmentOrigin = v(0, 0, 0, null), this._attachmentOriginDirty = true, this.events = new n3(), this._isDraped = false, this._geometry = null, this._width = 1, this._color = r3(1, 0, 1, 1), this._innerWidth = 0, this._innerColor = r3(1, 1, 1, 1), this._stipplePattern = null, this._stippleOffColor = null, this._falloff = 0, this._elevationInfo = null, this._laserlineStyle = null, this._laserlineEnabled = false, this._renderOccluded = h2.OccludeAndTransparentStencil, this.resources = new u2({ view: t3.view, createResources: (e6) => this._createResources(e6), recreateGeometry: (e6, t4) => (e6.geometries.length = 0, this._recreateGeometry(t4, e6.material, e6.geometries), e6.geometries) }), this._attachmentOrigin.spatialReference = t3.view.spatialReference, this.drapedResources = new h5({ view: t3.view, createResources: () => this._createDrapedResources(), recreateGeometry: (e6) => {
      e6.geometries = this._createRenderGeometriesDraped(e6.material), this._attachmentOriginChanged();
    } });
    let r6 = true;
    this._laserline = new _({ view: t3.view });
    for (const e6 in t3)
      e6 in this ? "attached" === e6 ? r6 = t3[e6] : this[e6] = t3[e6] : console.error("Cannot set unknown property", e6);
    this.attached = r6;
  }
  destroy() {
    this.resources.destroy(), this.drapedResources.destroy(), this._laserline.destroy();
  }
  get isDraped() {
    return this._isDraped;
  }
  set isDraped(e6) {
    e6 !== this._isDraped && (this._isDraped = e6, this._updateAttached(this.attached), this._laserline.attached = this.laserlineAttached);
  }
  get laserlineAttached() {
    return this.attached && this.visible && r(this._laserlineStyle) && !this.isDraped && this.laserlineEnabled;
  }
  get visible() {
    return this.resources.visible;
  }
  set visible(e6) {
    this.resources.visible = e6, this.drapedResources.visible = e6, this._laserline.attached = this.laserlineAttached;
  }
  get attached() {
    return this.resources.attached || this.drapedResources.attached;
  }
  set attached(e6) {
    this._updateAttached(e6);
  }
  _updateAttached(e6) {
    this.resources.attached = !this.isDraped && e6, this.drapedResources.attached = this.isDraped && e6, this._laserline.attached = this.laserlineAttached, this.attached && this._attachmentOriginChanged();
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(e6) {
    this._geometry = e6, this.resources.recreateGeometry(), this.drapedResources.recreateGeometry();
  }
  get width() {
    return this._width;
  }
  set width(e6) {
    e6 !== this._width && (this._width = e6, this._updateMaterial());
  }
  get color() {
    return this._color;
  }
  set color(e6) {
    D(e6, this._color) || (a(this._color, e6), this._updateMaterial());
  }
  get innerWidth() {
    return this._innerWidth;
  }
  set innerWidth(e6) {
    e6 !== this._innerWidth && (this._innerWidth = e6, this._updateMaterial());
  }
  get innerColor() {
    return this._innerColor;
  }
  set innerColor(e6) {
    D(e6, this._innerColor) || (a(this._innerColor, e6), this._updateMaterial());
  }
  get stipplePattern() {
    return this._stipplePattern;
  }
  set stipplePattern(e6) {
    const r6 = r(e6) !== r(this._stipplePattern);
    this._stipplePattern = e6, r6 ? this.resources.recreate() : this._updateMaterial();
  }
  get stippleOffColor() {
    return this._stippleOffColor;
  }
  set stippleOffColor(e6) {
    e6 && this._stippleOffColor && D(e6, this._stippleOffColor) || (this._stippleOffColor = e6 ? t2(e6) : null, this._updateMaterial());
  }
  get falloff() {
    return this._falloff;
  }
  set falloff(e6) {
    e6 !== this._falloff && (this._falloff = e6, this._updateMaterial());
  }
  get elevationInfo() {
    return this._elevationInfo;
  }
  set elevationInfo(e6) {
    this._elevationInfo = e6, this.resources.recreateGeometry();
  }
  get laserlineStyle() {
    return this._laserlineStyle;
  }
  set laserlineStyle(e6) {
    this._laserlineStyle = e6, this._laserline.attached = this.laserlineAttached, r(e6) && (this._laserline.style = e6);
  }
  get laserlineEnabled() {
    return this._laserlineEnabled;
  }
  set laserlineEnabled(e6) {
    this._laserlineEnabled !== e6 && (this._laserlineEnabled = e6, this._laserline.attached = this.laserlineAttached);
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e6) {
    e6 !== this._renderOccluded && (this._renderOccluded = e6, this._updateMaterial());
  }
  get attachmentOrigin() {
    if (!this._attachmentOriginDirty)
      return this._attachmentOrigin;
    const e6 = r(this.resources.resources) ? this.resources.resources.geometries : null;
    if (!e6 || 0 === e6.length)
      return null;
    o(V2, 0, 0, 0);
    let s3 = 0;
    for (const t3 of e6) {
      const e7 = t3.vertexAttributes.get(O.POSITION), i = t3.indices.get(O.POSITION), n5 = e2(this.resources.resources).material.isClosed(e7.data, i);
      h(e7, i, n5, W2) && (u(V2, V2, W2), s3++);
    }
    return 0 === s3 ? null : (q(V2, V2, 1 / s3), this.view.renderCoordsHelper.fromRenderCoords(V2, this._attachmentOrigin), this._attachmentOriginDirty = false, this._attachmentOrigin);
  }
  _updateMaterial() {
    r(this.resources.resources) && this.resources.resources.material.setParameters(this.materialParameters), r(this.drapedResources.resources) && this.drapedResources.resources.material.setParameters(this.materialParameters);
  }
  get isClosed() {
    return r(this.geometry) && "polygon" === this.geometry.type;
  }
  get materialParameters() {
    return { width: this._width, color: this._color, stippleOffColor: this._stippleOffColor, stipplePattern: this._stipplePattern, stipplePreferContinuous: false, isClosed: this.isClosed, falloff: this._falloff, innerColor: this._innerColor, innerWidth: this._innerWidth, join: "round", hasPolygonOffset: true, renderOccluded: this.normalizedRenderOccluded };
  }
  get normalizedRenderOccluded() {
    return this.isDraped && this._renderOccluded === h2.OccludeAndTransparentStencil ? h2.OccludeAndTransparent : this._renderOccluded;
  }
  _recreateGeometry(e6, t3, r6) {
    const s3 = this._createRenderGeometries();
    for (const i of s3)
      e6.addGeometry(i, t3), r6.push(i);
    this._attachmentOriginChanged();
  }
  _attachmentOriginChanged() {
    this._attachmentOriginDirty = true, this.events.emit("attachment-origin-changed");
  }
  _createResources(e6) {
    const t3 = new H(this.materialParameters), r6 = [];
    return this._recreateGeometry(e6, t3, r6), { material: t3, geometries: r6, forEach: (e7) => {
      e7(t3), r6.forEach(e7);
    } };
  }
  _createDrapedResources() {
    const e6 = new H(this.materialParameters);
    return { material: e6, geometries: this._createRenderGeometriesDraped(e6) };
  }
  _createRenderGeometriesDraped(e6) {
    const t3 = this.geometry;
    if (t(t3))
      return [];
    const r6 = d2(t3, this.view.basemapTerrain.spatialReference), i = [];
    for (const { position: s3 } of r6.lines) {
      const t4 = { overlayInfo: { spatialReference: this.view.basemapTerrain.spatialReference, renderCoordsHelper: this.view.renderCoordsHelper }, attributeData: { position: s3 }, removeDuplicateStartEnd: this.isClosed ? P.REMOVE : P.KEEP }, r7 = new T(O2(t4), e6), a4 = B(T2);
      M(a4, s3), r2(r7.boundingSphere, 0.5 * (a4[0] + a4[3]), 0.5 * (a4[1] + a4[4]), 0, 0.5 * Math.sqrt((a4[3] - a4[0]) * (a4[3] - a4[0]) + (a4[4] - a4[1]) * (a4[4] - a4[1]))), i.push(r7);
    }
    return i;
  }
  calculateMapBounds(e6) {
    if (t(this.resources.resources))
      return false;
    const t3 = this.view.renderCoordsHelper;
    for (const r6 of this.resources.resources.geometries) {
      const s3 = r6.vertexAttributes.get(O.POSITION), i = new Float64Array(s3.data.length);
      Un(s3.data, t3.spatialReference, 0, i, this.view.spatialReference, 0, s3.data.length / 3), M(e6, i);
    }
    return true;
  }
  _createRenderGeometries() {
    const e6 = this.geometry;
    if (t(e6))
      return [];
    const t3 = R(e6, this.view.elevationProvider, this.view.renderCoordsHelper, h3.fromElevationInfo(this.elevationInfo ?? new x({ mode: s2(e6, null) }))), r6 = [], i = [];
    for (const { position: s3, mapPosition: a4 } of t3.lines) {
      const e7 = { overlayInfo: null, attributeData: { position: s3, mapPosition: a4 }, removeDuplicateStartEnd: this.isClosed ? P.REMOVE : P.KEEP };
      r6.push(O2(e7)), i.push(s3);
    }
    return this._laserline.pathVerticalPlane = i, r6;
  }
};
var T2 = a2();
var W2 = n2();
var V2 = n2();

// node_modules/@arcgis/core/views/3d/layers/graphics/GraphicState.js
var e5 = class extends n3.EventedAccessor {
  constructor(r6) {
    super(r6), this.tracking = false, this.displaying = false, this.isDraped = false;
  }
};
e([d({ constructOnly: true })], e5.prototype, "graphic", void 0), e([d()], e5.prototype, "tracking", void 0), e([d()], e5.prototype, "displaying", void 0), e([d()], e5.prototype, "isDraped", void 0), e5 = e([n("esri.views.3d.layers.graphics.GraphicState")], e5);

export {
  r5 as r,
  y3 as y,
  S,
  e5 as e
};
//# sourceMappingURL=chunk-6QWEEQ62.js.map
