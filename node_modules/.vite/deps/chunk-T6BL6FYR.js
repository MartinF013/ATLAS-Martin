import {
  s as s2
} from "./chunk-PJI2LYU5.js";
import {
  e,
  i,
  i2
} from "./chunk-ILEVWNLM.js";
import {
  s
} from "./chunk-3HMF3PNP.js";
import {
  r
} from "./chunk-2QOWZFCU.js";

// node_modules/@arcgis/core/views/interactive/snapping/SnappingContext.js
var e2 = class {
  constructor(e3) {
    this.vertexHandle = null, this.excludeFeature = null, this.visualizer = null, this.editGeometryOperations = e3.editGeometryOperations, this.elevationInfo = e3.elevationInfo, this.pointer = e3.pointer, this.vertexHandle = e3.vertexHandle, this.excludeFeature = e3.excludeFeature, this.visualizer = e3.visualizer;
  }
  get coordinateHelper() {
    return this.editGeometryOperations.data.coordinateHelper;
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingVisualizer.js
var r2 = class {
  draw(r3, a) {
    const p = this._getUniqueHints(r3), h = [];
    for (const i3 of p)
      i3 instanceof i && h.push(this.visualizeIntersectionPoint(i3, a)), i3 instanceof s && h.push(this.visualizeLine(i3, a)), i3 instanceof e && h.push(this.visualizeParallelSign(i3, a)), i3 instanceof i2 && h.push(this.visualizeRightAngleQuad(i3, a)), i3 instanceof s2 && h.push(this.visualizePoint(i3, a));
    return r(h);
  }
  _getUniqueHints(i3) {
    const n = [];
    for (const t of i3) {
      let i4 = true;
      for (const s3 of n)
        if (t.equals(s3)) {
          i4 = false;
          break;
        }
      i4 && n.push(t);
    }
    return n;
  }
};

export {
  r2 as r,
  e2 as e
};
//# sourceMappingURL=chunk-T6BL6FYR.js.map
