import {
  f,
  h
} from "./chunk-EHWEX2VK.js";
import {
  w
} from "./chunk-HPO2NV7P.js";
import {
  O
} from "./chunk-PQM6RARY.js";
import {
  v
} from "./chunk-SOZCO2CU.js";
import {
  o
} from "./chunk-YFBAFAZ2.js";
import {
  Hn
} from "./chunk-PZWU5EHT.js";
import {
  E
} from "./chunk-TMBOFNWA.js";
import {
  n
} from "./chunk-AIRC226G.js";
import {
  l,
  s
} from "./chunk-VLCG72SW.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/pointUtils.js
var u = n();
function f2(r2, i, s2, a, c, p, f3, g2) {
  const d2 = s2 ? s2.length : 0, h3 = r2.clippingExtent;
  if (Hn(i, u, r2.elevationProvider.spatialReference), r(h3) && !E(h3, u))
    return null;
  Hn(i, u, r2.renderCoordsHelper.spatialReference);
  const j = r2.localOriginFactory.getOrigin(u), y = new O({ castShadow: false, metadata: { layerUid: p, graphicUid: f3, usesVerticalDistanceToGround: true } });
  for (let e = 0; e < d2; e++) {
    const r3 = o;
    y.addGeometry(s2[e], a[e], r3, j, g2);
  }
  return { object: y, sampledElevation: h(y, i, r2.elevationProvider, r2.renderCoordsHelper, c) };
}
function g(e, t, r2) {
  const n2 = e.elevationContext, i = r2.spatialReference;
  Hn(t, u, i), n2.centerPointInElevationSR = v(u[0], u[1], t.hasZ ? u[2] : 0, i);
}
function d(e) {
  switch (e.type) {
    case "point":
      return e;
    case "polygon":
    case "extent":
      return w(e);
    case "polyline": {
      const t = e.paths[0];
      if (!t || 0 === t.length)
        return null;
      const r2 = l(t, s(t) / 2);
      return v(r2[0], r2[1], r2[2], e.spatialReference);
    }
    case "mesh":
      return e.origin;
  }
  return null;
}
function h2(e, t, r2, o2, n2) {
  const i = new Float64Array(3 * e.length), s2 = new Float64Array(i.length);
  e.forEach((e2, t2) => {
    i[3 * t2 + 0] = e2[0], i[3 * t2 + 1] = e2[1], i[3 * t2 + 2] = e2.length > 2 ? e2[2] : 0;
  });
  const a = f(i, t, 0, s2, 0, i, 0, i.length / 3, r2, o2, n2), l2 = null != a;
  return { numVertices: e.length, position: i, mapPosition: s2, projectionSuccess: l2, sampledElevation: a };
}

export {
  f2 as f,
  g,
  d,
  h2 as h
};
//# sourceMappingURL=chunk-O2JKFSHC.js.map
