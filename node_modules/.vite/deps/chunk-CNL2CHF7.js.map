{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/shaders/ensureColor4.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{isNone as o}from\"../../../../core/maybe.js\";import{s as r}from\"../../../../chunks/vec4.js\";import{Z as s,c}from\"../../../../chunks/vec4f64.js\";function t(c){return o(c)?s:4===c.length?c:r(e,c[0],c[1],c[2],1)}const e=c();export{t as ensureColor4};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{RgbaFloatEncoding as e}from\"../util/RgbaFloatEncoding.glsl.js\";import{addCameraPosition as t}from\"../util/View.glsl.js\";import{Float4PassUniform as i}from\"../../shaderModules/Float4PassUniform.js\";import{FloatPassUniform as o}from\"../../shaderModules/FloatPassUniform.js\";import{FloatUniform as r}from\"../../shaderModules/FloatUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{Texture2DUniform as a}from\"../../shaderModules/Texture2DUniform.js\";import{ensureColor4 as s}from\"../../../shaders/ensureColor4.js\";function p(e,t){e.constants.add(\"stippleAlphaColorDiscard\",\"float\",.001),e.constants.add(\"stippleAlphaHighlightDiscard\",\"float\",.5),t.stippleEnabled?n(e,t):d(e)}function n(p,n){const d=!(n.draped&&n.stipplePreferContinuous),{vertex:f,fragment:m}=p;m.include(e),f.uniforms.add(new r(\"stipplePatternPixelSize\")),n.draped||(t(f,n),f.uniforms.add(new o(\"worldToScreenPerDistanceRatio\",((e,t)=>1/t.camera.perScreenPixelRatio))),f.code.add(l`float computeWorldToScreenRatio(vec3 segmentCenter) {\nfloat segmentDistanceToCamera = length(segmentCenter - cameraPosition);\nreturn worldToScreenPerDistanceRatio / segmentDistanceToCamera;\n}`)),p.varyings.add(\"vStippleDistance\",\"float\"),n.stippleRequiresClamp&&p.varyings.add(\"vStippleDistanceLimits\",\"vec2\"),n.stippleRequiresStretchMeasure&&p.varyings.add(\"vStipplePatternStretch\",\"float\"),f.code.add(l`\n    float discretizeWorldToScreenRatio(float worldToScreenRatio) {\n      float step = ${c};\n\n      float discreteWorldToScreenRatio = log(worldToScreenRatio);\n      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;\n      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);\n      return discreteWorldToScreenRatio;\n    }\n  `),f.code.add(l`vec2 computeStippleDistanceLimits(float startPseudoScreen, float segmentLengthPseudoScreen, float segmentLengthScreen, float patternLength) {`),f.code.add(l`\n    if (segmentLengthPseudoScreen >= ${d?\"patternLength\":\"1e4\"}) {\n  `),f.uniforms.add(new o(\"pixelRatio\",((e,t)=>t.camera.pixelRatio))),f.code.add(l`\n        // Round the screen length to get an integer number of pattern repetitions (minimum 1).\n        float repetitions = segmentLengthScreen / (patternLength * pixelRatio);\n        float flooredRepetitions = max(1.0, floor(repetitions + 0.5));\n        float segmentLengthScreenRounded = flooredRepetitions * patternLength;\n\n        ${n.stippleRequiresStretchMeasure?l`\n              float stretch = repetitions / flooredRepetitions;\n\n              // We need to impose a lower bound on the stretch factor to prevent the dots from merging together when there is only 1 repetition.\n              // 0.75 is the lowest possible stretch value for flooredRepetitions > 1, so it makes sense as lower bound.\n              vStipplePatternStretch = max(0.75, stretch);`:\"\"}\n\n        return vec2(0.0, segmentLengthScreenRounded);\n      }\n      return vec2(startPseudoScreen, startPseudoScreen + segmentLengthPseudoScreen);\n    }\n  `),m.uniforms.add(new a(\"stipplePatternTexture\")),m.uniforms.add(new r(\"stipplePatternSDFNormalizer\")),m.uniforms.add(new r(\"stipplePatternTextureSize\")),m.uniforms.add(new r(\"stipplePatternPixelSizeInv\")),m.code.add(l`float padTexture(float u) {\nreturn (u * stipplePatternTextureSize + 1.0)/(stipplePatternTextureSize + 2.0);\n}`),m.code.add(l`\n    float getStippleSDF(out bool isClamped) {\n      ${n.stippleRequiresClamp?l`\n          float stippleDistanceClamped = clamp(vStippleDistance, vStippleDistanceLimits.x, vStippleDistanceLimits.y);\n          vec2 aaCorrectedLimits = vStippleDistanceLimits + vec2(1.0, -1.0) / gl_FragCoord.w;\n          isClamped = vStippleDistance < aaCorrectedLimits.x || vStippleDistance > aaCorrectedLimits.y;`:l`\n          float stippleDistanceClamped = vStippleDistance;\n          isClamped = false;`}\n\n      float u = stippleDistanceClamped * gl_FragCoord.w * stipplePatternPixelSizeInv;\n      ${n.stippleScaleWithLineWidth?l`u *= vLineSizeInv;`:\"\"}\n      u = padTexture(fract(u));\n\n      float encodedSDF = rgba2float(texture2D(stipplePatternTexture, vec2(u, 0.5)));\n      float sdf = (encodedSDF * 2.0 - 1.0) * stipplePatternSDFNormalizer;\n\n      ${n.stippleRequiresStretchMeasure?l`return (sdf - 0.5) * vStipplePatternStretch + 0.5;`:l`return sdf;`}\n    }\n\n    float getStippleSDF() {\n      bool ignored;\n      return getStippleSDF(ignored);\n    }\n\n    float getStippleAlpha() {\n      bool isClamped;\n      float stippleSDF = getStippleSDF(isClamped);\n\n      float antiAliasedResult = ${n.stippleScaleWithLineWidth?l`clamp(stippleSDF * vLineWidth + 0.5, 0.0, 1.0);`:l`clamp(stippleSDF + 0.5, 0.0, 1.0);`}\n\n      return isClamped ? floor(antiAliasedResult + 0.5) : antiAliasedResult;\n    }\n  `),n.stippleOffColorEnabled?(m.uniforms.add(new i(\"stippleOffColor\",(e=>s(e.stippleOffColor)))),m.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) {}\n#define blendStipple(color, stippleAlpha) mix(color, stippleOffColor, stippleAlpha)`)):m.code.add(l`#define discardByStippleAlpha(stippleAlpha, threshold) if (stippleAlpha < threshold) { discard; }\n#define blendStipple(color, stippleAlpha) vec4(color.rgb, color.a * stippleAlpha)`)}function d(e){e.fragment.code.add(l`float getStippleAlpha() { return 1.0; }\n#define discardByStippleAlpha(_stippleAlpha_, _threshold_) {}\n#define blendStipple(color, _stippleAlpha_) color`)}const c=l.float(.4);export{p as LineStipple};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIsJ,SAASA,GAAEC,IAAE;AAAC,SAAO,EAAEA,EAAC,IAAE,IAAE,MAAIA,GAAE,SAAOA,KAAE,EAAEC,IAAED,GAAE,CAAC,GAAEA,GAAE,CAAC,GAAEA,GAAE,CAAC,GAAE,CAAC;AAAC;AAAC,IAAMC,KAAE,EAAE;;;ACA6T,SAAS,EAAEC,IAAEC,IAAE;AAAC,EAAAD,GAAE,UAAU,IAAI,4BAA2B,SAAQ,IAAI,GAAEA,GAAE,UAAU,IAAI,gCAA+B,SAAQ,GAAE,GAAEC,GAAE,iBAAeC,GAAEF,IAAEC,EAAC,IAAE,EAAED,EAAC;AAAC;AAAC,SAASE,GAAEC,IAAED,IAAE;AAAC,QAAME,KAAE,EAAEF,GAAE,UAAQA,GAAE,0BAAyB,EAAC,QAAO,GAAE,UAAS,EAAC,IAAEC;AAAE,IAAE,QAAQ,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIE,GAAE,yBAAyB,CAAC,GAAEH,GAAE,WAAS,EAAE,GAAEA,EAAC,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,iCAAiC,CAACF,IAAEC,OAAI,IAAEA,GAAE,OAAO,mBAAoB,CAAC,GAAE,EAAE,KAAK,IAAIC;AAAA;AAAA;AAAA,EAG98B,IAAGC,GAAE,SAAS,IAAI,oBAAmB,OAAO,GAAED,GAAE,wBAAsBC,GAAE,SAAS,IAAI,0BAAyB,MAAM,GAAED,GAAE,iCAA+BC,GAAE,SAAS,IAAI,0BAAyB,OAAO,GAAE,EAAE,KAAK,IAAID;AAAA;AAAA,qBAEhMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAOlB,GAAE,EAAE,KAAK,IAAIJ,iJAAgJ,GAAE,EAAE,KAAK,IAAIA;AAAA,uCACtIE,KAAE,kBAAgB;AAAA,GACtD,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,cAAc,CAACJ,IAAEC,OAAIA,GAAE,OAAO,UAAW,CAAC,GAAE,EAAE,KAAK,IAAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMvEA,GAAE,gCAA8BA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAKkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAMzD,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,uBAAuB,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIG,GAAE,6BAA6B,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIA,GAAE,2BAA2B,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIA,GAAE,4BAA4B,CAAC,GAAE,EAAE,KAAK,IAAIH;AAAA;AAAA,EAEzN,GAAE,EAAE,KAAK,IAAIA;AAAA;AAAA,QAEPA,GAAE,uBAAqBA;AAAA;AAAA;AAAA,2GAG0EA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKjGA,GAAE,4BAA0BA,yBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMlDA,GAAE,gCAA8BA,yDAAsDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAY5DA,GAAE,4BAA0BA,sDAAmDA;AAAA;AAAA;AAAA;AAAA,GAI9G,GAAEA,GAAE,0BAAwB,EAAE,SAAS,IAAI,IAAI,EAAE,mBAAmB,CAAAF,OAAGC,GAAED,GAAE,eAAe,CAAE,CAAC,GAAE,EAAE,KAAK,IAAIE;AAAA,oFACzB,KAAG,EAAE,KAAK,IAAIA;AAAA,kFAChB;AAAC;AAAC,SAAS,EAAEF,IAAE;AAAC,EAAAA,GAAE,SAAS,KAAK,IAAIE;AAAA;AAAA,kDAEpE;AAAC;AAAC,IAAMI,KAAEJ,GAAE,MAAM,GAAE;",
  "names": ["t", "c", "e", "e", "t", "n", "p", "d", "r", "c"]
}
