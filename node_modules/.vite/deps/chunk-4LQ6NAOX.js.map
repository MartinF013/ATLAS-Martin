{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/lib/SSAOTechniqueConfiguration.js", "../../@arcgis/core/chunks/SSAO.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{_ as o}from\"../../../../chunks/tslib.es6.js\";import{parameter as t,ShaderTechniqueConfiguration as r}from\"../core/shaderTechnique/ShaderTechniqueConfiguration.js\";var u;!function(o){o[o.SSAO=0]=\"SSAO\",o[o.Blur=1]=\"Blur\",o[o.COUNT=2]=\"COUNT\"}(u||(u={}));class e extends r{constructor(){super(...arguments),this.output=u.SSAO}}o([t({count:u.COUNT})],e.prototype,\"output\",void 0);export{u as SSAOOutput,e as SSAOTechniqueConfiguration};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{ScreenSpacePass as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.js\";import{ReadLinearDepth as r}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{CameraSpace as o,getZScale as t}from\"../views/3d/webgl-engine/core/shaderLibrary/util/CameraSpace.glsl.js\";import{Float2PassUniform as a}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float2Uniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Float2Uniform.js\";import{FloatUniform as i}from\"../views/3d/webgl-engine/core/shaderModules/FloatUniform.js\";import{glsl as s}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as l}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DUniform.js\";import{SSAOOutput as d}from\"../views/3d/webgl-engine/lib/SSAOTechniqueConfiguration.js\";const f={samples:16,filterRadius:4};function u(u){const p=new l,m=p.fragment;if(p.include(e),u.output===d.Blur){const e=(f.filterRadius+1)/2,o=1/(2*e*e);m.include(r),m.uniforms.add([new c(\"normalMap\"),new c(\"depthMap\"),new c(\"tex\"),new n(\"blurSize\"),new i(\"projScale\"),new a(\"nearFar\",((e,r)=>r.camera.nearFar))]),m.code.add(s`\n      void blurFunction(vec2 uv, float r, float center_d, float sharpness, inout float wTotal, inout float bTotal) {\n        float c = texture2D(tex, uv).r;\n        float d = linearDepthFromTexture(depthMap, uv, nearFar);\n\n        float ddiff = d - center_d;\n\n        float w = exp(-r * r * ${s.float(o)} - ddiff * ddiff * sharpness);\n        wTotal += w;\n        bTotal += w * c;\n      }\n    `),m.code.add(s`\n      void main(void) {\n        float b = 0.0;\n        float w_total = 0.0;\n\n        float center_d = linearDepthFromTexture(depthMap, uv, nearFar);\n\n        float sharpness = -0.05 * projScale/center_d;\n        for (int r = -${s.int(f.filterRadius)}; r <= ${s.int(f.filterRadius)}; ++r) {\n          float rf = float(r);\n          vec2 uvOffset = uv + rf * blurSize;\n          blurFunction(uvOffset, rf, center_d, sharpness, w_total, b);\n        }\n\n        gl_FragColor = vec4(b / w_total);\n      }\n    `)}return u.output===d.SSAO&&(m.include(r),p.include(o),m.uniforms.add(new c(\"normalMap\")),m.uniforms.add(new c(\"depthMap\")),m.uniforms.add(new c(\"rnm\")),m.uniforms.add(new i(\"intensity\")),m.uniforms.add(new i(\"projScale\")),m.uniforms.add(new i(\"radius\")),m.uniforms.add(new a(\"nearFar\",((e,r)=>r.camera.nearFar))),m.uniforms.add(new n(\"screenSize\")),m.uniforms.add(new n(\"rnmScale\")),m.code.add(s`vec3 sphere[16];\nvoid fillSphere() {\nsphere[0] = vec3(0.186937, 0.0, 0.0);\nsphere[1] = vec3(0.700542, 0.0, 0.0);\nsphere[2] = vec3(-0.864858, -0.481795, -0.111713);\nsphere[3] = vec3(-0.624773, 0.102853, -0.730153);\nsphere[4] = vec3(-0.387172, 0.260319, 0.007229);\nsphere[5] = vec3(-0.222367, -0.642631, -0.707697);\nsphere[6] = vec3(-0.01336, -0.014956, 0.169662);\nsphere[7] = vec3(0.122575, 0.1544, -0.456944);\nsphere[8] = vec3(-0.177141, 0.85997, -0.42346);\nsphere[9] = vec3(-0.131631, 0.814545, 0.524355);\nsphere[10] = vec3(-0.779469, 0.007991, 0.624833);\nsphere[11] = vec3(0.308092, 0.209288,0.35969);\nsphere[12] = vec3(0.359331, -0.184533, -0.377458);\nsphere[13] = vec3(0.192633, -0.482999, -0.065284);\nsphere[14] = vec3(0.233538, 0.293706, -0.055139);\nsphere[15] = vec3(0.417709, -0.386701, 0.442449);\n}\nfloat fallOffFunction(float vv, float vn, float bias) {\nfloat f = max(radius * radius - vv, 0.0);\nreturn f * f * f * max(vn-bias, 0.0);\n}`),m.code.add(s`float aoValueFromPositionsAndNormal(vec3 C, vec3 n_C, vec3 Q) {\nvec3 v = Q - C;\nfloat vv = dot(v, v);\nfloat vn = dot(normalize(v), n_C);\nreturn fallOffFunction(vv, vn, 0.1);\n}`),p.fragment.uniforms.add(new a(\"zScale\",((e,r)=>t(r)))),m.code.add(s`\n      void main(void) {\n        fillSphere();\n        vec3 fres = normalize((texture2D(rnm, uv * rnmScale).xyz * 2.0) - vec3(1.0));\n        float currentPixelDepth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n        if (-currentPixelDepth>nearFar.y || -currentPixelDepth<nearFar.x) {\n          gl_FragColor = vec4(0.0);\n          return;\n        }\n\n        vec3 currentPixelPos = reconstructPosition(gl_FragCoord.xy,currentPixelDepth);\n\n        // get the normal of current fragment\n        vec4 norm4 = texture2D(normalMap, uv);\n        vec3 norm = vec3(-1.0) + 2.0 * norm4.xyz;\n        bool isTerrain = norm4.w<0.5;\n\n        float sum = .0;\n        vec3 tapPixelPos;\n\n        // note: the factor 2.0 should not be necessary, but makes ssao much nicer.\n        // bug or deviation from CE somewhere else?\n        float ps = projScale/(2.0 * currentPixelPos.z * zScale.x + zScale.y);\n\n        for(int i = 0; i < ${s.int(f.samples)}; ++i) {\n          vec2 unitOffset = reflect(sphere[i], fres).xy;\n          vec2 offset = vec2(-unitOffset * radius * ps);\n\n          //don't use current or very nearby samples\n          if ( abs(offset.x)<2.0 || abs(offset.y)<2.0) continue;\n\n          vec2 tc = vec2(gl_FragCoord.xy + offset);\n          if (tc.x < 0.0 || tc.y < 0.0 || tc.x > screenSize.x || tc.y > screenSize.y) continue;\n          vec2 tcTap = tc / screenSize;\n          float occluderFragmentDepth = linearDepthFromTexture(depthMap, tcTap, nearFar);\n\n          if (isTerrain) {\n            bool isTerrainTap = texture2D(normalMap, tcTap).w<0.5;\n            if (isTerrainTap) {\n              continue;\n            }\n          }\n\n          tapPixelPos = reconstructPosition(tc, occluderFragmentDepth);\n\n          sum+= aoValueFromPositionsAndNormal(currentPixelPos, norm, tapPixelPos);\n        }\n\n        // output the result\n        float A = max(1.0-sum*intensity/float(${s.int(f.samples)}),0.0);\n\n        // Anti-tone map to reduce contrast and drag dark region farther: (x^0.2 + 1.2 * x^4)/2.2\n        A = (pow(A, 0.2) + 1.2 * A*A*A*A) / 2.2;\n        gl_FragColor = vec4(A);\n      }\n    `)),p}const p=Object.freeze(Object.defineProperty({__proto__:null,build:u},Symbol.toStringTag,{value:\"Module\"}));export{p as S,u as b};\n"],
  "mappings": "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",
  "names": ["o", "e", "u", "p", "e", "o", "r", "n", "i"]
}
