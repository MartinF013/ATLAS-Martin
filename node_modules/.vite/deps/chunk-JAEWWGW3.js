import {
  v
} from "./chunk-ZTFWVZTL.js";
import {
  e as e5
} from "./chunk-ELZC3DZT.js";
import {
  l,
  m,
  o
} from "./chunk-DVE4HUBR.js";
import {
  t
} from "./chunk-DHZ2TSD5.js";
import {
  e as e4
} from "./chunk-WW7VYUQW.js";
import {
  e as e3
} from "./chunk-46N7XS5M.js";
import {
  e as e2
} from "./chunk-4MKQUQD4.js";
import {
  a
} from "./chunk-OYAHQ564.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  e
} from "./chunk-YFBAFAZ2.js";
import {
  h
} from "./chunk-ASC3X65B.js";

// node_modules/@arcgis/core/chunks/CloudsComposition.glsl.js
function u() {
  const r = new i();
  r.attributes.add(O.POSITION, "vec2"), r.varyings.add("worldRay", "vec3");
  const { vertex: u2, fragment: f2 } = r;
  return u2.uniforms.add([new e3("inverseProjectionMatrix", (e6, r2) => r2.camera.inverseProjectionMatrix), new e3("inverseViewMatrix", (r2, i2) => h(v2, i2.camera.viewMatrix))]), u2.code.add(n`void main(void) {
vec3 posViewNear = (inverseProjectionMatrix * vec4(position, -1.0, 1.0)).xyz;
worldRay = (inverseViewMatrix * vec4(posViewNear, 0.0)).xyz;
gl_Position = vec4(position, 1.0, 1.0);
}`), f2.include(e4), f2.include(a), r.include(m, { pbrMode: l.Disabled, lightingSphericalHarmonicsOrder: 2 }), r.include(t), r.include(e5), r.include(o, { isGround: false }), r.include(v, { instancedDoublePrecision: false, isGround: false }), f2.uniforms.add([new e2("cameraPosition", (e6, r2) => r2.camera.eye)]), f2.code.add(n`void main() {
vec4 cloudsColor = renderClouds(normalize(worldRay), cameraPosition);
gl_FragColor = vec4((1.0 - totalFadeInOut) * cloudsColor.rgb, cloudsColor.a);
}`), r;
}
var v2 = e();
var f = Object.freeze(Object.defineProperty({ __proto__: null, build: u }, Symbol.toStringTag, { value: "Module" }));

export {
  u,
  f
};
//# sourceMappingURL=chunk-JAEWWGW3.js.map
