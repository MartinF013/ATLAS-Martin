import {
  A,
  _,
  f
} from "./chunk-UKBGUXUQ.js";
import {
  E,
  S
} from "./chunk-6FQZDXGD.js";

// node_modules/@arcgis/core/views/2d/layers/features/createSymbolSchema.js
function l(e) {
  var _a;
  if ("line-marker" === e.type) {
    return { type: "line-marker", color: (_a = e.color) == null ? void 0 : _a.toJSON(), placement: e.placement, style: e.style };
  }
  return e.constructor.fromJSON(e.toJSON()).toJSON();
}
function s(e) {
  return A(e);
}
function o(e, a, t) {
  if (!e)
    return null;
  switch (e.type) {
    case "simple-fill":
    case "picture-fill":
      return c(e, a, t);
    case "simple-marker":
    case "picture-marker":
      return h(e, a, t);
    case "simple-line":
      return m(e, a, t);
    case "text":
      return y(e, a, t);
    case "label":
      return i(e, a, t);
    case "cim":
      return { type: "cim", rendererKey: a.vvFlags, data: e.data, maxVVSize: a.maxVVSize };
    case "CIMSymbolReference":
      return { type: "cim", rendererKey: a.vvFlags, data: e, maxVVSize: a.maxVVSize };
    case "web-style":
      return { ...l(e), type: "web-style", hash: e.hash(), rendererKey: a.vvFlags, maxVVSize: a.maxVVSize };
    default:
      throw new Error(`symbol not supported ${e.type}`);
  }
}
function i(a, r, n) {
  const l2 = a.toJSON(), o2 = f(E.LABEL, { ...r, placement: l2.labelPlacement });
  return { materialKey: n ? s(o2) : o2, hash: a.hash(), ...l2, labelPlacement: l2.labelPlacement };
}
function c(a, r, o2) {
  const i2 = f(E.FILL, r), c2 = o2 ? s(i2) : i2, m2 = a.clone(), h2 = m2.outline, y2 = _(r.symbologyType);
  y2 || (m2.outline = null);
  const u = { materialKey: c2, hash: m2.hash(), ...l(m2) };
  if (y2)
    return u;
  const p = [];
  if (p.push(u), h2) {
    const a2 = f(E.LINE, { ...r, isOutline: true }), n = { materialKey: o2 ? s(a2) : a2, hash: h2.hash(), ...l(h2) };
    p.push(n);
  }
  return { type: "composite-symbol", layers: p, hash: p.reduce((e, a2) => a2.hash + e, "") };
}
function m(r, o2, i2) {
  const c2 = _(o2.symbologyType) ? S.DEFAULT : o2.symbologyType, m2 = f(E.LINE, { ...o2, symbologyType: c2 }), h2 = i2 ? s(m2) : m2, y2 = r.clone(), u = y2.marker;
  y2.marker = null;
  const p = [];
  if (p.push({ materialKey: h2, hash: y2.hash(), ...l(y2) }), u) {
    const a = f(E.MARKER, o2), r2 = i2 ? s(a) : a;
    u.color = u.color ?? y2.color, p.push({ materialKey: r2, hash: u.hash(), lineWidth: y2.width, ...l(u) });
  }
  return { type: "composite-symbol", layers: p, hash: p.reduce((e, a) => a.hash + e, "") };
}
function h(a, r, n) {
  const o2 = f(E.MARKER, r), i2 = n ? s(o2) : o2, c2 = l(a);
  return { materialKey: i2, hash: a.hash(), ...c2, angle: a.angle, maxVVSize: r.maxVVSize };
}
function y(a, r, n) {
  const o2 = f(E.TEXT, r), i2 = n ? s(o2) : o2, c2 = l(a);
  return { materialKey: i2, hash: a.hash(), ...c2, angle: a.angle, maxVVSize: r.maxVVSize };
}

export {
  o
};
//# sourceMappingURL=chunk-HHJIVHSH.js.map
