import {
  e
} from "./chunk-AALA53RH.js";
import {
  d
} from "./chunk-YAQGRU5B.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";

// node_modules/@arcgis/core/chunks/SlicePlaneMaterial.glsl.js
function t(t2) {
  const g2 = new i();
  return g2.extensions.add("GL_OES_standard_derivatives"), d(g2, t2), g2.attributes.add(O.POSITION, "vec3"), g2.attributes.add(O.UV0, "vec2"), g2.varyings.add("vUV", "vec2"), g2.vertex.code.add(n`void main(void) {
vUV = uv0;
gl_Position = proj * view * vec4(position, 1.0);
}`), g2.fragment.uniforms.add([new e("backgroundColor", (e2) => e2.backgroundColor), new e("gridColor", (e2) => e2.gridColor), new o("gridWidth", (e2) => e2.gridWidth)]), g2.fragment.code.add(n`void main() {
const float LINE_WIDTH = 1.0;
vec2 uvScaled = vUV * gridWidth;
vec2 gridUV = (fract(uvScaled + 0.5) - 0.5) / (LINE_WIDTH * fwidth(uvScaled));
vec2 grid = (1.0 - step(0.5, gridUV)) * step(-0.5, gridUV);
grid.x *= step(0.5, uvScaled.x) * step(uvScaled.x, gridWidth - 0.5);
grid.y *= step(0.5, uvScaled.y) * step(uvScaled.y, gridWidth - 0.5);
float gridFade = max(grid.x, grid.y);
float gridAlpha = gridColor.a * gridFade;
gl_FragColor =
vec4(backgroundColor.rgb * backgroundColor.a, backgroundColor.a) * (1.0 - gridAlpha) +
vec4(gridColor.rgb, 1.0) * gridAlpha;
}`), g2;
}
var g = Object.freeze(Object.defineProperty({ __proto__: null, build: t }, Symbol.toStringTag, { value: "Module" }));

export {
  t,
  g
};
//# sourceMappingURL=chunk-3MW65G3U.js.map
