import {
  s,
  t as t4,
  v
} from "./chunk-7Q7UV72N.js";
import "./chunk-2ZFIKSC6.js";
import {
  e as e5
} from "./chunk-M5Q6O4EN.js";
import {
  E
} from "./chunk-6CMUWHIK.js";
import {
  e as e4
} from "./chunk-233LLPHP.js";
import {
  B,
  q,
  z as z2
} from "./chunk-RED2ALFM.js";
import {
  _
} from "./chunk-TVBLDFP3.js";
import {
  a
} from "./chunk-R5LRVAQP.js";
import {
  y as y2
} from "./chunk-EEPTXXKK.js";
import "./chunk-JYWDI7GA.js";
import "./chunk-MQZSD3AZ.js";
import "./chunk-5CAQC3RU.js";
import "./chunk-A5WV4QY7.js";
import "./chunk-PH7BQFVK.js";
import {
  c as c2
} from "./chunk-SUK6SE2D.js";
import {
  r as r2
} from "./chunk-B6K3W2TL.js";
import {
  p,
  z
} from "./chunk-22MSECLU.js";
import "./chunk-PTJ3MGYO.js";
import "./chunk-DSCM4HDL.js";
import "./chunk-WGMCNMOI.js";
import "./chunk-UV5UBITC.js";
import "./chunk-PUU4QXN5.js";
import {
  Z,
  i
} from "./chunk-HPO2NV7P.js";
import "./chunk-22O7HU3A.js";
import "./chunk-PQM6RARY.js";
import "./chunk-5ZS6RUSM.js";
import "./chunk-R3PFJUIG.js";
import "./chunk-GKYJJGE3.js";
import "./chunk-3236UEJN.js";
import "./chunk-KSOWE6GO.js";
import "./chunk-HRAEK6P4.js";
import "./chunk-K6UIDSFF.js";
import "./chunk-52W4YMC2.js";
import "./chunk-YLSPLHY5.js";
import "./chunk-4GGQTXXY.js";
import "./chunk-XEWFCJLT.js";
import "./chunk-ZEDAE7EU.js";
import "./chunk-7OZR6JFF.js";
import "./chunk-NXOQBIK7.js";
import "./chunk-ERNXFM5T.js";
import "./chunk-6ITXWFMK.js";
import "./chunk-SV4VP57N.js";
import "./chunk-PWYPPSAW.js";
import "./chunk-5EXPMKQP.js";
import "./chunk-B7F3T673.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-YSWURJZW.js";
import "./chunk-O7YSDCZE.js";
import "./chunk-767LZ6IM.js";
import "./chunk-WJDUBZ7S.js";
import "./chunk-DNPZNIDB.js";
import "./chunk-WW7VYUQW.js";
import "./chunk-FCDEMPPS.js";
import "./chunk-TEJEYVH4.js";
import "./chunk-HEZ2ATGC.js";
import "./chunk-AALA53RH.js";
import "./chunk-BOVIIQLB.js";
import "./chunk-IJHFAZOW.js";
import "./chunk-DMGVDNFD.js";
import "./chunk-YAQGRU5B.js";
import "./chunk-M3GMIUQS.js";
import "./chunk-BMA2CXVS.js";
import "./chunk-46N7XS5M.js";
import "./chunk-4MKQUQD4.js";
import "./chunk-A3QLZKCF.js";
import "./chunk-OYAHQ564.js";
import "./chunk-LGILR4HN.js";
import "./chunk-I5UNY2WQ.js";
import "./chunk-EYJ2F5XB.js";
import "./chunk-TR3U55RZ.js";
import "./chunk-3DCTMZI6.js";
import "./chunk-33INAWJA.js";
import "./chunk-5WOO2FX6.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-MQBVOUKB.js";
import {
  t as t3,
  x
} from "./chunk-WQLER7IU.js";
import "./chunk-7GTYHKA3.js";
import "./chunk-MOXYEJRV.js";
import "./chunk-EEJIELE6.js";
import "./chunk-Y55TYMBP.js";
import "./chunk-NAB3NF54.js";
import "./chunk-MHB3L22D.js";
import "./chunk-MDCKEJ7B.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-VMF4NMEB.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-72PB636Q.js";
import "./chunk-SOZCO2CU.js";
import "./chunk-53KI6WDE.js";
import "./chunk-W2HLA6I3.js";
import {
  l as l3
} from "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-G4ERZR5M.js";
import "./chunk-GRW2GUB3.js";
import {
  n as n4
} from "./chunk-RBVTRJPJ.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZZCCRN4U.js";
import "./chunk-TWQ374WD.js";
import "./chunk-GT2OBOXC.js";
import "./chunk-Z3S5X75I.js";
import "./chunk-YK4ZKK2Q.js";
import "./chunk-NMRWU44S.js";
import "./chunk-LBBA3SFR.js";
import "./chunk-2KZBVPWA.js";
import "./chunk-CXIMLSDF.js";
import "./chunk-ZDSMRGKC.js";
import "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RRFFPL7N.js";
import "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import "./chunk-V7M26XZ7.js";
import "./chunk-ZN2MGN4S.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-XZTXACPW.js";
import "./chunk-EHYYP2L2.js";
import "./chunk-ZUEYZA7M.js";
import "./chunk-74GUBHRJ.js";
import "./chunk-E447OCKN.js";
import {
  t as t2
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2 as e3
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n3
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-22YODLVL.js";
import "./chunk-TB42IUV7.js";
import "./chunk-ZWMYDR2G.js";
import "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-6FKG7JUE.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-4XBERLPX.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import {
  o as o2
} from "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  h,
  l as l2,
  w
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-DYETG5YB.js";
import "./chunk-CLGCKZUR.js";
import {
  P,
  j as j2
} from "./chunk-RN2KRYDN.js";
import "./chunk-AWWWJUTQ.js";
import "./chunk-EQNRDJV7.js";
import "./chunk-FEEXJRYO.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import {
  d as d2
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import {
  n as n2
} from "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import {
  j2 as j3
} from "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  j
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  c,
  e as e2,
  l,
  o,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/analysis/DirectLineMeasurementAnalysis.js
var l4 = class extends c2 {
  constructor(t5) {
    super(t5), this.type = "direct-line-measurement", this.startPoint = null, this.endPoint = null, this.unit = null, this.nonEditableMessage = "Assign start and end points to the analysis to allow editing.";
  }
  get extent() {
    if (t(this.startPoint))
      return null;
    const t5 = M.fromPoint(this.startPoint);
    return r(this.endPoint) && t5.union(M.fromPoint(this.endPoint)), t5;
  }
  get requiredPropertiesForEditing() {
    return [this.startPoint, this.endPoint];
  }
  clear() {
    this.startPoint = null, this.endPoint = null;
  }
};
e([d({ type: ["direct-line-measurement"] })], l4.prototype, "type", void 0), e([d({ type: j3 })], l4.prototype, "startPoint", void 0), e([d({ type: j3 })], l4.prototype, "endPoint", void 0), e([d()], l4.prototype, "extent", null), e([d({ type: j2, value: null })], l4.prototype, "unit", void 0), e([d({ readOnly: true })], l4.prototype, "requiredPropertiesForEditing", null), e([d({ readOnly: true })], l4.prototype, "nonEditableMessage", void 0), l4 = e([n("esri.analysis.DirectLineMeasurementAnalysis")], l4);
var u2 = l4;

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/directLineMeasurement3D/DirectLineMeasurement3DView.js
var _2 = { laserLineGlowColor: [1, 0.5, 0], laserLineGlowWidth: 8, laserLineGlowFalloff: 8, laserLineInnerColor: [1, 1, 1], laserLineInnerWidth: 0.75, laserLineGlobalAlpha: 0.75, handleColor: [1, 0.5, 0], handleOpacity: 0.5, handleRadius: 5 };
var b;
!function(i2) {
  i2.Manipulators = "manipulators", i2.AnalysisViewDestroyed = "analysis-view-destroyed", i2.AnalysisView = "analysis-view";
}(b || (b = {}));
var v2 = class extends y {
  constructor(i2) {
    super(i2), this.params = _2, this.analysisViewData = null, this.cursorPoint = null, this._visible = false, this._laserLine = null, this.laserLineEnabled = true, this._handles = new u(), this._lastDraggedHandle = null;
  }
  initialize() {
    this._laserLine = new _({ view: this.view, attached: true }), this._updateVisibility(this._visible), this._connectToAnalysisView();
  }
  destroy() {
    this._handles = l(this._handles), this._laserLine = l(this._laserLine);
  }
  get visible() {
    return this._visible;
  }
  set visible(i2) {
    i2 ? this.show() : this.hide();
  }
  get testData() {
    const i2 = this._laserLine.testData, t5 = this.analysisViewData.testData;
    return { labels: t5 == null ? void 0 : t5.labels, stripeLength: t5 == null ? void 0 : t5.stripeLength, laserLineRenderer: { heightManifoldEnabled: !!r(i2) && i2.heightManifoldEnabled, heightManifoldTarget: r(i2) ? i2.heightManifoldTarget : null, pointDistanceEnabled: !!r(i2) && i2.pointDistanceEnabled, pointDistanceOrigin: r(i2) ? i2.pointDistanceOrigin : null, pointDistanceTarget: r(i2) ? i2.pointDistanceTarget : null, lineVerticalPlaneEnabled: !!r(i2) && i2.lineVerticalPlaneEnabled } };
  }
  get _cursorPosition() {
    const i2 = n2();
    return o(this.cursorPoint, (t5) => this.view.renderCoordsHelper.toRenderCoords(t5, i2)), i2;
  }
  get _startPosition() {
    const i2 = n2();
    return o(this.analysis.startPoint, (t5) => this.view.renderCoordsHelper.toRenderCoords(t5, i2)), i2;
  }
  get _endPosition() {
    const i2 = n2();
    return o(this.analysis.endPoint, (t5) => this.view.renderCoordsHelper.toRenderCoords(t5, i2)), i2;
  }
  get _laserLineParams() {
    const i2 = this._focusPosition, { active: t5, lineState: e6 } = this.toolState, s2 = this.analysisViewData, a2 = this.laserLineEnabled && !!i2 && "measured" !== e6 && t5;
    if (!a2 || !this.visible || t(s2) || s2.destroyed)
      return { heightManifoldTarget: null, pointDistanceLine: null, lineVerticalPlaneSegment: null };
    const n5 = s2.actualVisualizedMeasurement, r3 = "local" !== this.view.viewingMode && a2 && !!this.analysis.startPoint && "geodesic" === n5, l5 = a2 && s2.viewMode === e5.Triangle;
    return { heightManifoldTarget: "euclidean" === n5 ? i2 : null, pointDistanceLine: r3 ? this._pointDistanceLine : null, lineVerticalPlaneSegment: l5 ? l3(this._startPosition, this._endPosition) : null };
  }
  get _focusPosition() {
    const { lineState: i2 } = this.toolState, t5 = this.analysisViewData, e6 = r(t5) && !t5.destroyed && t5.measurementMode === e4.Euclidean && t5.viewMode === e5.Direct;
    switch (i2) {
      case "drawing":
        return e6 ? this._startPosition : this.analysis.endPoint ? this._endPosition : this._startPosition;
      case "editing":
        return e6 ? "start" === this._lastDraggedHandle ? this._endPosition : this._startPosition : "start" === this._lastDraggedHandle ? this._startPosition : this._endPosition;
      default:
        return r(this.cursorPoint) ? this._cursorPosition : null;
    }
  }
  get _pointDistanceLine() {
    return { origin: "drawing" === this.toolState.lineState || "end" === this._lastDraggedHandle ? this._startPosition : this._endPosition, target: this._focusPosition };
  }
  createManipulators() {
    const i2 = () => {
      const i3 = y2(this.view, this.params.handleColor, this.params.handleOpacity);
      return i3.available = false, i3.radius = this.params.handleRadius, i3;
    }, t5 = i2(), e6 = i2();
    r(this.analysis.startPoint) && (t5.location = this.analysis.startPoint, t5.available = true), r(this.analysis.endPoint) && (e6.location = this.analysis.endPoint, e6.available = true);
    const s2 = () => {
      let i3 = this._lastDraggedHandle;
      t5.grabbing && !e6.grabbing && (i3 = "start"), e6.grabbing && !t5.grabbing && (i3 = "end"), t5.grabbing || e6.grabbing || (i3 = null), this._lastDraggedHandle = i3;
    }, n5 = t5.events.on("grab-changed", s2), o3 = e6.events.on("grab-changed", s2);
    return this._handles.add([n5, o3], b.Manipulators), { start: t5, end: e6 };
  }
  show() {
    this.destroyed || this._visible || this._updateVisibility(true);
  }
  hide() {
    !this.destroyed && this._visible && this._updateVisibility(false);
  }
  _connectToAnalysisView() {
    this._handles.remove(b.AnalysisView), this._handles.add([l2(() => o(this.analysisViewData, (i2) => i2.destroyed), (i2) => {
      i2 && this._handles.remove(b.AnalysisView);
    }, h), l2(() => ["measured" === this.toolState.lineState, this.analysisViewData], ([i2, t5]) => {
      r(t5) && !t5.destroyed && (t5.allowVisualElementsOrientationChange = !i2);
    }, h), l2(() => this._laserLineParams, (i2) => {
      const t5 = this._laserLine;
      t5.heightManifoldTarget = i2.heightManifoldTarget, t5.pointDistanceLine = i2.pointDistanceLine, t5.lineVerticalPlaneSegment = i2.lineVerticalPlaneSegment;
    }, h)], b.AnalysisView);
  }
  _updateVisibility(i2) {
    this.constructed && (this._visible = i2, i2 ? this._laserLine.style = { innerColor: this.params.laserLineInnerColor, innerWidth: this.params.laserLineInnerWidth, glowColor: this.params.laserLineGlowColor, glowWidth: this.params.laserLineGlowWidth, glowFalloff: this.params.laserLineGlowFalloff, globalAlpha: this.params.laserLineGlobalAlpha } : this.view.cursor = null, this._laserLine.visible = i2);
  }
};
e([d()], v2.prototype, "view", void 0), e([d()], v2.prototype, "params", void 0), e([d({ constructOnly: true })], v2.prototype, "analysis", void 0), e([d({ constructOnly: true })], v2.prototype, "analysisViewData", void 0), e([d()], v2.prototype, "cursorPoint", void 0), e([d()], v2.prototype, "toolState", void 0), e([d()], v2.prototype, "visible", null), e([d()], v2.prototype, "testData", null), e([d()], v2.prototype, "_visible", void 0), e([d()], v2.prototype, "_laserLine", void 0), e([d()], v2.prototype, "laserLineEnabled", void 0), e([d()], v2.prototype, "_cursorPosition", null), e([d()], v2.prototype, "_startPosition", null), e([d()], v2.prototype, "_endPosition", null), e([d()], v2.prototype, "_lastDraggedHandle", void 0), e([d()], v2.prototype, "_laserLineParams", null), e([d()], v2.prototype, "_focusPosition", null), e([d()], v2.prototype, "_pointDistanceLine", null), v2 = e([n("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DView")], v2);

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/directLineMeasurement3D/DirectLineMeasurement3DTool.js
var T = class extends a {
  constructor(t5) {
    super(t5), this._handles = new u(), this._cachedPickRequest = null, this._isAnyPointerDown = false, this.lineState = "initial", this.analysisViewData = null, this.startPointSurfaceLocation = null, this.endPointSurfaceLocation = null, this.startManipulator = null, this.endManipulator = null;
  }
  initialize() {
    const { view: t5, analysis: e6, analysisViewData: s2, cursorPoint: n5, visible: a2 } = this;
    this.measurementView = new v2({ toolState: this, view: t5, analysis: e6, analysisViewData: s2, cursorPoint: n5, visible: a2 }), this._intersector = x(this.view.state.viewingMode), this._intersector.options.store = t3.MIN;
    const { start: r3, end: c3 } = this.measurementView.createManipulators(), h2 = (t6, e7, s3) => p(t6, (t7, n6, a3) => {
      const r4 = z2(t7);
      n6.next(r4).next(B(this.view)).next((t8) => "start" !== t8.action ? t8 : null).next((i2) => {
        const n7 = Z(i2.mapEnd, new j3());
        this.analysis[e7] = n7, t7.location = n7, this[s3] = this._surfaceLocation(n7, i2.surfaceType);
      }), a3.next(r4).next(z(this.analysis, [e7])).next(z(this, [s3])).next(() => {
        t7.location = e2(this.analysis[e7]);
      });
    }), u3 = (t6) => t6.events.on("grab-changed", () => {
      const t7 = r3.grabbing || c3.grabbing;
      this.lineState = t7 ? "editing" : "measured";
    });
    this._handles.add([h2(r3, "startPoint", "startPointSurfaceLocation"), h2(c3, "endPoint", "endPointSurfaceLocation"), u3(r3), u3(c3)]), this.manipulators.add(r3), this.manipulators.add(c3), this.startManipulator = r3, this.endManipulator = c3, this._handles.add(l2(() => this.state, (t6) => {
      "measured" === t6 && this.finishToolCreation();
    }, w));
  }
  destroy() {
    this.measurementView = l(this.measurementView), this._handles = l(this._handles);
  }
  get state() {
    return t(this.analysis.startPoint) && t(this.analysis.endPoint) ? "ready" : this.validMeasurement && "editing" !== this.lineState && "drawing" !== this.lineState ? "measured" : "measuring";
  }
  get cursor() {
    return "ready" === this.state || "drawing" === this.lineState ? "crosshair" : null;
  }
  set cursorPoint(t5) {
    this._set("cursorPoint", t5), this.measurementView.cursorPoint = t5;
  }
  get validMeasurement() {
    return r(this.analysis.startPoint) && r(this.analysis.endPoint);
  }
  onShow() {
    this.measurementView.show(), this._updateManipulatorAvailability();
  }
  onHide() {
    this.measurementView.hide();
  }
  onInputEvent(t5) {
    switch (t5.type) {
      case "immediate-click":
        this._handleImmediateClick(t5);
        break;
      case "pointer-move":
        this._handlePointerMove(t5);
        break;
      case "pointer-down":
        this._handlePointerDown();
        break;
      case "pointer-up":
        this._handlePointerUp();
    }
    this._updateManipulatorAvailability();
  }
  _handlePointerMove(t5) {
    this._clearCachedPickRequest();
    const e6 = n4(t5);
    "mouse" === t5.pointerType && (this._hoverAt(e6), "drawing" === this.lineState && (this.endManipulator.events.emit("drag", { action: "update", start: e6, screenPoint: e6 }), t5.stopPropagation()));
  }
  _handlePointerDown() {
    this._isAnyPointerDown = true;
  }
  _handlePointerUp() {
    this._isAnyPointerDown = false;
  }
  _handleImmediateClick(t5) {
    if (this._clearCachedPickRequest(), !E(t5))
      return;
    const e6 = n4(t5), i2 = t5.pointerType;
    let s2 = false;
    if (this.active)
      switch (this.lineState) {
        case "initial":
          this.startManipulator.events.emit("drag", { action: "start", pointerType: i2, start: e6, screenPoint: e6 }), this.startManipulator.events.emit("drag", { action: "end", start: e6, screenPoint: e6 }), r(this.analysis.startPoint) && (this.startManipulator.interactive = false, this.endManipulator.interactive = false, this.lineState = "drawing", this.endManipulator.events.emit("drag", { action: "start", pointerType: i2, start: e6, screenPoint: e6 }), s2 = true);
          break;
        case "drawing":
          this.endManipulator.events.emit("drag", { action: "update", start: e6, screenPoint: e6 }), r(this.analysis.endPoint) && (this.endManipulator.events.emit("drag", { action: "end", start: e6, screenPoint: e6 }), this.startManipulator.interactive = true, this.endManipulator.interactive = true, this.lineState = "measured", s2 = true);
      }
    s2 && t5.stopPropagation(), "mouse" === t5.pointerType && this._hoverAt(e6);
  }
  _hoverAt(t5) {
    const e6 = this._isAnyPointerDown && "drawing" !== this.lineState && "editing" !== this.lineState;
    if ((t(this.analysis.startPoint) || t(this.analysis.endPoint)) && this.active && !e6) {
      const e7 = this._pick(t5);
      r(e7) && (this.cursorPoint = e7);
    } else
      this.cursorPoint = null;
  }
  _pick(t5) {
    if (r(this._cachedPickRequest) && r(this._cachedPickRequest.result)) {
      const e7 = this._cachedPickRequest.screenPoint;
      if (e7.x === t5.x && e7.y === t5.y)
        return this._cachedPickRequest.result.mapPoint;
    } else
      this._cachedPickRequest = new s(t5);
    const e6 = d2(t5);
    this.view.sceneIntersectionHelper.intersectToolIntersectorScreen(e6, this._intersector);
    const i2 = this._intersector.results.min, s2 = V;
    if (!i2.getIntersectionPoint(s2))
      return null;
    const n5 = this.view.renderCoordsHelper.fromRenderCoords(s2, this.view.spatialReference);
    return this._cachedPickRequest.result = new t4(s2, n5), n5;
  }
  _clearCachedPickRequest() {
    this._cachedPickRequest = null;
  }
  _surfaceLocation(t5, e6) {
    return e6 === q.GROUND ? "on-the-surface" : t5.z >= this._getElevation(t5) ? "above-the-surface" : "below-the-surface";
  }
  _updateManipulatorAvailability() {
    this.startManipulator.available = r(this.analysis.startPoint), this.endManipulator.available = r(this.analysis.endPoint);
  }
  _getElevation(t5) {
    return this.view.basemapTerrain.ready ? c(i(this.view.elevationProvider, t5), 0) : 0;
  }
};
e([d({ readOnly: true })], T.prototype, "state", null), e([d()], T.prototype, "lineState", void 0), e([d({ readOnly: true })], T.prototype, "cursor", null), e([d()], T.prototype, "cursorPoint", null), e([d({ constructOnly: true })], T.prototype, "analysis", void 0), e([d({ constructOnly: true })], T.prototype, "analysisViewData", void 0), e([d()], T.prototype, "measurementView", void 0), e([d({ constructOnly: true })], T.prototype, "view", void 0), e([d({ readOnly: true })], T.prototype, "validMeasurement", null), e([d({ value: null })], T.prototype, "startPointSurfaceLocation", void 0), e([d({ value: null })], T.prototype, "endPointSurfaceLocation", void 0), T = e([n("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DTool")], T);
var V = n2();
var q2 = T;

// node_modules/@arcgis/core/widgets/DirectLineMeasurement3D/DirectLineMeasurement3DViewModel.js
var p2 = class extends v {
  constructor(t5) {
    super(t5), this.analysis = null, this.supportedViewType = "3d", this.unsupportedErrorMessage = "DirectLineMeasurement3DViewModel is only supported in 3D views.", this._userUnit = null, this._userUnitOptions = null;
  }
  get state() {
    return this.disabled || !this.ready ? "disabled" : t(this.tool) ? "ready" : this.tool.state;
  }
  get measurement() {
    if (t(this.tool))
      return null;
    const t5 = { mode: "euclidean", directDistance: { text: null, state: "unavailable" }, horizontalDistance: { text: null, state: "unavailable" }, verticalDistance: { text: null, state: "unavailable" } }, { analysisViewData: e6 } = this.tool;
    if (t(e6))
      return t5;
    const r3 = e6.actualVisualizedMeasurement, n5 = r(e6.result) ? "available" : "unavailable";
    switch (r3) {
      case "euclidean":
        return { mode: "euclidean", directDistance: { text: e6.directLabelText, state: n5 }, horizontalDistance: { text: e6.horizontalLabelText, state: n5 }, verticalDistance: { text: e6.verticalLabelText, state: n5 } };
      case "geodesic":
        return { mode: "geodesic", directDistance: { text: null, state: "unavailable" }, horizontalDistance: { text: e6.horizontalLabelText, state: n5 }, verticalDistance: { text: e6.verticalLabelText, state: n5 } };
      default:
        return t5;
    }
  }
  set unitOptions(t5) {
    this._userUnitOptions = t5, this._set("unitOptions", this._filteredOrAllUnits(this._userUnitOptions));
  }
  get unitOptions() {
    return this._filteredOrAllUnits(this._userUnitOptions);
  }
  set unit(t5) {
    this._userUnit = t5 ? this._findSelectableUnit(t5, this._userUnit) : null, this.analysis.unit = t5;
  }
  get unit() {
    return this._userUnit ? (this._userUnit = this._findSelectableUnit(this._userUnit, this.defaultUnit), this._userUnit) : this._findSelectableUnit(this.defaultUnit);
  }
  constructAnalysis() {
    return new u2();
  }
  constructTool() {
    return new q2({ view: e2(this.view), analysis: this.analysis, analysisViewData: e2(this.analysisView), visible: this.visible });
  }
  _findSelectableUnit(t5, e6) {
    const i2 = this.unitOptions;
    return i2.includes(t5) ? t5 : e6 ? this._findSelectableUnit(e6) : i2[0];
  }
  _filteredOrAllUnits(t5) {
    if (!t5)
      return j2.slice();
    const e6 = t5.filter((t6) => j2.includes(t6));
    return 0 === e6.length ? j2.slice() : e6;
  }
};
e([d({ type: u2 })], p2.prototype, "analysis", void 0), e([d({ readOnly: true })], p2.prototype, "state", null), e([d({ readOnly: true })], p2.prototype, "measurement", null), e([d()], p2.prototype, "unitOptions", null), e([d()], p2.prototype, "unit", null), e([d(r2)], p2.prototype, "defaultUnit", void 0), e([d()], p2.prototype, "_userUnit", void 0), e([d()], p2.prototype, "_userUnitOptions", void 0), p2 = e([n("esri.widgets.DirectLineMeasurement3D.DirectLineMeasurement3DViewModel")], p2);
var d3 = p2;

// node_modules/@arcgis/core/widgets/DirectLineMeasurement3D.js
var m = "esri-direct-line-measurement-3d";
var p3 = { buttonDisabled: "esri-button--disabled", base: `${m} esri-widget esri-widget--panel`, container: `${m}__container`, hint: `${m}__hint`, hintText: `${m}__hint-text`, panelError: `${m}__panel--error`, measurement: `${m}__measurement`, measurementItem: `${m}__measurement-item`, measurementItemDisabled: `${m}__measurement-item--disabled`, measurementItemTitle: `${m}__measurement-item-title`, measurementItemValue: `${m}__measurement-item-value`, settings: `${m}__settings`, units: `${m}__units`, unitsLabel: `${m}__units-label`, unitsSelect: `${m}__units-select esri-select`, unitsSelectWrapper: `${m}__units-select-wrapper`, actionSection: `${m}__actions`, newMeasurementButton: `${m}__clear-button esri-button esri-button--primary`, widgetIcon: "esri-icon-measure-line" };
var d4 = class extends O {
  constructor(e6, t5) {
    super(e6, t5), this.view = null, this.visible = null, this.iconClass = p3.widgetIcon, this.label = void 0, this.messages = null, this.messagesUnits = null, this.viewModel = new d3(), this.unitOptions = null, this.unit = null;
  }
  get analysis() {
    return this.viewModel.analysis;
  }
  set analysis(e6) {
    this.viewModel.analysis = e6;
  }
  render() {
    const { supported: e6, active: t5, state: i2, measurement: n5, unit: r3 } = this.viewModel, a2 = "disabled" === i2, o3 = "ready" === i2, l5 = "measuring" === i2 || "measured" === i2, { messages: u3, messagesUnits: m2 } = this, d5 = t5 && o3 ? n3("section", { key: "esri-direct-line-measurement-3d__hint", class: p3.hint }, n3("p", { class: p3.hintText }, u3.hint)) : null, v4 = e6 ? null : n3("section", { key: "esri-direct-line-measurement-3d__unsupported", class: p3.panelError }, n3("p", null, u3.unsupported)), _3 = (e7, t6, s2) => {
      switch (t6.state) {
        case "available":
          return n3("div", { key: `${s2}-enabled`, class: p3.measurementItem }, n3("span", { class: p3.measurementItemTitle }, e7), n3("span", { class: p3.measurementItemValue }, t6.text));
        case "unavailable":
          return n3("div", { key: `${s2}-disabled`, class: this.classes(p3.measurementItem, p3.measurementItemDisabled) }, n3("span", { class: p3.measurementItemTitle }, e7));
      }
    }, h2 = l5 ? n3("section", { key: "esri-direct-line-measurement-3d__measurement", class: p3.measurement }, _3(u3.direct, n5.directDistance, "direct"), _3(u3.horizontal, n5.horizontalDistance, "horizontal"), _3(u3.vertical, n5.verticalDistance, "vertical")) : null, b2 = `${this.id}__units`, y3 = n3("label", { class: p3.unitsLabel, for: b2 }, u3.unit), w2 = n3("div", { class: p3.unitsSelectWrapper }, n3("select", { class: p3.unitsSelect, id: b2, onchange: this._changeUnit, bind: this, value: r3 }, this.viewModel.unitOptions.map((e7) => {
      var _a;
      return n3("option", { key: e7, value: e7 }, P(e7) ? m2.systems[e7] : (_a = m2.units[e7]) == null ? void 0 : _a.pluralCapitalized);
    }))), g = n3("section", { key: "esri-direct-line-measurement-3d__units", class: p3.units }, y3, w2), M2 = l5 ? n3("div", { key: "settings", class: p3.settings }, g) : null, $ = !e6 || t5 && !l5 ? null : n3("div", { class: p3.actionSection }, n3("button", { disabled: a2, class: this.classes(p3.newMeasurementButton, a2 && p3.buttonDisabled), bind: this, onclick: this._newMeasurement, type: "button" }, u3.newMeasurement)), D = this.visible ? n3("div", { class: p3.container }, v4, d5, M2, h2, $) : null;
    return n3("div", { key: this, class: p3.base, role: "presentation" }, D);
  }
  _newMeasurement() {
    j(this.viewModel.start());
  }
  _changeUnit(e6) {
    const t5 = e6.target, s2 = t5.options[t5.selectedIndex];
    s2 && (this.unit = s2.value);
  }
};
e([o2("viewModel.view")], d4.prototype, "view", void 0), e([o2("viewModel.visible")], d4.prototype, "visible", void 0), e([o2("viewModel.active")], d4.prototype, "active", void 0), e([d({ constructOnly: true, nonNullable: true })], d4.prototype, "analysis", null), e([d()], d4.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], d4.prototype, "label", void 0), e([d(), e3("esri/widgets/DirectLineMeasurement3D/t9n/DirectLineMeasurement3D")], d4.prototype, "messages", void 0), e([d(), e3("esri/core/t9n/Units")], d4.prototype, "messagesUnits", void 0), e([d()], d4.prototype, "uiStrings", void 0), e([d({ type: d3 })], d4.prototype, "viewModel", void 0), e([o2("viewModel.unitOptions")], d4.prototype, "unitOptions", void 0), e([o2("viewModel.unit")], d4.prototype, "unit", void 0), e([t2()], d4.prototype, "_newMeasurement", null), e([t2()], d4.prototype, "_changeUnit", null), d4 = e([n("esri.widgets.DirectLineMeasurement3D")], d4);
var v3 = d4;
export {
  v3 as default
};
//# sourceMappingURL=DirectLineMeasurement3D-2B4HELHW.js.map
