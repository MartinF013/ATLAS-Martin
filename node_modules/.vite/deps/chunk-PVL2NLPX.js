import {
  _
} from "./chunk-TVBLDFP3.js";
import {
  n as n2
} from "./chunk-JYMQQ22E.js";
import {
  H
} from "./chunk-Y75V5CF3.js";
import {
  T
} from "./chunk-52W4YMC2.js";
import {
  r as r4,
  t as t2
} from "./chunk-KD6KBT2L.js";
import {
  l as l3,
  m,
  p as p2,
  s,
  v as v2
} from "./chunk-ZEDAE7EU.js";
import {
  h
} from "./chunk-EEJIELE6.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  d,
  p
} from "./chunk-W2HLA6I3.js";
import {
  j as j2,
  l as l2,
  v
} from "./chunk-Q6AASANP.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import {
  D,
  a
} from "./chunk-ZOKX6UGH.js";
import {
  F,
  e as e2,
  j,
  r as r3
} from "./chunk-PKZEO23A.js";
import {
  n,
  r as r2
} from "./chunk-AIRC226G.js";
import {
  c,
  e,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/interactive/visualElements/ExtendedLineVisualElement.js
var G = class extends n2 {
  constructor(t3) {
    super(t3), this._ray = d(), this._externalResources = null, this._handles = new u(), this._isWorldDown = false, this._start = n(), this._end = r2(1, 0, 0), this._width = 1, this._color = r4(1, 0, 1, 1), this._polygonOffset = false, this._writeDepthEnabled = true, this._innerWidth = 0, this._innerColor = r4(1, 1, 1, 1), this._stipplePattern = null, this._stippleOffColor = null, this._stipplePreferContinuous = true, this._falloff = 0, this._extensionType = V.LINE, this._laserlineStyle = null, this._laserlineEnabled = false, this._renderOccluded = h.OccludeAndTransparent, this._fadedExtensions = F2, this.applyProps(t3);
  }
  createExternalResources() {
    const e3 = new H(this.materialParameters);
    this._handles.add(l(() => this.view.state.camera, () => {
      this._updateGeometry();
    }));
    const t3 = new _({ view: this.view, attached: this._laserlineEnabled });
    this._externalResources = { material: e3, laserline: t3 };
  }
  destroyExternalResources() {
    r(this._externalResources) && this._externalResources.laserline.destroy(), this._externalResources = null, this._handles.removeAll();
  }
  forEachExternalMaterial(e3) {
    r(this._externalResources) && e3(this._externalResources.material);
  }
  createGeometries(e3) {
    const t3 = [n(), n()], i = this.extensionType === V.FADED;
    i && t3.push(n(), n());
    const r5 = i ? new Float32Array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) : null, n3 = T.createPolylineGeometry(t3, null, r5);
    e3.addGeometry(n3, e(this._externalResources).material), this._updateVertices(e3);
  }
  updateVisibility(e3) {
    super.updateVisibility(e3), r(this._externalResources) && (this._externalResources.laserline.visible = e3);
  }
  setStartEndFromWorldDownAtLocation(e3) {
    this._isWorldDown = true, r3(this._start, e3), this.view.renderCoordsHelper.worldUpAtPosition(e3, this._end), e2(this._end, e3, this._end), p(this._start, this._end, this._ray), this._updateGeometry();
  }
  get start() {
    return this._start;
  }
  set start(e3) {
    this._isWorldDown = false, F(this._start, e3) || (r3(this._start, e3), p(this._start, this._end, this._ray), this._updateGeometry());
  }
  get end() {
    return this._end;
  }
  set end(e3) {
    this._isWorldDown = false, F(this._end, e3) || (r3(this._end, e3), p(this._start, this._end, this._ray), this._updateGeometry());
  }
  get width() {
    return this._width;
  }
  set width(e3) {
    e3 !== this._width && (this._width = e3, this._updateMaterial());
  }
  get color() {
    return this._color;
  }
  set color(e3) {
    D(e3, this._color) || (a(this._color, e3), this._updateMaterial());
  }
  get polygonOffset() {
    return this._polygonOffset;
  }
  set polygonOffset(e3) {
    e3 !== this._polygonOffset && (this._polygonOffset = e3, this._updateMaterial());
  }
  get writeDepthEnabled() {
    return this._writeDepthEnabled;
  }
  set writeDepthEnabled(e3) {
    this._writeDepthEnabled !== e3 && (this._writeDepthEnabled = e3, this._updateMaterial());
  }
  get innerWidth() {
    return this._innerWidth;
  }
  set innerWidth(e3) {
    e3 !== this._innerWidth && (this._innerWidth = e3, this._updateMaterial());
  }
  get innerColor() {
    return this._innerColor;
  }
  set innerColor(e3) {
    D(e3, this._innerColor) || (a(this._innerColor, e3), this._updateMaterial());
  }
  get stipplePattern() {
    return this._stipplePattern;
  }
  set stipplePattern(e3) {
    const s2 = r(e3) !== r(this._stipplePattern);
    this._stipplePattern = e3, s2 ? this.recreate() : this._updateMaterial();
  }
  get stippleOffColor() {
    return this._stippleOffColor;
  }
  set stippleOffColor(e3) {
    (t(e3) || t(this._stippleOffColor) || !D(e3, this._stippleOffColor)) && (this._stippleOffColor = r(e3) ? t2(e3) : null, this._updateMaterial());
  }
  get stipplePreferContinuous() {
    return this._stipplePreferContinuous;
  }
  set stipplePreferContinuous(e3) {
    e3 !== this._stipplePreferContinuous && (this._stipplePreferContinuous = e3, this._updateMaterial());
  }
  get falloff() {
    return this._falloff;
  }
  set falloff(e3) {
    e3 !== this._falloff && (this._falloff = e3, this._updateMaterial());
  }
  get extensionType() {
    return this._extensionType;
  }
  set extensionType(e3) {
    e3 !== this._extensionType && (this._extensionType = e3, this._updateGeometry());
  }
  get _laserlineAttached() {
    return this._laserlineEnabled && r(this._laserlineStyle);
  }
  get laserlineStyle() {
    return this._laserlineStyle;
  }
  set laserlineStyle(e3) {
    this._laserlineStyle = e3, r(this._externalResources) && (this._externalResources.laserline.attached = this._laserlineAttached, r(e3) && (this._externalResources.laserline.style = e3));
  }
  get laserlineEnabled() {
    return this._laserlineEnabled;
  }
  set laserlineEnabled(e3) {
    this._laserlineEnabled !== e3 && (this._laserlineEnabled = e3, r(this._externalResources) && (this._externalResources.laserline.attached = this._laserlineAttached));
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e3) {
    e3 !== this._renderOccluded && (this._renderOccluded = e3, this._updateMaterial());
  }
  get fadedExtensions() {
    return this._fadedExtensions;
  }
  set fadedExtensions(e3) {
    this._fadedExtensions = c(e3, F2), this.recreateGeometry();
  }
  _updateMaterial() {
    if (t(this._externalResources))
      return;
    this._externalResources.material.setParameters(this.materialParameters);
  }
  get materialParameters() {
    return { width: this._width, color: this._color, stippleOffColor: this._stippleOffColor, stipplePattern: this._stipplePattern, stipplePreferContinuous: this._stipplePreferContinuous, innerWidth: this._innerWidth, innerColor: this._innerColor, falloff: this._falloff, hasPolygonOffset: this._polygonOffset, renderOccluded: this._renderOccluded, writeDepth: this._writeDepthEnabled };
  }
  _updateGeometry() {
    r(this.object) && this._updateVertices(this.object);
  }
  _updateVertices(e3) {
    const s2 = this._extensionType === V.FADED ? this._updateLineSegmentFinite(T2) : this._updateLineSegmentInfinite(this._extensionType, T2);
    this._updateVertexAttributes(e3, s2), r(this._externalResources) && (this._externalResources.laserline.intersectsLine = s2);
  }
  _updateLineSegmentFinite(e3) {
    return l2(this._start, this._end, e3);
  }
  _updateLineSegmentInfinite(e3, t3) {
    const s2 = this.view.state.camera;
    switch (p2(this._ray, W), e3) {
      case V.LINE:
        W.c0 = -Number.MAX_VALUE;
        break;
      case V.RAY:
      case V.GROUND_RAY: {
        const e4 = this._ray.origin, t4 = c(this.view.elevationProvider.getElevation(e4[0], e4[1], e4[2], this.view.renderCoordsHelper.spatialReference, "ground"), 0), s3 = this.view.renderCoordsHelper.getAltitude(e4);
        this._isWorldDown && s3 < t4 && j(W.ray.direction, W.ray.direction), this._extensionType === V.GROUND_RAY && null != t4 && (W.c1 = Math.abs(s3 - t4));
        break;
      }
    }
    if (!m(s2.frustum, W))
      return l2(this._start, this._end, t3);
    const i = l3(W, L), n3 = v2(W, S);
    return l2(i, n3, t3);
  }
  _updateVertexAttributes(e3, t3) {
    const s2 = e3.geometries[0].getMutableAttribute(O.POSITION).data;
    if (this.extensionType === V.FADED) {
      const e4 = j2(t3, -this.fadedExtensions.start, L);
      s2[0] = e4[0], s2[1] = e4[1], s2[2] = e4[2];
      const i = j2(t3, 0, L);
      s2[3] = i[0], s2[4] = i[1], s2[5] = i[2];
      const r5 = j2(t3, 1, L);
      s2[6] = r5[0], s2[7] = r5[1], s2[8] = r5[2];
      const n3 = j2(t3, 1 + this.fadedExtensions.end, L);
      s2[9] = n3[0], s2[10] = n3[1], s2[11] = n3[2];
    } else {
      const e4 = j2(t3, 0, L);
      s2[0] = e4[0], s2[1] = e4[1], s2[2] = e4[2];
      const i = j2(t3, 1, L);
      s2[3] = i[0], s2[4] = i[1], s2[5] = i[2];
    }
    e3.geometryVertexAttrsUpdated(e3.geometryRecords[0]);
  }
};
var W = s();
var L = n();
var S = n();
var T2 = v();
var V;
!function(e3) {
  e3[e3.LINE = 0] = "LINE", e3[e3.RAY = 1] = "RAY", e3[e3.GROUND_RAY = 2] = "GROUND_RAY", e3[e3.FADED = 3] = "FADED";
}(V || (V = {}));
var N = 1 / 3;
var F2 = { start: N, end: N };

export {
  G,
  V
};
//# sourceMappingURL=chunk-PVL2NLPX.js.map
