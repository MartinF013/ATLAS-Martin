import {
  a,
  t
} from "./chunk-BNPOKP6A.js";

// node_modules/@arcgis/core/chunks/vec2.js
function a2(t2, n) {
  return t2[0] = n[0], t2[1] = n[1], t2;
}
function r(t2, n, a3) {
  return t2[0] = n, t2[1] = a3, t2;
}
function s(t2, n, a3) {
  return t2[0] = n[0] + a3[0], t2[1] = n[1] + a3[1], t2;
}
function o(t2, n, a3) {
  return t2[0] = n[0] - a3[0], t2[1] = n[1] - a3[1], t2;
}
function u(t2, n, a3) {
  return t2[0] = n[0] * a3[0], t2[1] = n[1] * a3[1], t2;
}
function e(t2, n, a3) {
  return t2[0] = n[0] / a3[0], t2[1] = n[1] / a3[1], t2;
}
function c(t2, n) {
  return t2[0] = Math.ceil(n[0]), t2[1] = Math.ceil(n[1]), t2;
}
function i(t2, n) {
  return t2[0] = Math.floor(n[0]), t2[1] = Math.floor(n[1]), t2;
}
function f(t2, n, a3) {
  return t2[0] = Math.min(n[0], a3[0]), t2[1] = Math.min(n[1], a3[1]), t2;
}
function M(t2, n, a3) {
  return t2[0] = Math.max(n[0], a3[0]), t2[1] = Math.max(n[1], a3[1]), t2;
}
function h(t2, n) {
  return t2[0] = Math.round(n[0]), t2[1] = Math.round(n[1]), t2;
}
function l(t2, n, a3) {
  return t2[0] = n[0] * a3, t2[1] = n[1] * a3, t2;
}
function d(t2, n, a3, r2) {
  return t2[0] = n[0] + a3[0] * r2, t2[1] = n[1] + a3[1] * r2, t2;
}
function m(t2, n) {
  const a3 = n[0] - t2[0], r2 = n[1] - t2[1];
  return Math.sqrt(a3 * a3 + r2 * r2);
}
function b(t2, n) {
  const a3 = n[0] - t2[0], r2 = n[1] - t2[1];
  return a3 * a3 + r2 * r2;
}
function q(t2) {
  const n = t2[0], a3 = t2[1];
  return Math.sqrt(n * n + a3 * a3);
}
function p(t2) {
  const n = t2[0], a3 = t2[1];
  return n * n + a3 * a3;
}
function x(t2, n) {
  return t2[0] = -n[0], t2[1] = -n[1], t2;
}
function g(t2, n) {
  return t2[0] = 1 / n[0], t2[1] = 1 / n[1], t2;
}
function v(t2, n) {
  const a3 = n[0], r2 = n[1];
  let s2 = a3 * a3 + r2 * r2;
  return s2 > 0 && (s2 = 1 / Math.sqrt(s2), t2[0] = n[0] * s2, t2[1] = n[1] * s2), t2;
}
function j(t2, n) {
  return t2[0] * n[0] + t2[1] * n[1];
}
function y(t2, n, a3) {
  const r2 = n[0] * a3[1] - n[1] * a3[0];
  return t2[0] = t2[1] = 0, t2[2] = r2, t2;
}
function A(t2, n, a3, r2) {
  const s2 = n[0], o2 = n[1];
  return t2[0] = s2 + r2 * (a3[0] - s2), t2[1] = o2 + r2 * (a3[1] - o2), t2;
}
function P(t2, a3) {
  a3 = a3 || 1;
  const r2 = 2 * a() * Math.PI;
  return t2[0] = Math.cos(r2) * a3, t2[1] = Math.sin(r2) * a3, t2;
}
function _(t2, n, a3) {
  const r2 = n[0], s2 = n[1];
  return t2[0] = a3[0] * r2 + a3[2] * s2, t2[1] = a3[1] * r2 + a3[3] * s2, t2;
}
function z(t2, n, a3) {
  const r2 = n[0], s2 = n[1];
  return t2[0] = a3[0] * r2 + a3[2] * s2 + a3[4], t2[1] = a3[1] * r2 + a3[3] * s2 + a3[5], t2;
}
function D(t2, n, a3) {
  const r2 = n[0], s2 = n[1];
  return t2[0] = a3[0] * r2 + a3[3] * s2 + a3[6], t2[1] = a3[1] * r2 + a3[4] * s2 + a3[7], t2;
}
function E(t2, n, a3) {
  const r2 = n[0], s2 = n[1];
  return t2[0] = a3[0] * r2 + a3[4] * s2 + a3[12], t2[1] = a3[1] * r2 + a3[5] * s2 + a3[13], t2;
}
function I(t2, n, a3, r2) {
  const s2 = n[0] - a3[0], o2 = n[1] - a3[1], u2 = Math.sin(r2), e2 = Math.cos(r2);
  return t2[0] = s2 * e2 - o2 * u2 + a3[0], t2[1] = s2 * u2 + o2 * e2 + a3[1], t2;
}
function L(t2, n) {
  const a3 = t2[0], r2 = t2[1], s2 = n[0], o2 = n[1];
  let u2 = a3 * a3 + r2 * r2;
  u2 > 0 && (u2 = 1 / Math.sqrt(u2));
  let e2 = s2 * s2 + o2 * o2;
  e2 > 0 && (e2 = 1 / Math.sqrt(e2));
  const c2 = (a3 * s2 + r2 * o2) * u2 * e2;
  return c2 > 1 ? 0 : c2 < -1 ? Math.PI : Math.acos(c2);
}
function O(t2) {
  return "vec2(" + t2[0] + ", " + t2[1] + ")";
}
function S(t2, n) {
  return t2[0] === n[0] && t2[1] === n[1];
}
function k(n, a3) {
  const r2 = n[0], s2 = n[1], o2 = a3[0], u2 = a3[1];
  return Math.abs(r2 - o2) <= t * Math.max(1, Math.abs(r2), Math.abs(o2)) && Math.abs(s2 - u2) <= t * Math.max(1, Math.abs(s2), Math.abs(u2));
}
function w(t2, n, a3, r2, s2) {
  let o2 = n[0] - a3[0], u2 = n[1] - a3[1];
  const e2 = (r2[0] * o2 + r2[1] * u2) * (s2 - 1);
  return o2 = r2[0] * e2, u2 = r2[1] * e2, t2[0] = n[0] + o2, t2[1] = n[1] + u2, t2;
}
var B = q;
var C = o;
var F = u;
var G = e;
var H = m;
var J = b;
var K = p;
var N = Object.freeze(Object.defineProperty({ __proto__: null, copy: a2, set: r, add: s, subtract: o, multiply: u, divide: e, ceil: c, floor: i, min: f, max: M, round: h, scale: l, scaleAndAdd: d, distance: m, squaredDistance: b, length: q, squaredLength: p, negate: x, inverse: g, normalize: v, dot: j, cross: y, lerp: A, random: P, transformMat2: _, transformMat2d: z, transformMat3: D, transformMat4: E, rotate: I, angle: L, str: O, exactEquals: S, equals: k, projectAndScale: w, len: B, sub: C, mul: F, div: G, dist: H, sqrDist: J, sqrLen: K }, Symbol.toStringTag, { value: "Module" }));

export {
  a2 as a,
  r,
  s,
  o,
  f,
  M,
  l,
  d,
  m,
  b,
  q,
  p,
  x,
  v,
  j,
  y,
  A,
  _,
  z,
  I,
  S,
  w,
  C,
  H
};
//# sourceMappingURL=chunk-YZNDHJDJ.js.map
