import {
  a
} from "./chunk-ZZY5IDKU.js";
import {
  e as e2
} from "./chunk-Z4FD36CT.js";
import {
  e,
  s as s2,
  t
} from "./chunk-OZT6RDST.js";
import {
  W
} from "./chunk-RN2KRYDN.js";
import {
  E
} from "./chunk-3NMRL5CR.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/rest/query/operations/pbfOptimizedFeatureSet.js
var n = ["esriGeometryPoint", "esriGeometryMultipoint", "esriGeometryPolyline", "esriGeometryPolygon"];
var a2 = class {
  constructor(e3) {
    this.options = e3, this.geometryTypes = n, this._coordinatePtr = 0, this._vertexDimension = 0;
  }
  createFeatureResult() {
    return new e2();
  }
  prepareFeatures(e3) {
    this._vertexDimension = 2, e3.hasZ && this._vertexDimension++, e3.hasM && this._vertexDimension++;
  }
  finishFeatureResult(o2) {
    if (!o2 || !o2.features || !o2.hasZ || !this.options.sourceSpatialReference || !o2.spatialReference || E(o2.spatialReference, this.options.sourceSpatialReference) || o2.spatialReference.vcsWkid)
      return;
    const i2 = W(this.options.sourceSpatialReference) / W(o2.spatialReference);
    if (1 !== i2)
      for (const e3 of o2.features) {
        if (!e(e3))
          continue;
        const t3 = e3.geometry.coords;
        for (let e4 = 2; e4 < t3.length; e4 += 3)
          t3[e4] *= i2;
      }
  }
  addFeature(e3, t3) {
    e3.features.push(t3);
  }
  createFeature() {
    return new s2();
  }
  createSpatialReference() {
    return { wkid: 0 };
  }
  createGeometry() {
    return new t();
  }
  addField(e3, t3) {
    e3.fields.push(t3);
  }
  allocateCoordinates(e3) {
    e3.coords.length = e3.lengths.reduce((e4, t3) => e4 + t3, 0) * this._vertexDimension, this._coordinatePtr = 0;
  }
  addCoordinate(e3, t3) {
    e3.coords[this._coordinatePtr++] = t3;
  }
  addCoordinatePoint(e3, t3) {
    e3.coords.push(t3);
  }
  addLength(e3, t3) {
    e3.lengths.push(t3);
  }
  addQueryGeometry(e3, t3) {
    e3.queryGeometry = t3.queryGeometry, e3.queryGeometryType = t3.queryGeometryType;
  }
  createPointGeometry() {
    return new t();
  }
};

// node_modules/@arcgis/core/rest/query/operations/pbfFeatureServiceParser.js
var n2 = ["esriFieldTypeSmallInteger", "esriFieldTypeInteger", "esriFieldTypeSingle", "esriFieldTypeDouble", "esriFieldTypeString", "esriFieldTypeDate", "esriFieldTypeOID", "esriFieldTypeGeometry", "esriFieldTypeBlob", "esriFieldTypeRaster", "esriFieldTypeGUID", "esriFieldTypeGlobalID", "esriFieldTypeXML"];
var o = ["sqlTypeBigInt", "sqlTypeBinary", "sqlTypeBit", "sqlTypeChar", "sqlTypeDate", "sqlTypeDecimal", "sqlTypeDouble", "sqlTypeFloat", "sqlTypeGeometry", "sqlTypeGUID", "sqlTypeInteger", "sqlTypeLongNVarchar", "sqlTypeLongVarbinary", "sqlTypeLongVarchar", "sqlTypeNChar", "sqlTypeNVarchar", "sqlTypeOther", "sqlTypeReal", "sqlTypeSmallInt", "sqlTypeSqlXml", "sqlTypeTime", "sqlTypeTimestamp", "sqlTypeTimestamp2", "sqlTypeTinyInt", "sqlTypeVarbinary", "sqlTypeVarchar"];
var i = ["upperLeft", "lowerLeft"];
function c(e3) {
  return e3 >= n2.length ? null : n2[e3];
}
function l(e3) {
  return e3 >= o.length ? null : o[e3];
}
function g(e3) {
  return e3 >= i.length ? null : i[e3];
}
function p(e3, t3) {
  return t3 >= e3.geometryTypes.length ? null : e3.geometryTypes[t3];
}
function u(e3, t3, r2) {
  const s3 = 3, a3 = t3.createPointGeometry(r2);
  for (; e3.next(); )
    switch (e3.tag()) {
      case s3: {
        const r3 = e3.getUInt32(), s4 = e3.pos() + r3;
        let n3 = 0;
        for (; e3.pos() < s4; )
          t3.addCoordinatePoint(a3, e3.getSInt64(), n3++);
        break;
      }
      default:
        e3.skip();
    }
  return a3;
}
function y(e3, t3, r2) {
  const s3 = 2, a3 = 3, n3 = t3.createGeometry(r2), o2 = 2 + (r2.hasZ ? 1 : 0) + (r2.hasM ? 1 : 0);
  for (; e3.next(); )
    switch (e3.tag()) {
      case s3: {
        const r3 = e3.getUInt32(), s4 = e3.pos() + r3;
        let a4 = 0;
        for (; e3.pos() < s4; )
          t3.addLength(n3, e3.getUInt32(), a4++);
        break;
      }
      case a3: {
        const r3 = e3.getUInt32(), s4 = e3.pos() + r3;
        let a4 = 0;
        for (t3.allocateCoordinates(n3); e3.pos() < s4; )
          t3.addCoordinate(n3, e3.getSInt64(), a4), a4++, a4 === o2 && (a4 = 0);
        break;
      }
      default:
        e3.skip();
    }
  return n3;
}
function b(e3) {
  const t3 = 1, r2 = 2, n3 = 3, o2 = new t();
  let i2 = "esriGeometryPoint";
  for (; e3.next(); )
    switch (e3.tag()) {
      case r2: {
        const t4 = e3.getUInt32(), r3 = e3.pos() + t4;
        for (; e3.pos() < r3; )
          o2.lengths.push(e3.getUInt32());
        break;
      }
      case n3: {
        const t4 = e3.getUInt32(), r3 = e3.pos() + t4;
        for (; e3.pos() < r3; )
          o2.coords.push(e3.getSInt64());
        break;
      }
      case t3:
        i2 = n[e3.getEnum()];
        break;
      default:
        e3.skip();
    }
  return { queryGeometry: o2, queryGeometryType: i2 };
}
function f(e3) {
  const t3 = 1, r2 = 2, s3 = 3, a3 = 4, n3 = 5, o2 = 6, i2 = 7, c2 = 8, l2 = 9;
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        return e3.getString();
      case r2:
        return e3.getFloat();
      case s3:
        return e3.getDouble();
      case a3:
        return e3.getSInt32();
      case n3:
        return e3.getUInt32();
      case o2:
        return e3.getInt64();
      case i2:
        return e3.getUInt64();
      case c2:
        return e3.getSInt64();
      case l2:
        return e3.getBool();
      default:
        return e3.skip(), null;
    }
  return null;
}
function k(e3) {
  const t3 = 1, r2 = 2, s3 = 3, a3 = 4, n3 = 5, o2 = 6, i2 = { type: c(0) };
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        i2.name = e3.getString();
        break;
      case r2:
        i2.type = c(e3.getEnum());
        break;
      case s3:
        i2.alias = e3.getString();
        break;
      case a3:
        i2.sqlType = l(e3.getEnum());
        break;
      case n3:
        e3.skip();
        break;
      case o2:
        i2.defaultValue = e3.getString();
        break;
      default:
        e3.skip();
    }
  return i2;
}
function d(e3) {
  const t3 = 1, r2 = 2, s3 = {};
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        s3.name = e3.getString();
        break;
      case r2:
        s3.isSystemMaintained = e3.getBool();
        break;
      default:
        e3.skip();
    }
  return s3;
}
function m(e3, t3, r2, s3) {
  const a3 = 1, n3 = 2, o2 = 4, i2 = t3.createFeature(r2);
  let c2 = 0;
  for (; e3.next(); )
    switch (e3.tag()) {
      case a3: {
        const t4 = s3[c2++].name;
        i2.attributes[t4] = e3.processMessage(f);
        break;
      }
      case n3:
        i2.geometry = e3.processMessageWithArgs(y, t3, r2);
        break;
      case o2:
        i2.centroid = e3.processMessageWithArgs(u, t3, r2);
        break;
      default:
        e3.skip();
    }
  return i2;
}
function h(e3) {
  const t3 = 1, r2 = 2, s3 = 3, a3 = 4, n3 = [1, 1, 1, 1];
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        n3[0] = e3.getDouble();
        break;
      case r2:
        n3[1] = e3.getDouble();
        break;
      case a3:
        n3[2] = e3.getDouble();
        break;
      case s3:
        n3[3] = e3.getDouble();
        break;
      default:
        e3.skip();
    }
  return n3;
}
function T(e3) {
  const t3 = 1, r2 = 2, s3 = 3, a3 = 4, n3 = [0, 0, 0, 0];
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        n3[0] = e3.getDouble();
        break;
      case r2:
        n3[1] = e3.getDouble();
        break;
      case a3:
        n3[2] = e3.getDouble();
        break;
      case s3:
        n3[3] = e3.getDouble();
        break;
      default:
        e3.skip();
    }
  return n3;
}
function q(e3) {
  const t3 = 1, r2 = 2, s3 = 3, a3 = { originPosition: g(0) };
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        a3.originPosition = g(e3.getEnum());
        break;
      case r2:
        a3.scale = e3.processMessage(h);
        break;
      case s3:
        a3.translate = e3.processMessage(T);
        break;
      default:
        e3.skip();
    }
  return a3;
}
function I(e3) {
  const t3 = 1, r2 = 2, s3 = 3, a3 = {};
  for (; e3.next(); )
    switch (e3.tag()) {
      case t3:
        a3.shapeAreaFieldName = e3.getString();
        break;
      case r2:
        a3.shapeLengthFieldName = e3.getString();
        break;
      case s3:
        a3.units = e3.getString();
        break;
      default:
        e3.skip();
    }
  return a3;
}
function F(e3, t3) {
  const r2 = 1, s3 = 2, a3 = 3, n3 = 4, o2 = 5, i2 = t3.createSpatialReference();
  for (; e3.next(); )
    switch (e3.tag()) {
      case r2:
        i2.wkid = e3.getUInt32();
        break;
      case o2:
        i2.wkt = e3.getString();
        break;
      case s3:
        i2.latestWkid = e3.getUInt32();
        break;
      case a3:
        i2.vcsWkid = e3.getUInt32();
        break;
      case n3:
        i2.latestVcsWkid = e3.getUInt32();
        break;
      default:
        e3.skip();
    }
  return i2;
}
function S(e3, t3) {
  const r2 = 1, s3 = 2, a3 = 3, n3 = 4, o2 = 5, i2 = 7, c2 = 8, l2 = 9, g2 = 10, u2 = 11, y2 = 12, b2 = 13, f2 = 15, h2 = t3.createFeatureResult();
  h2.geometryType = p(t3, 0);
  let T2 = false;
  for (; e3.next(); )
    switch (e3.tag()) {
      case r2:
        h2.objectIdFieldName = e3.getString();
        break;
      case a3:
        h2.globalIdFieldName = e3.getString();
        break;
      case n3:
        h2.geohashFieldName = e3.getString();
        break;
      case o2:
        h2.geometryProperties = e3.processMessage(I);
        break;
      case i2:
        h2.geometryType = p(t3, e3.getEnum());
        break;
      case c2:
        h2.spatialReference = e3.processMessageWithArgs(F, t3);
        break;
      case g2:
        h2.hasZ = e3.getBool();
        break;
      case u2:
        h2.hasM = e3.getBool();
        break;
      case y2:
        h2.transform = e3.processMessage(q);
        break;
      case l2: {
        const t4 = e3.getBool();
        h2.exceededTransferLimit = t4;
        break;
      }
      case b2:
        t3.addField(h2, e3.processMessage(k));
        break;
      case f2:
        T2 || (t3.prepareFeatures(h2), T2 = true), t3.addFeature(h2, e3.processMessageWithArgs(m, t3, h2, h2.fields));
        break;
      case s3:
        h2.uniqueIdField = e3.processMessage(d);
        break;
      default:
        e3.skip();
    }
  return t3.finishFeatureResult(h2), h2;
}
function w(e3, r2) {
  const s3 = 1, a3 = 4, n3 = {};
  let o2 = null;
  for (; e3.next(); )
    switch (e3.tag()) {
      case a3:
        o2 = e3.processMessageWithArgs(b);
        break;
      case s3:
        n3.featureResult = e3.processMessageWithArgs(S, r2);
        break;
      default:
        e3.skip();
    }
  return r(o2) && n3.featureResult && r2.addQueryGeometry(n3, o2), n3;
}
function D(t3, s3) {
  try {
    const e3 = 2, a3 = new a(new Uint8Array(t3), new DataView(t3)), n3 = {};
    for (; a3.next(); )
      if (a3.tag() === e3)
        n3.queryResult = a3.processMessageWithArgs(w, s3);
      else
        a3.skip();
    return n3;
  } catch (a3) {
    throw new s("query:parsing-pbf", "Error while parsing FeatureSet PBF payload", { error: a3 });
  }
}

// node_modules/@arcgis/core/rest/query/operations/pbfQueryUtils.js
function t2(t3, r2) {
  const u2 = D(t3, r2), o2 = u2.queryResult.featureResult, s3 = u2.queryResult.queryGeometry, y2 = u2.queryResult.queryGeometryType;
  if (o2 && o2.features && o2.features.length && o2.objectIdFieldName) {
    const e3 = o2.objectIdFieldName;
    for (const t4 of o2.features)
      t4.attributes && (t4.objectId = t4.attributes[e3]);
  }
  return o2 && (o2.queryGeometry = s3, o2.queryGeometryType = y2), o2;
}

export {
  a2 as a,
  c,
  q,
  t2 as t
};
//# sourceMappingURL=chunk-ZWMYDR2G.js.map
