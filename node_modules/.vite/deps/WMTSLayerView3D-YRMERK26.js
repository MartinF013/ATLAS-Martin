import {
  c
} from "./chunk-CULPK55Q.js";
import {
  n as n2
} from "./chunk-WLVMYWO2.js";
import {
  i
} from "./chunk-UMSO3HI4.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-LAHCYKZK.js";
import "./chunk-4CRT3CQZ.js";
import "./chunk-EJ4V43KX.js";
import "./chunk-PLLZPG4O.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-2EPPX4WN.js";
import "./chunk-ZN2MGN4S.js";
import "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-PZWU5EHT.js";
import {
  f
} from "./chunk-CQSGZXR7.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-YG6VFATO.js";
import "./chunk-HR2OX32D.js";
import "./chunk-6GPADSSO.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  j as j2
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/3d/layers/WMTSLayerView3D.js
var d2 = s.getLogger("esri.views.3d.layers.WMTSLayerView3d");
var f2 = class extends i(c(n2(u))) {
  constructor() {
    super(...arguments), this.type = "wmts-3d";
  }
  get hasMixedImageFormats() {
    return true;
  }
  _getCompatibleTileInfoMatrixSet(e2, i2 = false) {
    const s2 = f(this.layer);
    if (r(s2)) {
      if (j.isCollection(s2)) {
        const t2 = s2.find((t3) => {
          const s3 = e2(t3);
          return r(s3) && (i2 ? d2.error("The selected tile matrix set is not compatible with the view", s3) : this.addResolvingPromise(Promise.reject(s3))), null == s3;
        });
        return t2;
      }
      const o = e2(s2);
      return r(o) && (i2 ? d2.error("The selected tile matrix set is not compatible with the view", o) : this.addResolvingPromise(Promise.reject(o))), s2;
    }
    return null;
  }
  initialize() {
    this._getCompatibleTileInfoMatrixSet((e3) => this._getTileInfoSupportError(e3.tileInfo, e3.fullExtent));
    const e2 = j2(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
    }).then(() => {
      const e3 = this._getCompatibleTileInfoMatrixSet((e4) => this._getTileInfoSupportError(e4.tileInfo, e4.fullExtent) || this._getTileInfoCompatibilityError(e4.tileInfo, this.view.basemapTerrain.tilingScheme));
      t(e3) || (this.layer.activeLayer.tileMatrixSetId !== e3.id && (this.layer.activeLayer.tileMatrixSetId = e3.id), this.tileInfo = e3.tileInfo, this.layer.fullExtent = e3.fullExtent);
    });
    this.addResolvingPromise(e2), this.when(() => this._initialized());
  }
  refresh() {
    this.emit("data-changed");
  }
  canResume() {
    if (!super.canResume())
      return false;
    const e2 = this.layer.activeLayer.tileMatrixSet;
    return e2 && !this._getTileInfoError(e2.tileInfo, e2.fullExtent);
  }
  async doRefresh() {
    this.suspended || this.emit("data-changed");
  }
  _initialized() {
    this.updatingHandles.add(() => {
      var _a, _b;
      return (_b = (_a = this.layer) == null ? void 0 : _a.activeLayer) == null ? void 0 : _b.styleId;
    }, () => this.refresh()), this.updatingHandles.add(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.activeLayer;
    }, (e2) => {
      const t2 = this._getCompatibleTileInfoMatrixSet((e3) => this._getTileInfoSupportError(e3.tileInfo, e3.fullExtent) || this._getTileInfoCompatibilityError(e3.tileInfo, this.view.basemapTerrain.tilingScheme), true);
      r(t2) && e2.tileMatrixSetId !== t2.id && (this.layer.activeLayer.tileMatrixSetId = t2.id), this.notifyChange("suspended"), this.canResume() && this.refresh();
    });
  }
  _getTileInfoError(e2, t2) {
    return this._getTileInfoSupportError(e2, t2) || this._getTileInfoCompatibilityError(e2, this.view.basemapTerrain.tilingScheme);
  }
};
e([d({ readOnly: true })], f2.prototype, "hasMixedImageFormats", null), e([d()], f2.prototype, "layer", void 0), e([d()], f2.prototype, "suspended", void 0), f2 = e([n("esri.views.3d.layers.WMTSLayerView3D")], f2);
var y = f2;
export {
  y as default
};
//# sourceMappingURL=WMTSLayerView3D-YRMERK26.js.map
