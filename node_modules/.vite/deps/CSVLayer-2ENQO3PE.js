import {
  c
} from "./chunk-NCMBCUFA.js";
import "./chunk-EZ4QR7V3.js";
import {
  Ke
} from "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import {
  u
} from "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  x as x2
} from "./chunk-4XBERLPX.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import {
  b
} from "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import {
  m,
  p
} from "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import {
  m as m2
} from "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import {
  j
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  x
} from "./chunk-U3PSONS6.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  a,
  r
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/layers/graphics/sources/CSVSource.js
var l = class extends m2 {
  constructor(t) {
    super(t), this.type = "csv", this.refresh = x(async (t2) => {
      await this.load();
      const { extent: e2, timeExtent: o2 } = await this._connection.invoke("refresh", t2);
      return this.sourceJSON.extent = e2, o2 && (this.sourceJSON.timeInfo.timeExtent = [o2.start, o2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(t) {
    const e2 = r(t) ? t.signal : null;
    return this.addResolvingPromise(this._startWorker(e2)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
    return x2.fromJSON(o2);
  }
  async queryFeaturesJSON(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatures", t ? t.toJSON() : null, e2);
  }
  async queryFeatureCount(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryFeatureCount", t ? t.toJSON() : null, e2);
  }
  async queryObjectIds(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("queryObjectIds", t ? t.toJSON() : null, e2);
  }
  async queryExtent(t, e2 = {}) {
    await this.load(e2);
    const o2 = await this._connection.invoke("queryExtent", t ? t.toJSON() : null, e2);
    return { count: o2.count, extent: M.fromJSON(o2.extent) };
  }
  async querySnapping(t, e2 = {}) {
    return await this.load(e2), this._connection.invoke("querySnapping", t, e2);
  }
  async _startWorker(t) {
    this._connection = await u("CSVSourceWorker", { strategy: a("feature-layers-workers") ? "dedicated" : "local", signal: t });
    const { url: o2, delimiter: r2, fields: s2, latitudeField: n2, longitudeField: a2, spatialReference: c2, timeInfo: u2 } = this.loadOptions, l2 = await this._connection.invoke("load", { url: o2, customParameters: this.customParameters, parsingOptions: { delimiter: r2, fields: s2 == null ? void 0 : s2.map((t2) => t2.toJSON()), latitudeField: n2, longitudeField: a2, spatialReference: c2 == null ? void 0 : c2.toJSON(), timeInfo: u2 == null ? void 0 : u2.toJSON() } }, { signal: t });
    this.locationInfo = l2.locationInfo, this.sourceJSON = l2.layerDefinition, this.delimiter = l2.delimiter;
  }
};
e([d()], l.prototype, "type", void 0), e([d()], l.prototype, "loadOptions", void 0), e([d()], l.prototype, "customParameters", void 0), e([d()], l.prototype, "locationInfo", void 0), e([d()], l.prototype, "sourceJSON", void 0), e([d()], l.prototype, "delimiter", void 0), l = e([n("esri.layers.graphics.sources.CSVSource")], l);

// node_modules/@arcgis/core/layers/CSVLayer.js
function h(e2, r2) {
  throw new s(r2, `CSVLayer (title: ${e2.title}, id: ${e2.id}) cannot be saved to a portal item`);
}
var m3 = class extends Ke {
  constructor(...e2) {
    super(...e2), this.capabilities = c(false, false), this.delimiter = null, this.editingEnabled = false, this.fields = null, this.latitudeField = null, this.locationType = "coordinates", this.longitudeField = null, this.operationalLayerType = "CSV", this.outFields = ["*"], this.path = null, this.portalItem = null, this.spatialReference = k.WGS84, this.source = null, this.type = "csv";
  }
  normalizeCtorArgs(e2, t) {
    return "string" == typeof e2 ? { url: e2, ...t } : e2;
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  readWebMapLabelsVisible(e2, t) {
    return null != t.showLabels ? t.showLabels : !!(t.layerDefinition && t.layerDefinition.drawingInfo && t.layerDefinition.drawingInfo.labelingInfo);
  }
  set url(e2) {
    if (!e2)
      return void this._set("url", e2);
    const t = j(e2);
    this._set("url", t.path), t.query && (this.customParameters = { ...this.customParameters, ...t.query });
  }
  async createGraphicsSource(e2) {
    const t = new l({ loadOptions: { delimiter: this.delimiter, fields: this.fields, latitudeField: this.latitudeField, longitudeField: this.longitudeField, spatialReference: this.spatialReference, timeInfo: this.timeInfo, url: this.url }, customParameters: this.customParameters });
    return this._set("source", t), await t.load({ signal: e2 }), this.read({ locationInfo: t.locationInfo, columnDelimiter: t.delimiter }, { origin: "service", url: this.parsedUrl }), t;
  }
  queryFeatures(e2, t) {
    return this.load().then(() => this.source.queryFeatures(b.from(e2) || this.createQuery())).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const t2 of e3.features)
          t2.layer = t2.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e2) || this.createQuery()));
  }
  queryFeatureCount(e2, t) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e2) || this.createQuery()));
  }
  queryExtent(e2, t) {
    return this.load().then(() => this.source.queryExtent(b.from(e2) || this.createQuery()));
  }
  write(e2, t) {
    return super.write(e2, { ...t, writeLayerSchema: true });
  }
  clone() {
    throw new s("csv-layer:clone", `CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
  }
  async save(e2) {
    return h(this, "csv-layer:save");
  }
  async saveAs(e2, t) {
    return h(this, "csv-layer:save-as");
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t } = await this.source.refresh(this.customParameters);
      return r(t) && this.read(t, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
  _verifyFields() {
  }
  _verifySource() {
  }
  _hasMemorySource() {
    return false;
  }
};
e([d({ readOnly: true, json: { read: false, write: false } })], m3.prototype, "capabilities", void 0), e([d({ type: [",", " ", ";", "|", "	"], json: { read: { source: "columnDelimiter" }, write: { target: "columnDelimiter", ignoreOrigin: true } } })], m3.prototype, "delimiter", void 0), e([d({ readOnly: true, type: Boolean, json: { origins: { "web-scene": { read: false, write: false } } } })], m3.prototype, "editingEnabled", void 0), e([d({ json: { read: { source: "layerDefinition.fields" }, write: { target: "layerDefinition.fields" } } })], m3.prototype, "fields", void 0), e([d({ type: Boolean, readOnly: true })], m3.prototype, "isTable", null), e([o("web-map", "labelsVisible", ["layerDefinition.drawingInfo.labelingInfo", "showLabels"])], m3.prototype, "readWebMapLabelsVisible", null), e([d({ type: String, json: { read: { source: "locationInfo.latitudeFieldName" }, write: { target: "locationInfo.latitudeFieldName", ignoreOrigin: true } } })], m3.prototype, "latitudeField", void 0), e([d({ type: ["show", "hide"] })], m3.prototype, "listMode", void 0), e([d({ type: ["coordinates"], json: { read: { source: "locationInfo.locationType" }, write: { target: "locationInfo.locationType", ignoreOrigin: true, isRequired: true } } })], m3.prototype, "locationType", void 0), e([d({ type: String, json: { read: { source: "locationInfo.longitudeFieldName" }, write: { target: "locationInfo.longitudeFieldName", ignoreOrigin: true } } })], m3.prototype, "longitudeField", void 0), e([d({ type: ["CSV"] })], m3.prototype, "operationalLayerType", void 0), e([d()], m3.prototype, "outFields", void 0), e([d({ type: String, json: { origins: { "web-scene": { read: false, write: false } }, read: false, write: false } })], m3.prototype, "path", void 0), e([d({ json: { read: false, write: false, origins: { "web-document": { read: false, write: false } } } })], m3.prototype, "portalItem", void 0), e([d({ json: { read: false }, cast: null, type: l, readOnly: true })], m3.prototype, "source", void 0), e([d({ json: { read: false }, value: "csv", readOnly: true })], m3.prototype, "type", void 0), e([d({ json: { read: m, write: { isRequired: true, ignoreOrigin: true, writer: p } } })], m3.prototype, "url", null), m3 = e([n("esri.layers.CSVLayer")], m3);
var f = m3;
export {
  f as default
};
//# sourceMappingURL=CSVLayer-2ENQO3PE.js.map
