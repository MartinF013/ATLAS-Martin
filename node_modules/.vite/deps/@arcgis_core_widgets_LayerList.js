import {
  V,
  c,
  f,
  o as o2,
  s as s2,
  v
} from "./chunk-NJ44JOOO.js";
import {
  sortable_esm_default
} from "./chunk-IEMNNLIH.js";
import "./chunk-ZUEYZA7M.js";
import "./chunk-74GUBHRJ.js";
import {
  t as t2
} from "./chunk-E447OCKN.js";
import {
  t
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  a as a2,
  h,
  l,
  w
} from "./chunk-T7BEWVV3.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import {
  s
} from "./chunk-XRL56EGK.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  i
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  a
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/LayerList.js
function S(e3, t3, i2) {
  e3.splice(i2, 0, e3.splice(t3, 1)[0]);
}
var k = "esri-layerlist-new-ui";
var L = j.ofType(V);
var M = "data-sort-filter";
var T = "data-layer-uid";
var E = "layerUid";
var R = { base: "esri-layer-list esri-widget esri-widget--panel", newUI: "esri-layer-list--new-ui", noItems: "esri-layer-list__no-items", list: "esri-layer-list__list", listRoot: "esri-layer-list__list--root", listExclusive: "esri-layer-list__list--exclusive", listInherited: "esri-layer-list__list--inherited", listIndependent: "esri-layer-list__list--independent", item: "esri-layer-list__item", itemContent: "esri-layer-list__item-content", itemMessage: "esri-layer-list__item--has-message", itemInvisible: "esri-layer-list__item--invisible", itemInvisibleAtScale: "esri-layer-list__item--invisible-at-scale", itemUpdating: "esri-layer-list__item--updating", itemChildren: "esri-layer-list__item--has-children", itemSelectable: "esri-layer-list__item--selectable", itemContainer: "esri-layer-list__item-container", actionsMenu: "esri-layer-list__item-actions-menu", actionsMenuItem: "esri-layer-list__item-actions-menu-item", actionsMenuItemActive: "esri-layer-list__item-actions-menu-item--active", actions: "esri-layer-list__item-actions", actionsList: "esri-layer-list__item-actions-list", action: "esri-layer-list__item-action", actionIcon: "esri-layer-list__item-action-icon", actionImage: "esri-layer-list__item-action-image", actionTitle: "esri-layer-list__item-action-title", actionToggle: "esri-layer-list__action-toggle", actionToggleOn: "esri-layer-list__action-toggle--on", label: "esri-layer-list__item-label", message: "esri-layer-list__item-message", title: "esri-layer-list__item-title", connectionStatus: "esri-layer-list__connection-status", connectionStatusDisconnected: "esri-layer-list__connection-status--disconnected", connectionStatusConnected: "esri-layer-list__connection-status--connected", toggleVisible: "esri-layer-list__item-toggle", toggleVisibleIcon: "esri-layer-list__item-toggle-icon", toggleIcon: "esri-layer-list__item-toggle-icon", radioIcon: "esri-layer-list__item-radio-icon", childToggle: "esri-layer-list__child-toggle", childToggleOpen: "esri-layer-list__child-toggle--open", childOpened: "esri-layer-list__child-toggle-icon--opened", childClosed: "esri-layer-list__child-toggle-icon--closed", childClosed_RTL: "esri-layer-list__child-toggle-icon--closed-rtl", sortableChosen: "esri-layer-list--chosen", disabled: "esri-disabled", disabledElement: "esri-disabled-element", hidden: "esri-hidden", rotating: "esri-rotating", iconEllipses: "esri-icon-handle-horizontal", iconVisible: "esri-icon-visible", iconInvisible: "esri-icon-non-visible", iconRadioSelected: "esri-icon-radio-checked", iconRadioUnselected: "esri-icon-radio-unchecked", iconNoticeTriangle: "esri-icon-notice-triangle", iconChildrenOpen: "esri-icon-down-arrow", iconDownArrow: "esri-icon-down-arrow", iconRightArrow: "esri-icon-right-triangle-arrow", iconLeftArrow: "esri-icon-left-triangle-arrow", iconLoading: "esri-icon-loading-indicator", iconDefaultAction: "esri-icon-default-action", widgetIcon: "esri-icon-layers" };
var x = { actions: "actions", actionSection: "action-section", items: "items" };
var U = { exclusive: "exclusive", inherited: "inherited", independent: "independent" };
function O2(e3) {
  const { actionsOpen: t3, children: i2 } = e3;
  t3 && (e3.actionsOpen = false), i2.forEach((e4) => O2(e4));
}
var N = "root";
var V2 = { statusIndicators: true };
var j2 = class extends O {
  constructor(e3, t3) {
    super(e3, t3), this._handles = new u(), this._sortableNodes = /* @__PURE__ */ new Map(), this._sortableMap = /* @__PURE__ */ new Map(), this._focusSortUid = null, this._newUI = a(k), this._tooltipReferenceMap = /* @__PURE__ */ new Map(), this.visibleItems = null, this.iconClass = R.widgetIcon, this.label = void 0, this.listItemCanGiveFunction = null, this.listItemCanReceiveFunction = null, this.listItemCreatedFunction = null, this.messages = null, this.messagesCommon = null, this.multipleSelectionEnabled = false, this.operationalItems = null, this.selectionEnabled = false, this.selectedItems = new L(), this.view = null, this.viewModel = new v(), this.visibleElements = { ...V2 }, this._onSortableSort = ({ to: e4, from: t4, item: i2, newIndex: s3 }) => {
      t4 && e4 && (t4 === e4 ? this._sortLayers(this._sortableMap.get(t4.dataset.group)) : this._moveLayerFromChildList({ to: e4, from: t4, item: i2, newIndex: s3 }));
    }, this._sortableCanSort = (e4, t4) => !(!e4.el.dataset.group || !t4.el.dataset.group), this._sortableCanPull = (e4, t4, i2) => {
      const { listItemCanGiveFunction: s3 } = this, o3 = { selected: i2["data-item"], from: t4.el["data-item"], to: e4.el["data-item"] };
      return !this._sortableCanSort(e4, t4) || "function" != typeof s3 || s3.call(null, o3);
    }, this._sortableCanPut = (e4, t4, i2) => {
      const { listItemCanReceiveFunction: s3 } = this, o3 = { selected: i2["data-item"], from: t4.el["data-item"], to: e4.el["data-item"] };
      return !this._sortableCanSort(e4, t4) || "function" != typeof s3 || s3.call(null, o3);
    }, this._onSortableEnd = ({ oldIndex: e4, from: t4, to: i2, item: s3 }) => {
      t4 !== i2 && t4.insertBefore(s3, t4.children[e4]);
    };
  }
  initialize() {
    const e3 = this.operationalItems;
    this._setVisibleItems(e3), this.own([a2(() => this.operationalItems, "change", () => this._itemsChanged(e3)), l(() => this.errorsVisible, () => this._itemsChanged(e3)), l(() => this.selectionEnabled, () => this._toggleAllSorting(), h)]);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-tooltip-IA24DW4F.js")]);
  }
  destroy() {
    this._destroySortables(), this._tooltipReferenceMap.clear(), this._handles.destroy(), this._handles = null;
  }
  castVisibleElements(e3) {
    return { ...V2, ...e3 };
  }
  triggerAction(e3, t3) {
    this.viewModel.triggerAction(e3, t3);
  }
  render() {
    var _a;
    const { visibleItems: e3, _newUI: t3 } = this, i2 = (_a = this.viewModel) == null ? void 0 : _a.state, s3 = { [R.newUI]: t3, [R.hidden]: "loading" === i2, [R.disabled]: "disabled" === i2 }, o3 = this.renderItemTooltips(), n3 = this.renderItems();
    return n2("div", { class: this.classes(R.base, s3) }, (e3 == null ? void 0 : e3.length) ? [o3, n3] : this.renderNoItems());
  }
  renderItemTooltip(e3) {
    const { _tooltipReferenceMap: t3, messages: i2 } = this;
    return e3 ? n2("calcite-tooltip", { label: i2.layerIncompatible, referenceElement: t3.get(e3.uid) }, i2.layerIncompatibleTooltip) : null;
  }
  renderItemTooltipNodes(e3) {
    const { incompatible: t3, children: i2 } = e3;
    return [t3 ? this.renderItemTooltip(e3) : null, ...t3 ? [] : i2 == null ? void 0 : i2.toArray().map((e4) => this.renderItemTooltipNodes(e4))];
  }
  renderItemTooltips() {
    return this.visibleItems.toArray().map((e3) => this.renderItemTooltipNodes(e3));
  }
  renderNoItems() {
    return n2("div", { class: R.noItems }, this.messages.noItemsToDisplay);
  }
  renderItems() {
    const { visibleItems: e3, selectionEnabled: t3, messages: i2 } = this;
    return n2("ul", { "aria-label": i2.widgetLabel, role: t3 ? "listbox" : void 0, afterCreate: this._sortNodeCreated, afterUpdate: this._sortNodeCreated, afterRemoved: this._sortNodeRemoved, "data-group": N, bind: this, class: this.classes(R.list, R.listRoot, R.listIndependent) }, e3 == null ? void 0 : e3.map((e4) => this.renderItem(e4, null)).toArray());
  }
  renderActionsMenuIcon(e3, t3) {
    const { messagesCommon: i2 } = this, s3 = { [R.actionsMenuItemActive]: e3.actionsOpen };
    return n2("div", { key: "actions-menu-toggle", "data-item": e3, bind: this, onclick: this._toggleActionsOpen, onkeydown: this._toggleActionsOpen, class: this.classes(R.actionsMenuItem, s3), tabindex: "0", role: "button", "aria-controls": t3, "aria-label": i2.options, title: i2.options }, n2("span", { "aria-hidden": "true", class: R.iconEllipses }));
  }
  renderActionsMenu(e3, t3, i2, s3) {
    const { panel: o3 } = e3, n3 = o3 && o3.visible ? this.renderPanelButton(o3) : null, r = 1 === i2 && this._getSingleActionButton(t3), l2 = r ? this.renderAction({ item: e3, action: r, singleAction: true }) : null, a3 = !r && i2 ? this.renderActionsMenuIcon(e3, s3) : null;
    return a3 || n3 || r ? n2("div", { key: "actions-menu", class: R.actionsMenu }, n3, l2, a3) : null;
  }
  renderChildList(e3, t3) {
    var _a;
    const { selectionEnabled: i2 } = this, { visibilityMode: s3, children: o3 } = e3, n3 = this._hasChildren(e3), r = !n3 && i2 && "group" === ((_a = e3.layer) == null ? void 0 : _a.type), { exclusive: l2, inherited: a3 } = U, c2 = { [R.listExclusive]: s3 === l2, [R.listInherited]: s3 === a3, [R.listIndependent]: s3 !== a3 && s3 !== l2 };
    return n3 || r ? n2("ul", { bind: this, key: "list-items", id: t3, "data-group": e3.uid, "data-item": e3, afterCreate: this._sortNodeCreated, afterUpdate: this._sortNodeCreated, afterRemoved: this._sortNodeRemoved, class: this.classes(R.list, c2), "aria-expanded": e3.open ? "true" : "false", role: i2 ? "listbox" : s3 === l2 ? "radiogroup" : "group", hidden: !e3.open && !r || null }, o3 == null ? void 0 : o3.map((t4) => this.renderItem(t4, e3)).toArray()) : null;
  }
  renderChildrenToggle(e3, t3) {
    const { messagesCommon: i2 } = this, s3 = this._hasChildren(e3), o3 = { [R.childToggleOpen]: e3.open }, n3 = e3.open ? i2.collapse : i2.expand;
    return s3 ? n2("span", { onclick: this._toggleChildrenClick, onkeydown: this._toggleChildrenClick, "data-item": e3, key: "toggle-children", class: this.classes(R.childToggle, o3), tabindex: "0", role: "button", "aria-controls": t3, "aria-label": n3, title: n3 }, n2("span", { "aria-hidden": "true", class: this.classes(R.childClosed, R.iconRightArrow) }), n2("span", { "aria-hidden": "true", class: this.classes(R.childOpened, R.iconDownArrow) }), n2("span", { "aria-hidden": "true", class: this.classes(R.childClosed_RTL, R.iconLeftArrow) })) : null;
  }
  renderItemMessage(e3) {
    return e3.error ? n2("div", { key: "esri-layer-list__error", class: R.message, role: "alert" }, n2("span", { "aria-hidden": "true", class: R.iconNoticeTriangle }), this.messages.layerError) : e3.incompatible ? n2("div", { key: "esri-layer-list__incompatible", class: R.message, role: "alert" }, n2("span", { bind: this, tabIndex: 0, "aria-hidden": "true", class: R.iconNoticeTriangle, afterCreate: (t3) => this._setTooltipReference(t3, e3) }), this.messages.layerIncompatible) : null;
  }
  renderItemContent(e3, t3, i2) {
    const { id: s3 } = this, o3 = `${s3}_${e3.uid}`, n3 = `${o3}_actions`, r = `${o3}__list`, { panel: l2 } = e3, a3 = this._filterActions(e3.actionsSections), c2 = this._countActions(a3);
    return [n2("div", { key: "list-item-container", class: R.itemContainer }, this.renderChildrenToggle(e3, r), this.renderLabel(e3, t3, i2), this.renderActionsMenu(e3, a3, c2, n3)), this.renderItemMessage(e3), c2 ? this.renderActionsSections(e3, a3, n3) : null, l2 && l2.open ? l2.render() : null, this.renderChildList(e3, r)];
  }
  renderItem(e3, t3) {
    var _a;
    const { _newUI: i2, id: s3, selectionEnabled: o3, selectedItems: n3, visibleElements: r } = this, l2 = `${`${s3}_${e3.uid}`}__title`, a3 = this._hasMessage(e3), c2 = this._hasChildren(e3), d2 = { [R.itemChildren]: c2, [R.itemMessage]: !!a3, [R.itemUpdating]: e3.updating && !t3 && r.statusIndicators, [R.itemInvisible]: i2 && !e3.visible, [R.itemInvisibleAtScale]: !e3.visibleAtCurrentScale, [R.itemSelectable]: o3 };
    if (o3) {
      const i3 = { [T]: (_a = e3.layer) == null ? void 0 : _a.uid, [M]: (!e3.sortable).toString() };
      return n2("li", { key: `item-with-selection-${e3.uid}`, bind: this, afterCreate: this._focusListItem, afterUpdate: this._focusListItem, class: this.classes(R.item, d2), "aria-labelledby": l2, onclick: this._toggleSelection, onkeydown: this._selectionKeydown, "data-item": e3, "data-group": t3 ? t3.uid : N, tabIndex: 0, "aria-selected": f(e3, n3) ? "true" : "false", role: "option", ...i3 }, this.renderItemContent(e3, t3, l2));
    }
    return n2("li", { key: `item-no-selection-${e3.uid}`, bind: this, afterCreate: this._focusListItem, afterUpdate: this._focusListItem, class: this.classes(R.item, d2), "aria-labelledby": l2 }, this.renderItemContent(e3, t3, l2));
  }
  renderItemConnectionStatus(e3) {
    const { connectionStatus: t3 } = e3;
    return t3 ? n2("span", { class: this.classes({ [R.connectionStatus]: true, [R.connectionStatusDisconnected]: "disconnected" === t3, [R.connectionStatusConnected]: "connected" === t3 }), key: "layer-connection-status" }) : null;
  }
  renderItemTitle(e3, t3) {
    const { messages: i2 } = this;
    if (!e3)
      return null;
    const s3 = e3.title || i2.untitledLayer, o3 = e3.visibleAtCurrentScale ? s3 : `${s3} (${i2.layerInvisibleAtScale})`;
    return n2("span", { key: "layer-title-container", id: t3, title: o3, "aria-label": o3, class: R.title }, s3);
  }
  renderItemToggleIcon(e3, t3) {
    const { _newUI: i2 } = this, { exclusive: s3 } = U, o3 = t3 && t3.visibilityMode, n3 = { [R.toggleVisibleIcon]: i2, [R.toggleIcon]: i2 && o3 !== s3, [R.radioIcon]: i2 && o3 === s3, [R.iconRadioSelected]: o3 === s3 && e3.visible, [R.iconRadioUnselected]: o3 === s3 && !e3.visible, [R.iconVisible]: o3 !== s3 && e3.visible, [R.iconInvisible]: o3 !== s3 && !e3.visible };
    return n2("span", { key: "item-toggle-icon", class: this.classes(n3), "aria-hidden": "true" });
  }
  renderItemToggle(e3, t3, i2) {
    const { selectionEnabled: s3, messages: o3 } = this, { exclusive: n3 } = U, r = t3 && t3.visibilityMode, l2 = r === n3 ? "radio" : "switch";
    return n2("span", s3 ? { key: "item-toggle-selection-enabled", class: R.toggleVisible, bind: this, onclick: this._toggleVisibility, onkeydown: this._toggleVisibility, "data-item": e3, "data-parent-visibility": r, tabIndex: 0, title: e3.visible ? o3.hideLayer : o3.showLayer, "aria-checked": e3.visible ? "true" : "false", role: l2, "aria-labelledby": i2 } : { key: "item-toggle", class: R.toggleVisible }, this.renderItemToggleIcon(e3, t3));
  }
  renderLabel(e3, t3, i2) {
    const { selectionEnabled: s3, _newUI: o3, messages: n3 } = this, { inherited: r, exclusive: l2 } = U, a3 = t3 == null ? void 0 : t3.visibilityMode, c2 = a3 === l2 ? "radio" : "switch", d2 = [this.renderItemToggle(e3, t3, i2), this.renderItemConnectionStatus(e3), this.renderItemTitle(e3, i2)];
    o3 && d2.reverse();
    const h2 = n2("div", s3 ? { key: `item-label-no-selection-${e3.uid}`, class: R.label } : { key: `item-label-with-selection-${e3.uid}`, class: R.label, bind: this, onclick: this._toggleVisibility, onkeydown: this._toggleVisibility, "data-item": e3, "data-parent-visibility": a3, tabIndex: 0, "aria-checked": e3.visible ? "true" : "false", title: e3.visible ? n3.hideLayer : n3.showLayer, role: c2, "aria-labelledby": i2 }, d2);
    return a3 === r || e3.error ? n2("div", { key: `item-label-container-${e3.uid}`, class: R.label }, this.renderItemTitle(e3, i2)) : h2;
  }
  renderPanelButton(e3) {
    const { className: t3, open: i2, title: s3, image: o3 } = e3, n3 = o3 || t3 ? t3 : R.iconDefaultAction, r = this._getIconImageStyles(e3), l2 = { [R.actionsMenuItemActive]: i2 }, a3 = { [R.actionImage]: !!r["background-image"] };
    return n3 && (a3[n3] = !!n3), n2("div", { key: `panel-${e3.uid}`, bind: this, "data-panel": e3, onclick: this._triggerPanel, onkeydown: this._triggerPanel, class: this.classes(R.actionsMenuItem, l2), role: "button", tabindex: "0", title: s3, "aria-label": s3 }, n2("span", { class: this.classes(a3), styles: r }));
  }
  renderActionsSections(e3, t3, i2) {
    const s3 = t3.toArray().map((t4, i3) => n2("ul", { key: `${e3}-action-section-${i3}`, class: R.actionsList }, this.renderActionSection(e3, t4)));
    return n2("div", { role: "group", "aria-expanded": e3.actionsOpen ? "true" : "false", key: "actions-section", id: i2, class: R.actions, hidden: !e3.actionsOpen || null }, s3);
  }
  renderActionSection(e3, t3) {
    return (t3 && t3.toArray()).map((t4) => this.renderAction({ item: e3, action: t4 }));
  }
  renderActionIcon(e3) {
    const { active: t3, className: i2 } = e3, s3 = this._getIconImageStyles(e3), o3 = "button" !== e3.type || e3.image || i2 ? i2 : R.iconDefaultAction, n3 = { [R.actionImage]: !t3 && !!s3["background-image"], [R.iconLoading]: t3, [R.rotating]: t3 };
    return o3 && !t3 && (n3[o3] = true), n2("span", { key: "action-icon", "aria-hidden": "true", class: this.classes(R.actionIcon, n3), styles: s3 });
  }
  renderActionTitle(e3, t3) {
    return t3 ? null : n2("span", { key: "action-title", class: R.actionTitle }, e3);
  }
  renderAction(e3) {
    const { item: t3, action: i2, singleAction: s3 } = e3, { active: o3, disabled: n3, title: r } = i2, l2 = { [R.actionsMenuItem]: s3 && "button" === i2.type, [R.action]: o3 || !s3 && "toggle" !== i2.type, [R.actionToggle]: !o3 && "toggle" === i2.type, [R.actionToggleOn]: !o3 && "toggle" === i2.type && i2.value, [R.disabledElement]: n3 }, a3 = [this.renderActionIcon(i2), this.renderActionTitle(r, s3)];
    return s3 ? n2("div", { bind: this, "data-item": t3, "data-action": i2, role: "button", key: `single-action-${i2.uid}`, onclick: this._triggerAction, onkeydown: this._triggerAction, classes: l2, tabindex: "0", title: r, "aria-label": r }, a3) : n2("li", { bind: this, "data-item": t3, "data-action": i2, key: `action-${i2.uid}`, onclick: this._triggerAction, onkeydown: this._triggerAction, classes: l2, tabindex: "0", role: "button", title: r, "aria-label": r }, a3);
  }
  _setTooltipReference(e3, t3) {
    this._tooltipReferenceMap.set(t3.uid, e3), this.scheduleRender();
  }
  _hasMessage(e3) {
    return !!e3.error || e3.incompatible;
  }
  _hasChildren(e3) {
    return !!e3.children.length && !this._hasMessage(e3);
  }
  _sortNodeRemoved(e3) {
    const { _sortableMap: t3 } = this, i2 = e3.dataset.group, s3 = t3.get(i2);
    s3 && s3.destroy(), t3.delete(i2);
  }
  _destroySortables() {
    const { _sortableMap: e3, _sortableNodes: t3 } = this;
    e3.forEach((e4) => e4 && e4.destroy()), e3.clear(), t3.clear();
  }
  _moveLayerFromChildList({ to: e3, from: t3, item: i2, newIndex: s3 }) {
    const o3 = i2["data-item"], n3 = e3["data-item"], r = t3["data-item"];
    this.viewModel.moveListItem(o3, r, n3, s3);
  }
  _sortLayers(e3) {
    var _a, _b;
    if (!e3)
      return;
    const t3 = e3.el["data-item"], i2 = e3.toArray();
    t3 ? c(t3, i2) : s2((_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.layers, i2);
  }
  _toggleSorting(e3, t3) {
    const { _sortableMap: i2, selectionEnabled: s3 } = this, o3 = i2.get(t3), n3 = e3["data-item"], r = (t3 === N || n3.childrenSortable && o2(n3)) && s3;
    if (o3)
      o3.option("disabled", !r);
    else if (r) {
      const s4 = sortable_esm_default.create(e3, { dataIdAttr: T, group: { name: t3, pull: this._sortableCanPull, put: this._sortableCanPut }, filter: `[${M}="true"]`, fallbackTolerance: 4, onSort: this._onSortableSort, onEnd: this._onSortableEnd, disabled: !r, chosenClass: R.sortableChosen });
      i2.set(t3, s4);
    }
  }
  _toggleAllSorting() {
    this._sortableNodes.forEach((e3, t3) => this._toggleSorting(e3, t3));
  }
  _sortNodeCreated(e3) {
    const t3 = e3.dataset.group;
    t3 && (this._sortableNodes.set(t3, e3), this._toggleSorting(e3, t3));
  }
  _setVisibleItems(e3) {
    this.visibleItems = e3 == null ? void 0 : e3.filter((e4) => !e4.hidden && (this.errorsVisible || !e4.error));
  }
  _getSingleActionButton(e3) {
    return e3.reduce((e4) => e4).filter((e4) => e4 && "button" === e4.type).getItemAt(0);
  }
  _focusListItem(e3) {
    var _a;
    const { _focusSortUid: t3 } = this;
    if (!e3 || !t3)
      return;
    ((_a = e3["data-item"].layer) == null ? void 0 : _a.uid) === t3 && (e3.focus(), this._focusSortUid = null);
  }
  _watchActionSectionChanges(e3, t3) {
    const i2 = x.actionSection + t3;
    this._handles.add(e3.on("change", this.scheduleRender.bind(this)), i2), e3.forEach((e4) => this._renderOnActionChanges(e4, t3));
  }
  _renderOnActionChanges(e3, t3) {
    const i2 = x.actions + t3;
    "toggle" !== e3.type ? "slider" !== e3.type ? this._handles.add(l(() => [e3 == null ? void 0 : e3.className, e3 == null ? void 0 : e3.image, e3 == null ? void 0 : e3.id, e3 == null ? void 0 : e3.title, e3 == null ? void 0 : e3.visible], () => this.scheduleRender(), h), i2) : this._handles.add(l(() => [e3 == null ? void 0 : e3.className, e3 == null ? void 0 : e3.id, e3 == null ? void 0 : e3.title, e3 == null ? void 0 : e3.visible, e3 == null ? void 0 : e3.value, e3 == null ? void 0 : e3.displayValueEnabled, e3 == null ? void 0 : e3.max, e3 == null ? void 0 : e3.min, e3 == null ? void 0 : e3.step], () => this.scheduleRender(), h), i2) : this._handles.add(l(() => [e3 == null ? void 0 : e3.className, e3 == null ? void 0 : e3.image, e3 == null ? void 0 : e3.id, e3 == null ? void 0 : e3.title, e3 == null ? void 0 : e3.visible, e3 == null ? void 0 : e3.value], () => this.scheduleRender(), h), i2);
  }
  _renderOnItemChanges(e3) {
    const t3 = e3.uid, i2 = x.items + t3;
    this._handles.add([l(() => {
      var _a, _b, _c;
      return [e3 == null ? void 0 : e3.actionsOpen, e3 == null ? void 0 : e3.visible, e3 == null ? void 0 : e3.open, e3 == null ? void 0 : e3.updating, e3 == null ? void 0 : e3.title, e3 == null ? void 0 : e3.visibleAtCurrentScale, e3 == null ? void 0 : e3.error, e3 == null ? void 0 : e3.visibilityMode, e3 == null ? void 0 : e3.panel, (_a = e3 == null ? void 0 : e3.panel) == null ? void 0 : _a.title, (_b = e3 == null ? void 0 : e3.panel) == null ? void 0 : _b.content, (_c = e3 == null ? void 0 : e3.panel) == null ? void 0 : _c.className, e3 == null ? void 0 : e3.sortable, e3 == null ? void 0 : e3.childrenSortable];
    }, () => this.scheduleRender(), w), l(() => [e3 == null ? void 0 : e3.hidden, e3 == null ? void 0 : e3.error], () => this._setVisibleItems(this.operationalItems)), e3.actionsSections.on("change", () => this.scheduleRender()), e3.children.on("change", () => this.scheduleRender())], i2), e3.children.forEach((e4) => this._renderOnItemChanges(e4)), e3.actionsSections.forEach((e4) => this._watchActionSectionChanges(e4, t3));
  }
  _itemsChanged(e3) {
    this._handles.removeAll(), e3.forEach((e4) => this._renderOnItemChanges(e4)), this._tooltipReferenceMap.clear(), this._setVisibleItems(e3), this.scheduleRender();
  }
  _filterActions(e3) {
    return e3.map((e4) => e4.filter((e5) => e5.visible));
  }
  _countActions(e3) {
    return e3.reduce((e4, t3) => e4 + t3.length, 0);
  }
  _getIconImageStyles(e3) {
    const t3 = "esri.widgets.LayerList.ListItemPanel" === e3.declaredClass || "esri.support.Action.ActionButton" === e3.declaredClass || "esri.support.Action.ActionToggle" === e3.declaredClass ? e3.image : null;
    return { "background-image": t3 ? `url("${t3}")` : null };
  }
  _selectionKeydown(e3) {
    var _a, _b, _c, _d;
    const t3 = ["ArrowDown", "ArrowUp"], s3 = i(e3);
    if (!t3.includes(s3))
      return void this._toggleSelection(e3);
    e3.stopPropagation();
    const o3 = e3.currentTarget, n3 = o3["data-item"], { _sortableMap: r, selectedItems: l2 } = this, a3 = o3.dataset.group, c2 = r.get(a3);
    if (!c2)
      return;
    const d2 = f(n3, l2), h2 = c2.toArray(), m = e3.target, g = h2.indexOf(m.dataset[E]);
    if (-1 !== g) {
      if ("ArrowDown" === s3) {
        const e4 = g + 1;
        if (e4 >= h2.length)
          return;
        d2 ? (S(h2, g, e4), c2.sort(h2), this._sortLayers(c2), this._focusSortUid = (_a = n3.layer) == null ? void 0 : _a.uid) : (this._focusSortUid = (_b = n3.layer) == null ? void 0 : _b.uid, this.scheduleRender());
      }
      if ("ArrowUp" === s3) {
        const e4 = g - 1;
        if (e4 <= -1)
          return;
        d2 ? (S(h2, g, e4), c2.sort(h2), this._sortLayers(c2), this._focusSortUid = (_c = n3.layer) == null ? void 0 : _c.uid) : (this._focusSortUid = (_d = n3.layer) == null ? void 0 : _d.uid, this.scheduleRender());
      }
    }
  }
  _toggleActionsOpen(e3) {
    const t3 = e3.currentTarget["data-item"], { actionsOpen: i2 } = t3, s3 = !i2;
    s3 && this.operationalItems.forEach((e4) => O2(e4)), t3.actionsOpen = s3, e3.stopPropagation();
  }
  _triggerPanel(e3) {
    const t3 = e3.currentTarget["data-panel"];
    t3 && (t3.open = !t3.open), e3.stopPropagation();
  }
  _triggerAction(e3) {
    const t3 = e3.currentTarget, i2 = t3["data-action"], s3 = t3["data-item"];
    "toggle" === i2.type && (i2.value = !i2.value), this.triggerAction(i2, s3), e3.stopPropagation();
  }
  _toggleVisibility(e3) {
    const t3 = e3.currentTarget, i2 = t3.getAttribute("data-parent-visibility"), s3 = t3["data-item"];
    i2 === U.exclusive && s3.visible || (s3.visible = !s3.visible), e3.stopPropagation();
  }
  _toggleChildrenClick(e3) {
    const t3 = e3.currentTarget["data-item"];
    t3.open = !t3.open, e3.stopPropagation();
  }
  _toggleSelection(e3) {
    var _a, _b;
    e3.stopPropagation();
    const { multipleSelectionEnabled: t3, selectedItems: i2 } = this, s3 = e3.currentTarget["data-item"], o3 = f(s3, i2), { length: n3 } = i2;
    if (!t3)
      return n3 && !(o3 && 1 === n3) ? (i2.removeAll(), void i2.add(s3)) : void (o3 ? (_a = i2.remove) == null ? void 0 : _a.call(i2, o3) : i2.add(s3));
    o3 ? (_b = i2.remove) == null ? void 0 : _b.call(i2, o3) : i2.add(s3);
  }
};
e([d()], j2.prototype, "visibleItems", void 0), e([d()], j2.prototype, "iconClass", void 0), e([d()], j2.prototype, "errorsVisible", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], j2.prototype, "label", void 0), e([d()], j2.prototype, "listItemCanGiveFunction", void 0), e([d()], j2.prototype, "listItemCanReceiveFunction", void 0), e([o("viewModel.listItemCreatedFunction")], j2.prototype, "listItemCreatedFunction", void 0), e([d(), e2("esri/widgets/LayerList/t9n/LayerList")], j2.prototype, "messages", void 0), e([d(), e2("esri/t9n/common")], j2.prototype, "messagesCommon", void 0), e([d()], j2.prototype, "multipleSelectionEnabled", void 0), e([o("viewModel.operationalItems")], j2.prototype, "operationalItems", void 0), e([d()], j2.prototype, "selectionEnabled", void 0), e([d()], j2.prototype, "selectedItems", void 0), e([o("viewModel.view")], j2.prototype, "view", void 0), e([t2("trigger-action"), d({ type: v })], j2.prototype, "viewModel", void 0), e([d()], j2.prototype, "visibleElements", void 0), e([s("visibleElements")], j2.prototype, "castVisibleElements", null), e([o("viewModel.triggerAction")], j2.prototype, "triggerAction", null), e([t()], j2.prototype, "_toggleActionsOpen", null), e([t()], j2.prototype, "_triggerPanel", null), e([t()], j2.prototype, "_triggerAction", null), e([t()], j2.prototype, "_toggleVisibility", null), e([t()], j2.prototype, "_toggleChildrenClick", null), e([t()], j2.prototype, "_toggleSelection", null), j2 = e([n("esri.widgets.LayerList")], j2);
var $ = j2;
export {
  $ as default
};
//# sourceMappingURL=@arcgis_core_widgets_LayerList.js.map
