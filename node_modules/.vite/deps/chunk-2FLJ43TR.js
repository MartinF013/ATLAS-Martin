import {
  t as t2
} from "./chunk-EY24INV2.js";
import {
  l as l2,
  m as m3,
  s as s5,
  u
} from "./chunk-3DTDACBY.js";
import {
  n as n3
} from "./chunk-ZG7SHSSS.js";
import {
  Ke
} from "./chunk-7LOJJ46D.js";
import {
  l
} from "./chunk-WKHS6QIX.js";
import {
  d as d3
} from "./chunk-T47JAOQZ.js";
import {
  d as d2
} from "./chunk-FU5UMT3R.js";
import {
  b
} from "./chunk-GSFXXEAM.js";
import {
  n as n2
} from "./chunk-C7S44TP4.js";
import {
  S as S2
} from "./chunk-BUWXVMJU.js";
import {
  p,
  y
} from "./chunk-JT3LXQ47.js";
import {
  x
} from "./chunk-LJLQIETB.js";
import {
  B
} from "./chunk-EI4MOLML.js";
import {
  r as r2
} from "./chunk-2HDG7SIE.js";
import {
  m as m2
} from "./chunk-HVM5D6S5.js";
import {
  m
} from "./chunk-FTLBKDGL.js";
import {
  s as s4
} from "./chunk-H7JF6Q7A.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s2 as s3
} from "./chunk-HFTNOKM2.js";
import {
  S
} from "./chunk-23NWA6WL.js";
import {
  s as s2
} from "./chunk-CVWDM4C7.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/layers/buildingSublayers/BuildingSublayer.js
var l3 = class extends s4(S2) {
  constructor(r3) {
    super(r3), this.title = "", this.id = -1, this.modelName = null, this.isEmpty = null, this.visible = true, this.opacity = 1;
  }
  readTitle(r3, e2) {
    return "string" == typeof e2.alias ? e2.alias : "string" == typeof e2.name ? e2.name : "";
  }
  readIdOnlyOnce(r3) {
    return -1 !== this.id ? this.id : "number" == typeof r3 ? r3 : void 0;
  }
};
e([d({ type: String, json: { origins: { "web-scene": { write: true }, "portal-item": { write: true } } } })], l3.prototype, "title", void 0), e([o("service", "title", ["alias", "name"])], l3.prototype, "readTitle", null), e([d()], l3.prototype, "layer", void 0), e([d({ type: S, readOnly: true, json: { read: false, write: { ignoreOrigin: true } } })], l3.prototype, "id", void 0), e([o("service", "id")], l3.prototype, "readIdOnlyOnce", null), e([d(y(String))], l3.prototype, "modelName", void 0), e([d(y(Boolean))], l3.prototype, "isEmpty", void 0), e([d({ type: Boolean, json: { name: "visibility", write: true } })], l3.prototype, "visible", void 0), e([d({ type: Number, json: { write: true } })], l3.prototype, "opacity", void 0), l3 = e([n("esri.layers.buildingSublayers.BuildingSublayer")], l3);
var n4 = l3;

// node_modules/@arcgis/core/layers/buildingSublayers/BuildingComponentSublayer.js
var P = s2.getLogger("esri.layers.buildingSublayers.BuildingComponentSublayer");
var D = l();
var Q = class extends m2.LoadableMixin(m(n4)) {
  constructor(e2) {
    super(e2), this.type = "building-component", this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.fields = null, this.associatedLayer = null, this.outFields = null, this.listMode = "show", this.renderer = null, this.definitionExpression = null, this.popupEnabled = true, this.popupTemplate = null, this.layerType = "3d-object";
  }
  get parsedUrl() {
    return this.layer ? { path: `${this.layer.parsedUrl.path}/sublayers/${this.id}`, query: this.layer.parsedUrl.query } : null;
  }
  get fieldsIndex() {
    return new d2(this.fields);
  }
  readAssociatedLayer(e2, r3) {
    const t3 = this.layer.associatedFeatureServiceItem, o2 = r3.associatedLayerID;
    return r(t3) && "number" == typeof o2 ? new Ke({ portalItem: t3, layerId: o2 }) : null;
  }
  get objectIdField() {
    if (null != this.fields) {
      for (const e2 of this.fields)
        if ("oid" === e2.type)
          return e2.name;
    }
    return null;
  }
  get displayField() {
    return r(this.associatedLayer) ? this.associatedLayer.displayField : null;
  }
  get apiKey() {
    return this.layer.apiKey;
  }
  get fullExtent() {
    return this.layer.fullExtent;
  }
  get spatialReference() {
    return this.layer.spatialReference;
  }
  get version() {
    return this.layer.version;
  }
  get elevationInfo() {
    return this.layer.elevationInfo;
  }
  get minScale() {
    return this.layer.minScale;
  }
  get maxScale() {
    return this.layer.maxScale;
  }
  get effectiveScaleRange() {
    return this.layer.effectiveScaleRange;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  load(e2) {
    const r3 = r(e2) ? e2.signal : null, t3 = this._fetchService(r3).then(() => {
      this.indexInfo = n3(this.parsedUrl.path, this.rootNode, this.nodePages, this.apiKey, P, r3);
    });
    return this.addResolvingPromise(t3), Promise.resolve(this);
  }
  createPopupTemplate(e2) {
    return d3(this, e2);
  }
  async _fetchService(e2) {
    const r3 = (await U(this.parsedUrl.path, { query: { f: "json", token: this.apiKey }, responseType: "json", signal: e2 })).data;
    this.read(r3, { origin: "service", url: this.parsedUrl });
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  getFieldDomain(e2, r3) {
    var _a, _b, _c;
    const t3 = (_b = (_a = this.getFeatureType(r3 == null ? void 0 : r3.feature)) == null ? void 0 : _a.domains) == null ? void 0 : _b[e2];
    return t3 && "inherited" !== t3.type ? t3 : ((_c = this.getField(e2)) == null ? void 0 : _c.domain) ?? null;
  }
  getFeatureType(e2) {
    return e2 && r(this.associatedLayer) ? this.associatedLayer.getFeatureType(e2) : null;
  }
  get types() {
    return r(this.associatedLayer) ? this.associatedLayer.types : [];
  }
  get typeIdField() {
    return r(this.associatedLayer) ? this.associatedLayer.typeIdField : null;
  }
  get geometryType() {
    return "3d-object" === this.layerType ? "mesh" : "point";
  }
  get profile() {
    return "3d-object" === this.layerType ? "mesh-pyramids" : "points";
  }
  get capabilities() {
    const e2 = r(this.associatedLayer) && this.associatedLayer.capabilities ? this.associatedLayer.capabilities : t2, { query: r3, data: { supportsZ: t3, supportsM: o2, isVersioned: s6 } } = e2;
    return { query: r3, data: { supportsZ: t3, supportsM: o2, isVersioned: s6 } };
  }
  createQuery() {
    const e2 = new b();
    return "mesh" !== this.geometryType && (e2.returnGeometry = true, e2.returnZ = true), e2.where = this.definitionExpression || "1=1", e2.sqlFormat = "standard", e2;
  }
  queryExtent(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t3) => t3.queryExtent(e2 || this.createQuery(), r3));
  }
  queryFeatureCount(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t3) => t3.queryFeatureCount(e2 || this.createQuery(), r3));
  }
  queryFeatures(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t3) => t3.queryFeatures(e2 || this.createQuery(), r3)).then((e3) => {
      if (e3 == null ? void 0 : e3.features)
        for (const r4 of e3.features)
          r4.layer = this.layer, r4.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, r3) {
    return this._getAssociatedLayerForQuery().then((t3) => t3.queryObjectIds(e2 || this.createQuery(), r3));
  }
  getFieldUsageInfo(e2) {
    return this.fieldsIndex.has(e2) ? { supportsLabelingInfo: false, supportsRenderer: false, supportsPopupTemplate: false, supportsLayerQuery: false } : { supportsLabelingInfo: false, supportsRenderer: true, supportsPopupTemplate: true, supportsLayerQuery: r(this.associatedLayer) };
  }
  _getAssociatedLayerForQuery() {
    const e2 = this.associatedLayer;
    return r(e2) && e2.loaded ? Promise.resolve(e2) : this._loadAssociatedLayerForQuery();
  }
  async _loadAssociatedLayerForQuery() {
    if (await this.load(), t(this.associatedLayer))
      throw new s3("buildingscenelayer:query-not-available", "BuildingSceneLayer component layer queries are not available without an associated feature layer", { layer: this });
    try {
      await this.associatedLayer.load();
    } catch (e2) {
      throw new s3("buildingscenelayer:query-not-available", "BuildingSceneLayer associated feature layer could not be loaded", { layer: this, error: e2 });
    }
    return this.associatedLayer;
  }
};
e([d({ readOnly: true })], Q.prototype, "parsedUrl", null), e([d({ type: s5, readOnly: true })], Q.prototype, "nodePages", void 0), e([d({ type: [l2], readOnly: true })], Q.prototype, "materialDefinitions", void 0), e([d({ type: [u], readOnly: true })], Q.prototype, "textureSetDefinitions", void 0), e([d({ type: [m3], readOnly: true })], Q.prototype, "geometryDefinitions", void 0), e([d({ readOnly: true })], Q.prototype, "serviceUpdateTimeStamp", void 0), e([d({ readOnly: true })], Q.prototype, "store", void 0), e([d({ type: String, readOnly: true, json: { read: { source: "store.rootNode" } } })], Q.prototype, "rootNode", void 0), e([d({ readOnly: true })], Q.prototype, "attributeStorageInfo", void 0), e([d(D.fields)], Q.prototype, "fields", void 0), e([d({ readOnly: true })], Q.prototype, "fieldsIndex", null), e([d({ readOnly: true, type: Ke })], Q.prototype, "associatedLayer", void 0), e([o("service", "associatedLayer", ["associatedLayerID"])], Q.prototype, "readAssociatedLayer", null), e([d(D.outFields)], Q.prototype, "outFields", void 0), e([d({ type: String, readOnly: true })], Q.prototype, "objectIdField", null), e([d({ readOnly: true, type: String, json: { read: false } })], Q.prototype, "displayField", null), e([d({ readOnly: true, type: String })], Q.prototype, "apiKey", null), e([d({ readOnly: true, type: M })], Q.prototype, "fullExtent", null), e([d({ readOnly: true, type: k })], Q.prototype, "spatialReference", null), e([d({ readOnly: true })], Q.prototype, "version", null), e([d({ readOnly: true, type: x })], Q.prototype, "elevationInfo", null), e([d({ readOnly: true, type: Number })], Q.prototype, "minScale", null), e([d({ readOnly: true, type: Number })], Q.prototype, "maxScale", null), e([d({ readOnly: true, type: Number })], Q.prototype, "effectiveScaleRange", null), e([d({ type: ["hide", "show"], json: { write: true } })], Q.prototype, "listMode", void 0), e([d({ types: n2, json: { origins: { service: { read: { source: "drawingInfo.renderer" } } }, name: "layerDefinition.drawingInfo.renderer", write: true }, value: null })], Q.prototype, "renderer", void 0), e([d({ type: String, json: { origins: { service: { read: false, write: false } }, name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], Q.prototype, "definitionExpression", void 0), e([d(p)], Q.prototype, "popupEnabled", void 0), e([d({ type: B, json: { read: { source: "popupInfo" }, write: { target: "popupInfo" } } })], Q.prototype, "popupTemplate", void 0), e([d({ readOnly: true, type: String, json: { origins: { service: { read: { source: "store.normalReferenceFrame" } } }, read: false } })], Q.prototype, "normalReferenceFrame", void 0), e([d({ readOnly: true, json: { read: false } })], Q.prototype, "defaultPopupTemplate", null), e([d()], Q.prototype, "types", null), e([d()], Q.prototype, "typeIdField", null), e([d({ json: { write: false } }), r2(new s({ "3DObject": "3d-object", Point: "point" }))], Q.prototype, "layerType", void 0), e([d()], Q.prototype, "geometryType", null), e([d()], Q.prototype, "profile", null), e([d({ readOnly: true, json: { read: false } })], Q.prototype, "capabilities", null), Q = e([n("esri.layers.buildingSublayers.BuildingComponentSublayer")], Q);
var E = Q;

export {
  n4 as n,
  E
};
//# sourceMappingURL=chunk-2FLJ43TR.js.map
