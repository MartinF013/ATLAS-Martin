import {
  i
} from "./chunk-U7I6IKUN.js";
import {
  a
} from "./chunk-7LOTF6IL.js";
import {
  S
} from "./chunk-72PB636Q.js";
import {
  x
} from "./chunk-RIOXX6J2.js";
import {
  E,
  K,
  j
} from "./chunk-53KI6WDE.js";
import {
  c
} from "./chunk-ZYIEYKCD.js";
import {
  Bn
} from "./chunk-PZWU5EHT.js";
import {
  te
} from "./chunk-RN2KRYDN.js";
import {
  F,
  o,
  r
} from "./chunk-PKZEO23A.js";
import {
  n
} from "./chunk-AIRC226G.js";
import {
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/support/euclideanAreaMeasurementUtils.js
function h(t2, r2 = d()) {
  return y(t2, r2);
}
function j2(t2, r2 = d()) {
  return y(t2, r2, false);
}
function y(e, h2, j3 = e.hasZ) {
  const y2 = i(e.spatialReference), d2 = te(y2);
  if (t(d2))
    return null;
  const R2 = (t2, r2) => !(r2.length < 2) && (o(t2, r2[0], r2[1], j3 && r2[2] || 0), true);
  let U = 0;
  for (const t2 of e.rings) {
    if (t2.length < 3)
      continue;
    const { positionsWorldCoords: r2 } = h2;
    for (; r2.length < t2.length; )
      r2.push(n());
    const o2 = k;
    for (let n2 = 0; n2 < 3; n2++) {
      if (!R2(o2, t2[n2]))
        return null;
      if (!Bn(o2, e.spatialReference, r2[n2], y2))
        return null;
    }
    if (F(r2[0], r2[1]) || F(r2[0], r2[2]) || F(r2[1], r2[2]))
      continue;
    const i2 = j(r2[0], r2[1], r2[2], E()), g = r(c.get(), r2[0]);
    for (let t3 = 0; t3 < 3; t3++)
      K(i2, g, r2[t3], r2[t3]);
    for (let n2 = 3; n2 < t2.length; n2++) {
      if (!R2(o2, t2[n2]))
        return null;
      Bn(o2, e.spatialReference, r2[n2], y2), K(i2, g, r2[n2], r2[n2]);
    }
    const j4 = v(r2);
    for (let t3 = 0; t3 < j4.length; t3 += 3)
      U += S(r2[j4[t3]], r2[j4[t3 + 1]], r2[j4[t3 + 2]]);
  }
  return a(U, d2);
}
var k = n();
function d() {
  return { positionsWorldCoords: [] };
}
function v(t2) {
  return x(R(t2), [], 2);
}
function R(t2) {
  const r2 = new Float64Array(2 * t2.length);
  for (let o2 = 0; o2 < t2.length; ++o2) {
    const e = t2[o2], n2 = 2 * o2;
    r2[n2 + 0] = e[0], r2[n2 + 1] = e[1];
  }
  return r2;
}

export {
  h,
  j2 as j,
  d,
  v
};
//# sourceMappingURL=chunk-OPQ375VL.js.map
