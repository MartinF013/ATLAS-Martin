import {
  r as r2
} from "./chunk-ZIHDQYKE.js";
import {
  o as o2
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  E,
  o,
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/core/timeUtils.js
var e2 = { milliseconds: 1, seconds: 1e3, minutes: 6e4, hours: 36e5, days: 864e5, weeks: 6048e5, months: 26784e5, years: 31536e6, decades: 31536e7, centuries: 31536e8 };
var t = { milliseconds: { getter: "getMilliseconds", setter: "setMilliseconds", multiplier: 1 }, seconds: { getter: "getSeconds", setter: "setSeconds", multiplier: 1 }, minutes: { getter: "getMinutes", setter: "setMinutes", multiplier: 1 }, hours: { getter: "getHours", setter: "setHours", multiplier: 1 }, days: { getter: "getDate", setter: "setDate", multiplier: 1 }, weeks: { getter: "getDate", setter: "setDate", multiplier: 7 }, months: { getter: "getMonth", setter: "setMonth", multiplier: 1 }, years: { getter: "getFullYear", setter: "setFullYear", multiplier: 1 }, decades: { getter: "getFullYear", setter: "setFullYear", multiplier: 10 }, centuries: { getter: "getFullYear", setter: "setFullYear", multiplier: 100 } };
function s(e3, t2) {
  const s2 = new Date(e3, t2 + 1, 1);
  return s2.setDate(0), s2.getDate();
}
function n2(e3, n3, r3) {
  const l3 = new Date(e3.getTime());
  if (n3 && r3) {
    const e4 = t[r3], { getter: u2, setter: i, multiplier: a } = e4;
    if ("months" === r3) {
      const e5 = s(l3.getFullYear(), l3.getMonth() + n3);
      l3.getDate() > e5 && l3.setDate(e5);
    }
    l3[i](l3[u2]() + n3 * a);
  }
  return l3;
}
function l2(e3, t2) {
  switch (t2) {
    case "milliseconds":
      return new Date(e3.getTime());
    case "seconds":
      return new Date(e3.getFullYear(), e3.getMonth(), e3.getDate(), e3.getHours(), e3.getMinutes(), e3.getSeconds());
    case "minutes":
      return new Date(e3.getFullYear(), e3.getMonth(), e3.getDate(), e3.getHours(), e3.getMinutes());
    case "hours":
      return new Date(e3.getFullYear(), e3.getMonth(), e3.getDate(), e3.getHours());
    case "days":
      return new Date(e3.getFullYear(), e3.getMonth(), e3.getDate());
    case "weeks":
      return new Date(e3.getFullYear(), e3.getMonth(), e3.getDate() - e3.getDay());
    case "months":
      return new Date(e3.getFullYear(), e3.getMonth(), 1);
    case "years":
      return new Date(e3.getFullYear(), 0, 1);
    case "decades":
      return new Date(e3.getFullYear() - e3.getFullYear() % 10, 0, 1);
    case "centuries":
      return new Date(e3.getFullYear() - e3.getFullYear() % 100, 0, 1);
    default:
      return /* @__PURE__ */ new Date();
  }
}
function g(t2, s2, n3) {
  if (0 === t2)
    return 0;
  return t2 * e2[s2] / e2[n3];
}

// node_modules/@arcgis/core/TimeExtent.js
var u;
var d2 = u = class extends l {
  constructor(t2) {
    super(t2), this.end = null, this.start = null;
  }
  static get allTime() {
    return c;
  }
  static get empty() {
    return h;
  }
  readEnd(t2, e3) {
    return null != e3.end ? new Date(e3.end) : null;
  }
  writeEnd(t2, e3) {
    e3.end = t2 ? t2.getTime() : null;
  }
  get isAllTime() {
    return this.equals(u.allTime);
  }
  get isEmpty() {
    return this.equals(u.empty);
  }
  readStart(t2, e3) {
    return null != e3.start ? new Date(e3.start) : null;
  }
  writeStart(t2, e3) {
    e3.start = t2 ? t2.getTime() : null;
  }
  clone() {
    return new u({ end: this.end, start: this.start });
  }
  equals(t2) {
    if (!t2)
      return false;
    const e3 = r(this.start) ? this.start.getTime() : this.start, s2 = r(this.end) ? this.end.getTime() : this.end, i = r(t2.start) ? t2.start.getTime() : t2.start, n3 = r(t2.end) ? t2.end.getTime() : t2.end;
    return e3 === i && s2 === n3;
  }
  expandTo(t2) {
    if (this.isEmpty || this.isAllTime)
      return this.clone();
    const e3 = o(this.start, (e4) => l2(e4, t2)), r3 = o(this.end, (e4) => n2(l2(e4, t2), 1, t2));
    return new u({ start: e3, end: r3 });
  }
  intersection(t2) {
    if (!t2)
      return this.clone();
    if (this.isEmpty || t2.isEmpty)
      return u.empty;
    if (this.isAllTime)
      return t2.clone();
    if (t2.isAllTime)
      return this.clone();
    const e3 = E(this.start, -1 / 0, (t3) => t3.getTime()), r3 = E(this.end, 1 / 0, (t3) => t3.getTime()), s2 = E(t2.start, -1 / 0, (t3) => t3.getTime()), n3 = E(t2.end, 1 / 0, (t3) => t3.getTime());
    let o3, l3;
    if (s2 >= e3 && s2 <= r3 ? o3 = s2 : e3 >= s2 && e3 <= n3 && (o3 = e3), r3 >= s2 && r3 <= n3 ? l3 = r3 : n3 >= e3 && n3 <= r3 && (l3 = n3), !isNaN(o3) && !isNaN(l3)) {
      const t3 = new u();
      return t3.start = o3 === -1 / 0 ? null : new Date(o3), t3.end = l3 === 1 / 0 ? null : new Date(l3), t3;
    }
    return u.empty;
  }
  offset(t2, e3) {
    if (this.isEmpty || this.isAllTime)
      return this.clone();
    const s2 = new u(), { start: i, end: n3 } = this;
    return r(i) && (s2.start = n2(i, t2, e3)), r(n3) && (s2.end = n2(n3, t2, e3)), s2;
  }
  union(t2) {
    if (!t2 || t2.isEmpty)
      return this.clone();
    if (this.isEmpty)
      return t2.clone();
    if (this.isAllTime || t2.isAllTime)
      return c.clone();
    const e3 = r(this.start) && r(t2.start) ? new Date(Math.min(this.start.getTime(), t2.start.getTime())) : null, s2 = r(this.end) && r(t2.end) ? new Date(Math.max(this.end.getTime(), t2.end.getTime())) : null;
    return new u({ start: e3, end: s2 });
  }
};
e([d({ type: Date, json: { write: { allowNull: true } } })], d2.prototype, "end", void 0), e([o2("end")], d2.prototype, "readEnd", null), e([r2("end")], d2.prototype, "writeEnd", null), e([d({ readOnly: true, json: { read: false } })], d2.prototype, "isAllTime", null), e([d({ readOnly: true, json: { read: false } })], d2.prototype, "isEmpty", null), e([d({ type: Date, json: { write: { allowNull: true } } })], d2.prototype, "start", void 0), e([o2("start")], d2.prototype, "readStart", null), e([r2("start")], d2.prototype, "writeStart", null), d2 = u = e([n("esri.TimeExtent")], d2);
var c = new d2();
var h = new d2({ start: void 0, end: void 0 });
var y = d2;

export {
  n2 as n,
  g,
  y
};
//# sourceMappingURL=chunk-TBT57L4K.js.map
