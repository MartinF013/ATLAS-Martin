import {
  o
} from "./chunk-DMJWTK32.js";
import {
  A,
  C,
  P,
  k2 as k,
  r as r2,
  s,
  w
} from "./chunk-3NMRL5CR.js";
import {
  e,
  s as s2,
  t as t2
} from "./chunk-SN4RUQ4N.js";
import {
  c,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/geometry/projectionEllipsoid.js
function T(e2) {
  return new k({ wkt: `GEOCCS["Spherical geocentric",
    DATUM["Not specified",
      SPHEROID["Sphere",${e2.radius},0]],
    PRIMEM["Greenwich",0.0,
      AUTHORITY["EPSG","8901"]],
    UNIT["m",1.0],
    AXIS["Geocentric X",OTHER],
    AXIS["Geocentric Y",EAST],
    AXIS["Geocentric Z",NORTH]
  ]` });
}
var G = T(s2);
var I = T(t2);
var E = T(e);
var R = new k({ wkt: `GEOCCS["WGS 84",
  DATUM["WGS_1984",
    SPHEROID["WGS 84",${s2.radius},298.257223563,
      AUTHORITY["EPSG","7030"]],
    AUTHORITY["EPSG","6326"]],
  PRIMEM["Greenwich",0,
    AUTHORITY["EPSG","8901"]],
  UNIT["m",1.0,
    AUTHORITY["EPSG","9001"]],
  AXIS["Geocentric X",OTHER],
  AXIS["Geocentric Y",OTHER],
  AXIS["Geocentric Z",NORTH],
  AUTHORITY["EPSG","4978"]
]` });
function O(n) {
  return n && (P(n) || n === I) ? I : n && (s(n) || n === E) ? E : G;
}
function p(n) {
  return n && (P(n) || n === I) ? t2 : n && (s(n) || n === E) ? e : s2;
}
function u(n) {
  return w(n) ? t2 : C(n) ? e : s2;
}

// node_modules/@arcgis/core/core/unitUtils.js
var d = 39.37;
var U = s2.radius * Math.PI / 200;
var q = /UNIT\[([^\]]+)\]\]$/i;
var p2 = r2;
var h = /UNIT\[([^\]]+)\]/i;
var B = /* @__PURE__ */ new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]);
var b = o()({ meter: "meters", foot: "feet", foot_us: "us-feet", foot_clarke: "clarke-feet", yard_clarke: "clarke-yards", link_clarke: "clarke-links", yard_sears: "sears-yards", foot_sears: "sears-feet", chain_sears: "sears-chains", chain_benoit_1895_b: "benoit-1895-b-chains", yard_indian: "indian-yards", yard_indian_1937: "indian-1937-yards", foot_gold_coast: "gold-coast-feet", chain_sears_1922_truncated: "sears-1922-truncated-chains", "50_kilometers": "50-kilometers", "150_kilometers": "150-kilometers" });
var k2 = (e2) => e2 * e2;
var y = (e2) => e2 * e2 * e2;
var g = { length: { baseUnit: "meters", units: { millimeters: { inBaseUnits: 1e-3 }, centimeters: { inBaseUnits: 0.01 }, decimeters: { inBaseUnits: 0.1 }, meters: { inBaseUnits: 1 }, kilometers: { inBaseUnits: 1e3 }, inches: { inBaseUnits: 0.0254 }, feet: { inBaseUnits: 0.3048 }, yards: { inBaseUnits: 0.9144 }, miles: { inBaseUnits: 1609.344 }, "nautical-miles": { inBaseUnits: 1852 }, "us-feet": { inBaseUnits: 1200 / 3937 } } }, area: { baseUnit: "square-meters", units: { "square-millimeters": { inBaseUnits: k2(1e-3) }, "square-centimeters": { inBaseUnits: k2(0.01) }, "square-decimeters": { inBaseUnits: k2(0.1) }, "square-meters": { inBaseUnits: 1 }, "square-kilometers": { inBaseUnits: k2(1e3) }, "square-inches": { inBaseUnits: k2(0.0254) }, "square-feet": { inBaseUnits: k2(0.3048) }, "square-yards": { inBaseUnits: k2(0.9144) }, "square-miles": { inBaseUnits: k2(1609.344) }, "square-us-feet": { inBaseUnits: k2(1200 / 3937) }, acres: { inBaseUnits: 15625e-7 * k2(1609.344) }, ares: { inBaseUnits: 100 }, hectares: { inBaseUnits: 1e4 } } }, volume: { baseUnit: "liters", units: { liters: { inBaseUnits: 1 }, "cubic-millimeters": { inBaseUnits: 1e3 * y(1e-3) }, "cubic-centimeters": { inBaseUnits: 1e3 * y(0.01) }, "cubic-decimeters": { inBaseUnits: 1e3 * y(0.1) }, "cubic-meters": { inBaseUnits: 1e3 }, "cubic-kilometers": { inBaseUnits: 1e3 * y(1e3) }, "cubic-inches": { inBaseUnits: 1e3 * y(0.0254) }, "cubic-feet": { inBaseUnits: 1e3 * y(0.3048) }, "cubic-yards": { inBaseUnits: 1e3 * y(0.9144) }, "cubic-miles": { inBaseUnits: 1e3 * y(1609.344) } } }, angle: { baseUnit: "radians", units: { radians: { inBaseUnits: 1 }, degrees: { inBaseUnits: Math.PI / 180 } } } };
var _ = (() => {
  const e2 = {};
  for (const s3 in g)
    for (const t3 in g[s3].units)
      e2[t3] = s3;
  return e2;
})();
function M(e2, s3, t3) {
  return e2 * g[t3].units[s3].inBaseUnits;
}
function w2(e2, s3, t3) {
  return e2 / g[t3].units[s3].inBaseUnits;
}
var S = ["metric", "imperial", "square-inches", "square-feet", "square-yards", "square-miles", "square-us-feet", "square-meters", "square-kilometers", "acres", "ares", "hectares"];
var j = ["metric", "imperial", "inches", "feet", "yards", "miles", "nautical-miles", "us-feet", "meters", "kilometers"];
var I2 = /* @__PURE__ */ new Map([["meters", "square-meters"], ["feet", "square-feet"], ["us-feet", "square-us-feet"]]);
function P2(e2) {
  return "imperial" === e2 || "metric" === e2;
}
function C2(e2) {
  const s3 = _[e2];
  if (!s3)
    throw new Error("unknown type");
  return s3;
}
function E2(e2, s3 = null) {
  return s3 = s3 || C2(e2), g[s3].baseUnit === e2;
}
function N(e2, s3, t3) {
  if (s3 === t3)
    return e2;
  const r3 = C2(s3);
  if (r3 !== C2(t3))
    throw new Error("incompatible units");
  const i = E2(s3, r3) ? e2 : M(e2, s3, r3);
  return E2(t3, r3) ? i : w2(i, t3, r3);
}
function v(e2, s3, t3) {
  switch (t3) {
    case "metric":
      return R2(e2, s3);
    case "imperial":
      return K(e2, s3);
    default:
      return t3;
  }
}
function F(e2, s3, t3) {
  switch (t3) {
    case "metric":
      return J(e2, s3);
    case "imperial":
      return A2(e2, s3);
    default:
      return t3;
  }
}
function R2(e2, s3) {
  const t3 = N(e2, s3, "meters");
  return Math.abs(t3) < 3e3 ? "meters" : "kilometers";
}
function J(e2, s3) {
  const t3 = N(e2, s3, "meters");
  return Math.abs(t3) < 1e5 ? "meters" : "kilometers";
}
function K(e2, s3) {
  const t3 = N(e2, s3, "feet");
  return Math.abs(t3) < 1e3 ? "feet" : "miles";
}
function A2(e2, s3) {
  const t3 = N(e2, s3, "feet");
  return Math.abs(t3) < 1e5 ? "feet" : "miles";
}
function T2(e2, s3) {
  const t3 = N(e2, s3, "square-meters");
  return Math.abs(t3) < 3e6 ? "square-meters" : "square-kilometers";
}
function Y(e2, s3) {
  const t3 = N(e2, s3, "square-feet");
  return Math.abs(t3) < 1e6 ? "square-feet" : "square-miles";
}
function G2(e2, s3, t3) {
  return N(e2, s3, "meters") / (t3 * Math.PI / 180);
}
function H(e2) {
  return b.fromJSON(e2.toLowerCase()) || null;
}
function W(e2) {
  if (e2 && "object" == typeof e2 && !A(e2))
    return 1;
  const s3 = z(e2);
  return s3 > 1e5 ? 1 : s3;
}
function $(e2) {
  return z(e2) >= (e2 instanceof k ? p(e2).metersPerDegree : 1e5) ? "meters" : Z(e2);
}
function z(e2, t3 = s2.metersPerDegree) {
  return c(Q(e2, true), t3);
}
function Q(e2, s3 = false) {
  let t3, r3, i = null;
  if (null != e2 && ("object" == typeof e2 ? (t3 = e2.wkid, r3 = e2.wkt) : "number" == typeof e2 ? t3 = e2 : "string" == typeof e2 && (r3 = e2)), t3) {
    if (w(t3))
      return t2.metersPerDegree;
    if (C(t3))
      return e.metersPerDegree;
    i = p2.values[p2[t3]], !i && s3 && B.has(t3) && (i = U);
  } else
    r3 && (ie(r3) ? i = V(q.exec(r3), i) : re(r3) && (i = V(h.exec(r3), i)));
  return i;
}
function V(e2, s3) {
  return e2 && e2[1] ? X(e2[1]) : s3;
}
function X(e2) {
  return parseFloat(e2.split(",")[1]);
}
function Z(e2) {
  let s3, r3, i = null;
  if (null != e2 && ("object" == typeof e2 ? (s3 = e2.wkid, r3 = e2.wkt) : "number" == typeof e2 ? s3 = e2 : "string" == typeof e2 && (r3 = e2)), s3)
    i = p2.units[p2[s3]];
  else if (r3) {
    const e3 = ie(r3) ? q : re(r3) ? h : null;
    if (e3) {
      const s4 = e3.exec(r3);
      s4 && s4[1] && (i = ae(s4[1]));
    }
  }
  return r(i) ? H(i) : null;
}
function ee(e2) {
  const s3 = Z(e2);
  return t(s3) || !j.includes(s3) ? null : s3;
}
function se(e2) {
  const s3 = $(e2);
  return t(s3) || !j.includes(s3) ? null : s3;
}
function te(e2) {
  const s3 = Z(e2);
  return t(s3) ? null : I2.get(s3);
}
function re(e2) {
  return /^GEOCCS/i.test(e2);
}
function ie(e2) {
  return /^PROJCS/i.test(e2);
}
var ne = 1e-7;
function ae(e2) {
  const s3 = /[\\"\\']{1}([^\\"\\']+)/.exec(e2);
  let t3 = s3 && s3[1];
  if (!t3 || !p2.units.includes(t3)) {
    const s4 = X(e2);
    t3 = null;
    const r3 = p2.values;
    for (let e3 = 0; e3 < r3.length; ++e3)
      if (Math.abs(s4 - r3[e3]) < ne) {
        t3 = p2.units[e3];
        break;
      }
  }
  return t3;
}
function ue(e2) {
  const s3 = Z(e2);
  if (t(s3))
    return null;
  switch (s3) {
    case "feet":
    case "us-feet":
    case "clarke-feet":
    case "clarke-yards":
    case "clarke-links":
    case "sears-yards":
    case "sears-feet":
    case "sears-chains":
    case "benoit-1895-b-chains":
    case "indian-yards":
    case "indian-1937-yards":
    case "gold-coast-feet":
    case "sears-1922-truncated-chains":
      return "imperial";
    case "50-kilometers":
    case "150-kilometers":
    case "meters":
      return "metric";
  }
  return null;
}
function ce(e2) {
  var _a, _b;
  const t3 = "metric";
  if (t(e2))
    return t3;
  const i = e2.map, n = i && "portalItem" in i ? (_a = i.portalItem) == null ? void 0 : _a.portal : null;
  if (n) {
    switch (((_b = n == null ? void 0 : n.user) == null ? void 0 : _b.units) ?? n.units) {
      case t3:
        return t3;
      case "english":
        return "imperial";
    }
  }
  return c(ue(e2.spatialReference), t3);
}
var oe = { esriAcres: "acres", esriAres: "ares", esriHectares: "hectares", esriSquareCentimeters: "square-centimeters", esriSquareDecimeters: "square-decimeters", esriSquareFeet: "square-feet", esriSquareInches: "square-inches", esriSquareKilometers: "square-kilometers", esriSquareMeters: "square-meters", esriSquareMiles: "square-miles", esriSquareMillimeters: "square-millimeters", esriSquareUsFeet: "square-us-feet", esriSquareYards: "square-yards" };
var le = { esriCentimeters: "centimeters", esriDecimeters: "decimeters", esriFeet: "feet", esriInches: "inches", esriKilometers: "kilometers", esriMeters: "meters", esriMiles: "miles", esriMillimeters: "millimeters", esriNauticalMiles: "nautical-miles", esriYards: "yards" };
var me = o()(oe);
var fe = o()(le);
var de = o()({ ...oe, ...le });

export {
  G,
  I,
  E,
  R,
  O,
  p,
  u,
  d,
  S,
  j,
  P2 as P,
  C2 as C,
  N,
  v,
  F,
  R2,
  J,
  K,
  A2 as A,
  T2 as T,
  Y,
  G2,
  H,
  W,
  $,
  z,
  Z,
  ee,
  se,
  te,
  ce,
  me,
  fe
};
//# sourceMappingURL=chunk-RN2KRYDN.js.map
