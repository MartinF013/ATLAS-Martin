import {
  e as e3,
  t as t2
} from "./chunk-ZUEYZA7M.js";
import "./chunk-74GUBHRJ.js";
import "./chunk-E447OCKN.js";
import {
  t
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  P,
  a,
  f
} from "./chunk-T7BEWVV3.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import "./chunk-XRL56EGK.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/Expand/ExpandViewModel.js
var l = class extends y {
  constructor(e4) {
    super(e4), this._viewpointHandle = null, this._handles = new u(), this.group = null;
  }
  initialize() {
    this._handles.add(a(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ui;
    }, "expand", (e4) => {
      const { target: t3 } = e4;
      t3 && t3 !== this && t3.expanded && t3.group && t3.group === this.group && this._collapse();
    }));
  }
  destroy() {
    this._viewpointHandle = null, this.view = null, this._handles.destroy(), this._handles = null;
  }
  set autoCollapse(e4) {
    this._set("autoCollapse", e4), this._watchViewpoint();
  }
  set expanded(e4) {
    const t3 = !!e4;
    this._set("expanded", t3);
    const s = this.get("view.ui");
    s && s.emit("expand", { target: this }), this._viewpointHandleChange(t3);
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  set view(e4) {
    this._get("view") !== e4 && (this._set("view", e4), e4 && f(() => e4.ready, () => {
      this.view === e4 && this._watchViewpoint();
    }, { once: true, initial: true }));
  }
  _viewpointHandleChange(e4) {
    this._viewpointHandle && (e4 ? f(() => this.view.stationary, () => this._viewpointHandle.resume(), { once: true, initial: true }) : this._viewpointHandle.pause());
  }
  _watchViewpoint() {
    const e4 = "viewpoint";
    this._handles.remove(e4), this._viewpointHandle = null;
    const { autoCollapse: t3, view: s } = this;
    if (s && t3) {
      const t4 = P(() => "3d" === s.type ? s.camera : s.viewpoint, () => this._collapse());
      this._handles.add(t4, e4), this._viewpointHandle = t4;
    }
  }
  _collapse() {
    this.expanded = false;
  }
};
e([d({ value: false })], l.prototype, "autoCollapse", null), e([d({ value: false })], l.prototype, "expanded", null), e([d()], l.prototype, "group", void 0), e([d({ readOnly: true })], l.prototype, "state", null), e([d({ value: null })], l.prototype, "view", null), l = e([n("esri.widgets.Expand.ExpandViewModel")], l);
var p = l;

// node_modules/@arcgis/core/widgets/Expand.js
var c = { base: "esri-expand esri-widget", modeAuto: "esri-expand--auto", modeDrawer: "esri-expand--drawer", modeFloating: "esri-expand--floating", container: "esri-expand__container", containerExpanded: "esri-expand__container--expanded", panel: "esri-expand__panel", button: "esri-widget--button", text: "esri-icon-font-fallback-text", icon: "esri-collapse__icon", iconExpanded: "esri-expand__icon--expanded", iconNumber: "esri-expand__icon-number", iconNumberExpanded: "esri-expand__icon-number--expanded", expandIcon: "esri-icon-expand", collapseIcon: "esri-icon-collapse", content: "esri-expand__content", contentExpanded: "esri-expand__content--expanded", expandMask: "esri-expand__mask", expandMaskExpanded: "esri-expand__mask--expanded" };
var u2 = class extends O {
  constructor(e4, t3) {
    super(e4, t3), this.autoCollapse = null, this.closeOnEsc = true, this.collapseTooltip = "", this.content = "", this.expanded = null, this.expandTooltip = "", this.group = null, this.iconNumber = 0, this.label = void 0, this.messages = null, this.messagesCommon = null, this.mode = "auto", this.view = null, this.viewModel = new p(), this._handleKeyDown = (e5) => {
      const { closeOnEsc: t4, _toggleButtonEl: o2, expanded: n3 } = this;
      if (!n3 || !t4 || e5.target === o2 || "Escape" !== e5.key)
        return;
      ("function" == typeof t4 ? t4(e5) : t4) && (this.expanded = false, o2 == null ? void 0 : o2.focus());
    };
  }
  get contentId() {
    return `${this.id}_controls_content`;
  }
  get expandTitle() {
    const { expanded: e4, messagesCommon: t3, collapseTooltip: o2, expandTooltip: n3 } = this;
    return e4 ? o2 || t3.collapse : n3 || t3.expand;
  }
  get collapseIconClass() {
    return c.collapseIcon;
  }
  set collapseIconClass(e4) {
    e4 ? this._override("collapseIconClass", e4) : this._clearOverride("collapseIconClass");
  }
  get expandIconClass() {
    return e3(this.content) ? this.content.iconClass : c.expandIcon;
  }
  set expandIconClass(e4) {
    e4 ? this._override("expandIconClass", e4) : this._clearOverride("expandIconClass");
  }
  expand() {
    this.viewModel.expanded = true;
  }
  collapse() {
    this.viewModel.expanded = false;
  }
  toggle() {
    this.viewModel.expanded = !this.viewModel.expanded;
  }
  render() {
    const { mode: e4 } = this, t3 = { [c.modeAuto]: "auto" === e4, [c.modeDrawer]: "drawer" === e4, [c.modeFloating]: "floating" === e4 };
    return n2("div", { class: this.classes(c.base, t3), onkeydown: this._handleKeyDown }, this.renderMask(), this.renderContainer());
  }
  renderContainer() {
    const { expanded: e4 } = this, t3 = { [c.containerExpanded]: e4 };
    return n2("div", { class: this.classes(c.container, t3) }, this.renderPanel(), this.renderContent());
  }
  renderMask() {
    const { expanded: e4 } = this, t3 = { [c.expandMaskExpanded]: e4 };
    return n2("div", { bind: this, onclick: this._toggle, class: this.classes(c.expandMask, t3) });
  }
  renderBadgeNumber() {
    const { expanded: e4, iconNumber: t3 } = this;
    return t3 && !e4 ? n2("span", { key: "expand__icon-number", class: c.iconNumber }, t3) : null;
  }
  renderPanelNumber() {
    const { iconNumber: e4, expanded: t3 } = this;
    return e4 && t3 ? n2("span", { key: "expand__expand-icon-number", class: this.classes(c.iconNumber, c.iconNumberExpanded) }, e4) : null;
  }
  renderIcon() {
    const { collapseIconClass: e4, expandIconClass: t3, expanded: o2 } = this, n3 = { [c.iconExpanded]: o2, [e4]: o2, [t3]: !o2 };
    return e4 === t3 && (n3[e4] = true), n2("span", { "aria-hidden": "true", class: this.classes(c.icon, n3) });
  }
  renderTitle() {
    return n2("span", { class: c.text }, this.expandTitle);
  }
  renderExpandButton() {
    const { expanded: e4, expandTitle: t3, contentId: o2 } = this;
    return n2("div", { afterCreate: this._storeToggleButtonEl, "aria-controls": o2, "aria-expanded": e4 ? "true" : "false", bind: this, class: c.button, onclick: this._toggle, onkeydown: this._toggle, role: "button", tabindex: "0", title: t3 }, this.renderBadgeNumber(), this.renderIcon(), this.renderTitle());
  }
  renderPanel() {
    return n2("div", { class: c.panel }, this.renderExpandButton(), this.renderPanelNumber());
  }
  renderContent() {
    const { expanded: e4, contentId: t3, content: o2 } = this, n3 = { [c.contentExpanded]: e4 }, s = { id: t3, role: "region", class: this.classes(c.content, n3) };
    return "string" == typeof o2 ? n2("div", { key: "content__string", innerHTML: o2, ...s }) : e3(o2) ? n2("div", { key: "content__widget", ...s }, o2.render()) : o2 instanceof HTMLElement ? n2("div", { key: "content__html-element", bind: o2, afterCreate: this._attachToNode, ...s }) : t2(o2) ? n2("div", { key: "content__node", bind: o2.domNode, afterCreate: this._attachToNode, ...s }) : null;
  }
  _toggle() {
    this.toggle();
  }
  _attachToNode(e4) {
    const t3 = this;
    e4.appendChild(t3);
  }
  _storeToggleButtonEl(e4) {
    this._toggleButtonEl = e4;
  }
};
e([d({ readOnly: true })], u2.prototype, "contentId", null), e([d({ readOnly: true })], u2.prototype, "expandTitle", null), e([o("viewModel.autoCollapse")], u2.prototype, "autoCollapse", void 0), e([d()], u2.prototype, "closeOnEsc", void 0), e([d()], u2.prototype, "collapseIconClass", null), e([d()], u2.prototype, "collapseTooltip", void 0), e([d()], u2.prototype, "content", void 0), e([o("viewModel.expanded")], u2.prototype, "expanded", void 0), e([d()], u2.prototype, "expandIconClass", null), e([d()], u2.prototype, "expandTooltip", void 0), e([o("viewModel.group")], u2.prototype, "group", void 0), e([d()], u2.prototype, "iconNumber", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], u2.prototype, "label", void 0), e([d(), e2("esri/widgets/Expand/t9n/Expand")], u2.prototype, "messages", void 0), e([d(), e2("esri/t9n/common")], u2.prototype, "messagesCommon", void 0), e([d()], u2.prototype, "mode", void 0), e([o("viewModel.view")], u2.prototype, "view", void 0), e([d({ type: p })], u2.prototype, "viewModel", void 0), e([t()], u2.prototype, "_toggle", null), u2 = e([n("esri.widgets.Expand")], u2);
var x = u2;
export {
  x as default
};
//# sourceMappingURL=@arcgis_core_widgets_Expand.js.map
