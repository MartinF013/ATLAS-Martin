import {
  v
} from "./chunk-7LOTF6IL.js";
import {
  $,
  B,
  D,
  F,
  I,
  M,
  d,
  h,
  j,
  l,
  p,
  w,
  x,
  y
} from "./chunk-GT2OBOXC.js";
import {
  c
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/core/quantityFormatUtils.js
function g(t, a, n, u = 2, i = "abbr") {
  return l(t, v(a, n).value, n, u, i);
}
function L(t, e, n, u = 2, i = "abbr") {
  return p(t, v(e, n).value, n, u, i);
}
function M2(t, r, e = 2, a = "abbr") {
  return D(t, r.value, r.unit, e, a);
}
function d2(t, r, e = 2, a = "abbr") {
  return F(t, r.value, r.unit, e, a);
}
function w2(t, r, e = 2, a = "abbr") {
  return x(t, r.value, r.unit, e, a);
}
function I2(t, r, e = 2, a = "abbr") {
  return h(t, r.value, r.unit, e, a);
}
function R(t, r, e = 2, a = "abbr") {
  return $(t, r.value, r.unit, e, a);
}
function y2(t, r, e = 2, a = "abbr") {
  return y(t, r.value, r.unit, e, a);
}
function V(t, r, e = 2, a = "abbr") {
  return d(t, r.value, r.unit, e, a);
}
function j2(t, r, e = 2, a = "abbr") {
  return j(t, r.value, r.unit, e, a);
}
function D2(t, r, e = 2, a = "abbr") {
  return B(t, r.value, r.unit, e, a);
}
function A(t, r, e = 2, a = "abbr") {
  return M(t, r.value, r.unit, e, a);
}
function U(t, r, e) {
  return w(t.value, t.unit, t.rotationType, r, e);
}
function q(t, r, e) {
  return I(t.value, t.unit, t.rotationType, r, e);
}
function x2(r, e, a, n, u = "abbr") {
  switch (n = c(n, 2), a) {
    case "imperial":
      return y2(r, e, n, u);
    case "metric":
      return M2(r, e, n, u);
    default:
      return g(r, e, a, n, u);
  }
}
function F2(t, r, e, a = 2, n = "abbr") {
  switch (e) {
    case "imperial":
      return V(t, r, a, n);
    case "metric":
      return d2(t, r, a, n);
    default:
      return L(t, r, e, a, n);
  }
}
function S2(t, r, e, a = 2, n = "abbr") {
  switch (e) {
    case "imperial":
      return j2(t, r, a, n);
    case "metric":
      return w2(t, r, a, n);
    default:
      return g(t, r, e, a, n);
  }
}
function k(t, r, e, a = 2, n = "abbr") {
  switch (e) {
    case "imperial":
      return D2(t, r, a, n);
    case "metric":
      return I2(t, r, a, n);
    default:
      return L(t, r, e, a, n);
  }
}
function z(t, r, e, a = 2, n = "abbr") {
  switch (e) {
    case "imperial":
      return A(t, r, a, n);
    case "metric":
      return R(t, r, a, n);
    default:
      return g(t, r, e, a, n);
  }
}

export {
  g,
  M2 as M,
  w2 as w,
  y2 as y,
  j2 as j,
  U,
  q,
  x2 as x,
  F2 as F,
  S2 as S,
  k,
  z
};
//# sourceMappingURL=chunk-VOFRIPQR.js.map
