import {
  n as n3
} from "./chunk-GKYJJGE3.js";
import {
  o
} from "./chunk-KSOWE6GO.js";
import {
  h as h2,
  n as n2
} from "./chunk-Y5AGUEHG.js";
import {
  a as a2
} from "./chunk-BOVIIQLB.js";
import {
  c as c2
} from "./chunk-DMGVDNFD.js";
import {
  e as e3
} from "./chunk-46N7XS5M.js";
import {
  a
} from "./chunk-OYAHQ564.js";
import {
  e as e2
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  e
} from "./chunk-YFBAFAZ2.js";
import {
  c,
  h
} from "./chunk-ASC3X65B.js";

// node_modules/@arcgis/core/chunks/ShadowCastAccumulate.glsl.js
var w = class extends n2 {
};
var u = 255;
var g = 1 / u;
function v() {
  const r = new i(), i2 = r.fragment;
  return i2.include(a), i2.include(a2), r.include(n3), r.include(o), r.include(h2, { receiveShadows: true }), i2.uniforms.add([new c2("depthMap", (e4) => e4.linearDepthTexture), new e3("inverseViewMatrix", (r2, o2) => h(f, c(f, o2.camera.viewMatrix, o2.camera.center))), new e2("nearFar", (e4, a3) => a3.camera.nearFar)]), i2.constants.add("sampleValue", "float", g), i2.code.add(n`void main(void) {
float depth = rgba2float(texture2D(depthMap, uv));
if (depth == 0.0) {
discard;
}
float currentPixelDepth = linearDepthFromFloat(depth, nearFar);
if (-currentPixelDepth > nearFar.y || -currentPixelDepth < nearFar.x) {
discard;
}
vec4 currentPixelPos = vec4(reconstructPosition(gl_FragCoord.xy, currentPixelDepth), 1.0);
vec4 worldSpacePos = inverseViewMatrix * currentPixelPos;
mat4 shadowMatrix;
float linearDepth = -currentPixelDepth;
int i = chooseCascade(linearDepth, shadowMatrix);
if (i >= numCascades) {
discard;
}
vec3 lvpos = lightSpacePosition(worldSpacePos.xyz, shadowMatrix);
if (lvpos.z >= 1.0 || lvpos.x < 0.0 || lvpos.x > 1.0 || lvpos.y < 0.0 || lvpos.y > 1.0) {
discard;
}
vec2 uvShadow = cascadeCoordinates(i, lvpos);
float depthShadow = readShadowMapDepth(uvShadow, shadowMapTex);
bool shadow = depthShadow < lvpos.z;
if (!shadow) {
discard;
}
gl_FragColor = vec4(sampleValue);
}`), r;
}
var f = e();
var x = Object.freeze(Object.defineProperty({ __proto__: null, ShadowCastAccumulatePassParameters: w, shadowCastMaxSamples: u, build: v }, Symbol.toStringTag, { value: "Module" }));

export {
  w,
  u,
  v,
  x
};
//# sourceMappingURL=chunk-GR7E5OAR.js.map
