import {
  u
} from "./chunk-QNKOXOOY.js";
import {
  y
} from "./chunk-TBT57L4K.js";
import {
  s as s4
} from "./chunk-H7JF6Q7A.js";
import {
  s as s3
} from "./chunk-XRL56EGK.js";
import {
  r as r2
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import {
  b
} from "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  m
} from "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/webdoc/support/SlideThumbnail.js
var t2;
var p = t2 = class extends l {
  constructor() {
    super(...arguments), this.url = "";
  }
  destroy() {
    this.url = "";
  }
  clone() {
    return new t2({ url: this.url });
  }
};
e([d({ type: String, json: { write: { isRequired: true } } })], p.prototype, "url", void 0), p = t2 = e([n("esri.webdoc.support.SlideThumbnail")], p);

// node_modules/@arcgis/core/webmap/Bookmark.js
var h;
var j = "esri.webmap.Bookmark";
var b2 = s.getLogger(j);
var v = h = class extends s4(l) {
  constructor(t3) {
    super(t3), this.name = null, this.thumbnail = new p(), this.timeExtent = null;
  }
  castThumbnail(t3) {
    return "string" == typeof t3 ? new p({ url: t3 }) : b(p, t3);
  }
  set viewpoint(t3) {
    const { targetGeometry: e2, scale: o2 } = t3;
    r(e2) && "point" === e2.type && t(o2) && b2.warn("Bookmark.viewpoint should include 'scale' when its targetGeometry is a point.", t3), this._set("viewpoint", t3);
  }
  readViewpoint(t3, e2) {
    const { extent: r3, viewpoint: i } = e2;
    return u.fromJSON(i || { targetGeometry: r3 });
  }
  writeViewpoint(t3, e2, o2, i) {
    if (!t3)
      return;
    const { targetGeometry: s5 } = t3;
    if (r(s5) && "extent" !== s5.type) {
      const t4 = "Bookmark.viewpoint cannot be written to JSON when the viewpoint's targetGeometry is not an extent.";
      (i == null ? void 0 : i.messages) ? i.messages.push(new s2("property:unsupported", t4)) : b2.error(t4);
    } else
      r(s5) && (e2.extent = s5.toJSON()), e2[o2] = t3.toJSON();
  }
  clone() {
    return new h(m({ name: this.name, thumbnail: this.thumbnail, timeExtent: this.timeExtent, viewpoint: this.viewpoint }));
  }
};
e([d({ type: String, nonNullable: true, json: { write: { isRequired: true } } })], v.prototype, "name", void 0), e([d({ type: p, json: { write: { overridePolicy: (t3) => ({ enabled: !(!t3 || !t3.url) }) } } })], v.prototype, "thumbnail", void 0), e([s3("thumbnail")], v.prototype, "castThumbnail", null), e([d({ type: y, json: { write: true } })], v.prototype, "timeExtent", void 0), e([d({ type: u, nonNullable: true, json: { write: true } })], v.prototype, "viewpoint", null), e([o("viewpoint", ["extent", "viewpoint"])], v.prototype, "readViewpoint", null), e([r2("viewpoint")], v.prototype, "writeViewpoint", null), v = h = e([n(j)], v);
var g = v;

export {
  p,
  g
};
//# sourceMappingURL=chunk-UKL5ZIG7.js.map
