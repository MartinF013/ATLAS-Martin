import {
  n as n5,
  o as o5
} from "./chunk-WSQIVEW5.js";
import {
  r as r4
} from "./chunk-TGUQXVQU.js";
import {
  o as o6
} from "./chunk-3236UEJN.js";
import {
  s
} from "./chunk-K6UIDSFF.js";
import {
  o as o4
} from "./chunk-XEIRRA3E.js";
import {
  t as t2
} from "./chunk-I22L7HNU.js";
import {
  c as c2
} from "./chunk-Y5AGUEHG.js";
import {
  l,
  m,
  o as o3
} from "./chunk-DVE4HUBR.js";
import {
  a
} from "./chunk-767LZ6IM.js";
import {
  n as n4
} from "./chunk-DNPZNIDB.js";
import {
  e as e4
} from "./chunk-WW7VYUQW.js";
import {
  r as r3
} from "./chunk-FCDEMPPS.js";
import {
  o
} from "./chunk-TEJEYVH4.js";
import {
  t
} from "./chunk-HEZ2ATGC.js";
import {
  e as e3
} from "./chunk-AALA53RH.js";
import {
  u
} from "./chunk-IJHFAZOW.js";
import {
  c,
  d
} from "./chunk-YAQGRU5B.js";
import {
  e
} from "./chunk-4MKQUQD4.js";
import {
  o as o2
} from "./chunk-A3QLZKCF.js";
import {
  e as e2
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n3
} from "./chunk-NAB3NF54.js";
import {
  O as O2
} from "./chunk-MDCKEJ7B.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  r as r2
} from "./chunk-YZNDHJDJ.js";
import {
  n as n2
} from "./chunk-RTHP2LNT.js";
import {
  n
} from "./chunk-U7B2WKBH.js";
import {
  r
} from "./chunk-ZOKX6UGH.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js
function l2(t3) {
  t3.fragment.uniforms.add(new s("texWaveNormal")), t3.fragment.uniforms.add(new s("texWavePerturbation")), t3.fragment.uniforms.add([new e3("waveParams", (e5) => r(i2, e5.waveStrength, e5.waveTextureRepeat, e5.flowStrength, e5.flowOffset)), new e2("waveDirection", (t4) => r2(f, t4.waveDirection[0] * t4.waveVelocity, t4.waveDirection[1] * t4.waveVelocity))]), t3.include(o5), t3.fragment.code.add(n3`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);
vec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {
return 2.0 * texture2D(_tex, _uv).rg - 1.0;
}
float sampleNoiseTexture(vec2 _uv) {
return texture2D(texWavePerturbation, _uv).b;
}
vec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {
return 2.0 * texture2D(_tex, _uv).rgb - 1.0;
}
float computeProgress(vec2 uv, float time) {
return fract(time);
}
float computeWeight(vec2 uv, float time) {
float progress = computeProgress(uv, time);
return 1.0 - abs(1.0 - 2.0 * progress);
}
vec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {
float flowStrength = waveParams[2];
float flowOffset = waveParams[3];
vec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;
float progress = computeProgress(uv, time + phaseOffset);
float weight = computeWeight(uv, time + phaseOffset);
vec2 result = uv;
result -= flowVector * (progress + flowOffset);
result += phaseOffset;
result += (time - progress) * FLOW_JUMP;
return vec3(result, weight);
}
const float TIME_NOISE_TEXTURE_REPEAT = 0.3737;
const float TIME_NOISE_STRENGTH = 7.77;
vec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {
float waveStrength = waveParams[0];
vec2 waveMovement = time * -_waveDir;
float timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;
vec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);
vec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);
vec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;
vec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;
vec3 mixNormal = normalize(normal_A + normal_B);
mixNormal.xy *= waveStrength;
mixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));
return mixNormal;
}
vec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {
float waveTextureRepeat = waveParams[1];
vec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);
float foam  = normals2FoamIntensity(normal, waveParams[0]);
return vec4(normal, foam);
}`);
}
var i2 = n();
var f = n2();

// node_modules/@arcgis/core/chunks/WaterSurface.glsl.js
function L(L2) {
  const _2 = new i(), { vertex: x, fragment: S } = _2, D = d(_2, L2);
  return _2.include(r3), _2.attributes.add(O.POSITION, "vec3"), _2.attributes.add(O.UV0, "vec2"), x.uniforms.add(new e3("waterColor", (e5) => e5.color)), L2.output !== o.Color && L2.output !== o.Alpha || (_2.include(r4, L2), _2.include(t2, L2), _2.varyings.add("vuv", "vec2"), _2.varyings.add("vpos", "vec3"), _2.varyings.add("vnormal", "vec3"), _2.varyings.add("vtbnMatrix", "mat3"), S.uniforms.add(D), L2.hasMultipassTerrain && _2.varyings.add("depth", "float"), x.code.add(n3`
      void main(void) {
        if (waterColor.a < ${n3.float(t)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vuv = uv0;
        vpos = position;

        vnormal = getLocalUp(vpos, localOrigin);
        vtbnMatrix = getTBNMatrix(vnormal);

        ${L2.hasMultipassTerrain ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}

        gl_Position = transformPosition(proj, view, vpos);
        ${L2.output === o.Color ? "forwardLinearDepth();" : ""}
      }
    `)), _2.include(n4, L2), L2.output === o.Alpha && (_2.include(u, L2), S.uniforms.add(new o6("waterColor")), S.code.add(n3`
        void main() {
          discardBySlice(vpos);
          ${L2.hasMultipassTerrain ? "terrainDepthTest(gl_FragCoord, depth);" : ""}

          gl_FragColor = vec4(waterColor.a);
        }
      `)), L2.output === o.Color && (_2.include(o3, { isGround: false }), _2.include(m, { pbrMode: l.Disabled, lightingSphericalHarmonicsOrder: 2 }), _2.include(l2), _2.include(u, L2), _2.include(c2, L2), _2.include(n5, L2), S.uniforms.add([new o6("waterColor"), new e("lightingMainDirection", (e5, i3) => i3.lighting.lightingMainDirection), new e("lightingMainIntensity", (e5, i3) => i3.lighting.mainLight.intensity), new o2("timeElapsed", (e5) => e5.timeElapsed), new o4("view")]), c(S, L2), S.include(e4), S.code.add(n3`
      void main() {
        discardBySlice(vpos);
        ${L2.hasMultipassTerrain ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
        vec3 localUp = vnormal;
        // the created normal is in tangent space
        vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);

        // we rotate the normal according to the tangent-bitangent-normal-Matrix
        vec3 n = normalize(vtbnMatrix * tangentNormalFoam.xyz);
        vec3 v = -normalize(vpos - cameraPosition);
        float shadow = ${L2.receiveShadows ? n3`1.0 - readShadowMap(vpos, linearDepth)` : "1.0"};
        vec4 vPosView = view*vec4(vpos, 1.0);
        vec4 final = vec4(getSeaColor(n, v, lightingMainDirection, waterColor.rgb, lightingMainIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz, vpos + localOrigin), waterColor.w);

        // gamma correction
        gl_FragColor = delinearizeGamma(final);
        gl_FragColor = highlightSlice(gl_FragColor, vpos);
        ${L2.transparencyPassType === O2.Color ? "gl_FragColor = premultiplyAlpha(gl_FragColor);" : ""}
      }
    `)), L2.output === o.Normal && (_2.include(r4, L2), _2.include(l2, L2), _2.include(u, L2), _2.varyings.add("vpos", "vec3"), _2.varyings.add("vuv", "vec2"), x.code.add(n3`
        void main(void) {
          if (waterColor.a < ${n3.float(t)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vuv = uv0;
          vpos = position;

          gl_Position = transformPosition(proj, view, vpos);
        }
    `), S.uniforms.add(new o2("timeElapsed", (e5) => e5.timeElapsed)), S.code.add(n3`void main() {
discardBySlice(vpos);
vec4 tangentNormalFoam = getSurfaceNormalAndFoam(vuv, timeElapsed);
tangentNormalFoam.xyz = normalize(tangentNormalFoam.xyz);
gl_FragColor = vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);
}`)), L2.output === o.Draped && (_2.varyings.add("vpos", "vec3"), x.code.add(n3`
        void main(void) {
          if (waterColor.a < ${n3.float(t)}) {
            // Discard this vertex
            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
            return;
          }

          vpos = position;
          gl_Position = transformPosition(proj, view, vpos);
        }
    `), S.uniforms.add(new o6("waterColor")), S.code.add(n3`void main() {
gl_FragColor = waterColor;
}`)), L2.output === o.Highlight && (_2.include(a), _2.varyings.add("vpos", "vec3"), x.code.add(n3`
      void main(void) {
        if (waterColor.a < ${n3.float(t)}) {
          // Discard this vertex
          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
          return;
        }

        vpos = position;
        gl_Position = transformPosition(proj, view, vpos);
      }
    `), _2.include(u, L2), S.code.add(n3`void main() {
discardBySlice(vpos);
outputHighlight();
}`)), _2;
}
var _ = Object.freeze(Object.defineProperty({ __proto__: null, build: L }, Symbol.toStringTag, { value: "Module" }));

export {
  L,
  _
};
//# sourceMappingURL=chunk-PXOPYXIX.js.map
