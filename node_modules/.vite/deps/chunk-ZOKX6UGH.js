import {
  a,
  t
} from "./chunk-BNPOKP6A.js";

// node_modules/@arcgis/core/chunks/vec4.js
function a2(t2, n) {
  return t2[0] = n[0], t2[1] = n[1], t2[2] = n[2], t2[3] = n[3], t2;
}
function r(t2, n, a3, r2, s2) {
  return t2[0] = n, t2[1] = a3, t2[2] = r2, t2[3] = s2, t2;
}
function s(t2, n, a3) {
  return t2[0] = n[0] + a3[0], t2[1] = n[1] + a3[1], t2[2] = n[2] + a3[2], t2[3] = n[3] + a3[3], t2;
}
function o(t2, n, a3) {
  return t2[0] = n[0] - a3[0], t2[1] = n[1] - a3[1], t2[2] = n[2] - a3[2], t2[3] = n[3] - a3[3], t2;
}
function u(t2, n, a3) {
  return t2[0] = n[0] * a3[0], t2[1] = n[1] * a3[1], t2[2] = n[2] * a3[2], t2[3] = n[3] * a3[3], t2;
}
function e(t2, n, a3) {
  return t2[0] = n[0] / a3[0], t2[1] = n[1] / a3[1], t2[2] = n[2] / a3[2], t2[3] = n[3] / a3[3], t2;
}
function c(t2, n) {
  return t2[0] = Math.ceil(n[0]), t2[1] = Math.ceil(n[1]), t2[2] = Math.ceil(n[2]), t2[3] = Math.ceil(n[3]), t2;
}
function i(t2, n) {
  return t2[0] = Math.floor(n[0]), t2[1] = Math.floor(n[1]), t2[2] = Math.floor(n[2]), t2[3] = Math.floor(n[3]), t2;
}
function h(t2, n, a3) {
  return t2[0] = Math.min(n[0], a3[0]), t2[1] = Math.min(n[1], a3[1]), t2[2] = Math.min(n[2], a3[2]), t2[3] = Math.min(n[3], a3[3]), t2;
}
function M(t2, n, a3) {
  return t2[0] = Math.max(n[0], a3[0]), t2[1] = Math.max(n[1], a3[1]), t2[2] = Math.max(n[2], a3[2]), t2[3] = Math.max(n[3], a3[3]), t2;
}
function f(t2, n) {
  return t2[0] = Math.round(n[0]), t2[1] = Math.round(n[1]), t2[2] = Math.round(n[2]), t2[3] = Math.round(n[3]), t2;
}
function l(t2, n, a3) {
  return t2[0] = n[0] * a3, t2[1] = n[1] * a3, t2[2] = n[2] * a3, t2[3] = n[3] * a3, t2;
}
function m(t2, n, a3, r2) {
  return t2[0] = n[0] + a3[0] * r2, t2[1] = n[1] + a3[1] * r2, t2[2] = n[2] + a3[2] * r2, t2[3] = n[3] + a3[3] * r2, t2;
}
function d(t2, n) {
  const a3 = n[0] - t2[0], r2 = n[1] - t2[1], s2 = n[2] - t2[2], o2 = n[3] - t2[3];
  return Math.sqrt(a3 * a3 + r2 * r2 + s2 * s2 + o2 * o2);
}
function b(t2, n) {
  const a3 = n[0] - t2[0], r2 = n[1] - t2[1], s2 = n[2] - t2[2], o2 = n[3] - t2[3];
  return a3 * a3 + r2 * r2 + s2 * s2 + o2 * o2;
}
function x(t2) {
  const n = t2[0], a3 = t2[1], r2 = t2[2], s2 = t2[3];
  return Math.sqrt(n * n + a3 * a3 + r2 * r2 + s2 * s2);
}
function q(t2) {
  const n = t2[0], a3 = t2[1], r2 = t2[2], s2 = t2[3];
  return n * n + a3 * a3 + r2 * r2 + s2 * s2;
}
function p(t2, n) {
  return t2[0] = -n[0], t2[1] = -n[1], t2[2] = -n[2], t2[3] = -n[3], t2;
}
function g(t2, n) {
  return t2[0] = 1 / n[0], t2[1] = 1 / n[1], t2[2] = 1 / n[2], t2[3] = 1 / n[3], t2;
}
function v(t2, n) {
  const a3 = n[0], r2 = n[1], s2 = n[2], o2 = n[3];
  let u2 = a3 * a3 + r2 * r2 + s2 * s2 + o2 * o2;
  return u2 > 0 && (u2 = 1 / Math.sqrt(u2), t2[0] = a3 * u2, t2[1] = r2 * u2, t2[2] = s2 * u2, t2[3] = o2 * u2), t2;
}
function y(t2, n) {
  return t2[0] * n[0] + t2[1] * n[1] + t2[2] * n[2] + t2[3] * n[3];
}
function j(t2, n, a3, r2) {
  const s2 = n[0], o2 = n[1], u2 = n[2], e2 = n[3];
  return t2[0] = s2 + r2 * (a3[0] - s2), t2[1] = o2 + r2 * (a3[1] - o2), t2[2] = u2 + r2 * (a3[2] - u2), t2[3] = e2 + r2 * (a3[3] - e2), t2;
}
function _(t2, a3) {
  let r2, s2, o2, u2, e2, c2;
  a3 = a3 || 1;
  do {
    r2 = 2 * a() - 1, s2 = 2 * a() - 1, e2 = r2 * r2 + s2 * s2;
  } while (e2 >= 1);
  do {
    o2 = 2 * a() - 1, u2 = 2 * a() - 1, c2 = o2 * o2 + u2 * u2;
  } while (c2 >= 1);
  const i2 = Math.sqrt((1 - e2) / c2);
  return t2[0] = a3 * r2, t2[1] = a3 * s2, t2[2] = a3 * o2 * i2, t2[3] = a3 * u2 * i2, t2;
}
function w(t2, n, a3) {
  const r2 = n[0], s2 = n[1], o2 = n[2], u2 = n[3];
  return t2[0] = a3[0] * r2 + a3[4] * s2 + a3[8] * o2 + a3[12] * u2, t2[1] = a3[1] * r2 + a3[5] * s2 + a3[9] * o2 + a3[13] * u2, t2[2] = a3[2] * r2 + a3[6] * s2 + a3[10] * o2 + a3[14] * u2, t2[3] = a3[3] * r2 + a3[7] * s2 + a3[11] * o2 + a3[15] * u2, t2;
}
function z(t2, n, a3) {
  const r2 = n[0], s2 = n[1], o2 = n[2], u2 = a3[0], e2 = a3[1], c2 = a3[2], i2 = a3[3], h2 = i2 * r2 + e2 * o2 - c2 * s2, M2 = i2 * s2 + c2 * r2 - u2 * o2, f2 = i2 * o2 + u2 * s2 - e2 * r2, l2 = -u2 * r2 - e2 * s2 - c2 * o2;
  return t2[0] = h2 * i2 + l2 * -u2 + M2 * -c2 - f2 * -e2, t2[1] = M2 * i2 + l2 * -e2 + f2 * -u2 - h2 * -c2, t2[2] = f2 * i2 + l2 * -c2 + h2 * -e2 - M2 * -u2, t2[3] = n[3], t2;
}
function A(t2) {
  return "vec4(" + t2[0] + ", " + t2[1] + ", " + t2[2] + ", " + t2[3] + ")";
}
function D(t2, n) {
  return t2[0] === n[0] && t2[1] === n[1] && t2[2] === n[2] && t2[3] === n[3];
}
function E(n, a3) {
  const r2 = n[0], s2 = n[1], o2 = n[2], u2 = n[3], e2 = a3[0], c2 = a3[1], i2 = a3[2], h2 = a3[3];
  return Math.abs(r2 - e2) <= t * Math.max(1, Math.abs(r2), Math.abs(e2)) && Math.abs(s2 - c2) <= t * Math.max(1, Math.abs(s2), Math.abs(c2)) && Math.abs(o2 - i2) <= t * Math.max(1, Math.abs(o2), Math.abs(i2)) && Math.abs(u2 - h2) <= t * Math.max(1, Math.abs(u2), Math.abs(h2));
}
var L = o;
var O = u;
var S = e;
var k = d;
var B = b;
var C = x;
var F = q;
var G = Object.freeze(Object.defineProperty({ __proto__: null, copy: a2, set: r, add: s, subtract: o, multiply: u, divide: e, ceil: c, floor: i, min: h, max: M, round: f, scale: l, scaleAndAdd: m, distance: d, squaredDistance: b, length: x, squaredLength: q, negate: p, inverse: g, normalize: v, dot: y, lerp: j, random: _, transformMat4: w, transformQuat: z, str: A, exactEquals: D, equals: E, sub: L, mul: O, div: S, dist: k, sqrDist: B, len: C, sqrLen: F }, Symbol.toStringTag, { value: "Module" }));

export {
  a2 as a,
  r,
  s,
  l,
  b,
  x,
  q,
  v,
  y,
  j,
  w,
  D,
  E,
  G
};
//# sourceMappingURL=chunk-ZOKX6UGH.js.map
