import {
  u as u2
} from "./chunk-4JEAJE3K.js";
import "./chunk-ZUKXZSOF.js";
import "./chunk-5QPLPQX7.js";
import {
  n,
  v as v2
} from "./chunk-T6XN76GI.js";
import {
  v
} from "./chunk-V56SVRSV.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-WN3KE5M2.js";
import "./chunk-ZIAGZEFK.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YG6VFATO.js";
import {
  b
} from "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-TBT57L4K.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-2HDG7SIE.js";
import {
  u
} from "./chunk-56RHM4A6.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import {
  c
} from "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import "./chunk-2QOWZFCU.js";
import "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/features/support/whereUtils.js
var t2 = s.getLogger("esri.views.2d.layers.features.support.whereUtils");
var a = { getAttribute: (e, r) => e.field(r) };
async function s3(r, s4) {
  const n2 = await import("./WhereClause-XG56H2W3.js");
  try {
    const o = n2.WhereClause.create(r, s4);
    if (!o.isStandardized) {
      const r2 = new s2("mapview - bad input", "Unable to apply filter's definition expression, as expression is not standardized.", o);
      t2.error(r2);
    }
    return (e) => {
      const r2 = e.readArcadeFeature();
      return o.testFeature(r2, a);
    };
  } catch (o) {
    return t2.warn("mapview-bad-where-clause", "Encountered an error when evaluating where clause", r), (e) => true;
  }
}

// node_modules/@arcgis/core/views/2d/layers/features/support/FeatureFilter.js
var m = s.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter");
var _ = 1;
var p = 2;
var y = class {
  constructor(t3) {
    this._geometryBounds = u(), this._idToVisibility = /* @__PURE__ */ new Map(), this._serviceInfo = t3;
  }
  get hash() {
    return this._hash;
  }
  check(t3) {
    return this._applyFilter(t3);
  }
  clear() {
    const t3 = this._resetAllHiddenIds();
    return this.update(), { show: t3, hide: [] };
  }
  invalidate() {
    this._idToVisibility.forEach((t3, e) => {
      this._idToVisibility.set(e, 0);
    });
  }
  setKnownIds(t3) {
    for (const e of t3)
      this._idToVisibility.set(e, _);
  }
  setTrue(t3) {
    const e = [], i = [], s4 = new Set(t3);
    return this._idToVisibility.forEach((t4, r) => {
      const o = !!(this._idToVisibility.get(r) & _), h = s4.has(r);
      !o && h ? e.push(r) : o && !h && i.push(r), this._idToVisibility.set(r, h ? _ | p : 0);
    }), { show: e, hide: i };
  }
  createQuery() {
    const { geometry: t3, spatialRel: e, where: i, timeExtent: s4, objectIds: r } = this;
    return b.fromJSON({ geometry: t3, spatialRel: e, where: i, timeExtent: s4, objectIds: r });
  }
  async update(t3, e) {
    this._hash = JSON.stringify(t3);
    const i = await v(t3, null, e);
    await Promise.all([this._setGeometryFilter(i), this._setIdFilter(i), this._setAttributeFilter(i), this._setTimeFilter(i)]);
  }
  async _setAttributeFilter(t3) {
    if (!t3 || !t3.where)
      return this._clause = null, void (this.where = null);
    this._clause = await s3(t3.where, this._serviceInfo.fieldsIndex), this.where = t3.where;
  }
  _setIdFilter(t3) {
    this._idsToShow = t3 && t3.objectIds && new Set(t3.objectIds), this._idsToHide = t3 && t3.hiddenIds && new Set(t3.hiddenIds), this.objectIds = t3 && t3.objectIds;
  }
  async _setGeometryFilter(t3) {
    if (!t3 || !t3.geometry)
      return this._spatialQueryOperator = null, this.geometry = null, void (this.spatialRel = null);
    const e = t3.geometry, i = t3.spatialRel || "esriSpatialRelIntersects", s4 = await v2(i, e, this._serviceInfo.geometryType, this._serviceInfo.hasZ, this._serviceInfo.hasM);
    c(this._geometryBounds, e), this._spatialQueryOperator = s4, this.geometry = e, this.spatialRel = i;
  }
  _setTimeFilter(e) {
    if (this.timeExtent = this._timeOperator = null, e && e.timeExtent)
      if (this._serviceInfo.timeInfo)
        this.timeExtent = e.timeExtent, this._timeOperator = n(this._serviceInfo.timeInfo, e.timeExtent, u2);
      else {
        const i = new s2("feature-layer-view:time-filter-not-available", "Unable to apply time filter, as layer doesn't have time metadata.", e.timeExtent);
        m.error(i);
      }
  }
  _applyFilter(t3) {
    return this._filterByGeometry(t3) && this._filterById(t3) && this._filterByTime(t3) && this._filterByExpression(t3);
  }
  _filterByExpression(t3) {
    return !this.where || this._clause(t3);
  }
  _filterById(t3) {
    return (!this._idsToHide || !this._idsToHide.size || !this._idsToHide.has(t3.getObjectId())) && (!this._idsToShow || !this._idsToShow.size || this._idsToShow.has(t3.getObjectId()));
  }
  _filterByGeometry(t3) {
    if (!this.geometry)
      return true;
    const e = t3.readHydratedGeometry();
    return !!e && this._spatialQueryOperator(e);
  }
  _filterByTime(t3) {
    return !!t(this._timeOperator) || this._timeOperator(t3);
  }
  _resetAllHiddenIds() {
    const t3 = [];
    return this._idToVisibility.forEach((e, i) => {
      e & _ || (this._idToVisibility.set(i, _), t3.push(i));
    }), t3;
  }
};
export {
  y as default
};
//# sourceMappingURL=FeatureFilter-Z763KGOJ.js.map
