import {
  E
} from "./chunk-EMETVH63.js";
import "./chunk-V56SVRSV.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-X64NQ2GK.js";
import "./chunk-NVOCHKIH.js";
import "./chunk-DGELARKE.js";
import "./chunk-WN3KE5M2.js";
import {
  G
} from "./chunk-XEWFCJLT.js";
import "./chunk-ZEDAE7EU.js";
import {
  y
} from "./chunk-QUUJFQ73.js";
import "./chunk-TR3U55RZ.js";
import "./chunk-3DCTMZI6.js";
import "./chunk-33INAWJA.js";
import "./chunk-5WOO2FX6.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-J73IXFNW.js";
import "./chunk-MQBVOUKB.js";
import "./chunk-VMF4NMEB.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-53KI6WDE.js";
import {
  E as E2,
  Q,
  _
} from "./chunk-W2HLA6I3.js";
import {
  d,
  l,
  v
} from "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-CC32E45Q.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YG6VFATO.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-GRILTTJT.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import {
  g,
  u,
  x
} from "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import {
  n as n2,
  t as t2
} from "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  f
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  c,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/sceneLayerSource/SceneLayerSnappingSourceWorker.js
var j = class {
  constructor() {
    this._idToComponent = /* @__PURE__ */ new Map(), this._components = new G((e2) => e2.bounds), this._edges = new G((e2) => e2.bounds), this._tmpLineSegment = v(), this._tmpP1 = n2(), this._tmpP2 = n2(), this._tmpP3 = n2(), this.remoteClient = null;
  }
  async fetchCandidates(e2, t3) {
    await Promise.resolve(), f(t3), await this._ensureEdgeLocations(e2, t3);
    const s = [];
    return this._edges.forEachNeighbor((t4) => this._addCandidates(e2, t4, s), e2.bounds), { result: { candidates: s } };
  }
  async _ensureEdgeLocations(e2, o) {
    const n3 = [];
    if (this._components.forEachNeighbor((e3) => {
      if (t(e3.info)) {
        const { id: t3, uid: s } = e3;
        n3.push({ id: t3, uid: s });
      }
    }, e2.bounds), !n3.length)
      return;
    const i = { components: n3 }, r = await this.remoteClient.invoke("fetchAllEdgeLocations", i, c(o, {}));
    for (const t3 of r.components)
      this._setFetchEdgeLocations(t3);
  }
  async add(e2) {
    const t3 = new C(e2.id, e2.bounds);
    return this._idToComponent.set(t3.id, t3), this._components.add([t3]), { result: {} };
  }
  async remove(e2) {
    const t3 = this._idToComponent.get(e2.id);
    if (t3) {
      const e3 = [];
      this._edges.forEachNeighbor((s) => {
        s.component === t3 && e3.push(s);
      }, t3.bounds), this._edges.remove(e3), this._components.remove([t3]), this._idToComponent.delete(t3.id);
    }
    return { result: {} };
  }
  _setFetchEdgeLocations(e2) {
    const s = this._idToComponent.get(e2.id);
    if (t(s) || e2.uid !== s.uid)
      return;
    const o = y.createView(e2.locations), n3 = new Array(o.count), a = n2(), p = n2();
    for (let t3 = 0; t3 < o.count; t3++) {
      const c2 = _(), u3 = E2(c2);
      o.position0.getVec(t3, a), o.position1.getVec(t3, p), g(u3, u3, a, 0.5), g(u3, u3, p, 0.5), u(u3, u3, e2.origin), c2[3] = x(u3, a);
      const m2 = new E3(s, t3, c2);
      n3[t3] = m2;
    }
    this._edges.add(n3);
    const { objectIds: u2, origin: m } = e2;
    s.info = { locations: o, objectIds: u2, origin: m };
  }
  _addCandidates(e2, t3, s) {
    const { locations: o, origin: n3, objectIds: i } = t3.component.info, d2 = o.position0.getVec(t3.index, this._tmpP1), c2 = o.position1.getVec(t3.index, this._tmpP2);
    u(d2, d2, n3), u(c2, c2, n3);
    const a = i[o.componentIndex.get(t3.index)];
    this._addEdgeCandidate(e2, a, d2, c2, s), this._addVertexCandidate(e2, a, d2, s), this._addVertexCandidate(e2, a, c2, s);
  }
  _addEdgeCandidate(e2, t3, s, o, n3) {
    if (!(e2.types & E.EDGE))
      return;
    const i = E2(e2.bounds), r = l(s, o, this._tmpLineSegment), c2 = d(r, i, this._tmpP3);
    if (!Q(e2.bounds, c2))
      return null;
    n3.push({ type: "edge", objectId: t3, target: t2(c2), distance: x(i, c2), start: t2(s), end: t2(o) });
  }
  _addVertexCandidate(e2, t3, s, o) {
    if (!(e2.types & E.VERTEX))
      return;
    const n3 = E2(e2.bounds);
    if (!Q(e2.bounds, s))
      return null;
    o.push({ type: "vertex", objectId: t3, target: t2(s), distance: x(n3, s) });
  }
};
function y2() {
  return new j();
}
j = e([n("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")], j);
var C = class {
  constructor(e2, t3) {
    this.id = e2, this.bounds = t3, this.info = null, this.uid = ++C.uid;
  }
};
C.uid = 0;
var E3 = class {
  constructor(e2, t3, s) {
    this.component = e2, this.index = t3, this.bounds = s;
  }
};
export {
  j as SceneLayerSnappingSourceWorker,
  y2 as default
};
//# sourceMappingURL=SceneLayerSnappingSourceWorker-DLNSID4I.js.map
