import {
  E,
  n as n2
} from "./chunk-2FLJ43TR.js";
import {
  i
} from "./chunk-POPR7XUB.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  d,
  n8 as n,
  t6 as t
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";

// node_modules/@arcgis/core/layers/buildingSublayers/BuildingGroupSublayer.js
var a;
var p = { type: j, readOnly: true, json: { origins: { service: { read: { source: "sublayers", reader: l } } }, read: false } };
function l(r, o, t2) {
  if (r && Array.isArray(r))
    return new j(r.map((r2) => {
      const e2 = y(r2);
      if (e2) {
        const o2 = new e2();
        return o2.read(r2, t2), o2;
      }
      t2 && t2.messages && r2 && t2.messages.push(new t("building-scene-layer:unsupported-sublayer-type", "Building scene sublayer of type '" + (r2.type || "unknown") + "' are not supported", { definition: r2, context: t2 }));
    }));
}
var c = a = class extends n2 {
  constructor(r) {
    super(r), this.type = "building-group", this.listMode = "show", this.sublayers = null;
  }
  loadAll() {
    return i(this, (r) => a.forEachSublayer(this.sublayers, (e2) => {
      "building-group" !== e2.type && r(e2);
    }));
  }
};
function y(r) {
  return "group" === r.layerType ? c : E;
}
e([d({ type: ["hide", "show", "hide-children"], json: { write: true } })], c.prototype, "listMode", void 0), e([d(p)], c.prototype, "sublayers", void 0), c = a = e([n("esri.layers.buildingSublayers.BuildingGroupSublayer")], c), function(r) {
  function e2(r2, o) {
    r2.forEach((r3) => {
      o(r3), "building-group" === r3.type && e2(r3.sublayers, o);
    });
  }
  r.sublayersProperty = p, r.readSublayers = l, r.forEachSublayer = e2;
}(c || (c = {}));
var d2 = c;

export {
  d2 as d
};
//# sourceMappingURL=chunk-CVV43JR7.js.map
