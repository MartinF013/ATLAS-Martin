import {
  n as n2
} from "./chunk-GKYJJGE3.js";
import {
  s
} from "./chunk-K6UIDSFF.js";
import {
  a
} from "./chunk-BOVIIQLB.js";
import {
  c
} from "./chunk-DMGVDNFD.js";
import {
  e
} from "./chunk-4MKQUQD4.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  e as e2
} from "./chunk-LGILR4HN.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js
function s2(s3, p) {
  s3.extensions.add("GL_OES_standard_derivatives");
  const u = s3.fragment;
  u.include(a), s3.include(n2), u.uniforms.add([new o("globalAlpha", (o2) => o2.globalAlpha), new e("glowColor", (o2) => o2.glowColor), new o("glowWidth", (o2, e3) => o2.glowWidth * e3.camera.pixelRatio), new o("glowFalloff", (o2) => o2.glowFalloff), new e("innerColor", (o2) => o2.innerColor), new o("innerWidth", (o2, e3) => o2.innerWidth * e3.camera.pixelRatio), new c("depthMap", (o2, e3) => e3.linearDepthTexture), new e2("nearFar", (o2, e3) => e3.camera.nearFar), new s("frameColor")]), u.code.add(n`vec4 blendPremultiplied(vec4 source, vec4 dest) {
float oneMinusSourceAlpha = 1.0 - source.a;
return vec4(
source.rgb + dest.rgb * oneMinusSourceAlpha,
source.a + dest.a * oneMinusSourceAlpha
);
}`), u.code.add(n`vec4 premultipliedColor(vec3 rgb, float alpha) {
return vec4(rgb * alpha, alpha);
}`), u.code.add(n`vec4 laserlineProfile(float dist) {
if (dist > glowWidth) {
return vec4(0.0);
}
float innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));
float glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);
return blendPremultiplied(
premultipliedColor(innerColor, innerAlpha),
premultipliedColor(glowColor, glowAlpha)
);
}`), u.code.add(n`bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {
float depth = linearDepthFromTexture(depthMap, uv, nearFar);
if (-depth == nearFar[0]) {
return false;
}
pos = reconstructPosition(gl_FragCoord.xy, depth);
normal = normalize(cross(dFdx(pos), dFdy(pos)));
float ddepth = fwidth(depth);
depthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);
return true;
}`), p.contrastControlEnabled ? (u.uniforms.add(new o("globalAlphaContrastBoost", (e3) => r(e3.globalAlphaContrastBoost) ? e3.globalAlphaContrastBoost : 1)), u.code.add(n`float rgbToLuminance(vec3 color) {
return dot(vec3(0.2126, 0.7152, 0.0722), color);
}
vec4 laserlineOutput(vec4 color) {
float backgroundLuminance = rgbToLuminance(texture2D(frameColor, uv).rgb);
float alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);
return color * alpha;
}`)) : u.code.add(n`vec4 laserlineOutput(vec4 color) {
return color * globalAlpha;
}`);
}

export {
  s2 as s
};
//# sourceMappingURL=chunk-PH7BQFVK.js.map
