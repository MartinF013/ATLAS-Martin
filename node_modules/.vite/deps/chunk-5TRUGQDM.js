import {
  a
} from "./chunk-PZG7CR4Y.js";
import {
  r as r2
} from "./chunk-2HDG7SIE.js";
import {
  o as o2
} from "./chunk-NWRK6QLX.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import {
  l as l2
} from "./chunk-FVPTCNCX.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  m
} from "./chunk-G5JBUC5N.js";

// node_modules/@arcgis/core/symbols/LineSymbol.js
var i = class extends a {
  constructor(r3) {
    super(r3), this.type = "simple-line", this.width = 0.75;
  }
  hash() {
    return `${this.type}.${this.width}`;
  }
};
e([r2({ esriSLS: "simple-line" }, { readOnly: true })], i.prototype, "type", void 0), e([d({ type: Number, cast: o2, json: { write: true } })], i.prototype, "width", void 0), i = e([n("esri.symbols.LineSymbol")], i);
var c = i;

// node_modules/@arcgis/core/symbols/support/lineMarkers.js
var e2 = ["begin", "end", "begin-end"];
var n2 = ["arrow", "circle", "square", "diamond", "cross", "x"];

// node_modules/@arcgis/core/symbols/LineSymbolMarker.js
var n3;
var m2 = n3 = class extends l {
  constructor(r3) {
    super(r3), this.placement = "begin-end", this.type = "line-marker", this.style = "arrow";
  }
  writeStyle(r3, o3, e3, t) {
    o3[e3] = "web-map" === (t == null ? void 0 : t.origin) ? "arrow" : r3;
  }
  set color(r3) {
    this._set("color", r3);
  }
  readColor(r3) {
    return r3 && null != r3[0] ? [r3[0], r3[1], r3[2], r3[3] / 255] : r3;
  }
  writeColor(r3, o3, e3, t) {
    "web-map" === (t == null ? void 0 : t.origin) || (o3[e3] = r3);
  }
  clone() {
    return new n3({ color: m(this.color), placement: this.placement, style: this.style });
  }
  hash() {
    var _a;
    return `${this.placement}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}`;
  }
};
e([d({ type: ["begin", "end", "begin-end"], json: { write: true } })], m2.prototype, "placement", void 0), e([r2({ "line-marker": "line-marker" }, { readOnly: true }), d({ json: { origins: { "web-map": { write: false } } } })], m2.prototype, "type", void 0), e([d({ type: n2 })], m2.prototype, "style", void 0), e([r("style")], m2.prototype, "writeStyle", null), e([d({ type: l2, value: null, json: { write: { allowNull: true } } })], m2.prototype, "color", null), e([o("color")], m2.prototype, "readColor", null), e([r("color")], m2.prototype, "writeColor", null), m2 = n3 = e([n("esri.symbols.LineSymbolMarker")], m2);
var u = m2;

// node_modules/@arcgis/core/symbols/SimpleLineSymbol.js
var p;
var h = new s({ esriSLSSolid: "solid", esriSLSDash: "dash", esriSLSDot: "dot", esriSLSDashDot: "dash-dot", esriSLSDashDotDot: "long-dash-dot-dot", esriSLSNull: "none", esriSLSInsideFrame: "inside-frame", esriSLSShortDash: "short-dash", esriSLSShortDot: "short-dot", esriSLSShortDashDot: "short-dash-dot", esriSLSShortDashDotDot: "short-dash-dot-dot", esriSLSLongDash: "long-dash", esriSLSLongDashDot: "long-dash-dot" });
var d2 = p = class extends c {
  constructor(...r3) {
    super(...r3), this.type = "simple-line", this.style = "solid", this.cap = "round", this.join = "round", this.marker = null, this.miterLimit = 2;
  }
  normalizeCtorArgs(r3, o3, e3, s2, i2, n4) {
    if (r3 && "string" != typeof r3)
      return r3;
    const l4 = {};
    return null != r3 && (l4.style = r3), null != o3 && (l4.color = o3), null != e3 && (l4.width = o2(e3)), null != s2 && (l4.cap = s2), null != i2 && (l4.join = i2), null != n4 && (l4.miterLimit = o2(n4)), l4;
  }
  clone() {
    var _a;
    return new p({ color: m(this.color), style: this.style, width: this.width, cap: this.cap, join: this.join, miterLimit: this.miterLimit, marker: (_a = this.marker) == null ? void 0 : _a.clone() });
  }
  hash() {
    var _a, _b;
    return `${super.hash()}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}.${this.cap}.${this.join}.${this.miterLimit}.${(_b = this.marker) == null ? void 0 : _b.hash()}`;
  }
};
e([r2({ esriSLS: "simple-line" }, { readOnly: true })], d2.prototype, "type", void 0), e([d({ type: h.apiValues, json: { read: h.read, write: h.write } })], d2.prototype, "style", void 0), e([d({ type: ["butt", "round", "square"], json: { write: { overridePolicy: (r3, o3, e3) => ({ enabled: "round" !== r3 && (null == e3 || null == e3.origin) }) } } })], d2.prototype, "cap", void 0), e([d({ type: ["miter", "round", "bevel"], json: { write: { overridePolicy: (r3, o3, e3) => ({ enabled: "round" !== r3 && (null == e3 || null == e3.origin) }) } } })], d2.prototype, "join", void 0), e([d({ types: { key: "type", base: null, defaultKeyValue: "line-marker", typeMap: { "line-marker": u } }, json: { write: true, origins: { "web-scene": { write: false } } } })], d2.prototype, "marker", void 0), e([d({ type: Number, json: { read: false, write: false } })], d2.prototype, "miterLimit", void 0), d2 = p = e([n("esri.symbols.SimpleLineSymbol")], d2);
var m3 = d2;

// node_modules/@arcgis/core/symbols/FillSymbol.js
var l3 = class extends a {
  constructor(e3) {
    super(e3), this.outline = null, this.type = null;
  }
  hash() {
    return `${this.type}.${this.outline && this.outline.hash()}`;
  }
};
e([d({ types: { key: "type", base: null, defaultKeyValue: "simple-line", typeMap: { "simple-line": m3 } }, json: { default: null, write: true } })], l3.prototype, "outline", void 0), e([d({ type: ["simple-fill", "picture-fill"], readOnly: true })], l3.prototype, "type", void 0), l3 = e([n("esri.symbols.FillSymbol")], l3);
var p2 = l3;

// node_modules/@arcgis/core/symbols/SimpleFillSymbol.js
var p3;
var c2 = new s({ esriSFSSolid: "solid", esriSFSNull: "none", esriSFSHorizontal: "horizontal", esriSFSVertical: "vertical", esriSFSForwardDiagonal: "forward-diagonal", esriSFSBackwardDiagonal: "backward-diagonal", esriSFSCross: "cross", esriSFSDiagonalCross: "diagonal-cross" });
var m4 = p3 = class extends p2 {
  constructor(...o3) {
    super(...o3), this.color = new l2([0, 0, 0, 0.25]), this.outline = new m3(), this.type = "simple-fill", this.style = "solid";
  }
  normalizeCtorArgs(o3, r3, s2) {
    if (o3 && "string" != typeof o3)
      return o3;
    const e3 = {};
    return o3 && (e3.style = o3), r3 && (e3.outline = r3), s2 && (e3.color = s2), e3;
  }
  clone() {
    return new p3({ color: m(this.color), outline: this.outline && this.outline.clone(), style: this.style });
  }
  hash() {
    return `${super.hash()}${this.style}.${this.color && this.color.hash()}`;
  }
};
e([d()], m4.prototype, "color", void 0), e([d()], m4.prototype, "outline", void 0), e([r2({ esriSFS: "simple-fill" }, { readOnly: true })], m4.prototype, "type", void 0), e([d({ type: c2.apiValues, json: { read: c2.read, write: c2.write } })], m4.prototype, "style", void 0), m4 = p3 = e([n("esri.symbols.SimpleFillSymbol")], m4);
var S = m4;

export {
  e2 as e,
  n2 as n,
  m3 as m,
  p2 as p,
  S
};
//# sourceMappingURL=chunk-5TRUGQDM.js.map
