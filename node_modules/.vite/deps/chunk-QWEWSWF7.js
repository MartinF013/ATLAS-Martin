import {
  e as e4
} from "./chunk-YSWURJZW.js";
import {
  e as e2
} from "./chunk-O7YSDCZE.js";
import {
  a
} from "./chunk-767LZ6IM.js";
import {
  n as n2
} from "./chunk-DNPZNIDB.js";
import {
  e as e5
} from "./chunk-WW7VYUQW.js";
import {
  r
} from "./chunk-FCDEMPPS.js";
import {
  o
} from "./chunk-TEJEYVH4.js";
import {
  t
} from "./chunk-HEZ2ATGC.js";
import {
  e as e3
} from "./chunk-AALA53RH.js";
import {
  u
} from "./chunk-IJHFAZOW.js";
import {
  c,
  d
} from "./chunk-YAQGRU5B.js";
import {
  o as o2
} from "./chunk-A3QLZKCF.js";
import {
  e
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  O as O2
} from "./chunk-MDCKEJ7B.js";
import {
  O
} from "./chunk-VMF4NMEB.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PatternStyle.js
var a2;
!function(a3) {
  a3[a3.Horizontal = 0] = "Horizontal", a3[a3.Vertical = 1] = "Vertical", a3[a3.Cross = 2] = "Cross", a3[a3.ForwardDiagonal = 3] = "ForwardDiagonal", a3[a3.BackwardDiagonal = 4] = "BackwardDiagonal", a3[a3.DiagonalCross = 5] = "DiagonalCross", a3[a3.COUNT = 6] = "COUNT";
}(a2 || (a2 = {}));

// node_modules/@arcgis/core/chunks/Pattern.glsl.js
var b = 0.70710678118;
var y = b;
var S = 0.08715574274;
function j(j2) {
  const P2 = new i(), T = j2.hasMultipassTerrain && (j2.output === o.Color || j2.output === o.Alpha);
  j2.draped || P2.extensions.add("GL_OES_standard_derivatives");
  const C = j2.output === o.Depth, { vertex: D, fragment: R } = P2;
  d(P2, j2), P2.include(r, { hasModelTransformation: false, linearDepth: C }), P2.include(e2, j2), C && (P2.include(e4, j2), D.uniforms.add(new e("nearFar", (e6, o3) => o3.camera.nearFar)), P2.varyings.add("linearDepth", "float")), j2.draped ? D.uniforms.add(new o2("worldToScreenRatio", (e6, o3) => 1 / o3.screenToPCSRatio)) : P2.attributes.add(O.BOUNDINGRECT, "mat3"), P2.attributes.add(O.POSITION, "vec3"), P2.attributes.add(O.UVMAPSPACE, "vec4"), P2.varyings.add("vpos", "vec3"), P2.varyings.add("vuv", "vec2"), T && P2.varyings.add("depth", "float");
  const $ = j2.style === a2.ForwardDiagonal || j2.style === a2.BackwardDiagonal || j2.style === a2.DiagonalCross;
  return $ && D.code.add(n`
      const mat2 rotate45 = mat2(${n.float(b)}, ${n.float(-y)},
                                 ${n.float(y)}, ${n.float(b)});
    `), j2.draped || (c(D, j2), D.uniforms.add(new o2("worldToScreenPerDistanceRatio", (e6, o3) => 1 / o3.camera.perScreenPixelRatio)), D.code.add(n`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {
float projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);
return center + halfVector * clamp(projectedLength, -1.0, 1.0);
}`), D.code.add(n`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {
float d = dot(planeNormal, planePoint);
float t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);
return rayOrigin + t * rayDir;
}`), D.code.add(n`
      float boundingRectDistanceToCamera() {
        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);
        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);
        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);
        vec3 n = normalize(cross(halfU, halfV));

        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);

        float viewAngle = dot(viewDir, n);
        float minViewAngle = ${n.float(S)};

        if (abs(viewAngle) < minViewAngle) {
          // view direction is (almost) parallel to plane -> clamp it to min angle
          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;
          viewDir = normalize(viewDir + normalComponent * n);
        }

        // intersect view direction with infinite plane that contains bounding rect
        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);

        // clip to bounds by projecting to u and v line segments individually
        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);
        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);

        // use to calculate the closest point to camera on bounding rect
        vec3 closestPoint = uProjected + vProjected - center;

        return length(closestPoint - cameraPosition);
      }
    `)), D.code.add(n`
    vec2 scaledUV() {
      vec2 uv = uvMapSpace.xy ${$ ? " * rotate45" : ""};
      vec2 uvCellOrigin = uvMapSpace.zw ${$ ? " * rotate45" : ""};

      ${j2.draped ? "" : n`
            float distanceToCamera = boundingRectDistanceToCamera();
            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;
          `}

      // Logarithmically discretize ratio to avoid jittering
      float step = 0.1;
      float discreteWorldToScreenRatio = log(worldToScreenRatio);
      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;
      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);

      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${n.float(j2.patternSpacing)});
      return uvOffset + (uv * discreteWorldToScreenRatio);
    }
  `), D.code.add(n`
    void main(void) {
      vuv = scaledUV();
      vpos = position;
      ${T ? "depth = (view * vec4(vpos, 1.0)).z;" : ""}
      forwardNormalizedVertexColor();
      gl_Position = ${C ? n`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);` : n`transformPosition(proj, view, vpos);`}
    }
  `), P2.include(u, j2), R.include(e5), j2.draped && R.uniforms.add(new o2("texelSize", (e6, o3) => 1 / o3.camera.pixelRatio)), j2.output === o.Highlight && P2.include(a), T && P2.include(n2, j2), j2.output !== o.Highlight && (R.code.add(n`
      const float lineWidth = ${n.float(j2.lineWidth)};
      const float spacing = ${n.float(j2.patternSpacing)};
      const float spacingINV = ${n.float(1 / j2.patternSpacing)};

      float coverage(float p, float txlSize) {
        p = mod(p, spacing);

        float halfTxlSize = txlSize / 2.0;

        float start = p - halfTxlSize;
        float end = p + halfTxlSize;

        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;
        coverage -= min(lineWidth, mod(start, spacing));
        coverage -= max(lineWidth - mod(end, spacing), 0.0);

        return coverage / txlSize;
      }
    `), j2.draped || R.code.add(n`const int maxSamples = 5;
float sample(float p) {
vec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));
float fwidth = dxdy.x + dxdy.y;
ivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));
vec2 invSamples = 1.0 / vec2(samples);
float accumulator = 0.0;
for (int j = 0; j < maxSamples; j++) {
if(j >= samples.y) {
break;
}
for (int i = 0; i < maxSamples; i++) {
if(i >= samples.x) {
break;
}
vec2 step = vec2(i,j) * invSamples - 0.5;
accumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);
}
}
accumulator /= float(samples.x * samples.y);
return accumulator;
}`)), R.uniforms.add(new e3("uColor", (e6) => e6.color)), R.code.add(n`
    void main() {
      discardBySlice(vpos);
      ${T ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
      vec4 color = ${j2.hasVertexColors ? "vColor * uColor;" : "uColor;"}
      color = highlightSlice(color, vpos);

      ${j2.output !== o.Highlight ? n`color.a *= ${x(j2)};` : ""}

      if (color.a < ${n.float(t)}) {
        discard;
      }

      ${j2.output === o.Alpha ? n`gl_FragColor = vec4(color.a);` : ""}

      ${j2.output === o.Color ? n`gl_FragColor = color; ${j2.transparencyPassType === O2.Color ? "gl_FragColor = premultiplyAlpha(gl_FragColor);" : ""}` : ""}
      ${j2.output === o.Highlight ? n`outputHighlight();` : ""}
      ${j2.output === o.Depth ? n`outputDepth(linearDepth);` : ""};
    }
  `), P2;
}
function x(e6) {
  function o3(o4) {
    return e6.draped ? n`coverage(vuv.${o4}, texelSize)` : n`sample(vuv.${o4})`;
  }
  switch (e6.style) {
    case a2.ForwardDiagonal:
    case a2.Horizontal:
      return o3("y");
    case a2.BackwardDiagonal:
    case a2.Vertical:
      return o3("x");
    case a2.DiagonalCross:
    case a2.Cross:
      return n`
        1.0 - (1.0 - ${o3("x")}) * (1.0 - ${o3("y")})
      `;
    default:
      return "0.0";
  }
}
var P = Object.freeze(Object.defineProperty({ __proto__: null, build: j }, Symbol.toStringTag, { value: "Module" }));

export {
  a2 as a,
  j,
  P
};
//# sourceMappingURL=chunk-QWEWSWF7.js.map
