import {
  n as n3
} from "./chunk-2Y5KPYOJ.js";
import {
  o as o2
} from "./chunk-KSOWE6GO.js";
import {
  e
} from "./chunk-R67CDTDF.js";
import {
  c
} from "./chunk-DMGVDNFD.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2,
  t
} from "./chunk-NAB3NF54.js";
import {
  n
} from "./chunk-P6G64ARX.js";

// node_modules/@arcgis/core/chunks/Compositing.glsl.js
var d = class extends t {
  constructor() {
    super(...arguments), this.overlayIndex = 0, this.opacity = 1;
  }
};
function u(t2) {
  const d2 = new i();
  d2.include(o2);
  const u2 = d2.fragment;
  switch (t2.function) {
    case n3.Standard:
      u2.uniforms.add(new c("tex", (e2) => e2.texture)), t2.hasOpacityFactor ? (u2.uniforms.add(new o("opacity", (e2) => e2.opacity)), u2.code.add(n2`void main() {
gl_FragColor = texture2D(tex, uv) * opacity;
}`)) : u2.code.add(n2`void main() {
gl_FragColor = texture2D(tex, uv);
}`);
      break;
    case n3.OverlayWithTransparency:
      u2.uniforms.add(new c("tex", (e2) => e2.texture)), u2.uniforms.add(new e("overlayIdx", (e2) => e2.overlayIndex)), t2.hasOpacityFactor && u2.uniforms.add(new o("opacity", (e2) => e2.opacity)), u2.code.add(n2`
        void main() {
          vec2 overlayUV = overlayIdx == 0 ? vec2(uv.x * 0.5, uv.y) : vec2(uv.x * 0.5 + 0.5, uv.y);
          gl_FragColor = texture2D(tex, overlayUV) ${t2.hasOpacityFactor ? "* opacity" : ""};
        }`);
      break;
    case n3.TransparentToHUDVisibility:
      u2.uniforms.add(new c("tex", (e2) => e2.texture)), u2.code.add(n2`void main() {
gl_FragColor = vec4(1.0 - texture2D(tex, uv).a);
}`);
      break;
    case n3.Transparency:
      u2.uniforms.add([new c("colorTexture", (e2) => e2.colorTexture), new c("alphaTexture", (e2) => e2.alphaTexture), new c("frontFaceTexture", (e2) => e2.frontFaceTexture)]), u2.code.add(n2`void main() {
vec4 srcColor = texture2D(colorTexture, uv);
if(srcColor.a <= 1e-5){
discard;
}
float srcAlpha = texture2D(alphaTexture, uv).r;
vec4 frontFace = texture2D(frontFaceTexture, uv);
gl_FragColor = vec4(mix(srcColor.rgb/srcColor.a, frontFace.rgb, frontFace.a), 1.0 - srcAlpha);
}`);
      break;
    case n3.COUNT:
      break;
    default:
      n(t2.function);
  }
  return d2;
}
var l = Object.freeze(Object.defineProperty({ __proto__: null, CompositingPassParameters: d, build: u }, Symbol.toStringTag, { value: "Module" }));

export {
  d,
  u,
  l
};
//# sourceMappingURL=chunk-LDT3IFVT.js.map
