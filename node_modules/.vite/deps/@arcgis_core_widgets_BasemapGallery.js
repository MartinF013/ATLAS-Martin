import {
  r as r2
} from "./chunk-EOJGYH5X.js";
import {
  L as L2,
  k
} from "./chunk-4CRT3CQZ.js";
import {
  M
} from "./chunk-EJ4V43KX.js";
import "./chunk-PLLZPG4O.js";
import "./chunk-NAIF4GWX.js";
import {
  L,
  h as h2
} from "./chunk-24OMPNTT.js";
import {
  x
} from "./chunk-DLW46BXD.js";
import {
  a as a4,
  l as l2
} from "./chunk-ZN2MGN4S.js";
import "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import {
  n as n3
} from "./chunk-XZTXACPW.js";
import {
  t as t2
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import {
  An,
  en,
  tn
} from "./chunk-PZWU5EHT.js";
import "./chunk-4AZE5OWC.js";
import {
  e as e3,
  t as t3
} from "./chunk-CQSGZXR7.js";
import "./chunk-POPR7XUB.js";
import "./chunk-YG6VFATO.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-HR2OX32D.js";
import "./chunk-U7B2WKBH.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import {
  a as a3
} from "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  a,
  f as f2,
  h,
  j as j2,
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import {
  a as a2
} from "./chunk-KVF4M6PZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-6DWU2ZQF.js";
import {
  B
} from "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import {
  m as m2
} from "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import {
  m
} from "./chunk-FTLBKDGL.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  E
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import {
  s as s3
} from "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  f,
  g
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/BasemapGallery/support/basemapCompatibilityUtils.js
async function f3(e4, t4 = {}) {
  await y2(e4, t4), f(t4);
}
async function u2(e4, t4 = {}) {
  const { basemap: a6, view: n4 } = e4;
  if (f(t4), "spatialReferenceLocked" in n4 && !n4.spatialReferenceLocked)
    return;
  if (await a6.load(t4), f(t4), 0 === a6.baseLayers.length)
    return;
  const s4 = a6.baseLayers.getItemAt(0);
  if (!t3(s4))
    return;
  if (a6.spatialReference) {
    if (n4.spatialReference.equals(a6.spatialReference))
      return;
    w();
  }
  await s4.load(t4), f(t4);
  const o2 = (("supportedSpatialReferences" in s4 ? s4.supportedSpatialReferences : null) || ["tileInfo" in s4 ? s4.tileInfo.spatialReference : null]).filter(Boolean);
  0 !== o2.length && o2.every((e5) => !n4.spatialReference.equals(e5)) && w();
}
function w() {
  throw new s2("basemap-compatibility:incompatible-spatial-reference", "Basemap spatial reference is not compatible with the view");
}
async function y2(t4, a6) {
  const { basemap: i, view: r3 } = t4;
  if (await i.load(a6), 0 === i.baseLayers.length)
    return;
  const s4 = i.baseLayers.concat(i.referenceLayers).toArray().filter((e4) => !e3(e4)).map((t5) => new s2("basemap-compatibility:unsupported-basemap-layer-type", "Unsupported basemap layer type ${operationalLayerType}", { layer: t5, operationalLayerType: t5.operationalLayerType || "unknown" }));
  if (s4.length)
    throw s4[0];
  const o2 = i.baseLayers.getItemAt(0);
  if (e3(o2)) {
    try {
      await o2.load(a6);
    } catch (l3) {
      const t5 = "basemap-compatibility:unknown-error", a7 = "Unknown basemap compatibility error", { name: i2 = t5, message: r4 = a7, details: n4 } = l3;
      throw new s2(i2, r4, n4);
    }
    b(o2, r3);
  }
}
function b(i, r3) {
  const n4 = r3.state.viewingMode;
  if (!n4)
    return;
  let f5, u4;
  if ("wmts" === (i == null ? void 0 : i.type)) {
    const a6 = k(i, r3.spatialReference, n4);
    if (t(a6.tileInfo))
      throw new s2("basemapgalleryitem:tiling-scheme-incompatible", "Basemap tiling scheme is incompatible with the view");
    f5 = a6.tileInfo, u4 = a6.fullExtent;
  } else
    f5 = i.tileInfo, u4 = i.fullExtent;
  if (t(f5))
    return;
  if (!r2(f5.spatialReference, n4))
    throw new s2(`basemapgalleryitem:spatial-reference-unsupported-${a4(n4)}`, `Basemap spatial reference is unsupported in ${a4(n4)} mode`);
  const w2 = f5.spatialReference.isGeographic, y5 = "vector-tile" === (i == null ? void 0 : i.type) ? f5.getOrCreateCompatible(256, w2 ? 1 : 2) : null;
  if (n4 === l2.Global) {
    let t4 = L2(f5, u4, null, n4);
    if (t4 && "vector-tile" === (i == null ? void 0 : i.type) && r(u4) && y5 && !L2(y5, u4, null, n4) && (t4 = null), t4) {
      const a6 = f5.spatialReference.isWebMercator ? "web-mercator" : "wgs84";
      throw new s2(`basemapgalleryitem:tiling-scheme-unsupported-${a6}-global`, "Basemap tiling scheme is unsupported in global mode", { error: t4 });
    }
  } else if (M.checkUnsupported(f5))
    throw new s2("basemapgalleryitem:tiling-scheme-unsupported-local", "Basemap tiling scheme is unsupported in local mode");
  const b4 = r3.get("basemapTerrain.tilingScheme");
  if (b4 && !b4.compatibleWith(f5) && ("vector-tile" !== (i == null ? void 0 : i.type) || !y5 || !b4.compatibleWith(y5)))
    throw new s2("basemapgalleryitem:tiling-scheme-incompatible", "Basemap tiling scheme is incompatible with the view");
}

// node_modules/@arcgis/core/widgets/BasemapGallery/support/BasemapGalleryItem.js
var p = class extends a3(y) {
  constructor(e4) {
    super(e4), this.compatibilityFunction = null, this.error = null, this.state = "loading", this.view = null;
  }
  initialize() {
    const e4 = () => this.refresh();
    this.handles.add([l(() => {
      var _a;
      return (_a = this.basemap) == null ? void 0 : _a.loadStatus;
    }, e4), l(() => this.compatibilityFunction, e4), l(() => {
      var _a;
      return this.view && "basemapTerrain" in this.view && ((_a = this.view.basemapTerrain) == null ? void 0 : _a.tilingScheme);
    }, e4), l(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    }, e4), l(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.spatialReference;
    }, e4)]), this.refresh();
  }
  destroy() {
    this._cancelRefresh(), this.basemap = null, this.compatibilityFunction = null, this.view = null;
  }
  get _spatialReferenceTask() {
    return h2(this.view, this.basemap);
  }
  set basemap(e4) {
    const t4 = this._get("basemap");
    t4 && t4.cancelLoad(), e4 && e4.load().catch(() => {
    }), this._set("basemap", e4);
  }
  get spatialReference() {
    return this._spatialReferenceTask.spatialReference;
  }
  refresh() {
    var _a;
    this._cancelRefresh(), this._set("state", "loading");
    const e4 = (_a = this.basemap) == null ? void 0 : _a.loadStatus;
    if ("loaded" !== e4 && "failed" !== e4)
      return;
    if (!this.compatibilityFunction)
      return void ("loaded" === e4 ? (this._set("state", "ready"), this._set("error", null)) : (this._set("state", "error"), this._set("error", this.basemap.loadError)));
    const t4 = new AbortController(), { signal: s4 } = t4;
    this.compatibilityFunction(this, { signal: s4 }).then(() => j2(() => !this._spatialReferenceTask.updating, s4)).then(() => {
      this._set("state", "ready"), this._set("error", null);
    }).catch((e5) => {
      g(e5) || (this._set("state", "error"), this._set("error", e5));
    }), this._refreshController = t4;
  }
  _cancelRefresh() {
    this._refreshController && (this._refreshController.abort(), this._refreshController = null);
  }
};
e([d({ readOnly: true })], p.prototype, "_spatialReferenceTask", null), e([d()], p.prototype, "basemap", null), e([d()], p.prototype, "compatibilityFunction", void 0), e([d({ readOnly: true })], p.prototype, "error", void 0), e([d({ readOnly: true })], p.prototype, "spatialReference", null), e([d({ readOnly: true })], p.prototype, "state", void 0), e([d()], p.prototype, "view", void 0), p = e([n("esri.widgets.BasemapGallery.support.BasemapGalleryItem")], p);
var c = p;

// node_modules/@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource.js
var a5 = j.ofType(x);
var c2 = class extends y {
  constructor(r3) {
    super(r3), this.basemaps = new a5();
  }
  get state() {
    return "ready";
  }
  refresh() {
  }
};
e([d({ type: a5 })], c2.prototype, "basemaps", void 0), e([d({ readOnly: true })], c2.prototype, "state", null), c2 = e([n("esri.widgets.BasemapGallery.support.LocalBasemapsSource")], c2);
var m3 = c2;

// node_modules/@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource.js
var f4 = j.ofType(x);
var y3 = "esri.widgets.BasemapGallery.support.PortalBasemapsSource";
var b2 = s.getLogger(y3);
var j3 = class extends m2.LoadableMixin(m(m3)) {
  constructor(t4) {
    super(t4), this._handles = new u(), this.basemaps = new f4(), this.filterFunction = null, this.portal = B.getDefault(), this.query = null, this.updateBasemapsCallback = null;
  }
  initialize() {
    this._handles.add([l(() => {
      var _a, _b;
      return [this.filterFunction, this.loadStatus, (_a = this.portal) == null ? void 0 : _a.basemapGalleryGroupQuery, (_b = this.portal) == null ? void 0 : _b.user, this.query, this.updateBasemapsCallback];
    }, () => this.refresh(), h)]);
  }
  destroy() {
    this._handles.destroy(), this._handles = null, this.filterFunction = null, this.portal = null;
  }
  get state() {
    return "not-loaded" === this.loadStatus ? "not-loaded" : "loading" === this.loadStatus || this._lastPortalBasemapFetchController ? "loading" : "ready";
  }
  load(t4) {
    return this.addResolvingPromise(this.portal.load(t4)), this.notifyChange("state"), Promise.resolve(this);
  }
  async refresh() {
    if ("ready" !== this.state)
      return;
    this._lastPortalBasemapFetchController && (this._lastPortalBasemapFetchController.abort(), this._lastPortalBasemapFetchController = null);
    const t4 = this.portal, s4 = new AbortController();
    this._lastPortalBasemapFetchController = s4, this.notifyChange("state");
    try {
      const e4 = await t4.fetchBasemaps(this._toQueryString(this.query), s4);
      this._updateBasemaps(e4);
    } catch (e4) {
      if (g(e4))
        throw e4;
      b2.warn(new s2("basemap-source:fetch-basemaps-error", "Could not fetch basemaps from portal.", { error: e4 })), this._updateBasemaps();
    }
    this._lastPortalBasemapFetchController = null, this.notifyChange("state");
  }
  _toQueryString(t4) {
    return t4 && "string" != typeof t4 ? Object.keys(t4).map((s4) => `${s4}:${t4[s4]}`).join(" AND ") : t4;
  }
  _updateBasemaps(t4 = []) {
    let s4 = this.filterFunction ? t4.filter(this.filterFunction) : t4;
    s4 = this.updateBasemapsCallback ? this.updateBasemapsCallback(s4) : s4, this.basemaps.removeAll(), this.basemaps.addMany(s4);
  }
};
e([d({ readOnly: true, type: f4 })], j3.prototype, "basemaps", void 0), e([d()], j3.prototype, "filterFunction", void 0), e([d({ type: B })], j3.prototype, "portal", void 0), e([d()], j3.prototype, "query", void 0), e([d({ readOnly: true })], j3.prototype, "state", null), e([d()], j3.prototype, "updateBasemapsCallback", void 0), j3 = e([n(y3)], j3);
var B2 = j3;

// node_modules/@arcgis/core/widgets/BasemapGallery/BasemapGalleryViewModel.js
var g2 = j.ofType(c);
function _(e4) {
  return e4 && "esri.portal.Portal" === e4.declaredClass;
}
function B3(e4) {
  return e4 && !(e4 instanceof B2) && (!!e4.portal || !!e4.query);
}
function R(e4) {
  return e4 && "basemaps" in e4 && "state" in e4 && "refresh" in e4;
}
var F = class extends a3(m2) {
  constructor(e4) {
    super(e4), this._loadingProjectionEngine = false, this.items = new g2(), this.source = new B2(), this.view = null;
  }
  initialize() {
    const e4 = () => this._recreateItems();
    this.handles.add([l(() => "ready" === this.state ? this.compatibilityFunction : null, () => this._updateItems()), a(() => {
      var _a;
      return (_a = this.source) == null ? void 0 : _a.basemaps;
    }, "change", e4, { onListenerAdd: e4 })]);
  }
  get activeBasemap() {
    var _a, _b;
    return ((_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap) ?? null;
  }
  set activeBasemap(e4) {
    var _a, _b;
    if (!this.view.map)
      return;
    const i = "string" == typeof e4 ? x.fromId(e4) : e4;
    if (!i || !this.view.ready)
      return this.view.map.basemap = i, void this._clearOverride("activeBasemap");
    const s4 = i.spatialReference || ((_b = (_a = this.items) == null ? void 0 : _a.find((e5) => this.basemapEquals(i, e5.basemap))) == null ? void 0 : _b.spatialReference);
    if (s4 && "spatialReferenceLocked" in this.view && !this.view.spatialReferenceLocked) {
      const t4 = this.view.spatialReference;
      if (r(s4) && !E(t4, s4) && !An(this.view.spatialReference, s4) && !en())
        return this._override("activeBasemap", i), this._loadingProjectionEngine = true, void tn().then(() => {
          this._get("activeBasemap") === e4 && (this.view.map.basemap = e4, this.view.spatialReference = s4, this._clearOverride("activeBasemap"));
        }, () => {
        }).then(() => {
          this._loadingProjectionEngine = false;
        });
      this.view.map.basemap = i, this._clearOverride("activeBasemap"), r(s4) && !E(this.view.spatialReference, s4) && (this.view.spatialReference = s4);
    } else
      this.view.map.basemap = i, this._clearOverride("activeBasemap");
  }
  get compatibilityFunction() {
    var _a;
    return "3d" === ((_a = this.view) == null ? void 0 : _a.type) ? f3 : u2;
  }
  set compatibilityFunction(e4) {
    r(e4) ? this._override("compatibilityFunction", e4) : this._clearOverride("compatibilityFunction");
  }
  castSource(e4) {
    return Array.isArray(e4) || j.isCollection(e4) ? new m3({ basemaps: e4 }) : _(e4) ? new B2({ portal: e4 }) : B3(e4) ? new B2(e4) : R(e4) ? e4 : null;
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) && this.source ? this._loadingProjectionEngine ? "loading" : "ready" : "disabled";
  }
  basemapEquals(e4, t4) {
    return L(e4, t4);
  }
  refresh() {
    this._recreateItems();
  }
  load(e4) {
    return this.addResolvingPromise(m2.isLoadable(this.source) ? this.source.load(e4) : null), Promise.resolve(this);
  }
  _recreateItems() {
    var _a;
    const e4 = (_a = this.source) == null ? void 0 : _a.basemaps, { view: t4, compatibilityFunction: i } = this;
    this.items.removeAll().forEach((e5) => e5.destroy()), e4 && this.items.addMany(e4.map((e5) => new c({ basemap: e5, compatibilityFunction: i, view: t4 })));
  }
  _updateItems() {
    for (const e4 of this.items)
      e4.compatibilityFunction = this.compatibilityFunction, e4.view = this.view;
  }
};
e([d()], F.prototype, "_loadingProjectionEngine", void 0), e([d()], F.prototype, "activeBasemap", null), e([d()], F.prototype, "compatibilityFunction", null), e([d({ readOnly: true, type: g2 })], F.prototype, "items", void 0), e([d()], F.prototype, "source", void 0), e([s3("source")], F.prototype, "castSource", null), e([d({ readOnly: true })], F.prototype, "state", null), e([d()], F.prototype, "view", void 0), F = e([n("esri.widgets.BasemapGallery.BasemapGalleryViewModel")], F);
var P = F;

// node_modules/@arcgis/core/widgets/BasemapGallery.js
var u3 = { base: "esri-basemap-gallery esri-widget esri-widget--panel-height-only", sourceLoading: "esri-basemap-gallery--source-loading", loader: "esri-basemap-gallery__loader", item: "esri-basemap-gallery__item", itemContainer: "esri-basemap-gallery__item-container", itemTitle: "esri-basemap-gallery__item-title", itemThumbnail: "esri-basemap-gallery__item-thumbnail", selectedItem: "esri-basemap-gallery__item--selected", itemError: "esri-basemap-gallery__item--error", emptyMessage: "esri-widget__content--empty", widgetIcon: "esri-icon-basemap", disabled: "esri-disabled", loaderAnimation: "esri-widget__loader-animation" };
var y4 = class extends O {
  constructor(e4, s4) {
    super(e4, s4), this._handles = new u(), this.activeBasemap = null, this.disabled = false, this.headingLevel = 2, this.iconClass = u3.widgetIcon, this.label = void 0, this.messages = null, this.source = null, this.view = null, this.viewModel = new P();
  }
  initialize() {
    const e4 = this._handles;
    this.own([a(() => this.viewModel.items, "change", (s4) => {
      const t4 = "basemap-gallery-item-changes", { added: a6, moved: i } = s4;
      e4.remove(t4), e4.add([...a6, ...i].map((e5) => l(() => e5.state, () => this.scheduleRender())), t4), this.scheduleRender();
    }), e4, f2(() => this.source, () => this.viewModel.load(), { initial: true, once: true })]);
  }
  destroy() {
    this._handles.destroy();
  }
  loadDependencies() {
    return import("./calcite-scrim-733IL34K.js");
  }
  render() {
    const e4 = "loading" === this.get("source.state"), s4 = this.disabled || "disabled" === this.get("viewModel.state"), t4 = this.get("viewModel.items").toArray().map(this._renderBasemapGalleryItem, this), a6 = { [u3.sourceLoading]: e4, [u3.disabled]: s4 }, i = e4 ? n2("div", { class: u3.loader, key: "esri-basemap-gallery__loader" }) : null, r3 = e4 ? null : t4.length > 0 ? n2("ul", { class: u3.itemContainer, key: "esri-basemap-gallery__item-container", role: "menu" }, t4) : n2("div", { class: u3.emptyMessage, key: "esri-basemap-gallery__empty-message" }, n2(n3, { level: this.headingLevel }, this.messages.noBasemaps));
    return n2("div", { class: this.classes(u3.base, a6) }, i, r3);
  }
  _handleClick(e4) {
    const s4 = e4.currentTarget["data-item"];
    "ready" === s4.state && (this.viewModel.activeBasemap = s4.basemap);
  }
  _renderBasemapGalleryItem(e4) {
    const t4 = e4.get("basemap.thumbnailUrl") || a2("esri/themes/base/images/basemap-toggle-64.svg"), a6 = e4.get("basemap.title"), i = e4.get("basemap.portalItem.snippet"), r3 = e4.get("error.message") || i || a6, { viewModel: o2 } = this, l3 = !this.disabled && "disabled" !== o2.state && "ready" === e4.state ? 0 : -1, m4 = o2.basemapEquals(e4.basemap, this.activeBasemap), d2 = "loading" === o2.state, p2 = { [u3.selectedItem]: m4, [u3.itemError]: "error" === e4.state };
    return n2("li", { "aria-selected": m4.toString(), bind: this, class: this.classes(u3.item, p2), "data-item": e4, onkeydown: this._handleClick, onclick: this._handleClick, role: "menuitem", tabIndex: l3, title: r3 }, n2("img", { alt: "", class: u3.itemThumbnail, src: t4 }), n2("div", { class: u3.itemTitle }, a6), "loading" === e4.state || m4 && d2 ? n2("calcite-scrim", null, n2("span", { "aria-hidden": "true", role: "presentation", class: u3.loaderAnimation })) : null);
  }
};
e([o("viewModel.activeBasemap")], y4.prototype, "activeBasemap", void 0), e([d()], y4.prototype, "disabled", void 0), e([d()], y4.prototype, "headingLevel", void 0), e([d()], y4.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], y4.prototype, "label", void 0), e([d(), e2("esri/widgets/BasemapGallery/t9n/BasemapGallery")], y4.prototype, "messages", void 0), e([o("viewModel.source")], y4.prototype, "source", void 0), e([o("viewModel.view")], y4.prototype, "view", void 0), e([d()], y4.prototype, "viewModel", void 0), e([t2()], y4.prototype, "_handleClick", null), y4 = e([n("esri.widgets.BasemapGallery")], y4);
var b3 = y4;
export {
  b3 as default
};
//# sourceMappingURL=@arcgis_core_widgets_BasemapGallery.js.map
