import {
  n as n2,
  o,
  r as r2
} from "./chunk-NZGLO4UW.js";
import {
  i as i2
} from "./chunk-4KPVL3JK.js";
import {
  a
} from "./chunk-4OFLHC3C.js";
import {
  i
} from "./chunk-UMSO3HI4.js";
import {
  f
} from "./chunk-VKEKAYXP.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-GILVK5Z7.js";
import "./chunk-YZ46FBEM.js";
import "./chunk-JX3YCNPL.js";
import "./chunk-JERZLQLG.js";
import "./chunk-JWKDNFWF.js";
import "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-SASFTPK5.js";
import "./chunk-UJS24K6P.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import "./chunk-6FQZDXGD.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-YRAX326I.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-YDPQRKY4.js";
import {
  r
} from "./chunk-ARI6FRU4.js";
import {
  p
} from "./chunk-BBO6WYBO.js";
import {
  h
} from "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-G2GJVIQC.js";
import "./chunk-567AWHAB.js";
import "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-MV2XZ5BA.js";
import {
  e as e2
} from "./chunk-PQO66WZ2.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-YL26MZEL.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  E
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  g
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var _ = [0, 0];
var I = class extends i2(i(r2(f(u)))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume();
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null;
    this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, t) => this.fetchTile(e4, t) }), this._tileStrategy = new r({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), this.requestUpdate(), this.handles.add(l(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return E((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  createFetchPopupFeaturesQueryGeometry(e3, t) {
    return a(e3, t, this.view);
  }
  async doRefresh() {
    this.updateRequested || this.suspended || (this._fetchQueue.reset(), this._tileStrategy.tiles.forEach((e3) => this._enqueueTileFetch(e3)));
  }
  isUpdating() {
    var _a;
    return ((_a = this._fetchQueue) == null ? void 0 : _a.updating) ?? false;
  }
  acquireTile(e3) {
    const t = this._bitmapView.createTile(e3), i3 = t.bitmap;
    return [i3.x, i3.y] = this._tileInfoView.getTileCoords(_, t.key), i3.resolution = this._tileInfoView.getTileResolution(t.key), [i3.width, i3.height] = this._tileInfoView.tileInfo.size, this._enqueueTileFetch(t), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r3, resamplingLevel: l2 = 0 } = t;
    if (!s2)
      try {
        return await this._fetchImage(e3, r3);
      } catch (h2) {
        if (!g(h2) && !this.resampling)
          return o(this._tileInfoView.tileInfo.size);
        if (l2 < 3) {
          const i3 = this._tileInfoView.getTileParentId(e3.id);
          if (i3) {
            const s3 = new e2(i3), r4 = await this.fetchTile(s3, { ...t, resamplingLevel: l2 + 1 });
            return n2(this._tileInfoView, r4, s3, e3);
          }
        }
        throw h2;
      }
    const a2 = new e2(0, 0, 0, 0);
    let o2;
    try {
      if (await s2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, a2, { signal: r3 }), a2.level !== e3.level && !this.resampling)
        return o(this._tileInfoView.tileInfo.size);
      o2 = await this._fetchImage(a2, r3);
    } catch (h2) {
      if (g(h2))
        throw h2;
      o2 = await this._fetchImage(e3, r3);
    }
    return this.resampling ? n2(this._tileInfoView, o2, a2, e3) : o2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (s2) {
        g(s2) || s.getLogger(this.declaredClass).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t) {
    return this.layer.fetchTile(e3.level, e3.row, e3.col, { signal: t });
  }
};
e([d()], I.prototype, "_fetchQueue", void 0), e([d()], I.prototype, "resampling", null), I = e([n("esri.views.2d.layers.TileLayerView2D")], I);
var V = I;
export {
  V as default
};
//# sourceMappingURL=TileLayerView2D-SAOHHCXK.js.map
