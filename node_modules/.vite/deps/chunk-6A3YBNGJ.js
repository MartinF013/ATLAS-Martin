import {
  g
} from "./chunk-BLINZ65M.js";
import {
  h,
  j2 as j,
  m2 as m
} from "./chunk-TADZYUVR.js";
import {
  S
} from "./chunk-5TRUGQDM.js";
import {
  l
} from "./chunk-FVPTCNCX.js";
import {
  s
} from "./chunk-BPZGJQOB.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/support/TileTreeDebugger.js
var m2 = [[0, 179, 255], [117, 62, 128], [0, 104, 255], [215, 189, 166], [32, 0, 193], [98, 162, 206], [102, 112, 129], [52, 125, 0], [142, 118, 246], [138, 83, 0], [92, 122, 255], [122, 55, 83], [0, 142, 255], [81, 40, 179], [0, 200, 244], [13, 24, 127], [0, 170, 147], [19, 58, 241], [22, 44, 35]];
var b = class extends y {
  constructor(e2) {
    super(e2), this.updating = false, this.enablePolygons = true, this.enableLabels = true, this._polygons = /* @__PURE__ */ new Map(), this._labels = /* @__PURE__ */ new Map(), this._enabled = true;
  }
  initialize() {
    this._symbols = m2.map((e2) => new S({ color: [e2[0], e2[1], e2[2], 0.6], outline: { color: "black", width: 1 } })), this.update();
  }
  destroy() {
    this._enabled = false, this.clear();
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(e2) {
    this._enabled !== e2 && (this._enabled = e2, this.update());
  }
  update() {
    if (!this._enabled)
      return void this.clear();
    const e2 = (e3) => {
      if (r(e3.label))
        return e3.label;
      let s2 = e3.lij.toString();
      return r(e3.loadPriority) && (s2 += ` (${e3.loadPriority})`), s2;
    }, t2 = this.getTiles(), a = new Array(), n2 = new Set((this._labels.size, this._labels.keys()));
    t2.forEach((p2, m3) => {
      const b2 = p2.lij.toString();
      n2.delete(b2);
      const d2 = p2.lij[0], g2 = p2.geometry;
      if (this.enablePolygons && !this._polygons.has(b2)) {
        const e3 = new g({ geometry: g2, symbol: this._symbols[d2 % this._symbols.length] });
        this._polygons.set(b2, e3), a.push(e3);
      }
      if (this.enableLabels) {
        const n3 = e2(p2), d3 = m3 / (t2.length - 1), u = s(0, 200, d3), _ = s(20, 6, d3) / 0.75, f = r(p2.loadPriority) && p2.loadPriority >= t2.length, w = new l([u, f ? 0 : u, f ? 0 : u]), j2 = "3d" === this.view.type ? () => new h({ verticalOffset: { screenLength: 40 / 0.75 }, callout: { type: "line", color: "white", border: { color: "black" } }, symbolLayers: [new j({ text: n3, halo: { color: "white", size: 1 / 0.75 }, material: { color: w }, size: _ })] }) : () => new m({ text: n3, haloColor: "white", haloSize: 1 / 0.75, color: w, size: _ });
        if (this._labels.has(b2)) {
          const e3 = this._labels.get(b2), s2 = j2();
          (t(e3.symbol) || JSON.stringify(s2) !== JSON.stringify(e3.symbol)) && (e3.symbol = s2);
        } else {
          const e3 = new g({ geometry: g2.extent.center, symbol: j2() });
          this._labels.set(b2, e3), a.push(e3);
        }
      }
    });
    const p = new Array();
    n2.forEach((e3) => {
      this._polygons.has(e3) && (p.push(this._polygons.get(e3)), this._polygons.delete(e3)), this._labels.has(e3) && (p.push(this._labels.get(e3)), this._labels.delete(e3));
    }), this.view.graphics.removeMany(p), this.view.graphics.addMany(a);
  }
  clear() {
    this.view.graphics.removeMany(Array.from(this._polygons.values())), this.view.graphics.removeMany(Array.from(this._labels.values())), this._polygons.clear(), this._labels.clear();
  }
};
e([d({ constructOnly: true })], b.prototype, "view", void 0), e([d({ readOnly: true })], b.prototype, "updating", void 0), e([d()], b.prototype, "enabled", null), b = e([n("esri.views.support.TileTreeDebugger")], b);

export {
  b
};
//# sourceMappingURL=chunk-6A3YBNGJ.js.map
