import {
  O,
  e2
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import {
  M as M2
} from "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-KVF4M6PZ.js";
import {
  M,
  y as y2
} from "./chunk-DYETG5YB.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import {
  c
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import {
  m2 as m
} from "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import {
  j,
  j2
} from "./chunk-YPZEGNLG.js";
import {
  R,
  k2 as k,
  r
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import {
  s
} from "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/ScaleBar/ScaleBarViewModel.js
function g(e3) {
  const { wkid: t2 } = e3;
  if (null != r[t2])
    return r.values[r[t2]];
  const { wkt: r2 } = e3, s2 = r2.lastIndexOf(",") + 1, o2 = r2.lastIndexOf("]]");
  return parseFloat(r2.substring(s2, o2));
}
function h(e3, t2) {
  return e3 && e3.includes(t2);
}
function w(e3, t2) {
  const { x: r2, y: s2 } = "decimal-degrees" === e3 ? j(t2, true) : t2;
  return [r2, s2];
}
function y3({ state: { paddedViewState: e3 }, spatialReference: t2, width: r2 }) {
  return t2.isWrappable && e3.worldScreenWidth < r2;
}
var S = class extends y {
  constructor(e3) {
    super(e3), this.scaleComputedFrom = c(), this.view = null;
  }
  get state() {
    return this.get("view.ready") && "2d" === this.get("view.type") ? "ready" : "disabled";
  }
  getScaleBarProperties(e3, t2) {
    if ("disabled" === this.state || isNaN(e3) || !t2)
      return null;
    const s2 = this._getDistanceInKm(this.view, this.scaleComputedFrom);
    if (t(s2))
      return null;
    if ("metric" === t2)
      return this._getScaleBarProps(e3, s2, "metric");
    const o2 = s2 / 1.609;
    return this._getScaleBarProps(e3, o2, "non-metric");
  }
  _getLocationUnit() {
    const e3 = this.get("view.spatialReference"), { isWebMercator: t2, wkid: r2, wkt: s2 } = e3;
    return t2 || h(s2, "WGS_1984_Web_Mercator") ? "decimal-degrees" : null != r[r2] || h(s2, "PROJCS") ? "linear-unit" : "unknown";
  }
  _getDistanceInKm(e3, t2) {
    const { state: r2, spatialReference: s2 } = e3, o2 = this._getLocationUnit();
    if ("linear-unit" === o2) {
      const e4 = 1e3;
      return r2.extent.width * g(s2) / e4;
    }
    const [i, m3] = this._getScaleMeasuringPoints(e3, t2), l2 = "decimal-degrees" === o2 || s2.isGeographic && !M(s2) ? k.WGS84 : s2, p2 = new m({ paths: [[w(o2, i), w(o2, m3)]], spatialReference: l2 }), f = M2(p2, 10);
    let h2;
    try {
      [h2] = y2([f], "kilometers");
    } catch {
      return null;
    }
    return h2;
  }
  _getScaleMeasuringPoints(e3, t2) {
    const { width: r2, height: o2, position: i, spatialReference: n3 } = e3;
    if (y3(e3)) {
      const { valid: e4 } = R(n3);
      return [new j2(e4[0], 0, n3), new j2(e4[1], 0, n3)];
    }
    let a = t2.y - i[1];
    a > o2 ? a = o2 : a < 0 && (a = 0);
    const c2 = c(0, a), l2 = c(r2, a);
    return [e3.toMap(c2), e3.toMap(l2)];
  }
  _getScaleBarProps(e3, t2, r2) {
    const { view: s2 } = this;
    let o2 = e3 * t2 / (y3(s2) ? s2.state.paddedViewState.worldScreenWidth : s2.width), i = "metric" === r2 ? "km" : "mi";
    if (o2 < 0.1) {
      if ("mi" === i) {
        o2 *= 5280, i = "ft";
      } else if ("km" === i) {
        o2 *= 1e3, i = "m";
      }
    }
    let n3 = 0;
    for (; o2 >= 1; )
      o2 /= 10, n3++;
    const a = this._getConstraints(o2);
    if (!a)
      return null;
    const { min: c2, max: m3 } = a, l2 = m3 / o2 >= o2 / c2 ? c2 : m3;
    return { length: e3 * (l2 / o2), value: 10 ** n3 * l2, unit: i };
  }
  _getConstraints(e3) {
    return e3 > 0.5 ? { min: 0.5, max: 1 } : e3 > 0.3 ? { min: 0.3, max: 0.5 } : e3 > 0.2 ? { min: 0.2, max: 0.3 } : e3 > 0.15 ? { min: 0.15, max: 0.2 } : e3 >= 0.1 ? { min: 0.15, max: 0.1 } : void 0;
  }
};
e([d()], S.prototype, "scaleComputedFrom", void 0), e([d({ readOnly: true })], S.prototype, "state", null), e([d()], S.prototype, "view", void 0), S = e([n("esri.widgets.Scalebar.ScaleBarViewModel")], S);
var j3 = S;

// node_modules/@arcgis/core/widgets/ScaleBar.js
var u = { base: "esri-scale-bar esri-widget", labelContainer: "esri-scale-bar__label-container", rulerLabelContainer: "esri-scale-bar__label-container--ruler", lineLabelContainer: "esri-scale-bar__label-container--line", topLabelContainer: "esri-scale-bar__label-container--top", bottomLabelContainer: "esri-scale-bar__label-container--bottom", label: "esri-scale-bar__label", line: "esri-scale-bar__line", topLine: "esri-scale-bar__line--top", bottomLine: "esri-scale-bar__line--bottom", ruler: "esri-scale-bar__ruler", rulerBlock: "esri-scale-bar__ruler-block", barContainer: "esri-scale-bar__bar-container", rulerBarContainer: "esri-scale-bar__bar-container--ruler", lineBarContainer: "esri-scale-bar__bar-container--line", disabled: "esri-disabled" };
function p(e3) {
  return 2 * e3;
}
var b = class extends O {
  constructor(e3, r2) {
    super(e3, r2), this.label = void 0, this.messages = null, this.unit = "non-metric", this.view = null, this.viewModel = new j3();
  }
  initialize() {
    this.own([l(() => {
      const { view: e3 } = this;
      return [e3 == null ? void 0 : e3.stationary, e3 == null ? void 0 : e3.center, e3 == null ? void 0 : e3.scale, e3 == null ? void 0 : e3.zoom];
    }, ([e3]) => {
      e3 && this.scheduleRender();
    })]);
  }
  set style(e3) {
    const r2 = "dual" === this.unit ? "line" : e3;
    this._set("style", r2);
  }
  castStyle(e3) {
    return "line" === e3 ? e3 : "ruler";
  }
  castUnit(e3) {
    return "metric" === e3 || "dual" === e3 ? e3 : "non-metric";
  }
  render() {
    const e3 = "disabled" === this.get("viewModel.state"), r2 = { [u.disabled]: e3 };
    let t2, s2;
    if (!e3) {
      const { unit: e4, style: r3 } = this, a = "metric" === e4 || "dual" === e4, i = 50;
      if ("non-metric" === e4 || "dual" === e4) {
        const e5 = this.viewModel.getScaleBarProperties(i, "non-metric");
        e5 && (s2 = "ruler" === r3 ? this._renderRuler(e5) : this._renderLine(e5, "bottom"));
      }
      if (a) {
        const e5 = this.viewModel.getScaleBarProperties(i, "metric");
        e5 && (t2 = "ruler" === r3 ? this._renderRuler(e5) : this._renderLine(e5, "top"));
      }
    }
    return n2("div", { afterCreate: this._handleRootCreateOrUpdate, afterUpdate: this._handleRootCreateOrUpdate, bind: this, class: this.classes(u.base, r2) }, t2, s2);
  }
  _renderRuler(e3) {
    const r2 = p(Math.round(e3.length)), { messages: t2 } = this, s2 = t2[e3.unit] || t2.unknownUnit, a = `${p(e3.value)} ${s2}`;
    return n2("div", { class: this.classes(u.barContainer, u.rulerBarContainer), key: "esri-scale-bar__ruler" }, n2("div", { class: u.ruler, styles: { width: `${r2}px` } }, n2("div", { class: u.rulerBlock }), n2("div", { class: u.rulerBlock }), n2("div", { class: u.rulerBlock }), n2("div", { class: u.rulerBlock })), n2("div", { class: this.classes(u.labelContainer, u.rulerLabelContainer) }, n2("div", { class: u.label }, "0"), n2("div", { class: u.label }, a)));
  }
  _renderLine(e3, r2) {
    const { messages: t2 } = this, s2 = t2[e3.unit] || t2.unknownUnit, a = `${p(e3.value)} ${s2}`, i = { [u.topLabelContainer]: "top" === r2, [u.bottomLabelContainer]: "bottom" === r2 }, l2 = n2("div", { class: this.classes(u.labelContainer, u.lineLabelContainer, i), key: "esri-scale-bar__label" }, n2("div", { class: u.label }, a)), o2 = { [u.topLine]: "top" === r2, [u.bottomLine]: "bottom" === r2 }, n3 = p(Math.round(e3.length)), c2 = n2("div", { class: this.classes(u.line, o2), key: "esri-scale-bar__line", styles: { width: `${n3}px` } });
    return n2("div", { class: this.classes(u.barContainer, u.lineBarContainer), key: "esri-scale-bar__line-container" }, [c2, l2]);
  }
  _handleRootCreateOrUpdate(e3) {
    const r2 = this.viewModel;
    if (!r2)
      return;
    const s2 = e3.getBoundingClientRect(), a = s2.left + window.pageXOffset, i = s2.top + window.pageYOffset, l2 = c(a, i);
    (l2.x !== r2.scaleComputedFrom.x || l2.y !== r2.scaleComputedFrom.y) && (r2.scaleComputedFrom = l2);
  }
};
e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], b.prototype, "label", void 0), e([d(), e2("esri/widgets/ScaleBar/t9n/ScaleBar")], b.prototype, "messages", void 0), e([d()], b.prototype, "style", null), e([s("style")], b.prototype, "castStyle", null), e([d()], b.prototype, "unit", void 0), e([s("unit")], b.prototype, "castUnit", null), e([o("viewModel.view")], b.prototype, "view", void 0), e([d()], b.prototype, "viewModel", void 0), b = e([n("esri.widgets.ScaleBar")], b);
var m2 = b;
export {
  m2 as default
};
//# sourceMappingURL=@arcgis_core_widgets_ScaleBar.js.map
