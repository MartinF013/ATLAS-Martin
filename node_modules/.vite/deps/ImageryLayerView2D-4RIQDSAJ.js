import {
  m as m3
} from "./chunk-OSZ7CHVO.js";
import {
  n as n2
} from "./chunk-S6BTGZWZ.js";
import {
  S
} from "./chunk-AQHDXFPK.js";
import {
  t as t2
} from "./chunk-EYP4YHHR.js";
import {
  d as d3,
  y as y2
} from "./chunk-ICFEIR72.js";
import "./chunk-7S6G3GM7.js";
import {
  ae
} from "./chunk-TOHMM6FQ.js";
import "./chunk-DQPH5EKZ.js";
import "./chunk-LCW6FHIL.js";
import "./chunk-WKUIJCRG.js";
import "./chunk-XQ337NY7.js";
import {
  i as i2
} from "./chunk-UMSO3HI4.js";
import {
  f as f2
} from "./chunk-VKEKAYXP.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-2HUXPKKU.js";
import "./chunk-WL7KJZAL.js";
import {
  i
} from "./chunk-YZ46FBEM.js";
import "./chunk-JX3YCNPL.js";
import {
  a
} from "./chunk-JERZLQLG.js";
import {
  m as m2
} from "./chunk-JWKDNFWF.js";
import {
  s as s2
} from "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-SASFTPK5.js";
import "./chunk-Z34NAJDO.js";
import "./chunk-HHJIVHSH.js";
import "./chunk-6UTST6NO.js";
import "./chunk-BYHUWBKS.js";
import "./chunk-IEPHENP2.js";
import "./chunk-436X6OVY.js";
import "./chunk-XP3NTQW6.js";
import "./chunk-UJS24K6P.js";
import "./chunk-RB2H3SKO.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-SNC4BDIX.js";
import "./chunk-3CED37X7.js";
import "./chunk-FMIFCFD7.js";
import "./chunk-WL7AHHN3.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import {
  I
} from "./chunk-6FQZDXGD.js";
import "./chunk-ZUKXZSOF.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-4V2P7IXX.js";
import "./chunk-SF7Z6XNR.js";
import {
  F
} from "./chunk-B5VZTE6L.js";
import {
  M as M2,
  m
} from "./chunk-I2XAFJCJ.js";
import {
  f
} from "./chunk-YRAX326I.js";
import "./chunk-AKQ6VRGN.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-WN3KE5M2.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-AGO2OES3.js";
import "./chunk-ARI6FRU4.js";
import "./chunk-BBO6WYBO.js";
import "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-ZIAGZEFK.js";
import "./chunk-FR7M4UDR.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-G2GJVIQC.js";
import "./chunk-567AWHAB.js";
import "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-ZEIWFXXO.js";
import "./chunk-YXFNNKMT.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-S5PZEGLP.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-6EODZIDR.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-PQO66WZ2.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import {
  c
} from "./chunk-37ZVELW7.js";
import "./chunk-YL26MZEL.js";
import "./chunk-YG6VFATO.js";
import "./chunk-HR2OX32D.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-TBT57L4K.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import {
  d as d2
} from "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  U,
  l,
  w
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-I4USSDLI.js";
import "./chunk-B42HXLDM.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import {
  g as g2
} from "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import {
  U as U2
} from "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  g,
  x
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  e as e2,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var d4 = s.getLogger("esri.views.2d.layers.imagery.ImageryView2D");
var u2 = class extends y {
  constructor() {
    super(...arguments), this.attached = false, this.container = new s2(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new t2();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(e3) {
    this.strategy.update(e3).catch((e4) => {
      g(e4) || d4.error(e4);
    });
  }
  hitTest(e3) {
    return new g2({ attributes: {}, geometry: e3.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const e3 = this.layer.version >= 10, t4 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, r2 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new S({ container: this._bitmapView, imageNormalizationSupported: e3, imageMaxHeight: t4, imageMaxWidth: r2, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports((e3) => {
      e3.source instanceof HTMLImageElement ? e3.requestRender() : this.layer.applyRenderer({ pixelBlock: e3.source.pixelBlock }).then((t4) => {
        const r2 = e3.source;
        r2.pixelBlock = t4.pixelBlock, r2.filter = (e4) => this.layer.applyFilter(e4), this.container.requestRender();
      });
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating)
      return null;
    const e3 = this.strategy.bitmaps;
    if (1 === e3.length && e3[0].source)
      return { extent: e3[0].source.extent, pixelBlock: e3[0].source.originalPixelBlock };
    if (e3.length > 1) {
      const t4 = this.view.extent, r2 = e3.map((e4) => e4.source).filter((e4) => e4.extent && e4.extent.intersects(t4)).map((e4) => ({ extent: e4.extent, pixelBlock: e4.originalPixelBlock })), i3 = f(r2, t4);
      return r(i3) ? { extent: i3.extent, pixelBlock: i3.pixelBlock } : null;
    }
    return null;
  }
  _fetchImage(e3, t4, r2, i3) {
    return (i3 = i3 || {}).timeExtent = this.timeExtent, i3.requestAsImageElement = true, this.layer.fetchImage(e3, t4, r2, i3).then((e4) => e4.imageElement ? e4.imageElement : this.layer.applyRenderer(e4.pixelData, { signal: i3.signal }).then((t5) => {
      const r3 = new i(t5.pixelBlock, t5.extent.clone(), e4.pixelData.pixelBlock);
      return r3.filter = (e5) => this.layer.applyFilter(e5), r3;
    }));
  }
};
e([d()], u2.prototype, "attached", void 0), e([d()], u2.prototype, "container", void 0), e([d()], u2.prototype, "layer", void 0), e([d()], u2.prototype, "strategy", void 0), e([d()], u2.prototype, "timeExtent", void 0), e([d()], u2.prototype, "view", void 0), e([d()], u2.prototype, "updateRequested", void 0), e([d()], u2.prototype, "updating", null), e([d()], u2.prototype, "type", void 0), u2 = e([n("esri.views.2d.layers.imagery.ImageryView2D")], u2);
var y3 = u2;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t3 = class extends a {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  get requiresDedicatedFBO() {
    return false;
  }
  prepareRenderPasses(s3) {
    const t4 = s3.registerRenderPass({ name: "imagery (vf)", brushes: [m2], target: () => this.children, drawPhase: I.MAP });
    return [...super.prepareRenderPasses(s3), t4];
  }
  doRender(e3) {
    this.visible && e3.drawPhase === I.MAP && this.symbolTypes.forEach((r2) => {
      e3.renderPass = r2, super.doRender(e3);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var p = s.getLogger("esri.views.2d.layers.imagery.VectorFieldView2D");
var m4 = class extends y {
  constructor(e3) {
    super(e3), this.update = x((e4, t4) => this._update(e4, t4).catch((e5) => {
      g(e5) || p.error(e5);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e3) {
    if (!this.container.children.length)
      return;
    const t4 = this.container.children[0];
    t4.symbolizerParameters = e3, t4.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e3.style ? ["scalar", "triangle"] : "simple_scalar" === e3.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e3, t4, r2) {
    if (!e3.stationary)
      return;
    const { extent: i3, spatialReference: s3 } = e3.state, o = new M({ xmin: i3.xmin, ymin: i3.ymin, xmax: i3.xmax, ymax: i3.ymax, spatialReference: s3 }), [a2, n3] = e3.state.size;
    this._loading = this.fetchPixels(o, a2, n3, r2);
    const c2 = await this._loading;
    this._addToDisplay(c2, t4, e3.state), this._loading = null;
  }
  _addToDisplay(e3, t4, r2) {
    if (t(e3.pixelBlock))
      return this.container.children.forEach((e4) => e4.destroy()), void this.container.removeAllChildren();
    const { extent: s3, pixelBlock: o } = e3, a2 = new y2(o);
    a2.offset = [0, 0], a2.symbolizerParameters = t4, a2.rawPixelData = e3, a2.invalidateVAO(), a2.x = s3.xmin, a2.y = s3.ymax, a2.pixelRatio = r2.pixelRatio, a2.rotation = r2.rotation, a2.resolution = r2.resolution, a2.width = o.width * t4.symbolTileSize, a2.height = o.height * t4.symbolTileSize, this.container.children.forEach((e4) => e4.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t4.style ? ["scalar", "triangle"] : "simple_scalar" === t4.style ? ["scalar"] : ["triangle"], this.container.addChild(a2);
  }
};
e([d()], m4.prototype, "fetchPixels", void 0), e([d()], m4.prototype, "container", void 0), e([d()], m4.prototype, "_loading", void 0), e([d()], m4.prototype, "updating", null), m4 = e([n("esri.views.2d.layers.imagery.ImageryVFStrategy")], m4);
var d5 = m4;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var f3 = class extends d2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t3(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (e3, t4, r2, i3) => {
      const n3 = await this._projectFullExtentPromise, { symbolTileSize: l2 } = this.layer.renderer, { extent: c2, width: m5, height: p2 } = M2(e3, t4, r2, l2, n3);
      if (r(n3) && !n3.intersects(e3))
        return { extent: c2, pixelBlock: null };
      const h = { bbox: `${c2.xmin}, ${c2.ymin}, ${c2.xmax}, ${c2.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: l2, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(h)) {
        const e4 = this.getPixelData();
        if (r(e4)) {
          if (`${e4.extent.xmin}, ${e4.extent.ymin}, ${e4.extent.xmax}, ${e4.extent.ymax}` === h.bbox)
            return e4;
        }
      }
      const { pixelData: u3 } = await this.layer.fetchImage(c2, m5, p2, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i3 });
      if (this._dataParameters = h, t(u3.pixelBlock))
        return { extent: c2, pixelBlock: null };
      return { extent: c2, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? e2(m(u3.pixelBlock, "vector-uv")) : u3.pixelBlock };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new d5({ container: this.container, fetchPixels: this._fetchpixels }), this.handles.add(l(() => this.layer.renderer, (e3) => this._updateSymbolizerParams(e3), w), "vector-field-view-update");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((e3) => e3.destroy()), this.container.removeAllChildren(), this.handles.remove("vector-field-view-update"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    if (this.updating || !this.container.children.length)
      return null;
    const { extent: e3, pixelBlock: t4 } = this.container.children[0].rawPixelData;
    return { extent: e3, pixelBlock: t4 };
  }
  hitTest(e3) {
    return new g2({ attributes: {}, geometry: e3.clone(), layer: this.layer });
  }
  update(e3) {
    this._strategy.update(e3, this._symbolizerParams);
  }
  redraw() {
    this._updateSymbolizerParams(this.layer.renderer), this._strategy.redraw(this._symbolizerParams);
  }
  _canReuseVectorFieldData(e3) {
    const t4 = this._dataParameters.exportParametersVersion === e3.exportParametersVersion, r2 = this._dataParameters.time === e3.time, i3 = this._dataParameters.symbolTileSize === e3.symbolTileSize, s3 = this._dataParameters.bbox === e3.bbox;
    return t4 && r2 && i3 && s3;
  }
  async _getProjectedFullExtent(e3) {
    try {
      return await F(this.layer.fullExtent, e3);
    } catch (t4) {
      try {
        const t5 = (await U2(this.layer.url, { query: { option: "footprints", outSR: e3.wkid || JSON.stringify(e3.toJSON()), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return t5 ? M.fromJSON(t5) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(e3) {
    "vector-field" === e3.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
e([d()], f3.prototype, "attached", void 0), e([d()], f3.prototype, "container", void 0), e([d()], f3.prototype, "layer", void 0), e([d()], f3.prototype, "timeExtent", void 0), e([d()], f3.prototype, "type", void 0), e([d()], f3.prototype, "view", void 0), e([d()], f3.prototype, "updating", null), f3 = e([n("esri.views.2d.layers.imagery.VectorFieldView2D")], f3);
var g3 = f3;

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var g4 = class extends m3(i2(f2(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new c(), this.subview = null;
  }
  get pixelData() {
    return this.updating ? null : "getPixelData" in this.subview ? this.subview.getPixelData() : null;
  }
  get updating() {
    return !!(!this.subview || "updating" in this.subview && this.subview.updating);
  }
  async hitTest(e3, i3) {
    return this.subview ? [{ type: "graphic", graphic: this.subview.hitTest(e3), layer: this.layer, mapPoint: e3 }] : null;
  }
  update(e3) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e3);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new ae({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new n2(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.handles.add([l(() => this.layer.blendMode ?? "normal", (e3) => this.subview.container.blendMode = e3, w), l(() => this.layer.effect ?? null, (e3) => this.subview.container.effect = e3, w), l(() => this.layer.exportImageServiceParameters.version, (e3) => {
      e3 && this._exportImageVersion !== e3 && (this._exportImageVersion = e3, this.requestUpdate());
    }, U), l(() => this.timeExtent, (e3) => {
      this.subview.timeExtent = e3, "redraw" in this.subview ? this.requestUpdate() : this.subview.redrawOrRefetch();
    }, U), this.layer.on("redraw", () => {
      "redraw" in this.subview ? this.subview.redraw() : this.subview.redrawOrRefetch();
    }), l(() => this.layer.renderer, () => this._setSubView())], "imagerylayerview-update");
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.handles.remove("imagerylayerview-update"), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e3, r2) {
    if (!((Array.isArray(e3) ? e3[0] : j.isCollection(e3) ? e3.getItemAt(0) : e3) instanceof g2))
      return { remove: () => {
      } };
    let s3 = [];
    return Array.isArray(e3) || j.isCollection(e3) ? s3 = e3.map((e4) => e4.clone()) : e3 instanceof g2 && (s3 = [e3.clone()]), this._highlightGraphics.addMany(s3), { remove: () => {
      this._highlightGraphics.removeMany(s3);
    } };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view)
      return;
    const e3 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let i3 = "imagery";
    if ("vector-field" === e3 ? i3 = "imageryVF" : "flow" === e3 && (i3 = "flow"), this.subview) {
      if (this.subview.type === i3)
        return this._attachSubview(this.subview), void ("flow" === this.subview.type && this.subview.redrawOrRefetch());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === i3 ? new y3({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === i3 ? new g3({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new d3({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e3) {
    e3 && !e3.attached && (e3.attach(), e3.attached = true, this.container.addChildAt(e3.container, 0), e3.container.blendMode = this.layer.blendMode, e3.container.effect = this.layer.effect);
  }
  _detachSubview(e3) {
    (e3 == null ? void 0 : e3.attached) && (this.container.removeChild(e3.container), e3.detach(), e3.attached = false);
  }
};
e([d()], g4.prototype, "pixelData", null), e([d({ readOnly: true })], g4.prototype, "updating", null), e([d()], g4.prototype, "subview", void 0), g4 = e([n("esri.views.2d.layers.ImageryLayerView2D")], g4);
var b = g4;
export {
  b as default
};
//# sourceMappingURL=ImageryLayerView2D-4RIQDSAJ.js.map
