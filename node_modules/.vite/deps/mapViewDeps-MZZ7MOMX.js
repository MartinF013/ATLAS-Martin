import {
  o as o7
} from "./chunk-446VAMJ3.js";
import {
  i as i3
} from "./chunk-LXAC66BS.js";
import {
  ae
} from "./chunk-TOHMM6FQ.js";
import "./chunk-DQPH5EKZ.js";
import "./chunk-LCW6FHIL.js";
import "./chunk-WKUIJCRG.js";
import "./chunk-XQ337NY7.js";
import {
  n as n10
} from "./chunk-56CVOKCW.js";
import "./chunk-2HUXPKKU.js";
import "./chunk-WL7KJZAL.js";
import "./chunk-JX3YCNPL.js";
import "./chunk-JERZLQLG.js";
import {
  W,
  n as n11,
  n2 as n12
} from "./chunk-JWKDNFWF.js";
import {
  s as s7
} from "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import {
  e2 as e5
} from "./chunk-SASFTPK5.js";
import {
  m as m5
} from "./chunk-5KER37ZC.js";
import "./chunk-Z34NAJDO.js";
import "./chunk-HHJIVHSH.js";
import {
  e2 as e3
} from "./chunk-6UTST6NO.js";
import "./chunk-BYHUWBKS.js";
import {
  e as e2,
  n as n8,
  o as o6
} from "./chunk-IEPHENP2.js";
import {
  n as n5,
  s as s5
} from "./chunk-436X6OVY.js";
import "./chunk-XP3NTQW6.js";
import {
  P as P2
} from "./chunk-UJS24K6P.js";
import {
  t as t3
} from "./chunk-RB2H3SKO.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-SNC4BDIX.js";
import "./chunk-3CED37X7.js";
import "./chunk-FMIFCFD7.js";
import "./chunk-WL7AHHN3.js";
import {
  Ae,
  Be,
  De,
  Ee,
  Ie,
  Me,
  Ne,
  Te,
  Ue,
  _e,
  ve,
  we
} from "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import {
  E as E2,
  I as I3,
  O as O4,
  S
} from "./chunk-6FQZDXGD.js";
import {
  t as t4
} from "./chunk-ZUKXZSOF.js";
import {
  s as s6
} from "./chunk-5QPLPQX7.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-4V2P7IXX.js";
import "./chunk-SF7Z6XNR.js";
import "./chunk-YRAX326I.js";
import {
  m as m4
} from "./chunk-VYKXSWPZ.js";
import "./chunk-AKQ6VRGN.js";
import {
  B as B2,
  C as C2,
  I as I2,
  J,
  N,
  O as O3,
  U as U2,
  V as V2,
  Y as Y2,
  et,
  y as y2,
  z
} from "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-WN3KE5M2.js";
import {
  d as d2
} from "./chunk-YDPQRKY4.js";
import {
  e as e7
} from "./chunk-K4ARIGIL.js";
import "./chunk-AGO2OES3.js";
import "./chunk-ARI6FRU4.js";
import "./chunk-BBO6WYBO.js";
import "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-ZIAGZEFK.js";
import "./chunk-FR7M4UDR.js";
import "./chunk-KBCUY3VB.js";
import {
  l as l3
} from "./chunk-G2GJVIQC.js";
import {
  a as a7,
  h as h3,
  s as s8,
  s2 as s9,
  t as t6,
  y as y3
} from "./chunk-QYVYSUKX.js";
import "./chunk-IUU35NDY.js";
import "./chunk-5RP42VZJ.js";
import "./chunk-567AWHAB.js";
import {
  m as m6,
  t as t5
} from "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import {
  a as a6
} from "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-ZEIWFXXO.js";
import {
  o as o5
} from "./chunk-YXFNNKMT.js";
import "./chunk-YSQDB5AA.js";
import "./chunk-5EXPMKQP.js";
import "./chunk-B7F3T673.js";
import "./chunk-QXYW5CVF.js";
import {
  D as D2,
  r as r7
} from "./chunk-Z7AZMEL6.js";
import {
  f as f4
} from "./chunk-FUKESVWQ.js";
import {
  c as c2
} from "./chunk-T3KDRLPE.js";
import {
  u as u3
} from "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import {
  t as t2
} from "./chunk-33INAWJA.js";
import {
  B,
  C,
  D,
  E,
  F,
  G,
  I,
  L,
  M,
  O as O2,
  P,
  R,
  V,
  Y
} from "./chunk-FPMD6IB4.js";
import "./chunk-S5PZEGLP.js";
import "./chunk-MHB3L22D.js";
import "./chunk-MDCKEJ7B.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-Z7BSDVJ3.js";
import {
  $,
  Gt,
  Rt,
  St,
  bt,
  nt,
  pt
} from "./chunk-4ZEOAETN.js";
import {
  e as e6
} from "./chunk-MEW2XKT2.js";
import {
  n as n7
} from "./chunk-RB3LJE4I.js";
import "./chunk-6EODZIDR.js";
import {
  n as n6
} from "./chunk-MV2XZ5BA.js";
import {
  m as m3,
  p
} from "./chunk-MZ4JF5C6.js";
import "./chunk-PQO66WZ2.js";
import {
  M as M2,
  f as f3,
  h as h2,
  l as l2
} from "./chunk-3NPGGTI6.js";
import {
  u as u4
} from "./chunk-QNKOXOOY.js";
import "./chunk-AMGAY4O5.js";
import {
  a as a3,
  r as r5,
  s as s4
} from "./chunk-YZNDHJDJ.js";
import {
  g as g2
} from "./chunk-Z3S5X75I.js";
import {
  e as e4
} from "./chunk-YK4ZKK2Q.js";
import "./chunk-NMRWU44S.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-IG4CY4XM.js";
import {
  n as n9,
  r as r6
} from "./chunk-RTHP2LNT.js";
import "./chunk-FUQI3AAI.js";
import {
  a as a5
} from "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YL26MZEL.js";
import "./chunk-YG6VFATO.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import {
  o as o4
} from "./chunk-GRILTTJT.js";
import {
  a as a4
} from "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  f as f2,
  h,
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-I4USSDLI.js";
import "./chunk-B42HXLDM.js";
import "./chunk-2EZYA7VW.js";
import {
  i as i2
} from "./chunk-OEQ3EDRD.js";
import "./chunk-P6G64ARX.js";
import {
  m as m2
} from "./chunk-GD6ALUPQ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import {
  n as n4
} from "./chunk-OIPX3EDD.js";
import {
  c,
  i,
  u as u2
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import {
  It
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import {
  o as o3
} from "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import {
  o as o2,
  q
} from "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import {
  n as n3,
  r as r4
} from "./chunk-AIRC226G.js";
import {
  o
} from "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import {
  j2 as j
} from "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  A,
  d,
  n5 as n,
  n8 as n2,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  O,
  b,
  f,
  g,
  m,
  r2 as r3,
  v
} from "./chunk-U3PSONS6.js";
import {
  s2 as s3
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  r as r2,
  s as s2
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  a,
  a3 as a2,
  r,
  s,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BitBlitPrograms.js
var e8 = { shaders: { vertexShader: n12("bitBlit/bitBlit.vert"), fragmentShader: n12("bitBlit/bitBlit.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_tex", 1]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/BitBlitRenderer.js
var _ = class {
  constructor() {
    this._initialized = false;
  }
  dispose() {
    this._program = s(this._program), this._vertexArrayObject = s(this._vertexArrayObject);
  }
  render(r16, t14, e14, i13) {
    r16 && (this._initialized || this._initialize(r16), r16.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), r16.bindVAO(this._vertexArrayObject), r16.useProgram(this._program), t14.setSamplingMode(e14), r16.bindTexture(t14, 0), this._program.setUniform1i("u_tex", 0), this._program.setUniform1f("u_opacity", i13), r16.drawArrays(E.TRIANGLE_STRIP, 0, 4), r16.bindTexture(null, 0), r16.bindVAO());
  }
  _initialize(r16) {
    if (this._initialized)
      return true;
    const s17 = e5(r16, e8);
    if (!s17)
      return false;
    const o20 = new Int8Array(16);
    o20[0] = -1, o20[1] = -1, o20[2] = 0, o20[3] = 0, o20[4] = 1, o20[5] = -1, o20[6] = 1, o20[7] = 0, o20[8] = -1, o20[9] = 1, o20[10] = 0, o20[11] = 1, o20[12] = 1, o20[13] = 1, o20[14] = 1, o20[15] = 1;
    const _10 = e8.attributes, p9 = new f4(r16, _10, t5, { geometry: c2.createVertex(r16, F.STATIC_DRAW, o20) });
    return this._program = s17, this._vertexArrayObject = p9, this._initialized = true, true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/MaterialPrograms.js
var e9 = (r16) => {
  let t14 = "";
  t14 += r16[0].toUpperCase();
  for (let e14 = 1; e14 < r16.length; e14++) {
    const s17 = r16[e14];
    s17 === s17.toUpperCase() ? (t14 += "_", t14 += s17) : t14 += s17.toUpperCase();
  }
  return t14;
};
var s10 = (r16) => {
  const s17 = {};
  for (const t14 in r16) {
    s17[e9(t14)] = r16[t14];
  }
  return n10(s17);
};
var o8 = (t14, e14, o20, n21) => {
  const a15 = t14 + t14.substring(t14.lastIndexOf("/")), p9 = e14 + e14.substring(e14.lastIndexOf("/")), f11 = s10(n21);
  return { attributes: o20, shaders: { vertexShader: f11 + n12(`${a15}.vert`), fragmentShader: f11 + n12(`${p9}.frag`) } };
};

// node_modules/@arcgis/core/views/2d/engine/webgl/MaterialManager.js
var a8 = (r16) => r16 === I3.HITTEST || r16 === I3.LABEL_ALPHA;
var s11 = (r16) => (a8(r16) ? 1 : 0) | (r16 === I3.HIGHLIGHT ? 2 : 0);
var o9 = ({ rendererInfo: e14, drawPhase: t14 }, a15, o20, i13) => `${a15.getVariationHash()}-${i13.join(".")}-${s11(t14)}-${e14.getVariationHash()}-${r(o20) && o20.join(".")}`;
var i4 = (t14, s17, o20, i13) => {
  const h12 = i13.reduce((r16, e14) => ({ ...r16, [e14]: t14.context.driverTest[e14] }), {}), n21 = { ...s17.getVariation(), ...t14.rendererInfo.getVariation(), highlight: t14.drawPhase === I3.HIGHLIGHT, id: a8(t14.drawPhase), ...h12 };
  if (r(o20))
    for (const r16 of o20)
      n21[r16] = true;
  return n21;
};
var h4 = class {
  constructor(r16) {
    this._rctx = r16, this._programByKey = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._programByKey.forEach((r16) => r16.dispose()), this._programByKey.clear();
  }
  getProgram(r16, e14 = [], a15 = []) {
    const s17 = r16.vsPath + "." + r16.fsPath + JSON.stringify(e14) + a15.join(".");
    if (this._programByKey.has(s17))
      return this._programByKey.get(s17);
    const o20 = a15.reduce((r17, e15) => ({ ...r17, [e15]: this._rctx.driverTest[e15] }), {}), i13 = { ...e14.map((r17) => "string" == typeof r17 ? { name: r17, value: true } : r17).reduce((r17, e15) => ({ ...r17, [e15.name]: e15.value }), {}), ...o20 }, { vsPath: h12, fsPath: n21, attributes: g9 } = r16, m14 = o8(h12, n21, g9, i13), c15 = this._rctx.programCache.acquire(m14.shaders.vertexShader, m14.shaders.fragmentShader, m14.attributes);
    if (!c15)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(s17, c15), c15;
  }
  getMaterialProgram(r16, e14, a15, s17, h12, n21 = ["ignoresSamplerPrecision"]) {
    const g9 = o9(r16, e14, h12, n21);
    if (this._programByKey.has(g9))
      return this._programByKey.get(g9);
    const m14 = i4(r16, e14, h12, n21), c15 = o8(a15, a15, s17, m14), y6 = this._rctx.programCache.acquire(c15.shaders.vertexShader, c15.shaders.fragmentShader, c15.attributes);
    if (!y6)
      throw new Error("Unable to get program for key: ${key}");
    return this._programByKey.set(g9, y6), y6;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/RectangleBinPack.js
var t7 = class {
  constructor(t14, e14) {
    this._width = 0, this._height = 0, this._free = [], this._width = t14, this._height = e14, this._free.push(new t3(0, 0, t14, e14));
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  allocate(t14, e14) {
    if (t14 > this._width || e14 > this._height)
      return new t3();
    let i13 = null, s17 = -1;
    for (let h12 = 0; h12 < this._free.length; ++h12) {
      const r16 = this._free[h12];
      t14 <= r16.width && e14 <= r16.height && (null === i13 || r16.y <= i13.y && r16.x <= i13.x) && (i13 = r16, s17 = h12);
    }
    return null === i13 ? new t3() : (this._free.splice(s17, 1), i13.width < i13.height ? (i13.width > t14 && this._free.push(new t3(i13.x + t14, i13.y, i13.width - t14, e14)), i13.height > e14 && this._free.push(new t3(i13.x, i13.y + e14, i13.width, i13.height - e14))) : (i13.width > t14 && this._free.push(new t3(i13.x + t14, i13.y, i13.width - t14, i13.height)), i13.height > e14 && this._free.push(new t3(i13.x, i13.y + e14, t14, i13.height - e14))), new t3(i13.x, i13.y, t14, e14));
  }
  release(h12) {
    for (let t14 = 0; t14 < this._free.length; ++t14) {
      const e14 = this._free[t14];
      if (e14.y === h12.y && e14.height === h12.height && e14.x + e14.width === h12.x)
        e14.width += h12.width;
      else if (e14.x === h12.x && e14.width === h12.width && e14.y + e14.height === h12.y)
        e14.height += h12.height;
      else if (h12.y === e14.y && h12.height === e14.height && h12.x + h12.width === e14.x)
        e14.x = h12.x, e14.width += h12.width;
      else {
        if (h12.x !== e14.x || h12.width !== e14.width || h12.y + h12.height !== e14.y)
          continue;
        e14.y = h12.y, e14.height += h12.height;
      }
      this._free.splice(t14, 1), this.release(h12);
    }
    this._free.push(h12);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/GlyphMosaic.js
var n13 = 256;
var c3 = (t14) => Math.floor(t14 / 256);
function o10(t14) {
  const e14 = /* @__PURE__ */ new Set();
  for (const i13 of t14)
    e14.add(c3(i13));
  return e14;
}
function l4(t14, i13, h12) {
  return t14.has(i13) || t14.set(i13, h12().then(() => {
    t14.delete(i13);
  }).catch((h13) => {
    t14.delete(i13), b(h13);
  })), t14.get(i13);
}
var g3 = (t14) => ({ rect: new t3(0, 0, 0, 0), page: 0, metrics: { left: 0, width: 0, height: 0, advance: 0, top: 0 }, code: t14, sdf: true });
var _2 = class {
  constructor(t14, e14, i13) {
    this.width = 0, this.height = 0, this._dirties = [], this._glyphData = [], this._currentPage = 0, this._glyphCache = {}, this._textures = [], this._rangePromises = /* @__PURE__ */ new Map(), this.width = t14, this.height = e14, this._glyphSource = i13, this._binPack = new t7(t14 - 4, e14 - 4), this._glyphData.push(new Uint8Array(t14 * e14)), this._dirties.push(true), this._textures.push(null), this._initDecorationGlyph();
  }
  dispose() {
    this._binPack = null;
    for (const t14 of this._textures)
      t14 && t14.dispose();
    this._textures.length = 0, this._glyphData.length = 0;
  }
  _initDecorationGlyph() {
    const t14 = [117, 149, 181, 207, 207, 181, 149, 117], e14 = [];
    for (let h12 = 0; h12 < t14.length; h12++) {
      const i14 = t14[h12];
      for (let t15 = 0; t15 < 11; t15++)
        e14.push(i14);
    }
    const i13 = { metrics: { width: 5, height: 2, left: 0, top: 0, advance: 0 }, bitmap: new Uint8Array(e14) };
    this._recordGlyph(i13);
  }
  async getGlyphItems(t14, e14, i13) {
    const h12 = this._getGlyphCache(t14);
    return await this._fetchRanges(t14, e14, i13), e14.map((e15) => this._getMosaicItem(h12, t14, e15));
  }
  bind(t14, e14, i13, h12) {
    const s17 = this._getTexture(t14, i13);
    s17.setSamplingMode(e14), this._dirties[i13] && (s17.setData(this._glyphData[i13]), this._dirties[i13] = false), t14.bindTexture(s17, h12);
  }
  _getGlyphCache(t14) {
    return this._glyphCache[t14] || (this._glyphCache[t14] = {}), this._glyphCache[t14];
  }
  _getTexture(t14, e14) {
    return this._textures[e14] || (this._textures[e14] = new u3(t14, { pixelFormat: P.ALPHA, dataType: G.UNSIGNED_BYTE, width: this.width, height: this.height }, new Uint8Array(this.width * this.height))), this._textures[e14];
  }
  _invalidate() {
    this._dirties[this._currentPage] = true;
  }
  async _fetchRanges(t14, e14, i13) {
    const h12 = o10(e14), s17 = [];
    h12.forEach((e15) => {
      s17.push(this._fetchRange(t14, e15, i13));
    }), await Promise.all(s17);
  }
  async _fetchRange(t14, e14, i13) {
    if (e14 > n13)
      return null;
    const h12 = t14 + e14;
    return l4(this._rangePromises, h12, () => this._glyphSource.getRange(t14, e14, i13));
  }
  _getMosaicItem(t14, e14, i13) {
    if (!t14[i13]) {
      const h12 = this._glyphSource.getGlyph(e14, i13);
      if (!h12 || !h12.metrics)
        return g3(i13);
      const s17 = this._recordGlyph(h12), r16 = this._currentPage, a15 = h12.metrics;
      t14[i13] = { rect: s17, page: r16, metrics: a15, code: i13, sdf: true }, this._invalidate();
    }
    return t14[i13];
  }
  _recordGlyph(e14) {
    const s17 = e14.metrics;
    let r16;
    if (0 === s17.width)
      r16 = new t3(0, 0, 0, 0);
    else {
      const i13 = 3, a15 = s17.width + 2 * i13, n21 = s17.height + 2 * i13;
      r16 = this._binPack.allocate(a15, n21), r16.isEmpty && (this._dirties[this._currentPage] || (this._glyphData[this._currentPage] = null), this._currentPage = this._glyphData.length, this._glyphData.push(new Uint8Array(this.width * this.height)), this._dirties.push(true), this._textures.push(null), this._initDecorationGlyph(), this._binPack = new t7(this.width - 4, this.height - 4), r16 = this._binPack.allocate(a15, n21));
      const c15 = this._glyphData[this._currentPage], o20 = e14.bitmap;
      let l16, g9;
      if (o20)
        for (let t14 = 0; t14 < n21; t14++) {
          l16 = a15 * t14, g9 = this.width * (r16.y + t14) + r16.x;
          for (let t15 = 0; t15 < a15; t15++)
            c15[g9 + t15] = o20[l16 + t15];
        }
      a("esri-glyph-debug") && this._showDebugPage(c15);
    }
    return r16;
  }
  _showDebugPage(t14) {
    const e14 = document.createElement("canvas"), i13 = e14.getContext("2d"), h12 = new ImageData(this.width, this.height), s17 = h12.data;
    e14.width = this.width, e14.height = this.height, e14.style.border = "1px solid black";
    for (let r16 = 0; r16 < t14.length; ++r16)
      s17[4 * r16 + 0] = t14[r16], s17[4 * r16 + 1] = 0, s17[4 * r16 + 2] = 0, s17[4 * r16 + 3] = 255;
    i13.putImageData(h12, 0, 0), document.body.appendChild(e14);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/GlyphSource.js
var s12 = class {
  constructor(t14) {
    for (this._metrics = [], this._bitmaps = []; t14.next(); )
      switch (t14.tag()) {
        case 1: {
          const e14 = t14.getMessage();
          for (; e14.next(); )
            switch (e14.tag()) {
              case 3: {
                const t15 = e14.getMessage();
                let s17, a15, r16, n21, i13, c15, g9;
                for (; t15.next(); )
                  switch (t15.tag()) {
                    case 1:
                      s17 = t15.getUInt32();
                      break;
                    case 2:
                      a15 = t15.getBytes();
                      break;
                    case 3:
                      r16 = t15.getUInt32();
                      break;
                    case 4:
                      n21 = t15.getUInt32();
                      break;
                    case 5:
                      i13 = t15.getSInt32();
                      break;
                    case 6:
                      c15 = t15.getSInt32();
                      break;
                    case 7:
                      g9 = t15.getUInt32();
                      break;
                    default:
                      t15.skip();
                  }
                t15.release(), s17 && (this._metrics[s17] = { width: r16, height: n21, left: i13, top: c15, advance: g9 }, this._bitmaps[s17] = a15);
                break;
              }
              default:
                e14.skip();
            }
          e14.release();
          break;
        }
        default:
          t14.skip();
      }
  }
  getMetrics(t14) {
    return this._metrics[t14];
  }
  getBitmap(t14) {
    return this._bitmaps[t14];
  }
};
var a9 = class {
  constructor() {
    this._ranges = [];
  }
  getRange(t14) {
    return this._ranges[t14];
  }
  addRange(t14, e14) {
    this._ranges[t14] = e14;
  }
};
var r8 = class {
  constructor(t14) {
    this._glyphInfo = {}, this._baseURL = t14;
  }
  getRange(a15, r16, n21) {
    const i13 = this._getFontStack(a15);
    if (i13.getRange(r16))
      return Promise.resolve();
    const c15 = 256 * r16, g9 = c15 + 255, o20 = this._baseURL.replace("{fontstack}", a15).replace("{range}", c15 + "-" + g9);
    return U(o20, { responseType: "array-buffer", ...n21 }).then((t14) => {
      i13.addRange(r16, new s12(new a5(new Uint8Array(t14.data), new DataView(t14.data))));
    });
  }
  getGlyph(t14, e14) {
    const s17 = this._getFontStack(t14);
    if (!s17)
      return;
    const a15 = Math.floor(e14 / 256);
    if (a15 > 256)
      return;
    const r16 = s17.getRange(a15);
    return r16 ? { metrics: r16.getMetrics(e14), bitmap: r16.getBitmap(e14) } : void 0;
  }
  _getFontStack(t14) {
    let e14 = this._glyphInfo[t14];
    return e14 || (e14 = this._glyphInfo[t14] = new a9()), e14;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/SDFConverter.js
var i5 = 1e20;
var r9 = class {
  constructor(t14) {
    this.size = t14;
    const s17 = document.createElement("canvas");
    s17.width = s17.height = t14, this._context = s17.getContext("2d"), this._gridOuter = new Float64Array(t14 * t14), this._gridInner = new Float64Array(t14 * t14), this._f = new Float64Array(t14), this._d = new Float64Array(t14), this._z = new Float64Array(t14 + 1), this._v = new Int16Array(t14);
  }
  dispose() {
    this._context = this._gridOuter = this._gridInner = this._f = this._d = this._z = this._v = null, this._svg && (document.body.removeChild(this._svg), this._svg = null);
  }
  draw(r16, h12, n21 = 31) {
    this._initSVG();
    const o20 = this.createSVGString(r16);
    return new Promise((r17, a15) => {
      const d13 = new Image();
      d13.src = "data:image/svg+xml; charset=utf8, " + encodeURIComponent(o20), d13.onload = () => {
        d13.onload = null, this._context.clearRect(0, 0, this.size, this.size), this._context.drawImage(d13, 0, 0, this.size, this.size);
        const s17 = this._context.getImageData(0, 0, this.size, this.size), e14 = new Uint8Array(this.size * this.size * 4);
        for (let t14 = 0; t14 < this.size * this.size; t14++) {
          const e15 = s17.data[4 * t14 + 3] / 255;
          this._gridOuter[t14] = 1 === e15 ? 0 : 0 === e15 ? i5 : Math.max(0, 0.5 - e15) ** 2, this._gridInner[t14] = 1 === e15 ? i5 : 0 === e15 ? 0 : Math.max(0, e15 - 0.5) ** 2;
        }
        this._edt(this._gridOuter, this.size, this.size), this._edt(this._gridInner, this.size, this.size);
        for (let i13 = 0; i13 < this.size * this.size; i13++) {
          const s18 = this._gridOuter[i13] - this._gridInner[i13];
          o5(0.5 - s18 / (2 * n21), e14, 4 * i13);
        }
        r17(e14);
      };
      const l16 = h12 && h12.signal;
      l16 && v(l16, () => a15(m()));
    });
  }
  _initSVG() {
    if (!this._svg) {
      const t14 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      t14.setAttribute("style", "position: absolute;"), t14.setAttribute("width", "0"), t14.setAttribute("height", "0"), t14.setAttribute("aria-hidden", "true"), t14.setAttribute("role", "presentation"), document.body.appendChild(t14), this._svg = t14;
    }
  }
  createSVGString(t14) {
    this._initSVG();
    const s17 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    s17.setAttribute("d", t14), this._svg.appendChild(s17);
    const e14 = s17.getBBox(), i13 = e14.width / e14.height, r16 = this.size / 2;
    let h12, n21, o20, a15;
    if (i13 > 1) {
      n21 = h12 = r16 / e14.width;
      const t15 = r16 * (1 / i13);
      o20 = this.size / 4, a15 = r16 - t15 / 2;
    } else {
      h12 = n21 = r16 / e14.height;
      o20 = r16 - r16 * i13 / 2, a15 = this.size / 4;
    }
    const d13 = -e14.x * h12 + o20, l16 = -e14.y * n21 + a15;
    s17.setAttribute("style", `transform: matrix(${h12}, 0, 0, ${n21}, ${d13}, ${l16})`);
    const _10 = `<svg style="fill:red;" height="${this.size}" width="${this.size}" xmlns="http://www.w3.org/2000/svg">${this._svg.innerHTML}</svg>`;
    return this._svg.removeChild(s17), _10;
  }
  _edt(t14, s17, e14) {
    const i13 = this._f, r16 = this._d, h12 = this._v, n21 = this._z;
    for (let o20 = 0; o20 < s17; o20++) {
      for (let r17 = 0; r17 < e14; r17++)
        i13[r17] = t14[r17 * s17 + o20];
      this._edt1d(i13, r16, h12, n21, e14);
      for (let i14 = 0; i14 < e14; i14++)
        t14[i14 * s17 + o20] = r16[i14];
    }
    for (let o20 = 0; o20 < e14; o20++) {
      for (let e15 = 0; e15 < s17; e15++)
        i13[e15] = t14[o20 * s17 + e15];
      this._edt1d(i13, r16, h12, n21, s17);
      for (let e15 = 0; e15 < s17; e15++)
        t14[o20 * s17 + e15] = Math.sqrt(r16[e15]);
    }
  }
  _edt1d(t14, s17, e14, r16, h12) {
    e14[0] = 0, r16[0] = -i5, r16[1] = +i5;
    for (let n21 = 1, o20 = 0; n21 < h12; n21++) {
      let s18 = (t14[n21] + n21 * n21 - (t14[e14[o20]] + e14[o20] * e14[o20])) / (2 * n21 - 2 * e14[o20]);
      for (; s18 <= r16[o20]; )
        o20--, s18 = (t14[n21] + n21 * n21 - (t14[e14[o20]] + e14[o20] * e14[o20])) / (2 * n21 - 2 * e14[o20]);
      o20++, e14[o20] = n21, r16[o20] = s18, r16[o20 + 1] = +i5;
    }
    for (let i13 = 0, n21 = 0; i13 < h12; i13++) {
      for (; r16[n21 + 1] < i13; )
        n21++;
      s17[i13] = (i13 - e14[n21]) * (i13 - e14[n21]) + t14[e14[n21]];
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/SpriteMosaic.js
function g4(t14) {
  return t14 && "static" === t14.type;
}
var p2 = class {
  constructor(t14, e14, i13 = 0) {
    this._mosaicPages = [], this._maxItemSize = 0, this._currentPage = 0, this._pageWidth = 0, this._pageHeight = 0, this._mosaicRects = /* @__PURE__ */ new Map(), this._spriteCopyQueue = [], this.pixelRatio = 1, (t14 <= 0 || e14 <= 0) && console.error("Sprites mosaic defaultWidth and defaultHeight must be greater than zero!"), this._pageWidth = t14, this._pageHeight = e14, i13 > 0 && (this._maxItemSize = i13), this.pixelRatio = window.devicePixelRatio || 1, this._binPack = new t7(this._pageWidth, this._pageHeight);
    const s17 = Math.floor(this._pageWidth), r16 = Math.floor(this._pageHeight);
    this._mosaicPages.push({ mosaicsData: { type: "static", data: new Uint32Array(s17 * r16) }, size: [this._pageWidth, this._pageHeight], dirty: true, texture: void 0 });
  }
  getWidth(t14) {
    return t14 >= this._mosaicPages.length ? -1 : this._mosaicPages[t14].size[0];
  }
  getHeight(t14) {
    return t14 >= this._mosaicPages.length ? -1 : this._mosaicPages[t14].size[1];
  }
  getPageTexture(t14) {
    return t14 < this._mosaicPages.length ? this._mosaicPages[t14].texture : null;
  }
  has(t14) {
    return this._mosaicRects.has(t14);
  }
  get itemCount() {
    return this._mosaicRects.size;
  }
  getSpriteItem(t14) {
    return this._mosaicRects.get(t14);
  }
  addSpriteItem(t14, i13, a15, r16, o20, h12) {
    if (this._mosaicRects.has(t14))
      return this._mosaicRects.get(t14);
    let c15, n21, p9;
    if (g4(a15))
      [c15, n21, p9] = this._allocateImage(i13[0], i13[1]);
    else {
      c15 = new t3(0, 0, i13[0], i13[1]), n21 = this._mosaicPages.length;
      const t15 = void 0;
      this._mosaicPages.push({ mosaicsData: a15, size: [i13[0] + 2 * et, i13[1] + 2 * et], dirty: true, texture: t15 });
    }
    if (c15.width <= 0 || c15.height <= 0)
      return null;
    const m14 = { rect: c15, width: i13[0], height: i13[1], sdf: o20, simplePattern: h12, pixelRatio: 1, page: n21 };
    return this._mosaicRects.set(t14, m14), g4(a15) && this._copy({ rect: c15, spriteSize: i13, spriteData: a15.data, page: n21, pageSize: p9, repeat: r16, sdf: o20 }), m14;
  }
  hasItemsToProcess() {
    return 0 !== this._spriteCopyQueue.length;
  }
  processNextItem() {
    const t14 = this._spriteCopyQueue.pop();
    t14 && this._copy(t14);
  }
  getSpriteItems(t14) {
    const e14 = {};
    for (const i13 of t14)
      e14[i13] = this.getSpriteItem(i13);
    return e14;
  }
  getMosaicItemPosition(t14) {
    const i13 = this.getSpriteItem(t14), s17 = i13 && i13.rect;
    if (!s17)
      return null;
    s17.width = i13.width, s17.height = i13.height;
    const a15 = i13.width, r16 = i13.height, o20 = et, h12 = this._mosaicPages[i13.page];
    return { size: [i13.width, i13.height], tl: [(s17.x + o20) / h12[0], (s17.y + o20) / h12[1]], br: [(s17.x + o20 + a15) / h12[0], (s17.y + o20 + r16) / h12[1]], page: i13.page };
  }
  bind(t14, e14, i13 = 0, s17 = 0) {
    const a15 = this._mosaicPages[i13], r16 = a15.mosaicsData;
    let o20 = a15.texture;
    if (o20 || (o20 = m7(t14, r16, a15.size), a15.texture = o20), o20.setSamplingMode(e14), g4(r16))
      t14.bindTexture(o20, s17), a15.dirty && (o20.setData(new Uint8Array(r16.data.buffer)), o20.generateMipmap());
    else {
      r16.data.bindFrame(t14, o20, s17);
    }
    a15.dirty = false;
  }
  static _copyBits(t14, e14, i13, s17, a15, r16, o20, h12, c15, n21, g9) {
    let p9 = s17 * e14 + i13, m14 = h12 * r16 + o20;
    if (g9) {
      m14 -= r16;
      for (let o21 = -1; o21 <= n21; o21++, p9 = ((o21 + n21) % n21 + s17) * e14 + i13, m14 += r16)
        for (let e15 = -1; e15 <= c15; e15++)
          a15[m14 + e15] = t14[p9 + (e15 + c15) % c15];
    } else
      for (let _10 = 0; _10 < n21; _10++) {
        for (let e15 = 0; e15 < c15; e15++)
          a15[m14 + e15] = t14[p9 + e15];
        p9 += e14, m14 += r16;
      }
  }
  _copy(i13) {
    if (i13.page >= this._mosaicPages.length)
      return;
    const s17 = this._mosaicPages[i13.page], a15 = s17.mosaicsData;
    if (!g4(s17.mosaicsData))
      throw new s3("mapview-invalid-resource", "unsuitable data type!");
    const r16 = i13.spriteData, o20 = a15.data;
    o20 && r16 || console.error("Source or target images are uninitialized!"), p2._copyBits(r16, i13.spriteSize[0], 0, 0, o20, i13.pageSize[0], i13.rect.x + et, i13.rect.y + et, i13.spriteSize[0], i13.spriteSize[1], i13.repeat), s17.dirty = true;
  }
  _allocateImage(t14, r16) {
    t14 += 2 * et, r16 += 2 * et;
    const o20 = Math.max(t14, r16);
    if (this._maxItemSize && this._maxItemSize < o20) {
      const e14 = 2 ** Math.ceil(P2(t14)), a15 = 2 ** Math.ceil(P2(r16)), o21 = new t3(0, 0, t14, r16);
      return this._mosaicPages.push({ mosaicsData: { type: "static", data: new Uint32Array(e14 * a15) }, size: [e14, a15], dirty: true, texture: void 0 }), [o21, this._mosaicPages.length - 1, [e14, a15]];
    }
    const h12 = this._binPack.allocate(t14, r16);
    if (h12.width <= 0) {
      const e14 = this._mosaicPages[this._currentPage];
      return !e14.dirty && g4(e14.mosaicsData) && (e14.mosaicsData.data = null), this._currentPage = this._mosaicPages.length, this._mosaicPages.push({ mosaicsData: { type: "static", data: new Uint32Array(this._pageWidth * this._pageHeight) }, size: [this._pageWidth, this._pageHeight], dirty: true, texture: void 0 }), this._binPack = new t7(this._pageWidth, this._pageHeight), this._allocateImage(t14, r16);
    }
    return [h12, this._currentPage, [this._pageWidth, this._pageHeight]];
  }
  dispose() {
    this._binPack = null;
    for (const t14 of this._mosaicPages) {
      const e14 = t14.texture;
      e14 && e14.dispose();
      const i13 = t14.mosaicsData;
      if (!g4(i13)) {
        i13.data.destroy();
      }
    }
    this._mosaicPages = null, this._mosaicRects.clear();
  }
};
function m7(t14, e14, i13) {
  return g4(e14) ? new u3(t14, { pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, width: i13[0], height: i13[1] }, new Uint8Array(e14.data.buffer)) : new u3(t14, { pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.LINEAR, wrapMode: D.CLAMP_TO_EDGE, width: i13[0], height: i13[1] }, null);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/utils.js
function a10(t14) {
  return n(t14.frameDurations.reduce((e14, t15) => e14 + t15, 0));
}
function n14(e14) {
  const { width: t14, height: r16 } = e14;
  return { frameDurations: e14.frameDurations.reverse(), selectFrame: (t15) => {
    const r17 = e14.frameDurations.length - 1 - t15;
    e14.selectFrame(r17);
  }, width: t14, height: r16 };
}
function s13(t14, r16) {
  const { width: i13, height: n21, selectFrame: s17 } = t14, o20 = r16 / a10(t14);
  return { frameDurations: t14.frameDurations.map((t15) => n(t15 * o20)), selectFrame: s17, width: i13, height: n21 };
}
function o11(t14, r16) {
  const { width: i13, height: a15, selectFrame: n21 } = t14, s17 = t14.frameDurations.slice(), o20 = s17.shift();
  return s17.unshift(n(o20 + r16)), { frameDurations: s17, selectFrame: n21, width: i13, height: a15 };
}
function m8(t14, r16) {
  const { width: i13, height: a15, selectFrame: n21 } = t14, s17 = t14.frameDurations.slice(), o20 = s17.pop();
  return s17.push(n(o20 + r16)), { frameDurations: s17, selectFrame: n21, width: i13, height: a15 };
}
var c4 = class {
  constructor(e14, t14, r16) {
    this._animation = e14, this._repeatType = r16, this._direction = 1, this._currentFrame = 0, this.timeToFrame = this._animation.frameDurations[this._currentFrame];
    let i13 = 0;
    for (; t14 > i13; )
      i13 += this.timeToFrame, this.nextFrame();
    this._animation.selectFrame(this._currentFrame);
  }
  nextFrame() {
    if (this._currentFrame += this._direction, this._direction > 0) {
      if (this._currentFrame === this._animation.frameDurations.length)
        switch (this._repeatType) {
          case d2.None:
            this._currentFrame -= this._direction;
            break;
          case d2.Loop:
            this._currentFrame = 0;
            break;
          case d2.Oscillate:
            this._currentFrame -= this._direction, this._direction = -1;
        }
    } else if (-1 === this._currentFrame)
      switch (this._repeatType) {
        case d2.None:
          this._currentFrame -= this._direction;
          break;
        case d2.Loop:
          this._currentFrame = this._animation.frameDurations.length - 1;
          break;
        case d2.Oscillate:
          this._currentFrame -= this._direction, this._direction = 1;
      }
    this.timeToFrame = this._animation.frameDurations[this._currentFrame], this._animation.selectFrame(this._currentFrame);
  }
};
function h5(h12, u13, l16) {
  let f11, { repeatType: _10 } = u13;
  if (null == _10 && (_10 = d2.Loop), true === u13.reverseAnimation && (h12 = n14(h12)), null != u13.duration && (h12 = s13(h12, n(1e3 * u13.duration))), null != u13.repeatDelay) {
    const r16 = 1e3 * u13.repeatDelay;
    _10 === d2.Loop ? h12 = m8(h12, n(r16)) : _10 === d2.Oscillate && (h12 = o11(m8(h12, n(r16 / 2)), n(r16 / 2)));
  }
  if (null != u13.startTimeOffset)
    f11 = n(1e3 * u13.startTimeOffset);
  else if (null != u13.randomizeStartTime) {
    const t14 = o6(l16), n21 = 82749913, s17 = null != u13.randomizeStartSeed ? u13.randomizeStartSeed : n21, o20 = e2(t14, s17);
    f11 = n(o20 * a10(h12));
  } else
    f11 = n(0);
  return new c4(h12, f11, _10);
}
function u5(e14, t14, r16) {
  const i13 = null == t14.playAnimation || t14.playAnimation, a15 = h5(e14, t14, r16);
  let n21, s17 = a15.timeToFrame;
  function o20() {
    n21 = i13 && setTimeout(() => {
      a15.nextFrame(), s17 = a15.timeToFrame, o20();
    }, s17);
  }
  return o20(), { remove: () => {
    i13 && clearTimeout(n21);
  } };
}

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/BaseAnimatableTextureResource.js
var s14 = class {
  constructor(t14) {
    this._requestRender = t14, this._frameData = null;
  }
  destroy() {
    this._playHandle.remove();
  }
  bindFrame(t14, r16, i13) {
    t14.bindTexture(r16, i13), t(this._frameData) || (r16.updateData(0, et, et, this._frameData.width, this._frameData.height, this._frameData), this._frameData = null);
  }
  async _load(e14, a15, s17, o20) {
    try {
      const t14 = (t15) => {
        this._frameData = t15, this._requestRender.requestRender();
      }, r16 = await this._loadAnimation(e14, t14, o20);
      this.frameCount = r16.frameDurations.length, this.width = r16.width, this.height = r16.height, this._playHandle = u5(r16, a15, s17);
    } catch (h12) {
      if (!g(h12))
        return new s3("invalid-resource", "Could not parse animated resource.");
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/apng.js
var o12;
var u6 = { exports: {} };
o12 = function() {
  return function(e14) {
    var t14 = {};
    function r16(n21) {
      if (t14[n21])
        return t14[n21].exports;
      var i13 = t14[n21] = { exports: {}, id: n21, loaded: false };
      return e14[n21].call(i13.exports, i13, i13.exports, r16), i13.loaded = true, i13.exports;
    }
    return r16.m = e14, r16.c = t14, r16.p = "", r16(0);
  }([function(e14, t14, r16) {
    Object.defineProperty(t14, "__esModule", { value: true }), t14.isNotPNG = u13, t14.isNotAPNG = h12, t14.default = c15;
    var n21 = s17(r16(1)), i13 = r16(2);
    function s17(e15) {
      return e15 && e15.__esModule ? e15 : { default: e15 };
    }
    var a15 = new Error("Not a PNG"), o20 = new Error("Not an animated PNG");
    function u13(e15) {
      return e15 === a15;
    }
    function h12(e15) {
      return e15 === o20;
    }
    var l16 = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);
    function c15(e15) {
      var t15 = new Uint8Array(e15);
      if (Array.prototype.some.call(l16, function(e16, r18) {
        return e16 !== t15[r18];
      }))
        return a15;
      var r17 = false;
      if (f11(t15, function(e16) {
        return !(r17 = "acTL" === e16);
      }), !r17)
        return o20;
      var n22 = [], s18 = [], u14 = null, h13 = null, c16 = 0, p10 = new i13.APNG();
      if (f11(t15, function(e16, t16, r18, a16) {
        var o21 = new DataView(t16.buffer);
        switch (e16) {
          case "IHDR":
            u14 = t16.subarray(r18 + 8, r18 + 8 + a16), p10.width = o21.getUint32(r18 + 8), p10.height = o21.getUint32(r18 + 12);
            break;
          case "acTL":
            p10.numPlays = o21.getUint32(r18 + 8 + 4);
            break;
          case "fcTL":
            h13 && (p10.frames.push(h13), c16++), (h13 = new i13.Frame()).width = o21.getUint32(r18 + 8 + 4), h13.height = o21.getUint32(r18 + 8 + 8), h13.left = o21.getUint32(r18 + 8 + 12), h13.top = o21.getUint32(r18 + 8 + 16);
            var l17 = o21.getUint16(r18 + 8 + 20), f12 = o21.getUint16(r18 + 8 + 22);
            0 === f12 && (f12 = 100), h13.delay = 1e3 * l17 / f12, h13.delay <= 10 && (h13.delay = 100), p10.playTime += h13.delay, h13.disposeOp = o21.getUint8(r18 + 8 + 24), h13.blendOp = o21.getUint8(r18 + 8 + 25), h13.dataParts = [], 0 === c16 && 2 === h13.disposeOp && (h13.disposeOp = 1);
            break;
          case "fdAT":
            h13 && h13.dataParts.push(t16.subarray(r18 + 8 + 4, r18 + 8 + a16));
            break;
          case "IDAT":
            h13 && h13.dataParts.push(t16.subarray(r18 + 8, r18 + 8 + a16));
            break;
          case "IEND":
            s18.push(d13(t16, r18, 12 + a16));
            break;
          default:
            n22.push(d13(t16, r18, 12 + a16));
        }
      }), h13 && p10.frames.push(h13), 0 == p10.frames.length)
        return o20;
      var m15 = new Blob(n22), y6 = new Blob(s18);
      return p10.frames.forEach(function(e16) {
        var t16 = [];
        t16.push(l16), u14.set(_10(e16.width), 0), u14.set(_10(e16.height), 4), t16.push(v6("IHDR", u14)), t16.push(m15), e16.dataParts.forEach(function(e17) {
          return t16.push(v6("IDAT", e17));
        }), t16.push(y6), e16.imageData = new Blob(t16, { type: "image/png" }), delete e16.dataParts, t16 = null;
      }), p10;
    }
    function f11(e15, t15) {
      var r17 = new DataView(e15.buffer), n22 = 8, i14 = void 0, s18 = void 0, a16 = void 0;
      do {
        s18 = r17.getUint32(n22), a16 = t15(i14 = p9(e15, n22 + 4, 4), e15, n22, s18), n22 += 12 + s18;
      } while (false !== a16 && "IEND" != i14 && n22 < e15.length);
    }
    function p9(e15, t15, r17) {
      var n22 = Array.prototype.slice.call(e15.subarray(t15, t15 + r17));
      return String.fromCharCode.apply(String, n22);
    }
    function m14(e15) {
      for (var t15 = new Uint8Array(e15.length), r17 = 0; r17 < e15.length; r17++)
        t15[r17] = e15.charCodeAt(r17);
      return t15;
    }
    function d13(e15, t15, r17) {
      var n22 = new Uint8Array(r17);
      return n22.set(e15.subarray(t15, t15 + r17)), n22;
    }
    var v6 = function(e15, t15) {
      var r17 = e15.length + t15.length, i14 = new Uint8Array(r17 + 8), s18 = new DataView(i14.buffer);
      s18.setUint32(0, t15.length), i14.set(m14(e15), 4), i14.set(t15, 8);
      var a16 = (0, n21.default)(i14, 4, r17);
      return s18.setUint32(r17 + 4, a16), i14;
    }, _10 = function(e15) {
      return new Uint8Array([e15 >>> 24 & 255, e15 >>> 16 & 255, e15 >>> 8 & 255, 255 & e15]);
    };
  }, function(e14, t14) {
    Object.defineProperty(t14, "__esModule", { value: true }), t14.default = function(e15) {
      for (var t15 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n22 = -1, i14 = t15, s18 = t15 + (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e15.length - t15); i14 < s18; i14++)
        n22 = n22 >>> 8 ^ r16[255 & (n22 ^ e15[i14])];
      return -1 ^ n22;
    };
    for (var r16 = new Uint32Array(256), n21 = 0; n21 < 256; n21++) {
      for (var i13 = n21, s17 = 0; s17 < 8; s17++)
        i13 = 0 != (1 & i13) ? 3988292384 ^ i13 >>> 1 : i13 >>> 1;
      r16[n21] = i13;
    }
  }, function(e14, t14, r16) {
    Object.defineProperty(t14, "__esModule", { value: true }), t14.Frame = t14.APNG = void 0;
    var n21 = function() {
      function e15(e16, t15) {
        for (var r17 = 0; r17 < t15.length; r17++) {
          var n22 = t15[r17];
          n22.enumerable = n22.enumerable || false, n22.configurable = true, "value" in n22 && (n22.writable = true), Object.defineProperty(e16, n22.key, n22);
        }
      }
      return function(t15, r17, n22) {
        return r17 && e15(t15.prototype, r17), n22 && e15(t15, n22), t15;
      };
    }(), i13 = s17(r16(3));
    function s17(e15) {
      return e15 && e15.__esModule ? e15 : { default: e15 };
    }
    function a15(e15, t15) {
      if (!(e15 instanceof t15))
        throw new TypeError("Cannot call a class as a function");
    }
    t14.APNG = function() {
      function e15() {
        a15(this, e15), this.width = 0, this.height = 0, this.numPlays = 0, this.playTime = 0, this.frames = [];
      }
      return n21(e15, [{ key: "createImages", value: function() {
        return Promise.all(this.frames.map(function(e16) {
          return e16.createImage();
        }));
      } }, { key: "getPlayer", value: function(e16) {
        var t15 = this, r17 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return this.createImages().then(function() {
          return new i13.default(t15, e16, r17);
        });
      } }]), e15;
    }(), t14.Frame = function() {
      function e15() {
        a15(this, e15), this.left = 0, this.top = 0, this.width = 0, this.height = 0, this.delay = 0, this.disposeOp = 0, this.blendOp = 0, this.imageData = null, this.imageElement = null;
      }
      return n21(e15, [{ key: "createImage", value: function() {
        var e16 = this;
        return this.imageElement ? Promise.resolve() : new Promise(function(t15, r17) {
          var n22 = URL.createObjectURL(e16.imageData);
          e16.imageElement = document.createElement("img"), e16.imageElement.onload = function() {
            URL.revokeObjectURL(n22), t15();
          }, e16.imageElement.onerror = function() {
            URL.revokeObjectURL(n22), e16.imageElement = null, r17(new Error("Image creation error"));
          }, e16.imageElement.src = n22;
        });
      } }]), e15;
    }();
  }, function(e14, t14, r16) {
    Object.defineProperty(t14, "__esModule", { value: true });
    var n21 = function() {
      function e15(e16, t15) {
        for (var r17 = 0; r17 < t15.length; r17++) {
          var n22 = t15[r17];
          n22.enumerable = n22.enumerable || false, n22.configurable = true, "value" in n22 && (n22.writable = true), Object.defineProperty(e16, n22.key, n22);
        }
      }
      return function(t15, r17, n22) {
        return r17 && e15(t15.prototype, r17), n22 && e15(t15, n22), t15;
      };
    }();
    function i13(e15) {
      return e15 && e15.__esModule ? e15 : { default: e15 };
    }
    function s17(e15, t15) {
      if (!(e15 instanceof t15))
        throw new TypeError("Cannot call a class as a function");
    }
    function a15(e15, t15) {
      if (!e15)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !t15 || "object" != typeof t15 && "function" != typeof t15 ? e15 : t15;
    }
    function o20(e15, t15) {
      if ("function" != typeof t15 && null !== t15)
        throw new TypeError("Super expression must either be null or a function, not " + typeof t15);
      e15.prototype = Object.create(t15 && t15.prototype, { constructor: { value: e15, enumerable: false, writable: true, configurable: true } }), t15 && (Object.setPrototypeOf ? Object.setPrototypeOf(e15, t15) : e15.__proto__ = t15);
    }
    var u13 = function(e15) {
      function t15(e16, r17, n22) {
        s17(this, t15);
        var i14 = a15(this, (t15.__proto__ || Object.getPrototypeOf(t15)).call(this));
        return i14.playbackRate = 1, i14._currentFrameNumber = 0, i14._ended = false, i14._paused = true, i14._numPlays = 0, i14._apng = e16, i14.context = r17, i14.stop(), n22 && i14.play(), i14;
      }
      return o20(t15, e15), n21(t15, [{ key: "renderNextFrame", value: function() {
        this._currentFrameNumber = (this._currentFrameNumber + 1) % this._apng.frames.length, this._currentFrameNumber === this._apng.frames.length - 1 && (this._numPlays++, 0 !== this._apng.numPlays && this._numPlays >= this._apng.numPlays && (this._ended = true, this._paused = true)), this._prevFrame && 1 == this._prevFrame.disposeOp ? this.context.clearRect(this._prevFrame.left, this._prevFrame.top, this._prevFrame.width, this._prevFrame.height) : this._prevFrame && 2 == this._prevFrame.disposeOp && this.context.putImageData(this._prevFrameData, this._prevFrame.left, this._prevFrame.top);
        var e16 = this.currentFrame;
        this._prevFrame = e16, this._prevFrameData = null, 2 == e16.disposeOp && (this._prevFrameData = this.context.getImageData(e16.left, e16.top, e16.width, e16.height)), 0 == e16.blendOp && this.context.clearRect(e16.left, e16.top, e16.width, e16.height), this.context.drawImage(e16.imageElement, e16.left, e16.top), this.emit("frame", this._currentFrameNumber), this._ended && this.emit("end");
      } }, { key: "play", value: function() {
        var e16 = this;
        this.emit("play"), this._ended && this.stop(), this._paused = false;
        var t16 = performance.now() + this.currentFrame.delay / this.playbackRate, r17 = function r18(n22) {
          if (!e16._ended && !e16._paused) {
            if (n22 >= t16) {
              for (; n22 - t16 >= e16._apng.playTime / e16.playbackRate; )
                t16 += e16._apng.playTime / e16.playbackRate, e16._numPlays++;
              do {
                e16.renderNextFrame(), t16 += e16.currentFrame.delay / e16.playbackRate;
              } while (!e16._ended && n22 > t16);
            }
            requestAnimationFrame(r18);
          }
        };
        requestAnimationFrame(r17);
      } }, { key: "pause", value: function() {
        this._paused || (this.emit("pause"), this._paused = true);
      } }, { key: "stop", value: function() {
        this.emit("stop"), this._numPlays = 0, this._ended = false, this._paused = true, this._currentFrameNumber = -1, this.context.clearRect(0, 0, this._apng.width, this._apng.height), this.renderNextFrame();
      } }, { key: "currentFrameNumber", get: function() {
        return this._currentFrameNumber;
      } }, { key: "currentFrame", get: function() {
        return this._apng.frames[this._currentFrameNumber];
      } }, { key: "paused", get: function() {
        return this._paused;
      } }, { key: "ended", get: function() {
        return this._ended;
      } }]), t15;
    }(i13(r16(4)).default);
    t14.default = u13;
  }, function(e14, t14) {
    function r16() {
      this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
    }
    function n21(e15) {
      return "function" == typeof e15;
    }
    function i13(e15) {
      return "number" == typeof e15;
    }
    function s17(e15) {
      return "object" == typeof e15 && null !== e15;
    }
    function a15(e15) {
      return void 0 === e15;
    }
    e14.exports = r16, r16.EventEmitter = r16, r16.prototype._events = void 0, r16.prototype._maxListeners = void 0, r16.defaultMaxListeners = 10, r16.prototype.setMaxListeners = function(e15) {
      if (!i13(e15) || e15 < 0 || isNaN(e15))
        throw TypeError("n must be a positive number");
      return this._maxListeners = e15, this;
    }, r16.prototype.emit = function(e15) {
      var t15, r17, i14, o20, u13, h12;
      if (this._events || (this._events = {}), "error" === e15 && (!this._events.error || s17(this._events.error) && !this._events.error.length)) {
        if ((t15 = arguments[1]) instanceof Error)
          throw t15;
        var l16 = new Error('Uncaught, unspecified "error" event. (' + t15 + ")");
        throw l16.context = t15, l16;
      }
      if (a15(r17 = this._events[e15]))
        return false;
      if (n21(r17))
        switch (arguments.length) {
          case 1:
            r17.call(this);
            break;
          case 2:
            r17.call(this, arguments[1]);
            break;
          case 3:
            r17.call(this, arguments[1], arguments[2]);
            break;
          default:
            o20 = Array.prototype.slice.call(arguments, 1), r17.apply(this, o20);
        }
      else if (s17(r17))
        for (o20 = Array.prototype.slice.call(arguments, 1), i14 = (h12 = r17.slice()).length, u13 = 0; u13 < i14; u13++)
          h12[u13].apply(this, o20);
      return true;
    }, r16.prototype.addListener = function(e15, t15) {
      var i14;
      if (!n21(t15))
        throw TypeError("listener must be a function");
      return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", e15, n21(t15.listener) ? t15.listener : t15), this._events[e15] ? s17(this._events[e15]) ? this._events[e15].push(t15) : this._events[e15] = [this._events[e15], t15] : this._events[e15] = t15, s17(this._events[e15]) && !this._events[e15].warned && (i14 = a15(this._maxListeners) ? r16.defaultMaxListeners : this._maxListeners) && i14 > 0 && this._events[e15].length > i14 && (this._events[e15].warned = true, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[e15].length), "function" == typeof console.trace && console.trace()), this;
    }, r16.prototype.on = r16.prototype.addListener, r16.prototype.once = function(e15, t15) {
      if (!n21(t15))
        throw TypeError("listener must be a function");
      var r17 = false;
      function i14() {
        this.removeListener(e15, i14), r17 || (r17 = true, t15.apply(this, arguments));
      }
      return i14.listener = t15, this.on(e15, i14), this;
    }, r16.prototype.removeListener = function(e15, t15) {
      var r17, i14, a16, o20;
      if (!n21(t15))
        throw TypeError("listener must be a function");
      if (!this._events || !this._events[e15])
        return this;
      if (a16 = (r17 = this._events[e15]).length, i14 = -1, r17 === t15 || n21(r17.listener) && r17.listener === t15)
        delete this._events[e15], this._events.removeListener && this.emit("removeListener", e15, t15);
      else if (s17(r17)) {
        for (o20 = a16; o20-- > 0; )
          if (r17[o20] === t15 || r17[o20].listener && r17[o20].listener === t15) {
            i14 = o20;
            break;
          }
        if (i14 < 0)
          return this;
        1 === r17.length ? (r17.length = 0, delete this._events[e15]) : r17.splice(i14, 1), this._events.removeListener && this.emit("removeListener", e15, t15);
      }
      return this;
    }, r16.prototype.removeAllListeners = function(e15) {
      var t15, r17;
      if (!this._events)
        return this;
      if (!this._events.removeListener)
        return 0 === arguments.length ? this._events = {} : this._events[e15] && delete this._events[e15], this;
      if (0 === arguments.length) {
        for (t15 in this._events)
          "removeListener" !== t15 && this.removeAllListeners(t15);
        return this.removeAllListeners("removeListener"), this._events = {}, this;
      }
      if (n21(r17 = this._events[e15]))
        this.removeListener(e15, r17);
      else if (r17)
        for (; r17.length; )
          this.removeListener(e15, r17[r17.length - 1]);
      return delete this._events[e15], this;
    }, r16.prototype.listeners = function(e15) {
      return this._events && this._events[e15] ? n21(this._events[e15]) ? [this._events[e15]] : this._events[e15].slice() : [];
    }, r16.prototype.listenerCount = function(e15) {
      if (this._events) {
        var t15 = this._events[e15];
        if (n21(t15))
          return 1;
        if (t15)
          return t15.length;
      }
      return 0;
    }, r16.listenerCount = function(e15, t15) {
      return e15.listenerCount(t15);
    };
  }]);
}, u6.exports = o12();
var h6 = o4(u6.exports);
var l5 = class extends s14 {
  static async create(e14, t14, i13, s17, a15) {
    const o20 = new l5(s17);
    try {
      await o20._load(e14, t14, i13, a15);
    } catch (u13) {
      if (!g(u13))
        return new s3("invalid-resource", `Could not load PNG: ${u13.message}`);
    }
    return o20;
  }
  async _loadAnimation(e14, t14, r16) {
    return c5(e14, t14, r16);
  }
};
async function c5(e14, t14, r16) {
  const n21 = h6(e14);
  if (n21 instanceof Error)
    throw n21;
  await n21.createImages(), f(r16);
  const { frames: a15, width: o20, height: u13 } = n21, l16 = document.createElement("canvas");
  l16.width = o20, l16.height = u13;
  const c15 = l16.getContext("2d"), f11 = [], p9 = [];
  for (const i13 of a15) {
    p9.push(n(i13.delay));
    const e15 = i13.imageElement;
    0 === i13.blendOp ? c15.globalCompositeOperation = "copy" : c15.globalCompositeOperation = "source-over";
    const t15 = 2 === i13.disposeOp && c15.getImageData(i13.left, i13.top, i13.width, i13.height);
    c15.drawImage(e15, i13.left, i13.top);
    const r17 = c15.getImageData(0, 0, o20, u13);
    f11.push(r17), 0 === i13.disposeOp || (1 === i13.disposeOp ? c15.clearRect(i13.left, i13.top, i13.width, i13.height) : 2 === i13.disposeOp && c15.putImageData(t15, i13.left, i13.top));
  }
  return { frameDurations: p9, selectFrame: (e15) => {
    const r17 = f11[e15];
    t14(r17);
  }, width: o20, height: u13 };
}
var f5 = [137, 80, 78, 71, 13, 10, 26, 10];
function p3(e14) {
  const t14 = new Uint8Array(e14);
  return !f5.some((e15, r16) => e15 !== t14[r16]);
}
function m9(e14) {
  if (!p3(e14))
    return false;
  const t14 = new DataView(e14), r16 = new Uint8Array(e14);
  let n21, i13 = 8;
  do {
    const e15 = t14.getUint32(i13);
    if (n21 = String.fromCharCode.apply(String, Array.prototype.slice.call(r16.subarray(i13 + 4, i13 + 8))), "acTL" === n21)
      return true;
    i13 += 12 + e15;
  } while ("IEND" !== n21 && i13 < r16.length);
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/animatedFormats/gif.js
var i6 = {};
var o13 = {};
var s15 = {};
Object.defineProperty(s15, "__esModule", { value: true }), s15.loop = s15.conditional = s15.parse = void 0;
var d3 = function e11(r16, t14) {
  var n21 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a15 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : n21;
  if (Array.isArray(t14))
    t14.forEach(function(t15) {
      return e11(r16, t15, n21, a15);
    });
  else if ("function" == typeof t14)
    t14(r16, n21, a15, e11);
  else {
    var i13 = Object.keys(t14)[0];
    Array.isArray(t14[i13]) ? (a15[i13] = {}, e11(r16, t14[i13], n21, a15[i13])) : a15[i13] = t14[i13](r16, n21, a15, e11);
  }
  return n21;
};
s15.parse = d3;
var c6 = function(e14, r16) {
  return function(t14, n21, a15, i13) {
    r16(t14, n21, a15) && i13(t14, e14, n21, a15);
  };
};
s15.conditional = c6;
var u7 = function(e14, r16) {
  return function(t14, n21, a15, i13) {
    for (var o20 = [], s17 = t14.pos; r16(t14, n21, a15); ) {
      var d13 = {};
      if (i13(t14, e14, n21, d13), t14.pos === s17)
        break;
      s17 = t14.pos, o20.push(d13);
    }
    return o20;
  };
};
s15.loop = u7;
var l6 = {};
Object.defineProperty(l6, "__esModule", { value: true }), l6.readBits = l6.readArray = l6.readUnsigned = l6.readString = l6.peekBytes = l6.readBytes = l6.peekByte = l6.readByte = l6.buildStream = void 0;
var f6 = function(e14) {
  return { data: e14, pos: 0 };
};
l6.buildStream = f6;
var p4 = function() {
  return function(e14) {
    return e14.data[e14.pos++];
  };
};
l6.readByte = p4;
var g5 = function() {
  var e14 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
  return function(r16) {
    return r16.data[r16.pos + e14];
  };
};
l6.peekByte = g5;
var y4 = function(e14) {
  return function(r16) {
    return r16.data.subarray(r16.pos, r16.pos += e14);
  };
};
l6.readBytes = y4;
var m10 = function(e14) {
  return function(r16) {
    return r16.data.subarray(r16.pos, r16.pos + e14);
  };
};
l6.peekBytes = m10;
var v2 = function(e14) {
  return function(r16) {
    return Array.from(y4(e14)(r16)).map(function(e15) {
      return String.fromCharCode(e15);
    }).join("");
  };
};
l6.readString = v2;
var h7 = function(e14) {
  return function(r16) {
    var t14 = y4(2)(r16);
    return e14 ? (t14[1] << 8) + t14[0] : (t14[0] << 8) + t14[1];
  };
};
l6.readUnsigned = h7;
var w = function(e14, r16) {
  return function(t14, n21, a15) {
    for (var i13 = "function" == typeof r16 ? r16(t14, n21, a15) : r16, o20 = y4(e14), s17 = new Array(i13), d13 = 0; d13 < i13; d13++)
      s17[d13] = o20(t14);
    return s17;
  };
};
l6.readArray = w;
var x = function(e14, r16, t14) {
  for (var n21 = 0, a15 = 0; a15 < t14; a15++)
    n21 += e14[r16 + a15] && Math.pow(2, t14 - a15 - 1);
  return n21;
};
var B3 = function(e14) {
  return function(r16) {
    for (var t14 = p4()(r16), n21 = new Array(8), a15 = 0; a15 < 8; a15++)
      n21[7 - a15] = !!(t14 & 1 << a15);
    return Object.keys(e14).reduce(function(r17, t15) {
      var a16 = e14[t15];
      return a16.length ? r17[t15] = x(n21, a16.index, a16.length) : r17[t15] = n21[a16.index], r17;
    }, {});
  };
};
l6.readBits = B3, function(e14) {
  Object.defineProperty(e14, "__esModule", { value: true }), e14.default = void 0;
  var r16 = s15, t14 = l6, n21 = { blocks: function(e15) {
    for (var r17 = 0, n22 = [], a16 = e15.data.length, i14 = 0, o21 = (0, t14.readByte)()(e15); o21 !== r17 && o21; o21 = (0, t14.readByte)()(e15)) {
      if (e15.pos + o21 >= a16) {
        var s17 = a16 - e15.pos;
        n22.push((0, t14.readBytes)(s17)(e15)), i14 += s17;
        break;
      }
      n22.push((0, t14.readBytes)(o21)(e15)), i14 += o21;
    }
    for (var d14 = new Uint8Array(i14), c16 = 0, u14 = 0; u14 < n22.length; u14++)
      d14.set(n22[u14], c16), c16 += n22[u14].length;
    return d14;
  } }, a15 = (0, r16.conditional)({ gce: [{ codes: (0, t14.readBytes)(2) }, { byteSize: (0, t14.readByte)() }, { extras: (0, t14.readBits)({ future: { index: 0, length: 3 }, disposal: { index: 3, length: 3 }, userInput: { index: 6 }, transparentColorGiven: { index: 7 } }) }, { delay: (0, t14.readUnsigned)(true) }, { transparentColorIndex: (0, t14.readByte)() }, { terminator: (0, t14.readByte)() }] }, function(e15) {
    var r17 = (0, t14.peekBytes)(2)(e15);
    return 33 === r17[0] && 249 === r17[1];
  }), i13 = (0, r16.conditional)({ image: [{ code: (0, t14.readByte)() }, { descriptor: [{ left: (0, t14.readUnsigned)(true) }, { top: (0, t14.readUnsigned)(true) }, { width: (0, t14.readUnsigned)(true) }, { height: (0, t14.readUnsigned)(true) }, { lct: (0, t14.readBits)({ exists: { index: 0 }, interlaced: { index: 1 }, sort: { index: 2 }, future: { index: 3, length: 2 }, size: { index: 5, length: 3 } }) }] }, (0, r16.conditional)({ lct: (0, t14.readArray)(3, function(e15, r17, t15) {
    return Math.pow(2, t15.descriptor.lct.size + 1);
  }) }, function(e15, r17, t15) {
    return t15.descriptor.lct.exists;
  }), { data: [{ minCodeSize: (0, t14.readByte)() }, n21] }] }, function(e15) {
    return 44 === (0, t14.peekByte)()(e15);
  }), o20 = (0, r16.conditional)({ text: [{ codes: (0, t14.readBytes)(2) }, { blockSize: (0, t14.readByte)() }, { preData: function(e15, r17, n22) {
    return (0, t14.readBytes)(n22.text.blockSize)(e15);
  } }, n21] }, function(e15) {
    var r17 = (0, t14.peekBytes)(2)(e15);
    return 33 === r17[0] && 1 === r17[1];
  }), d13 = (0, r16.conditional)({ application: [{ codes: (0, t14.readBytes)(2) }, { blockSize: (0, t14.readByte)() }, { id: function(e15, r17, n22) {
    return (0, t14.readString)(n22.blockSize)(e15);
  } }, n21] }, function(e15) {
    var r17 = (0, t14.peekBytes)(2)(e15);
    return 33 === r17[0] && 255 === r17[1];
  }), c15 = (0, r16.conditional)({ comment: [{ codes: (0, t14.readBytes)(2) }, n21] }, function(e15) {
    var r17 = (0, t14.peekBytes)(2)(e15);
    return 33 === r17[0] && 254 === r17[1];
  }), u13 = [{ header: [{ signature: (0, t14.readString)(3) }, { version: (0, t14.readString)(3) }] }, { lsd: [{ width: (0, t14.readUnsigned)(true) }, { height: (0, t14.readUnsigned)(true) }, { gct: (0, t14.readBits)({ exists: { index: 0 }, resolution: { index: 1, length: 3 }, sort: { index: 4 }, size: { index: 5, length: 3 } }) }, { backgroundColorIndex: (0, t14.readByte)() }, { pixelAspectRatio: (0, t14.readByte)() }] }, (0, r16.conditional)({ gct: (0, t14.readArray)(3, function(e15, r17) {
    return Math.pow(2, r17.lsd.gct.size + 1);
  }) }, function(e15, r17) {
    return r17.lsd.gct.exists;
  }), { frames: (0, r16.loop)([a15, d13, c15, i13, o20], function(e15) {
    var r17 = (0, t14.peekByte)()(e15);
    return 33 === r17 || 44 === r17;
  }) }];
  e14.default = u13;
}(o13);
var b2 = {};
Object.defineProperty(b2, "__esModule", { value: true }), b2.deinterlace = void 0;
var k = function(e14, r16) {
  for (var t14 = new Array(e14.length), n21 = e14.length / r16, a15 = function(n22, a16) {
    var i14 = e14.slice(a16 * r16, (a16 + 1) * r16);
    t14.splice.apply(t14, [n22 * r16, r16].concat(i14));
  }, i13 = [0, 4, 2, 1], o20 = [8, 8, 4, 2], s17 = 0, d13 = 0; d13 < 4; d13++)
    for (var c15 = i13[d13]; c15 < n21; c15 += o20[d13])
      a15(c15, s17), s17++;
  return t14;
};
b2.deinterlace = k;
var A2 = {};
Object.defineProperty(A2, "__esModule", { value: true }), A2.lzw = void 0;
var U3 = function(e14, r16, t14) {
  var n21, a15, i13, o20, s17, d13, c15, u13, l16, f11, p9, g9, y6, m14, v6, h12, w3 = 4096, x3 = -1, B4 = t14, b5 = new Array(t14), k2 = new Array(w3), A3 = new Array(w3), U4 = new Array(w3 + 1);
  for (s17 = (a15 = 1 << (f11 = e14)) + 1, n21 = a15 + 2, c15 = x3, i13 = (1 << (o20 = f11 + 1)) - 1, u13 = 0; u13 < a15; u13++)
    k2[u13] = 0, A3[u13] = u13;
  for (p9 = g9 = y6 = m14 = v6 = h12 = 0, l16 = 0; l16 < B4; ) {
    if (0 === m14) {
      if (g9 < o20) {
        p9 += r16[h12] << g9, g9 += 8, h12++;
        continue;
      }
      if (u13 = p9 & i13, p9 >>= o20, g9 -= o20, u13 > n21 || u13 == s17)
        break;
      if (u13 == a15) {
        i13 = (1 << (o20 = f11 + 1)) - 1, n21 = a15 + 2, c15 = x3;
        continue;
      }
      if (c15 == x3) {
        U4[m14++] = A3[u13], c15 = u13, y6 = u13;
        continue;
      }
      for (d13 = u13, u13 == n21 && (U4[m14++] = y6, u13 = c15); u13 > a15; )
        U4[m14++] = A3[u13], u13 = k2[u13];
      y6 = 255 & A3[u13], U4[m14++] = y6, n21 < w3 && (k2[n21] = c15, A3[n21] = y6, 0 == (++n21 & i13) && n21 < w3 && (o20++, i13 += n21)), c15 = d13;
    }
    m14--, b5[v6++] = U4[m14], l16++;
  }
  for (l16 = v6; l16 < B4; l16++)
    b5[l16] = 0;
  return b5;
};
A2.lzw = U3, Object.defineProperty(i6, "__esModule", { value: true });
var S2 = i6.decompressFrames = i6.decompressFrame = F2 = i6.parseGIF = void 0;
var _3 = M3(o13);
var j2 = s15;
var z2 = l6;
var I4 = b2;
var C3 = A2;
function M3(e14) {
  return e14 && e14.__esModule ? e14 : { default: e14 };
}
var T = function(e14) {
  var r16 = new Uint8Array(e14);
  return (0, j2.parse)((0, z2.buildStream)(r16), _3.default);
};
var F2 = i6.parseGIF = T;
var O5 = function(e14) {
  for (var r16 = e14.pixels.length, t14 = new Uint8ClampedArray(4 * r16), n21 = 0; n21 < r16; n21++) {
    var a15 = 4 * n21, i13 = e14.pixels[n21], o20 = e14.colorTable[i13] || [0, 0, 0];
    t14[a15] = o20[0], t14[a15 + 1] = o20[1], t14[a15 + 2] = o20[2], t14[a15 + 3] = i13 !== e14.transparentIndex ? 255 : 0;
  }
  return t14;
};
var D3 = function(e14, r16, t14) {
  if (e14.image) {
    var n21 = e14.image, a15 = n21.descriptor.width * n21.descriptor.height, i13 = (0, C3.lzw)(n21.data.minCodeSize, n21.data.blocks, a15);
    n21.descriptor.lct.interlaced && (i13 = (0, I4.deinterlace)(i13, n21.descriptor.width));
    var o20 = { pixels: i13, dims: { top: e14.image.descriptor.top, left: e14.image.descriptor.left, width: e14.image.descriptor.width, height: e14.image.descriptor.height } };
    return n21.descriptor.lct && n21.descriptor.lct.exists ? o20.colorTable = n21.lct : o20.colorTable = r16, e14.gce && (o20.delay = 10 * (e14.gce.delay || 10), o20.disposalType = e14.gce.extras.disposal, e14.gce.extras.transparentColorGiven && (o20.transparentIndex = e14.gce.transparentColorIndex)), t14 && (o20.patch = O5(o20)), o20;
  }
  console.warn("gif frame does not have associated image.");
};
i6.decompressFrame = D3;
var P3 = function(e14, r16) {
  return e14.frames.filter(function(e15) {
    return e15.image;
  }).map(function(t14) {
    return D3(t14, e14.gct, r16);
  });
};
S2 = i6.decompressFrames = P3;
var G2 = class extends s14 {
  static async create(t14, n21, a15, i13, o20) {
    const s17 = new G2(i13);
    try {
      await s17._load(t14, n21, a15, o20);
    } catch (d13) {
      if (!g(d13))
        return new s3("invalid-resource", `Could not load GIF: ${d13.message}`);
    }
    return s17;
  }
  async _loadAnimation(e14, r16, t14) {
    return E3(e14, r16);
  }
};
async function E3(e14, r16, a15) {
  const i13 = F2(e14), o20 = S2(i13, true), { width: s17, height: d13 } = i13.lsd, c15 = document.createElement("canvas");
  c15.width = s17, c15.height = d13;
  const u13 = c15.getContext("2d"), l16 = [], f11 = [];
  for (const p9 of o20) {
    f11.push(n(p9.delay));
    const e15 = new ImageData(p9.patch, p9.dims.width, p9.dims.height), r17 = m4(e15), a16 = 3 === p9.disposalType && u13.getImageData(p9.dims.left, p9.dims.top, p9.dims.width, p9.dims.height);
    u13.drawImage(r17, p9.dims.left, p9.dims.top);
    const i14 = u13.getImageData(0, 0, s17, d13);
    l16.push(i14), 1 === p9.disposalType || (2 === p9.disposalType ? u13.clearRect(p9.dims.left, p9.dims.top, p9.dims.width, p9.dims.height) : 3 === p9.disposalType && u13.putImageData(a16, p9.dims.left, p9.dims.top));
  }
  return { frameDurations: f11, selectFrame: (e15) => {
    const t14 = l16[e15];
    r16(t14);
  }, width: s17, height: d13 };
}
var R2 = [71, 73, 70];
function V3(e14) {
  const r16 = new Uint8Array(e14);
  return !R2.some((e15, t14) => e15 !== r16[t14]);
}
function $2(e14) {
  if (!V3(e14))
    return false;
  const r16 = new DataView(e14), t14 = r16.getUint8(10);
  let n21 = 13 + (128 & t14 ? 3 * 2 ** (1 + (7 & t14)) : 0), a15 = 0, i13 = false;
  for (; !i13; ) {
    switch (r16.getUint8(n21++)) {
      case 33:
        if (!o20())
          return false;
        break;
      case 44:
        s17();
        break;
      case 59:
        i13 = true;
        break;
      default:
        return false;
    }
    if (a15 > 1)
      return true;
  }
  function o20() {
    switch (r16.getUint8(n21++)) {
      case 249:
        d13();
        break;
      case 1:
        c15();
        break;
      case 254:
        u13();
        break;
      case 255:
        l16();
        break;
      default:
        return false;
    }
    return true;
  }
  function s17() {
    a15++, n21 += 8;
    const e15 = r16.getUint8(n21++);
    n21 += 128 & e15 ? 3 * 2 ** (1 + (7 & e15)) : 0, n21++, f11();
  }
  function d13() {
    n21++, n21 += 4, f11();
  }
  function c15() {
    a15++, n21++, n21 += 12, f11();
  }
  function u13() {
    f11();
  }
  function l16() {
    n21++, n21 += 8, n21 += 3, f11();
  }
  function f11() {
    let e15;
    for (; e15 = r16.getUint8(n21++); )
      n21 += e15;
  }
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/util/symbolUtils.js
function e12(e14) {
  switch (e14.type) {
    case "esriSMS":
      return `${e14.style}.${e14.path}`;
    case "esriSLS":
      return `${e14.style}.${e14.cap}`;
    case "esriSFS":
      return `${e14.style}`;
    case "esriPFS":
    case "esriPMS":
      return e14.imageData ? `${e14.imageData}${e14.width}${e14.height}` : `${e14.url}${e14.width}${e14.height}`;
    default:
      return "mosaicHash" in e14 ? e14.mosaicHash : JSON.stringify(e14);
  }
}

// node_modules/@arcgis/core/views/2d/engine/webgl/TextureManager.js
var O6 = n7();
var Q = "arial-unicode-ms-regular";
var H = 126;
var V4 = s2.getLogger("esri.views.2d.engine.webgl.TextureManager");
async function Y3(e14, i13) {
  const r16 = Ee(e14);
  let n21;
  const o20 = ";base64,";
  if (r16.includes(o20)) {
    const e15 = r16.indexOf(o20) + o20.length, t14 = r16.substring(e15), i14 = atob(t14), s17 = new Uint8Array(i14.length);
    for (let r17 = 0; r17 < i14.length; r17++)
      s17[r17] = i14.charCodeAt(r17);
    n21 = s17.buffer;
  } else
    try {
      const { data: e15 } = await U(r16, { responseType: "array-buffer", ...i13 });
      n21 = e15;
    } catch (a15) {
      if (!g(a15))
        return new s3("mapview-invalid-resource", `Could not fetch requested resource at ${r16}`);
    }
  return n21;
}
function D4(e14, t14) {
  const i13 = Math.round(u2(t14) * window.devicePixelRatio), s17 = i13 >= 128 ? 2 : 4;
  return Math.min(e14, i13 * s17);
}
var J2 = (e14, t14, i13) => V4.error(new s3(e14, t14, i13));
var W2 = class {
  constructor(e14, t14, i13) {
    this.mosaicType = e14, this.page = t14, this.sdf = i13;
  }
  static fromMosaic(e14, t14) {
    return new W2(e14, t14.page, t14.sdf);
  }
};
var X = class {
  constructor(i13, r16) {
    this._requestRender = i13, this.resourceManager = r16, this._invalidFontsMap = /* @__PURE__ */ new Map(), this._sdfConverter = new r9(H), this._bindingInfos = new Array(), this._hashToBindingIndex = /* @__PURE__ */ new Map(), this._ongoingRasterizations = /* @__PURE__ */ new Map(), this._imageRequestQueue = new l3({ concurrency: 10, process: async (e14, i14) => {
      f(i14);
      try {
        return await U(e14, { responseType: "image", signal: i14 });
      } catch (r17) {
        if (!g(r17))
          throw new s3("mapview-invalid-resource", `Could not fetch requested resource at ${e14}`, r17);
        throw r17;
      }
    } }), this._spriteMosaic = new p2(2048, 2048, 500), this._glyphSource = new r8(`${r2.fontsUrl}/{fontstack}/{range}.pbf`), this._glyphMosaic = new _2(1024, 1024, this._glyphSource), this._rasterizer = new m5(r16);
  }
  dispose() {
    this._spriteMosaic.dispose(), this._glyphMosaic.dispose(), this._rasterizer.dispose(), this._sdfConverter.dispose(), this._spriteMosaic = null, this._glyphMosaic = null, this._sdfConverter = null, this._hashToBindingIndex.clear(), this._hashToBindingIndex = null, this._bindingInfos = null, this._ongoingRasterizations.clear(), this._ongoingRasterizations = null, this._imageRequestQueue.clear(), this._imageRequestQueue = null;
  }
  get sprites() {
    return this._spriteMosaic;
  }
  get glyphs() {
    return this._glyphMosaic;
  }
  async rasterizeItem(e14, t14, i13, s17) {
    if (t(e14))
      return J2("mapview-null-resource", "Unable to rasterize null resource"), null;
    switch (e14.type) {
      case "text":
      case "esriTS": {
        const t15 = await this._rasterizeText(e14, i13, s17);
        return t15.forEach((e15) => this._setTextureBinding(O4.GLYPH, e15)), { glyphMosaicItems: t15 };
      }
      default: {
        if (Ne(e14))
          return J2("mapview-invalid-type", `MapView does not support symbol type: ${e14.type}`, e14), null;
        const i14 = await this._rasterizeSpriteSymbol(e14, t14, s17);
        return e3(i14) && i14 && this._setTextureBinding(O4.SPRITE, i14), { spriteMosaicItem: i14 };
      }
    }
  }
  bindTextures(e14, t14, i13, s17 = false) {
    if (0 === i13.textureBinding)
      return;
    const r16 = this._bindingInfos[i13.textureBinding - 1], n21 = r16.page, o20 = s17 ? L.LINEAR_MIPMAP_LINEAR : L.LINEAR;
    switch (r16.mosaicType) {
      case O4.SPRITE: {
        const i14 = this.sprites.getWidth(n21), s18 = this.sprites.getHeight(n21), r17 = r5(O6, i14, s18);
        return this._spriteMosaic.bind(e14, o20, n21, y2), t14.setUniform1i("u_texture", y2), void t14.setUniform2fv("u_mosaicSize", r17);
      }
      case O4.GLYPH: {
        const i14 = this.glyphs.width, s18 = this.glyphs.height, r17 = r5(O6, i14, s18);
        return this._glyphMosaic.bind(e14, o20, n21, z), t14.setUniform1i("u_texture", z), void t14.setUniform2fv("u_mosaicSize", r17);
      }
      default:
        V4.error("mapview-texture-manager", `Cannot handle unknown type ${r16.mosaicType}`);
    }
  }
  _hashMosaic(e14, t14) {
    return 1 | e14 << 1 | (t14.sdf ? 1 : 0) << 2 | t14.page << 3;
  }
  _setTextureBinding(e14, t14) {
    const i13 = this._hashMosaic(e14, t14);
    if (!this._hashToBindingIndex.has(i13)) {
      const s17 = W2.fromMosaic(e14, t14), r16 = this._bindingInfos.length + 1;
      this._hashToBindingIndex.set(i13, r16), this._bindingInfos.push(s17);
    }
    t14.textureBinding = this._hashToBindingIndex.get(i13);
  }
  async _rasterizeText(e14, t14, s17) {
    let r16, n21;
    if ("cim" in e14) {
      const t15 = e14;
      r16 = t15.fontName, n21 = t15.text;
    } else {
      const t15 = e14;
      r16 = n8(t15.font), n21 = t15.text;
    }
    const o20 = this._invalidFontsMap.has(r16), a15 = t14 || ve(n5(n21)[0]);
    try {
      return await this._glyphMosaic.getGlyphItems(o20 ? Q : r16, a15, s17);
    } catch (h12) {
      return J2("mapview-invalid-resource", `Couldn't find font ${r16}. Falling back to Arial Unicode MS Regular`), this._invalidFontsMap.set(r16, true), this._glyphMosaic.getGlyphItems(Q, a15, s17);
    }
  }
  async _rasterizeSpriteSymbol(e14, t14, i13) {
    if (Me(e14))
      return null;
    const r16 = e12(e14);
    if (this._spriteMosaic.has(r16))
      return this._spriteMosaic.getSpriteItem(r16);
    if (Ie(e14) || Te(e14) && !Be(e14))
      return this._handleAsyncResource(r16, e14, i13);
    const n21 = 1, o20 = this._rasterizer.rasterizeJSONResource(e14, n21);
    if (o20) {
      const { size: t15, image: i14, sdf: s17, simplePattern: n22 } = o20;
      return this._addItemToMosaic(r16, t15, { type: "static", data: i14 }, _e(e14), s17, n22);
    }
    return new s3("TextureManager", "unrecognized or null rasterized image");
  }
  async _handleAsyncResource(e14, t14, i13) {
    if (this._ongoingRasterizations.has(e14))
      return this._ongoingRasterizations.get(e14);
    let s17;
    s17 = Ie(t14) ? this._handleSVG(t14, e14, i13) : this._handleImage(t14, e14, i13), this._ongoingRasterizations.set(e14, s17);
    try {
      await s17, this._ongoingRasterizations.delete(e14);
    } catch {
      this._ongoingRasterizations.delete(e14);
    }
    return s17;
  }
  async _handleSVG(e14, t14, i13) {
    const s17 = [H, H], r16 = await this._sdfConverter.draw(e14.path, i13);
    return this._addItemToMosaic(t14, s17, { type: "static", data: new Uint32Array(r16.buffer) }, false, true, true);
  }
  async _handleGIFOrPNG(e14, t14, i13) {
    const r16 = await Y3(e14, i13);
    if (e3(r16)) {
      const o20 = V3(r16), a15 = p3(r16);
      if (!o20 && !a15)
        return new s3("mapview-invalid-resource", "Image data is neither GIF nor PNG!");
      let c15;
      try {
        const t15 = e14.animatedSymbolProperties || {}, s17 = e14.objectId;
        o20 && $2(r16) ? c15 = await G2.create(r16, t15, s17, this._requestRender, i13) : a15 && m9(r16) && (c15 = await l5.create(r16, t15, s17, this._requestRender, i13));
      } catch (n21) {
        if (!g(n21))
          return new s3("mapview-invalid-resource", "Could not fetch requested resource!");
      }
      if (c15 && e3(c15))
        return this._addItemToMosaic(t14, [c15.width, c15.height], { type: "animated", data: c15 }, _e(e14), false, false);
      const u13 = new Blob([r16], { type: o20 ? "image/gif" : "image/png" }), d13 = await this._imageFromBlob(u13);
      if (d13 && d13 instanceof HTMLImageElement) {
        let i14 = d13.width, s17 = d13.height;
        "esriPMS" === e14.type && (i14 = Math.round(D4(d13.width, Ue(e14))), s17 = Math.round(d13.height * (i14 / d13.width)));
        const r17 = "cim" in e14 ? e14.cim.colorSubstitutions : void 0, { size: n21, sdf: o21, image: a16 } = this._rasterizer.rasterizeImageResource(i14, s17, d13, r17);
        return this._addItemToMosaic(t14, n21, { type: "static", data: a16 }, _e(e14), o21, false);
      }
    }
    return new s3("mapview-invalid-resource", "Could not handle resource!");
  }
  async _handleImage(e14, t14, i13) {
    if (we(e14) || Ae(e14))
      return this._handleGIFOrPNG(e14, t14, i13);
    const r16 = Ee(e14);
    try {
      let s17;
      const n21 = this.resourceManager.getResource(r16);
      if (r(n21))
        s17 = n21;
      else {
        const { data: e15 } = await this._imageRequestQueue.push(r16, { ...i13 });
        s17 = e15;
      }
      if (De(r16)) {
        if ("width" in e14 && "height" in e14)
          s17.width = u2(e14.width), s17.height = u2(e14.height);
        else if ("cim" in e14) {
          const t15 = e14.cim;
          s17.width = u2(t15.width ?? t15.scaleX * t15.size), s17.height = u2(t15.size);
        }
      }
      if (!s17.width || !s17.height)
        return null;
      let a15 = s17.width, h12 = s17.height;
      "esriPMS" === e14.type && (a15 = Math.round(D4(s17.width, Ue(e14))), h12 = Math.round(s17.height * (a15 / s17.width)));
      const u13 = "cim" in e14 ? e14.cim.colorSubstitutions : void 0, { size: d13, sdf: m14, image: l16 } = this._rasterizer.rasterizeImageResource(a15, h12, s17, u13);
      return this._addItemToMosaic(t14, d13, { type: "static", data: l16 }, _e(e14), m14, false);
    } catch (n21) {
      if (!g(n21))
        return new s3("mapview-invalid-resource", `Could not fetch requested resource at ${r16}. ${n21.message}`);
    }
  }
  async _imageFromBlob(e14) {
    const t14 = window.URL.createObjectURL(e14);
    try {
      const { data: e15 } = await this._imageRequestQueue.push(t14);
      return window.URL.revokeObjectURL(t14), e15;
    } catch (i13) {
      if (window.URL.revokeObjectURL(t14), !g(i13))
        return new s3("mapview-invalid-resource", `Could not fetch requested resource at ${t14}`);
      throw i13;
    }
  }
  _addItemToMosaic(e14, t14, i13, s17, r16, n21) {
    return this._spriteMosaic.addSpriteItem(e14, t14, i13, s17, r16, n21);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/StencilPrograms.js
var r10 = { shaders: { vertexShader: n12("stencil/stencil.vert"), fragmentShader: n12("stencil/stencil.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/WorldExtentClipRenderer.js
var l7 = r6(-0.5, -0.5);
var f7 = class {
  constructor() {
    this._centerNdc = n3(), this._pxToNdc = n3(), this._worldDimensionsPx = n3(), this._mat3 = e6(), this._initialized = false;
  }
  dispose() {
    this._program = s(this._program), this._quad = s(this._quad);
  }
  render(t14, s17) {
    const { context: i13 } = t14;
    return !!this._updateGeometry(t14, s17) && (this._initialized || this._initialize(i13), i13.setDepthWriteEnabled(false), i13.setDepthTestEnabled(false), i13.setColorMask(false, false, false, false), i13.setBlendingEnabled(false), i13.setStencilOp(O2.KEEP, O2.KEEP, O2.REPLACE), i13.setStencilFunction(I.ALWAYS, 1, 255), i13.useProgram(this._program), this._program.setUniformMatrix3fv("u_worldExtent", this._mat3), this._quad.draw(), this._quad.unbind(), true);
  }
  _initialize(t14) {
    if (this._initialized)
      return;
    const s17 = e5(t14, r10);
    s17 && (this._program = s17, this._quad = new n11(t14, [0, 0, 1, 0, 0, 1, 1, 1]), this._initialized = true);
  }
  _updateGeometry(t14, a15) {
    const { state: n21, pixelRatio: m14 } = t14, { size: c15, rotation: d13 } = n21, p9 = Math.round(c15[0] * m14), _10 = Math.round(c15[1] * m14);
    if (!n21.spatialReference.isWrappable)
      return false;
    const u13 = o(d13), f11 = Math.abs(Math.cos(u13)), g9 = Math.abs(Math.sin(u13)), x3 = Math.round(p9 * f11 + _10 * g9), b5 = Math.round(n21.worldScreenWidth);
    if (x3 <= b5)
      return false;
    const j5 = p9 * g9 + _10 * f11, E4 = b5 * m14, M5 = (a15.left - a15.right) * m14 / p9, w3 = (a15.bottom - a15.top) * m14 / _10;
    o2(this._worldDimensionsPx, E4, j5, 1), o2(this._pxToNdc, 2 / p9, -2 / _10, 1), o2(this._centerNdc, M5, w3, 1);
    const P4 = this._mat3;
    return l2(P4, this._centerNdc), f3(P4, P4, this._pxToNdc), 0 !== d13 && h2(P4, P4, u13), f3(P4, P4, this._worldDimensionsPx), M2(P4, P4, l7), true;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/Effect.js
var t8 = class {
  constructor() {
    this.name = this.constructor.name;
  }
  createOptions(t14, r16) {
    return null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/AnimationEffect.js
var o14 = class extends t8 {
  constructor() {
    super(...arguments), this.defines = [], this._desc = { vsPath: "fx/integrate", fsPath: "fx/integrate", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._quad && this._quad.dispose();
  }
  bind() {
  }
  unbind() {
  }
  draw(r16, i13) {
    if (!i13.size)
      return;
    const { context: a15, renderingOptions: o20 } = r16;
    this._quad || (this._quad = new n11(a15, [0, 0, 1, 0, 0, 1, 1, 1]));
    const n21 = a15.getBoundFramebufferObject(), { x: u13, y: m14, width: d13, height: f11 } = a15.getViewport();
    i13.bindTextures(a15);
    const c15 = i13.getBlock(N);
    if (t(c15))
      return;
    const _10 = c15.getFBO(a15), l16 = c15.getFBO(a15, 1);
    a15.setViewport(0, 0, i13.size, i13.size), this._computeDelta(r16, l16, o20.labelsAnimationTime), this._updateAnimationState(r16, l16, _10), a15.bindFramebuffer(n21), a15.setViewport(u13, m14, d13, f11);
  }
  _computeDelta(e14, t14, s17) {
    const { context: a15, painter: o20, displayLevel: n21 } = e14, u13 = o20.materialManager.getProgram(this._desc, ["delta"]);
    a15.bindFramebuffer(t14), a15.setClearColor(0, 0, 0, 0), a15.clear(a15.gl.COLOR_BUFFER_BIT), a15.useProgram(u13), u13.setUniform1i("u_maskTexture", B2), u13.setUniform1i("u_sourceTexture", C2), u13.setUniform1f("u_timeDelta", e14.deltaTime), u13.setUniform1f("u_animationTime", s17), u13.setUniform1f("u_zoomLevel", Math.round(10 * n21)), this._quad.draw();
  }
  _updateAnimationState(e14, t14, r16) {
    const { context: i13, painter: s17 } = e14, a15 = s17.materialManager.getProgram(this._desc, ["update"]);
    i13.bindTexture(t14.colorTexture, 1), i13.useProgram(a15), a15.setUniform1i("u_sourceTexture", 1), i13.bindFramebuffer(r16), i13.setClearColor(0, 0, 0, 0), i13.clear(i13.gl.COLOR_BUFFER_BIT), this._quad.draw();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BlendPrograms.js
var r11 = (e14) => e14.replace("-", "_").toUpperCase();
var t9 = (e14) => `#define ${r11(e14)}
`;
function n15(r16) {
  return { attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_tex", 1]]), shaders: { vertexShader: t9(r16) + n12("blend/blend.vert"), fragmentShader: t9(r16) + n12("blend/blend.frag") } };
}

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/BlendEffect.js
var l8 = s2.getLogger("esri.views.2d.engine.webgl.effects.blendEffects.BlendEffect");
var _4 = class {
  constructor() {
    this._size = [0, 0];
  }
  dispose(e14) {
    this._backBufferTexture = s(this._backBufferTexture), this._quad = s(this._quad);
  }
  draw(r16, t14, s17, a15, d13) {
    const { context: u13, drawPhase: f11 } = r16;
    if (this._setupShader(u13), a15 && "normal" !== a15 && f11 !== I3.LABEL)
      return void this._drawBlended(r16, t14, s17, a15, d13);
    const c15 = n15("normal"), m14 = u13.programCache.acquire(c15.shaders.vertexShader, c15.shaders.fragmentShader, c15.attributes);
    if (!m14)
      return void l8.error(new s3("mapview-BlendEffect", 'Error creating shader program for blend mode "normal"'));
    u13.useProgram(m14), t14.setSamplingMode(s17), u13.bindTexture(t14, 0), m14.setUniform1i("u_layerTexture", 0), m14.setUniform1f("u_opacity", d13), u13.setBlendingEnabled(true), u13.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA);
    const h12 = this._quad;
    h12.draw(), h12.unbind(), m14.dispose();
  }
  _drawBlended(r16, t14, i13, a15, d13) {
    const { context: u13, state: f11, pixelRatio: c15, inFadeTransition: m14 } = r16, { size: h12 } = f11, _10 = u13.getBoundFramebufferObject();
    let p9, b5;
    if (r(_10)) {
      const e14 = _10.descriptor;
      p9 = e14.width, b5 = e14.height;
    } else
      p9 = Math.round(c15 * h12[0]), b5 = Math.round(c15 * h12[1]);
    this._createOrResizeTexture(r16, p9, b5);
    const g9 = this._backBufferTexture;
    _10.copyToTexture(0, 0, p9, b5, 0, 0, g9), u13.setStencilTestEnabled(false), u13.setStencilWriteMask(0), u13.setBlendingEnabled(true), u13.setDepthTestEnabled(false), u13.setDepthWriteEnabled(false);
    const x3 = n15(a15), E4 = u13.programCache.acquire(x3.shaders.vertexShader, x3.shaders.fragmentShader, x3.attributes);
    if (!E4)
      return void l8.error(new s3("mapview-BlendEffect", `Error creating shader program for blend mode ${a15}`));
    u13.useProgram(E4), g9.setSamplingMode(i13), u13.bindTexture(g9, 0), E4.setUniform1i("u_backbufferTexture", 0), t14.setSamplingMode(i13), u13.bindTexture(t14, 1), E4.setUniform1i("u_layerTexture", 1), E4.setUniform1f("u_opacity", d13), E4.setUniform1f("u_inFadeOpacity", m14 ? 1 : 0), u13.setBlendFunction(R.ONE, R.ZERO);
    const T3 = this._quad;
    T3.draw(), T3.unbind(), E4.dispose(), u13.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA);
  }
  _setupShader(e14) {
    this._quad || (this._quad = new n11(e14, [-1, -1, 1, -1, -1, 1, 1, 1]));
  }
  _createOrResizeTexture(e14, r16, t14) {
    const { context: s17 } = e14;
    null !== this._backBufferTexture && r16 === this._size[0] && t14 === this._size[1] || (this._backBufferTexture ? this._backBufferTexture.resize(r16, t14) : this._backBufferTexture = new u3(s17, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: r16, height: t14 }), this._size[0] = r16, this._size[1] = t14);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/FeatureEffect.js
var r12 = class extends t8 {
  constructor(e14) {
    super(), this.name = this.constructor.name, this.defines = [e14];
  }
  dispose() {
  }
  bind({ context: e14, painter: t14 }) {
    this._prev = e14.getBoundFramebufferObject();
    const { width: r16, height: s17 } = e14.getViewport(), o20 = t14.getFbos(r16, s17).effect0;
    e14.bindFramebuffer(o20), e14.setColorMask(true, true, true, true), e14.setClearColor(0, 0, 0, 0), e14.clear(e14.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  draw(e14, r16) {
    const { context: s17, painter: o20 } = e14, n21 = o20.getPostProcessingEffects(r16), c15 = s17.getBoundFramebufferObject();
    for (const { postProcessingEffect: t14, effect: f11 } of n21)
      t14.draw(e14, c15, f11);
    s17.bindFramebuffer(this._prev), s17.setStencilTestEnabled(false), o20.blitTexture(s17, c15.colorTexture, L.NEAREST), s17.setStencilTestEnabled(true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/parameters.js
var o15 = 1;
var t10 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1];
var i7 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
var n16 = 256;
var e13 = { outlineWidth: 1.3, outerHaloWidth: 0.4, innerHaloWidth: 0.4, outlinePosition: 0 };

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightGradient.js
var u8 = s2.getLogger("esri.views.2d.engine.webgl.painter.highlight.HighlightGradient");
function C4(o20, i13) {
  i13.fillColor[0] = o20.color.r / 255, i13.fillColor[1] = o20.color.g / 255, i13.fillColor[2] = o20.color.b / 255, i13.fillColor[3] = o20.color.a, o20.haloColor ? (i13.outlineColor[0] = o20.haloColor.r / 255, i13.outlineColor[1] = o20.haloColor.g / 255, i13.outlineColor[2] = o20.haloColor.b / 255, i13.outlineColor[3] = o20.haloColor.a) : (i13.outlineColor[0] = i13.fillColor[0], i13.outlineColor[1] = i13.fillColor[1], i13.outlineColor[2] = i13.fillColor[2], i13.outlineColor[3] = i13.fillColor[3]), i13.fillColor[3] *= o20.fillOpacity, i13.outlineColor[3] *= o20.haloOpacity, i13.fillColor[0] *= i13.fillColor[3], i13.fillColor[1] *= i13.fillColor[3], i13.fillColor[2] *= i13.fillColor[3], i13.outlineColor[0] *= i13.outlineColor[3], i13.outlineColor[1] *= i13.outlineColor[3], i13.outlineColor[2] *= i13.outlineColor[3], i13.outlineWidth = e13.outlineWidth, i13.outerHaloWidth = e13.outerHaloWidth, i13.innerHaloWidth = e13.innerHaloWidth, i13.outlinePosition = e13.outlinePosition;
}
var g6 = [0, 0, 0, 0];
var f8 = class {
  constructor() {
    this._convertedHighlightOptions = { fillColor: [0.2 * 0.75, 0.6 * 0.75, 0.675, 0.75], outlineColor: [0.2 * 0.9, 0.54, 0.81, 0.9], outlinePosition: e13.outlinePosition, outlineWidth: e13.outlineWidth, innerHaloWidth: e13.innerHaloWidth, outerHaloWidth: e13.outerHaloWidth }, this.shadeTexChanged = true, this.texelData = new Uint8Array(4 * n16), this.minMaxDistance = [0, 0];
  }
  setHighlightOptions(o20) {
    const i13 = this._convertedHighlightOptions;
    C4(o20, i13);
    const t14 = i13.outlinePosition - i13.outlineWidth / 2 - i13.outerHaloWidth, r16 = i13.outlinePosition - i13.outlineWidth / 2, n21 = i13.outlinePosition + i13.outlineWidth / 2, h12 = i13.outlinePosition + i13.outlineWidth / 2 + i13.innerHaloWidth, a15 = Math.sqrt(Math.PI / 2) * o15, s17 = Math.abs(t14) > a15 ? Math.round(10 * (Math.abs(t14) - a15)) / 10 : 0, d13 = Math.abs(h12) > a15 ? Math.round(10 * (Math.abs(h12) - a15)) / 10 : 0;
    let f11;
    s17 && !d13 ? u8.error("The outer rim of the highlight is " + s17 + "px away from the edge of the feature; consider reducing some width values or shifting the outline position towards positive values (inwards).") : !s17 && d13 ? u8.error("The inner rim of the highlight is " + d13 + "px away from the edge of the feature; consider reducing some width values or shifting the outline position towards negative values (outwards).") : s17 && d13 && u8.error("The highlight is " + Math.max(s17, d13) + "px away from the edge of the feature; consider reducing some width values.");
    const c15 = [void 0, void 0, void 0, void 0];
    function m14(o21, i14, t15) {
      c15[0] = (1 - t15) * o21[0] + t15 * i14[0], c15[1] = (1 - t15) * o21[1] + t15 * i14[1], c15[2] = (1 - t15) * o21[2] + t15 * i14[2], c15[3] = (1 - t15) * o21[3] + t15 * i14[3];
    }
    const { texelData: p9 } = this;
    for (let l16 = 0; l16 < n16; ++l16)
      f11 = t14 + l16 / (n16 - 1) * (h12 - t14), f11 < t14 ? (c15[4 * l16 + 0] = 0, c15[4 * l16 + 1] = 0, c15[4 * l16 + 2] = 0, c15[4 * l16 + 3] = 0) : f11 < r16 ? m14(g6, i13.outlineColor, (f11 - t14) / (r16 - t14)) : f11 < n21 ? [c15[0], c15[1], c15[2], c15[3]] = i13.outlineColor : f11 < h12 ? m14(i13.outlineColor, i13.fillColor, (f11 - n21) / (h12 - n21)) : [c15[4 * l16 + 0], c15[4 * l16 + 1], c15[4 * l16 + 2], c15[4 * l16 + 3]] = i13.fillColor, p9[4 * l16 + 0] = 255 * c15[0], p9[4 * l16 + 1] = 255 * c15[1], p9[4 * l16 + 2] = 255 * c15[2], p9[4 * l16 + 3] = 255 * c15[3];
    this.minMaxDistance[0] = t14, this.minMaxDistance[1] = h12, this.shadeTexChanged = true;
  }
  applyHighlightOptions(o20, t14) {
    this.shadeTex || (this.shadeTex = new u3(o20, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, width: n16, height: 1, samplingMode: L.LINEAR })), this.shadeTexChanged && (this.shadeTex.updateData(0, 0, 0, n16, 1, this.texelData), this.shadeTexChanged = false), o20.bindTexture(this.shadeTex, J), t14.setUniform2fv("u_minMaxDistance", this.minMaxDistance);
  }
  destroy() {
    this.shadeTex && (this.shadeTex.dispose(), this.shadeTex = null);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/HighlightPrograms.js
var t11 = { shaders: { vertexShader: n12("highlight/textured.vert"), fragmentShader: n12("highlight/highlight.frag") }, attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
var r13 = { shaders: { vertexShader: n12("highlight/textured.vert"), fragmentShader: n12("highlight/blur.frag") }, attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightRenderer.js
var c7 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.quadGeometry.dispose(), this._resources.quadVAO.dispose(), this._resources.highlightProgram.dispose(), this._resources.blurProgram.dispose(), this._resources = null);
  }
  preBlur(e14, i13) {
    e14.bindTexture(i13, I2), e14.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [1, 0, 1 / this._width, 0]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", t10), e14.bindVAO(this._resources.quadVAO), e14.drawArrays(E.TRIANGLE_STRIP, 0, 4), e14.bindVAO();
  }
  finalBlur(e14, s17) {
    e14.bindTexture(s17, I2), e14.useProgram(this._resources.blurProgram), this._resources.blurProgram.setUniform4fv("u_direction", [0, 1, 0, 1 / this._height]), this._resources.blurProgram.setUniformMatrix4fv("u_channelSelector", i7), e14.bindVAO(this._resources.quadVAO), e14.drawArrays(E.TRIANGLE_STRIP, 0, 4), e14.bindVAO();
  }
  renderHighlight(e14, s17, i13) {
    e14.bindTexture(s17, I2), e14.useProgram(this._resources.highlightProgram), i13.applyHighlightOptions(e14, this._resources.highlightProgram), e14.bindVAO(this._resources.quadVAO), e14.setBlendingEnabled(true), e14.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), e14.drawArrays(E.TRIANGLE_STRIP, 0, 4), e14.bindVAO();
  }
  _initialize(s17, i13, a15) {
    this._width = i13, this._height = a15;
    const m14 = c2.createVertex(s17, F.STATIC_DRAW, new Int8Array([-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, 1, 1, 1, 1]).buffer), c15 = new f4(s17, /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]), { geometry: [new t2("a_position", 2, C.BYTE, 0, 4), new t2("a_texcoord", 2, C.UNSIGNED_BYTE, 2, 4)] }, { geometry: m14 }), f11 = e5(s17, t11), b5 = e5(s17, r13);
    s17.useProgram(f11), f11.setUniform1i("u_texture", I2), f11.setUniform1i("u_shade", J), f11.setUniform1f("u_sigma", o15), s17.useProgram(b5), b5.setUniform1i("u_texture", I2), b5.setUniform1f("u_sigma", o15), this._resources = { quadGeometry: m14, quadVAO: c15, highlightProgram: f11, blurProgram: b5 };
  }
  setup(r16, e14, s17) {
    this._resources ? (this._width = e14, this._height = s17) : this._initialize(r16, e14, s17);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/highlight/HighlightSurfaces.js
function l9(l16, a15, _10) {
  const c15 = new u3(l16, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, width: a15, height: _10, samplingMode: L.LINEAR });
  return [c15, new D2(l16, { colorTarget: Y.TEXTURE, depthStencilTarget: V.STENCIL_RENDER_BUFFER }, c15)];
}
var a11 = class {
  constructor() {
    this._width = void 0, this._height = void 0, this._resources = null;
  }
  dispose() {
    this._resources && (this._resources.sharedBlur1Tex.dispose(), this._resources.sharedBlur1Fbo.dispose(), this._resources.sharedBlur2Tex.dispose(), this._resources.sharedBlur2Fbo.dispose(), this._resources = null);
  }
  _initialize(e14, s17, r16) {
    this._width = s17, this._height = r16;
    const [t14, i13] = l9(e14, s17, r16), [h12, o20] = l9(e14, s17, r16);
    this._resources = { sharedBlur1Tex: t14, sharedBlur1Fbo: i13, sharedBlur2Tex: h12, sharedBlur2Fbo: o20 };
  }
  setup(e14, s17, r16) {
    !this._resources || this._width === s17 && this._height === r16 || this.dispose(), this._resources || this._initialize(e14, s17, r16);
  }
  get sharedBlur1Tex() {
    return this._resources.sharedBlur1Tex;
  }
  get sharedBlur1Fbo() {
    return this._resources.sharedBlur1Fbo;
  }
  get sharedBlur2Tex() {
    return this._resources.sharedBlur2Tex;
  }
  get sharedBlur2Fbo() {
    return this._resources.sharedBlur2Fbo;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HighlightEffect.js
var l10 = 4;
var d4 = 4 / l10;
var n17 = class extends t8 {
  constructor() {
    super(...arguments), this.defines = ["highlight"], this._hlRenderer = new c7(), this._hlGradient = new f8(), this._width = void 0, this._height = void 0, this._hlSurfaces = new a11(), this._adjustedWidth = void 0, this._adjustedHeight = void 0, this._blitRenderer = new _();
  }
  dispose() {
    this._hlSurfaces && this._hlSurfaces.dispose(), this._hlRenderer && this._hlRenderer.dispose(), this._hlGradient && this._hlGradient.destroy(), this._boundFBO = null;
  }
  bind(e14) {
    const { context: t14, painter: s17 } = e14, { width: i13, height: h12 } = t14.getViewport(), r16 = s17.getFbos(i13, h12).effect0;
    this.setup(e14, i13, h12), t14.bindFramebuffer(r16), t14.setColorMask(true, true, true, true), t14.setClearColor(0, 0, 0, 0), t14.clear(t14.gl.COLOR_BUFFER_BIT);
  }
  unbind() {
  }
  setup({ context: e14 }, t14, s17) {
    this._width = t14, this._height = s17;
    const i13 = t14 % l10, h12 = s17 % l10;
    t14 += i13 < l10 / 2 ? -i13 : l10 - i13, s17 += h12 < l10 / 2 ? -h12 : l10 - h12, this._adjustedWidth = t14, this._adjustedHeight = s17, this._boundFBO = e14.getBoundFramebufferObject();
    const r16 = Math.round(t14 * d4), n21 = Math.round(s17 * d4);
    this._hlRenderer.setup(e14, r16, n21), this._hlSurfaces.setup(e14, r16, n21);
  }
  draw({ context: e14 }) {
    const t14 = e14.getBoundFramebufferObject();
    e14.setViewport(0, 0, this._adjustedWidth * d4, this._adjustedHeight * d4), e14.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), e14.setStencilTestEnabled(false), e14.setClearColor(0, 0, 0, 0), e14.clear(e14.gl.COLOR_BUFFER_BIT), this._blitRenderer.render(e14, t14.colorTexture, L.NEAREST, 1), e14.setStencilTestEnabled(false), e14.setBlendingEnabled(false), e14.setColorMask(false, false, false, true), e14.bindFramebuffer(this._hlSurfaces.sharedBlur2Fbo), e14.setClearColor(0, 0, 0, 0), e14.clear(e14.gl.COLOR_BUFFER_BIT), this._hlRenderer.preBlur(e14, this._hlSurfaces.sharedBlur1Tex), e14.bindFramebuffer(this._hlSurfaces.sharedBlur1Fbo), e14.setClearColor(0, 0, 0, 0), e14.clear(e14.gl.COLOR_BUFFER_BIT), this._hlRenderer.finalBlur(e14, this._hlSurfaces.sharedBlur2Tex), e14.bindFramebuffer(this._boundFBO), e14.setBlendingEnabled(true), e14.setColorMask(true, true, true, true), e14.setViewport(0, 0, this._width, this._height), this._hlRenderer.renderHighlight(e14, this._hlSurfaces.sharedBlur1Tex, this._hlGradient), this._boundFBO = null;
  }
  setHighlightOptions(e14) {
    this._hlGradient.setHighlightOptions(e14);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffect.js
var c8 = class extends t8 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["hittest"];
  }
  dispose() {
    r(this._fbo) && this._fbo.dispose();
  }
  createOptions({ pixelRatio: t14 }, i13, s17 = Y2) {
    if (!i13.length)
      return null;
    const o20 = i13.shift(), n21 = o20.point.x, r16 = o20.point.y;
    return this._outstanding = o20, { type: "hittest", distance: s17 * t14, position: [n21, r16] };
  }
  bind(t14) {
    const { context: e14, attributeView: o20 } = t14;
    if (!o20.size)
      return;
    const n21 = o20.getBlock(O3);
    if (t(n21))
      return;
    const r16 = n21.getFBO(e14);
    e14.setViewport(0, 0, o20.size, o20.size), e14.bindFramebuffer(r16), e14.setColorMask(true, true, true, true), e14.setClearColor(0, 0, 0, 0), e14.clear(e14.gl.COLOR_BUFFER_BIT | e14.gl.DEPTH_BUFFER_BIT);
  }
  unbind(t14) {
  }
  draw(t14) {
    const { context: e14, attributeView: o20 } = t14, c15 = o20.getBlock(O3);
    if (t(this._outstanding))
      return;
    const d13 = this._outstanding.resolver;
    if (t(c15))
      return d13.resolve([]), void (this._outstanding = null);
    const l16 = c15.getFBO(e14), u13 = new Uint8Array(l16.width * l16.height * 4);
    l16.readPixels(0, 0, l16.width, l16.height, P.RGBA, G.UNSIGNED_BYTE, u13);
    const a15 = [];
    for (let i13 = 0; i13 < u13.length; i13 += 4) {
      const t15 = u13[i13], e15 = u13[i13 + 3];
      t15 && a15.push({ id: i13 / 4, directHits: e15 });
    }
    this._outstanding = null, a15.sort((t15, i13) => i13.directHits === t15.directHits ? i13.id - t15.id : i13.directHits - t15.directHits), d13.resolve(a15.map((t15) => t15.id));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/HittestEffectVTL.js
var i8 = class extends t8 {
  constructor() {
    super(...arguments), this.name = this.constructor.name, this.defines = ["id"], this._lastSize = 0;
  }
  dispose() {
    r(this._fbo) && this._fbo.dispose();
  }
  bind({ context: t14, painter: e14 }) {
    const { width: s17, height: o20 } = t14.getViewport();
    this._boundFBO = t14.getBoundFramebufferObject();
    const r16 = e14.getFbos(s17, o20).effect0;
    t14.bindFramebuffer(r16), t14.setColorMask(true, true, true, true), t14.setClearColor(0, 0, 0, 0), t14.clear(t14.gl.COLOR_BUFFER_BIT);
  }
  unbind({ context: t14 }) {
    t14.bindFramebuffer(this._boundFBO), this._boundFBO = null;
  }
  draw({ context: t14, state: s17, pixelRatio: i13 }, n21, f11 = 2 * Y2) {
    const a15 = t14.getBoundFramebufferObject(), h12 = s17.size[1] * i13, u13 = Math.round(f11 * i13), b5 = u13 / 2, c15 = u13 / 2;
    this._ensureBuffer(u13), n21.forEach((t15, e14) => {
      const s18 = /* @__PURE__ */ new Map(), f12 = Math.floor(e14.x * i13 - u13 / 2), l16 = Math.floor(h12 - e14.y * i13 - u13 / 2);
      a15.readPixels(f12, l16, u13, u13, P.RGBA, G.UNSIGNED_BYTE, this._buf);
      for (let o20 = 0; o20 < this._buf32.length; o20++) {
        const t16 = this._buf32[o20];
        if (4294967295 !== t16 && 0 !== t16) {
          const e15 = o20 % u13, r16 = u13 - Math.floor(o20 / u13), i14 = (b5 - e15) * (b5 - e15) + (c15 - r16) * (c15 - r16), n22 = s18.has(t16) ? s18.get(t16) : 4294967295;
          s18.set(t16, Math.min(i14, n22));
        }
      }
      const d13 = Array.from(s18).sort((t16, e15) => t16[1] - e15[1]).map((t16) => t16[0]);
      t15.resolve(d13), n21.delete(e14);
    });
  }
  _ensureBuffer(t14) {
    this._lastSize !== t14 && (this._lastSize = t14, this._buf = new Uint8Array(4 * t14 * t14), this._buf32 = new Uint32Array(this._buf.buffer));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Bloom.js
var u9 = 5;
var p5 = [1, 0];
var _5 = [0, 1];
var m11 = [1, 0.8, 0.6, 0.4, 0.2];
var d5 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
var c9 = class {
  constructor() {
    this._intensityFBO = null, this._compositeFBO = null, this._mipsFBOs = new Array(u9), this._nMips = u9, this._kernelSizeArray = [3, 5, 7, 9, 11], this._size = [0, 0], this._programDesc = { luminosityHighPass: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/luminosityHighPass", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/bloom/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    if (this._quad && (this._quad.dispose(), this._quad = null), this._intensityFBO && (this._intensityFBO.dispose(), this._intensityFBO = null), this._compositeFBO && (this._compositeFBO.dispose(), this._compositeFBO = null), this._mipsFBOs) {
      for (let t14 = 0; t14 < this._nMips; t14++)
        this._mipsFBOs[t14] && (this._mipsFBOs[t14].horizontal.dispose(), this._mipsFBOs[t14].vertical.dispose());
      this._mipsFBOs = null;
    }
  }
  draw(i13, s17, r16) {
    const { width: o20, height: n21 } = s17, { context: a15, painter: l16 } = i13, { materialManager: h12 } = l16, c15 = a15.gl, T3 = this._programDesc, { strength: f11, radius: g9, threshold: B4 } = r16;
    this._quad || (this._quad = new n11(a15, [-1, -1, 1, -1, -1, 1, 1, 1])), this._createOrResizeResources(i13, o20, n21), a15.setStencilTestEnabled(false), a15.setBlendingEnabled(true), a15.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), a15.setStencilWriteMask(0);
    const O7 = this._quad;
    O7.bind(), a15.bindFramebuffer(this._intensityFBO);
    const F3 = h12.getProgram(T3.luminosityHighPass);
    a15.useProgram(F3), a15.bindTexture(s17.colorTexture, 0), F3.setUniform1i("u_texture", 0), F3.setUniform3fv("u_defaultColor", [0, 0, 0]), F3.setUniform1f("u_defaultOpacity", 0), F3.setUniform1f("u_luminosityThreshold", B4), F3.setUniform1f("u_smoothWidth", 0.01);
    const b5 = [Math.round(o20 / 2), Math.round(n21 / 2)];
    a15.setViewport(0, 0, b5[0], b5[1]), a15.setClearColor(0, 0, 0, 0), a15.clear(c15.COLOR_BUFFER_BIT), O7.draw(), a15.setBlendingEnabled(false);
    let E4 = this._intensityFBO.colorTexture;
    for (let t14 = 0; t14 < this._nMips; t14++) {
      const e14 = h12.getProgram(T3.gaussianBlur, [{ name: "radius", value: this._kernelSizeArray[t14] }]);
      a15.useProgram(e14), a15.bindTexture(E4, t14 + 1), e14.setUniform1i("u_colorTexture", t14 + 1), e14.setUniform2fv("u_texSize", b5), e14.setUniform2fv("u_direction", p5), a15.setViewport(0, 0, b5[0], b5[1]);
      const i14 = this._mipsFBOs[t14];
      a15.bindFramebuffer(i14.horizontal), O7.draw(), E4 = i14.horizontal.colorTexture, a15.bindFramebuffer(i14.vertical), a15.bindTexture(E4, t14 + 1), e14.setUniform2fv("u_direction", _5), O7.draw(), E4 = i14.vertical.colorTexture, b5[0] = Math.round(b5[0] / 2), b5[1] = Math.round(b5[1] / 2);
    }
    a15.setViewport(0, 0, o20, n21);
    const x3 = h12.getProgram(T3.composite, [{ name: "nummips", value: u9 }]);
    a15.bindFramebuffer(this._compositeFBO), a15.useProgram(x3), x3.setUniform1f("u_bloomStrength", f11), x3.setUniform1f("u_bloomRadius", g9), x3.setUniform1fv("u_bloomFactors", m11), x3.setUniform3fv("u_bloomTintColors", d5), a15.bindTexture(this._mipsFBOs[0].vertical.colorTexture, 1), x3.setUniform1i("u_blurTexture1", 1), a15.bindTexture(this._mipsFBOs[1].vertical.colorTexture, 2), x3.setUniform1i("u_blurTexture2", 2), a15.bindTexture(this._mipsFBOs[2].vertical.colorTexture, 3), x3.setUniform1i("u_blurTexture3", 3), a15.bindTexture(this._mipsFBOs[3].vertical.colorTexture, 4), x3.setUniform1i("u_blurTexture4", 4), a15.bindTexture(this._mipsFBOs[4].vertical.colorTexture, 5), x3.setUniform1i("u_blurTexture5", 5), O7.draw(), a15.bindFramebuffer(s17), a15.setBlendingEnabled(true);
    const w3 = h12.getProgram(T3.blit);
    a15.useProgram(w3), a15.bindTexture(this._compositeFBO.colorTexture, 6), w3.setUniform1i("u_texture", 6), a15.setBlendFunction(R.ONE, R.ONE), O7.draw(), O7.unbind(), a15.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), a15.setStencilTestEnabled(true);
  }
  _createOrResizeResources(t14, e14, u13) {
    const { context: p9 } = t14;
    if (this._compositeFBO && this._size[0] === e14 && this._size[1] === u13)
      return;
    this._size[0] = e14, this._size[1] = u13;
    const _10 = [Math.round(e14 / 2), Math.round(u13 / 2)];
    this._compositeFBO ? this._compositeFBO.resize(e14, u13) : this._compositeFBO = new D2(p9, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: e14, height: u13 }), this._intensityFBO ? this._intensityFBO.resize(_10[0], _10[1]) : this._intensityFBO = new D2(p9, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: _10[0], height: _10[1] }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: _10[0], height: _10[1] });
    for (let m14 = 0; m14 < this._nMips; m14++)
      this._mipsFBOs[m14] ? (this._mipsFBOs[m14].horizontal.resize(_10[0], _10[1]), this._mipsFBOs[m14].vertical.resize(_10[0], _10[1])) : this._mipsFBOs[m14] = { horizontal: new D2(p9, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: _10[0], height: _10[1] }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: _10[0], height: _10[1] }), vertical: new D2(p9, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: _10[0], height: _10[1] }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: _10[0], height: _10[1] }) }, _10[0] = Math.round(_10[0] / 2), _10[1] = Math.round(_10[1] / 2);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Blur.js
var d6 = [1, 0];
var _6 = [0, 1];
var b3 = class {
  constructor() {
    this._blurFBO = null, this._size = [0, 0], this._programDesc = { gaussianBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, radialBlur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/radial-blur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._blurFBO && (this._blurFBO.dispose(), this._blurFBO = null);
  }
  draw(t14, r16, s17) {
    const { context: i13 } = t14, { type: a15, radius: n21 } = s17;
    if (0 === n21)
      return;
    this._createOrResizeResources(t14), this._quad || (this._quad = new n11(i13, [-1, -1, 1, -1, -1, 1, 1, 1]));
    const o20 = this._quad;
    o20.bind(), "blur" === a15 ? this._gaussianBlur(t14, r16, n21) : this._radialBlur(t14, r16), o20.unbind();
  }
  _gaussianBlur(e14, r16, s17) {
    const { context: i13, state: a15, painter: n21, pixelRatio: o20 } = e14, { size: u13 } = a15, { materialManager: l16 } = n21, b5 = this._programDesc, p9 = this._quad, c15 = [Math.round(o20 * u13[0]), Math.round(o20 * u13[1])], h12 = this._blurFBO, g9 = l16.getProgram(b5.gaussianBlur, [{ name: "radius", value: Math.ceil(s17) }]);
    i13.useProgram(g9), i13.setBlendingEnabled(false), i13.bindFramebuffer(h12), i13.bindTexture(r16.colorTexture, 4), g9.setUniform1i("u_colorTexture", 4), g9.setUniform2fv("u_texSize", c15), g9.setUniform2fv("u_direction", d6), g9.setUniform1f("u_sigma", s17), p9.draw(), i13.bindFramebuffer(r16), i13.setStencilWriteMask(0), i13.setStencilTestEnabled(false), i13.setDepthWriteEnabled(false), i13.setDepthTestEnabled(false), i13.bindTexture(h12.colorTexture, 5), g9.setUniform1i("u_colorTexture", 5), g9.setUniform2fv("u_direction", _6), p9.draw(), i13.setBlendingEnabled(true), i13.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), i13.setStencilTestEnabled(true);
  }
  _radialBlur(e14, r16) {
    const { context: s17, painter: i13 } = e14, { materialManager: a15 } = i13, n21 = this._programDesc, o20 = this._quad, u13 = this._blurFBO;
    s17.bindFramebuffer(u13);
    const l16 = a15.getProgram(n21.radialBlur);
    s17.useProgram(l16), s17.setBlendingEnabled(false), s17.bindTexture(r16.colorTexture, 4), l16.setUniform1i("u_colorTexture", 4), o20.draw(), s17.bindFramebuffer(r16), s17.setStencilWriteMask(0), s17.setStencilTestEnabled(false), s17.setDepthWriteEnabled(false), s17.setDepthTestEnabled(false), s17.setBlendingEnabled(true);
    const d13 = a15.getProgram(n21.blit);
    s17.useProgram(d13), s17.bindTexture(u13.colorTexture, 5), d13.setUniform1i("u_texture", 5), s17.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), o20.draw();
  }
  _createOrResizeResources(e14) {
    const { context: t14, state: d13, pixelRatio: _10 } = e14, { size: b5 } = d13, p9 = Math.round(_10 * b5[0]), c15 = Math.round(_10 * b5[1]);
    this._blurFBO && this._size[0] === p9 && this._size[1] === c15 || (this._size[0] = p9, this._size[1] = c15, this._blurFBO ? this._blurFBO.resize(p9, c15) : this._blurFBO = new D2(t14, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: p9, height: c15 }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: p9, height: c15 }));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Colorize.js
var l11 = class {
  constructor() {
    this._size = [0, 0], this._programDesc = { vsPath: "post-processing/pp", fsPath: "post-processing/filterEffect", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) };
  }
  dispose() {
    this._layerFBOTexture && (this._layerFBOTexture.dispose(), this._layerFBOTexture = null);
  }
  draw(e14, s17, r16) {
    const { width: i13, height: a15 } = s17;
    this._createOrResizeResources(e14, i13, a15);
    const { context: o20, painter: n21 } = e14, { materialManager: l16 } = n21, _10 = this._programDesc, c15 = this._quad, h12 = r16.colorMatrix;
    c15.bind();
    const u13 = this._layerFBOTexture;
    o20.bindFramebuffer(s17), s17.copyToTexture(0, 0, i13, a15, 0, 0, u13), o20.setBlendingEnabled(false), o20.setStencilTestEnabled(false);
    const d13 = l16.getProgram(_10);
    o20.useProgram(d13), o20.bindTexture(u13, 2), d13.setUniformMatrix4fv("u_coefficients", h12), d13.setUniform1i("u_colorTexture", 2), c15.draw(), o20.setBlendingEnabled(true), o20.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), o20.setStencilTestEnabled(true), c15.unbind();
  }
  _createOrResizeResources(t14, l16, _10) {
    const { context: c15 } = t14;
    this._layerFBOTexture && this._size[0] === l16 && this._size[1] === _10 || (this._size[0] = l16, this._size[1] = _10, this._layerFBOTexture ? this._layerFBOTexture.resize(l16, _10) : this._layerFBOTexture = new u3(c15, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: l16, height: _10 }), this._quad || (this._quad = new n11(c15, [-1, -1, 1, -1, -1, 1, 1, 1])));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/DropShadow.js
var _7 = [1, 0];
var d7 = [0, 1];
var c10 = class {
  constructor() {
    this._horizontalBlurFBO = null, this._verticalBlurFBO = null, this._size = [0, 0], this._programDesc = { blur: { vsPath: "post-processing/pp", fsPath: "post-processing/blur/gaussianBlur", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, composite: { vsPath: "post-processing/pp", fsPath: "post-processing/drop-shadow/composite", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) }, blit: { vsPath: "post-processing/pp", fsPath: "post-processing/blit", attributes: /* @__PURE__ */ new Map([["a_position", 0]]) } };
  }
  dispose() {
    this._layerFBOTexture && (this._layerFBOTexture.dispose(), this._layerFBOTexture = null), this._horizontalBlurFBO && (this._horizontalBlurFBO.dispose(), this._horizontalBlurFBO = null), this._verticalBlurFBO && (this._verticalBlurFBO.dispose(), this._verticalBlurFBO = null);
  }
  draw(i13, s17, o20) {
    const { context: a15, state: l16, painter: n21 } = i13, { materialManager: u13 } = n21, h12 = this._programDesc, p9 = s17.width, c15 = s17.height, B4 = [Math.round(p9 / 2), Math.round(c15 / 2)], { blurRadius: m14, offsetX: T3, offsetY: f11, color: g9 } = o20, F3 = [u2(T3 / 2), u2(f11 / 2)];
    this._createOrResizeResources(i13, p9, c15, B4);
    const O7 = this._horizontalBlurFBO, E4 = this._verticalBlurFBO;
    a15.setStencilWriteMask(0), a15.setStencilTestEnabled(false), a15.setDepthWriteEnabled(false), a15.setDepthTestEnabled(false);
    const b5 = this._layerFBOTexture;
    s17.copyToTexture(0, 0, p9, c15, 0, 0, b5), this._quad || (this._quad = new n11(a15, [-1, -1, 1, -1, -1, 1, 1, 1])), a15.setViewport(0, 0, B4[0], B4[1]);
    const w3 = this._quad;
    w3.bind(), a15.setBlendingEnabled(false);
    const x3 = u13.getProgram(h12.blur, [{ name: "radius", value: Math.ceil(m14) }]);
    a15.useProgram(x3), a15.bindFramebuffer(O7), a15.bindTexture(s17.colorTexture, 4), x3.setUniform1i("u_colorTexture", 4), x3.setUniform2fv("u_texSize", B4), x3.setUniform2fv("u_direction", _7), x3.setUniform1f("u_sigma", m14), w3.draw(), a15.bindFramebuffer(E4), a15.bindTexture(O7.colorTexture, 5), x3.setUniform1i("u_colorTexture", 5), x3.setUniform2fv("u_direction", d7), w3.draw(), a15.bindFramebuffer(s17), a15.setViewport(0, 0, p9, c15);
    const M5 = u13.getProgram(h12.composite);
    a15.useProgram(M5), a15.bindTexture(E4.colorTexture, 2), M5.setUniform1i("u_blurTexture", 2), a15.bindTexture(b5, 3), M5.setUniform1i("u_layerFBOTexture", 3), M5.setUniform4fv("u_shadowColor", [g9[3] * (g9[0] / 255), g9[3] * (g9[1] / 255), g9[3] * (g9[2] / 255), g9[3]]), M5.setUniformMatrix3fv("u_displayViewMat3", l16.displayMat3), M5.setUniform2fv("u_shadowOffset", F3), w3.draw(), a15.setBlendingEnabled(true), a15.setStencilTestEnabled(true), a15.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), w3.unbind();
  }
  _createOrResizeResources(e14, t14, r16, _10) {
    const { context: d13 } = e14;
    this._horizontalBlurFBO && this._size[0] === t14 && this._size[1] === r16 || (this._size[0] = t14, this._size[1] = r16, this._horizontalBlurFBO ? this._horizontalBlurFBO.resize(_10[0], _10[1]) : this._horizontalBlurFBO = new D2(d13, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: _10[0], height: _10[1] }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: _10[0], height: _10[1] }), this._verticalBlurFBO ? this._verticalBlurFBO.resize(_10[0], _10[1]) : this._verticalBlurFBO = new D2(d13, { colorTarget: Y.TEXTURE, depthStencilTarget: V.NONE, width: _10[0], height: _10[1] }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: _10[0], height: _10[1] }), this._layerFBOTexture ? this._layerFBOTexture.resize(t14, r16) : this._layerFBOTexture = new u3(d13, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: t14, height: r16 }));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/Opacity.js
var l12 = class {
  constructor() {
    this._size = [0, 0];
  }
  dispose() {
    this._layerFBOTexture && (this._layerFBOTexture.dispose(), this._layerFBOTexture = null);
  }
  draw(t14, s17, r16) {
    const { width: i13, height: a15 } = s17;
    this._createOrResizeResources(t14, i13, a15);
    const { context: l16, painter: o20 } = t14, { amount: T3 } = r16, h12 = l16.gl, n21 = this._layerFBOTexture;
    l16.bindFramebuffer(s17), s17.copyToTexture(0, 0, i13, a15, 0, 0, n21), l16.setBlendingEnabled(true), l16.setStencilTestEnabled(false), l16.setDepthTestEnabled(false), l16.setClearColor(0, 0, 0, 0), l16.clear(h12.COLOR_BUFFER_BIT), o20.blitTexture(l16, n21, L.NEAREST, T3);
  }
  _createOrResizeResources(l16, o20, T3) {
    const { context: h12 } = l16;
    this._layerFBOTexture && this._size[0] === o20 && this._size[1] === T3 || (this._size[0] = o20, this._size[1] = T3, this._layerFBOTexture ? this._layerFBOTexture.resize(o20, T3) : this._layerFBOTexture = new u3(h12, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.NEAREST, flipped: false, width: o20, height: T3 }));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/effects/post-processing/EffectManager.js
function c11(o20) {
  switch (o20) {
    case "bloom":
    case "blur":
    case "opacity":
    case "drop-shadow":
      return o20;
    default:
      return "colorize";
  }
}
var f9 = { colorize: () => new l11(), blur: () => new b3(), bloom: () => new c9(), opacity: () => new l12(), "drop-shadow": () => new c10() };
var i9 = class {
  constructor() {
    this._effectMap = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._effectMap.forEach((o20) => o20.dispose()), this._effectMap.clear();
  }
  getPostProcessingEffects(o20) {
    if (!o20 || 0 === o20.length)
      return [];
    const e14 = [];
    for (const t14 of o20) {
      const o21 = c11(t14.type);
      let s17 = this._effectMap.get(o21);
      s17 || (s17 = f9[o21](), this._effectMap.set(o21, s17)), e14.push({ postProcessingEffect: s17, effect: t14 });
    }
    return e14;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/painter/RenderPass.js
var t12 = class {
  constructor(r16, e14) {
    this.brushes = r16, this.name = e14.name, this.drawPhase = e14.drawPhase || I3.MAP, this._targetFn = e14.target, this.effects = e14.effects || [], this.enableDefaultDraw = e14.enableDefaultDraw ?? (() => true);
  }
  render(r16) {
    const { context: e14, profiler: s17 } = r16, t14 = this._targetFn(), a15 = this.drawPhase & r16.drawPhase;
    if (s17.recordPassStart(this.name), a15) {
      this.enableDefaultDraw() && this._doRender(r16, t14), s17.recordPassEnd();
      for (const a16 of this.effects) {
        if (!a16.enable())
          continue;
        const o20 = a16.apply;
        s17.recordPassStart(this.name + "." + o20.name), s17.recordBrushStart(o20.name);
        const n21 = a16.args && a16.args(), { x: i13, y: d13, width: f11, height: h12 } = e14.getViewport(), c15 = e14.getBoundFramebufferObject();
        o20.bind(r16, n21);
        const p9 = o20.createOptions(r16, n21), u13 = r16.passOptions;
        r16.passOptions = p9, this._doRender(r16, t14, o20.defines), r16.passOptions = u13, o20.draw(r16, n21), o20.unbind(r16, n21), e14.bindFramebuffer(c15), e14.setViewport(i13, d13, f11, h12), s17.recordBrushEnd(), s17.recordPassEnd();
      }
    }
  }
  _doRender(s17, t14, a15) {
    if (!t(t14))
      if (a2(t14)) {
        for (const r16 of t14)
          if (r16.visible)
            for (const e14 of this.brushes)
              s17.profiler.recordBrushStart(e14.name), e14.prepareState(s17, r16, a15), e14.draw(s17, r16, a15), s17.profiler.recordBrushEnd();
      } else
        for (const r16 of this.brushes)
          s17.profiler.recordBrushStart(r16.name), r16.prepareState(s17, t14, a15), r16.draw(s17, t14, a15), s17.profiler.recordBrushEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/Painter.js
function N2(e14, t14) {
  switch (e14) {
    case E2.LINE:
      return W.line;
    case E2.TEXT:
      return W.text;
    case E2.LABEL:
      return W.label;
    case E2.FILL:
      return t14 === S.DOT_DENSITY ? W.dotDensity : W.fill;
    case E2.MARKER:
      switch (t14) {
        case S.HEATMAP:
          return W.heatmap;
        case S.PIE_CHART:
          return W.pieChart;
        default:
          return W.marker;
      }
  }
}
var D5 = class {
  constructor(e14, t14, s17) {
    this.context = e14, this._blitRenderer = new _(), this._worldExtentClipRenderer = new f7(), this._isClippedToWorldExtent = false, this._brushCache = /* @__PURE__ */ new Map(), this._vtlMaterialManager = new o7(), this._blendEffect = new _4(), this._fboPool = [], this.effects = { highlight: new n17(), hittest: new c8(), hittestVTL: new i8(), integrate: new o14(), insideEffect: new r12("inside"), outsideEffect: new r12("outside") }, this.materialManager = new h4(e14), this.textureManager = new X(t14, s17), this._effectsManager = new i9();
  }
  get vectorTilesMaterialManager() {
    return this._vtlMaterialManager;
  }
  getRenderTarget() {
    return this._renderTarget;
  }
  setRenderTarget(e14) {
    this._renderTarget = e14;
  }
  getFbos(e14, t14) {
    if (e14 !== this._lastWidth || t14 !== this._lastHeight) {
      if (this._lastWidth = e14, this._lastHeight = t14, this._fbos) {
        for (const s18 in this._fbos)
          this._fbos[s18].resize(e14, t14);
        return this._fbos;
      }
      const s17 = { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, wrapMode: D.CLAMP_TO_EDGE, width: e14, height: t14 }, r16 = { colorTarget: Y.TEXTURE, depthStencilTarget: V.DEPTH_STENCIL_RENDER_BUFFER }, i13 = new r7(this.context, { width: e14, height: t14, internalFormat: B.DEPTH_STENCIL });
      this._stencilBuf = i13, this._fbos = { output: new D2(this.context, r16, s17, i13), blend: new D2(this.context, r16, s17, i13), effect0: new D2(this.context, r16, s17, i13) };
    }
    return this._fbos;
  }
  acquireFbo(e14, t14) {
    let s17;
    s17 = this._fboPool.length > 0 ? this._fboPool.pop() : new D2(this.context, { colorTarget: Y.TEXTURE, depthStencilTarget: V.DEPTH_STENCIL_RENDER_BUFFER }, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, wrapMode: D.CLAMP_TO_EDGE, width: e14, height: t14 }, this._stencilBuf);
    const r16 = s17.descriptor;
    return r16.width === e14 && r16.height === t14 || s17.resize(e14, t14), s17;
  }
  releaseFbo(e14) {
    this._fboPool.push(e14);
  }
  getSharedStencilBuffer() {
    return this._stencilBuf;
  }
  beforeRenderLayers(t14, s17 = null) {
    const { width: r16, height: i13 } = t14.getViewport();
    this._prevFBO = t14.getBoundFramebufferObject();
    const n21 = this.getFbos(r16, i13);
    if (t14.bindFramebuffer(n21.output), t14.setColorMask(true, true, true, true), r(s17)) {
      const { r: e14, g: r17, b: i14, a: n22 } = s17.color;
      t14.setClearColor(n22 * e14 / 255, n22 * r17 / 255, n22 * i14 / 255, n22);
    } else
      t14.setClearColor(0, 0, 0, 0);
    t14.setDepthWriteEnabled(true), t14.setClearDepth(1), t14.clear(t14.gl.COLOR_BUFFER_BIT | t14.gl.DEPTH_BUFFER_BIT), t14.setDepthWriteEnabled(false);
  }
  beforeRenderLayer(e14, t14, s17) {
    const { context: r16, blendMode: i13, effects: n21, requireFBO: o20, drawPhase: a15 } = e14;
    if (o20 || I5(a15, i13, n21, s17))
      r16.bindFramebuffer(this._fbos.blend), r16.setColorMask(true, true, true, true), r16.setClearColor(0, 0, 0, 0), r16.setDepthWriteEnabled(true), r16.setClearDepth(1), r16.clear(r16.gl.COLOR_BUFFER_BIT | r16.gl.DEPTH_BUFFER_BIT), r16.setDepthWriteEnabled(false);
    else {
      const e15 = this._getOutputFBO();
      r16.bindFramebuffer(e15);
    }
    r16.setDepthWriteEnabled(false), r16.setDepthTestEnabled(false), r16.setStencilTestEnabled(true), r16.setClearStencil(t14), r16.setStencilWriteMask(255), r16.clear(r16.gl.STENCIL_BUFFER_BIT);
  }
  compositeLayer(s17, r16) {
    const { context: i13, blendMode: n21, effects: a15, requireFBO: h12, drawPhase: l16 } = s17;
    if (h12 || I5(l16, n21, a15, r16)) {
      r(a15) && a15.length > 0 && l16 === I3.MAP && this._applyEffects(s17, a15);
      const h13 = this._getOutputFBO();
      i13.bindFramebuffer(h13), i13.setStencilTestEnabled(false), i13.setStencilWriteMask(0), i13.setBlendingEnabled(true), i13.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), i13.setColorMask(true, true, true, true);
      const f11 = t(n21) || l16 === I3.HIGHLIGHT ? "normal" : n21;
      this._blendEffect.draw(s17, this._fbos.blend.colorTexture, L.NEAREST, f11, r16);
    }
  }
  renderLayers(e14) {
    if (e14.bindFramebuffer(this._prevFBO), !this._fbos)
      return;
    const t14 = this._getOutputFBO();
    e14.setDepthTestEnabled(false), e14.setStencilWriteMask(0), this._isClippedToWorldExtent ? (e14.setStencilTestEnabled(true), e14.setStencilFunction(I.EQUAL, 1, 255)) : e14.setStencilTestEnabled(false), this.blitTexture(e14, t14.colorTexture, L.NEAREST);
  }
  prepareDisplay(t14, s17, r16) {
    const { context: i13 } = t14;
    if (i13.bindFramebuffer(this._prevFBO), i13.setColorMask(true, true, true, true), r(s17)) {
      const { r: e14, g: t15, b: r17, a: n21 } = s17.color;
      i13.setClearColor(n21 * e14 / 255, n21 * t15 / 255, n21 * r17 / 255, n21);
    } else
      i13.setClearColor(0, 0, 0, 0);
    i13.setStencilWriteMask(255), i13.setClearStencil(0), i13.clear(i13.gl.COLOR_BUFFER_BIT | i13.gl.STENCIL_BUFFER_BIT), this._isClippedToWorldExtent = this._worldExtentClipRenderer.render(t14, r16);
  }
  dispose() {
    if (this.materialManager.dispose(), this.textureManager.dispose(), this._blitRenderer = s(this._blitRenderer), this._worldExtentClipRenderer = s(this._worldExtentClipRenderer), this._brushCache && (this._brushCache.forEach((e14) => e14.dispose()), this._brushCache.clear(), this._brushCache = null), this._fbos)
      for (const e14 in this._fbos)
        this._fbos[e14] && this._fbos[e14].dispose();
    for (const e14 of this._fboPool)
      e14.dispose();
    if (this._fboPool.length = 0, this.effects)
      for (const e14 in this.effects)
        this.effects[e14] && this.effects[e14].dispose();
    this._effectsManager.dispose(), this._vtlMaterialManager = s(this._vtlMaterialManager), this._prevFBO = null;
  }
  getBrush(e14, t14) {
    const s17 = N2(e14, t14);
    let r16 = this._brushCache.get(s17);
    return void 0 === r16 && (r16 = new s17(), this._brushCache.set(s17, r16)), this._brushCache.get(s17);
  }
  renderObject(e14, t14, s17, i13) {
    const n21 = W[s17];
    if (!n21)
      return null;
    let o20 = this._brushCache.get(n21);
    void 0 === o20 && (o20 = new n21(), this._brushCache.set(n21, o20)), o20.prepareState(e14, t14, i13), o20.draw(e14, t14, i13);
  }
  renderObjects(e14, t14, s17, i13) {
    const n21 = W[s17];
    if (!n21)
      return null;
    let o20 = this._brushCache.get(n21);
    void 0 === o20 && (o20 = new n21(), this._brushCache.set(n21, o20)), o20.drawMany(e14, t14, i13);
  }
  registerRenderPass(e14) {
    const t14 = e14.brushes.map((e15) => (this._brushCache.has(e15) || this._brushCache.set(e15, new e15()), this._brushCache.get(e15)));
    return new t12(t14, e14);
  }
  setHighlightOptions(e14) {
    this.effects.highlight.setHighlightOptions(e14);
  }
  blitTexture(e14, t14, s17, r16 = 1) {
    e14.setBlendingEnabled(true), e14.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e14.setColorMask(true, true, true, true), this._blitRenderer.render(e14, t14, s17, r16);
  }
  getPostProcessingEffects(e14) {
    return this._effectsManager.getPostProcessingEffects(e14);
  }
  _getOutputFBO() {
    return null != this._renderTarget ? this._renderTarget : this._fbos.output;
  }
  _applyEffects(e14, t14) {
    const { context: s17 } = e14, r16 = this._effectsManager.getPostProcessingEffects(t14);
    for (const { postProcessingEffect: i13, effect: n21 } of r16)
      s17.bindFramebuffer(this._fbos.blend), i13.draw(e14, this._fbos.blend, n21);
  }
};
function I5(t14, s17, r16, i13) {
  return t14 !== I3.HIGHLIGHT && (1 !== i13 || r(s17) && "normal" !== s17 || r(r16) && r16.length > 0);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/Profiler.js
var i10 = a("esri-2d-profiler");
var o16 = class {
  constructor(t14, r16) {
    if (this._events = new n4(), this._entries = /* @__PURE__ */ new Map(), this._timings = new s6(10), !i10)
      return;
    this._ext = t6(t14.gl, {}), this._debugOutput = r16;
    const o20 = t14.gl;
    if (this.enableCommandLogging) {
      for (const e14 in o20)
        if ("function" == typeof o20[e14]) {
          const s17 = o20[e14], t15 = e14.includes("draw");
          o20[e14] = (...r17) => (this._events.emit("command", { container: this._currentContainer, pass: this._currentPass, brush: this._currentBrush, method: e14, args: r17, isDrawCommand: t15 }), this._currentSummary && (this._currentSummary.commands++, t15 && this._currentSummary.drawCommands++), s17.apply(o20, r17));
        }
    }
  }
  get enableCommandLogging() {
    return !("object" == typeof i10 && i10.disableCommands);
  }
  recordContainerStart(e14) {
    i10 && (this._currentContainer = e14);
  }
  recordContainerEnd() {
    i10 && (this._currentContainer = null);
  }
  recordPassStart(e14) {
    i10 && (this._currentPass = e14, this._initSummary());
  }
  recordPassEnd() {
    i10 && (this._currentPass = null, this._emitSummary());
  }
  recordBrushStart(e14) {
    i10 && (this._currentBrush = e14);
  }
  recordBrushEnd() {
    i10 && (this._currentBrush = null);
  }
  recordStart(e14) {
    if (i10 && r(this._ext)) {
      if (this._entries.has(e14)) {
        const s18 = this._entries.get(e14), t14 = this._ext.resultAvailable(s18.query), n21 = this._ext.disjoint();
        if (t14 && !n21) {
          const t15 = this._ext.getResult(s18.query) / 1e6;
          let n22 = 0;
          if (r(this._timings.enqueue(t15))) {
            const e15 = this._timings.entries, s19 = e15.length;
            let t16 = 0;
            for (const r16 of e15)
              t16 += r16;
            n22 = t16 / s19;
          }
          const i13 = t15.toFixed(2), o20 = n22 ? n22.toFixed(2) : "--";
          this.enableCommandLogging ? (console.groupCollapsed(`Frame report for ${e14}, ${i13} ms (${o20} last 10 avg)
${s18.commandsLen} Commands (${s18.drawCommands} draw)`), console.log("RenderPass breakdown: "), console.table(s18.summaries), console.log("Commands: ", s18.commands), console.groupEnd()) : console.log(`Frame report for ${e14}, ${i13} ms (${o20} last 10 avg)`), this._debugOutput.innerHTML = `${i13} (${o20})`;
        }
        for (const e15 of s18.handles)
          e15.remove();
        this._entries.delete(e14);
      }
      const s17 = { name: e14, query: this._ext.createQuery(), commands: [], commandsLen: 0, drawCommands: 0, summaries: [], handles: [] };
      this.enableCommandLogging && (s17.handles.push(this._events.on("command", (e15) => {
        s17.commandsLen++, s17.commands.push(e15), e15.isDrawCommand && s17.drawCommands++;
      })), s17.handles.push(this._events.on("summary", (e15) => {
        s17.summaries.push(e15);
      }))), this._ext.beginTimeElapsed(s17.query), this._entries.set(e14, s17);
    }
  }
  recordEnd(e14) {
    i10 && r(this._ext) && this._entries.has(e14) && this._ext.endTimeElapsed();
  }
  _initSummary() {
    this.enableCommandLogging && (this._currentSummary = { container: this._currentContainer, pass: this._currentPass, drawCommands: 0, commands: 0 });
  }
  _emitSummary() {
    this.enableCommandLogging && this._events.emit("summary", this._currentSummary);
  }
};

// node_modules/@arcgis/core/views/2d/engine/Stage.js
var x2 = 2e3;
var v3 = class extends s7 {
  constructor(i13, n21) {
    super(), this._trash = /* @__PURE__ */ new Set(), this._renderRemainingTime = 0, this._lastFrameRenderTime = 0, this.renderRequested = false, this.stage = this, this._stationary = true;
    const { canvas: o20 = document.createElement("canvas"), alpha: d13 = true, stencil: l16 = true, contextOptions: m14 = {} } = n21;
    this._canvas = o20;
    const g9 = n6("2d", o20, { alpha: d13, antialias: false, depth: true, stencil: l16 });
    this.context = new y3(r(g9) ? g9 : null, m14), this.resourceManager = new s5(), this.painter = new D5(this.context, this, this.resourceManager), a("esri-2d-profiler") && (this._debugOutput = document.createElement("div"), this._debugOutput.setAttribute("style", "margin: 24px 64px; position: absolute; color: red;"), i13.appendChild(this._debugOutput)), this._renderParameters = { drawPhase: 0, state: this.state, pixelRatio: window.devicePixelRatio, stationary: false, globalOpacity: 1, blendMode: null, deltaTime: -1, time: 0, inFadeTransition: false, effects: null, context: this.context, painter: this.painter, timeline: n21.timeline || new e7(), renderingOptions: n21.renderingOptions, requestRender: () => this.requestRender(), requireFBO: false, profiler: new o16(this.context, this._debugOutput), dataUploadCounter: 0 }, this._taskHandle = A({ render: (e14) => this.renderFrame(e14) }), this._taskHandle.pause(), this._lostWebGLContextHandle = r3(o20, "webglcontextlost", () => {
      this.emit("webgl-error", { error: new s3("webgl-context-lost") });
    }), o20.setAttribute("style", "width: 100%; height:100%; display:block;"), i13.appendChild(o20);
  }
  destroy() {
    this.removeAllChildren(), this._emptyTrash(), this._taskHandle.remove(), this._taskHandle = null, this._lostWebGLContextHandle && (this._lostWebGLContextHandle.remove(), this._lostWebGLContextHandle = null), this._canvas.parentNode && this._canvas.parentNode.removeChild(this._canvas), this._debugOutput && this._debugOutput.parentNode && this._debugOutput.parentNode.removeChild(this._debugOutput), this.highlightOptions = null, this.resourceManager.destroy(), this.painter.dispose(), this.context.dispose(), this._canvas = null;
  }
  get background() {
    return this._background;
  }
  set background(e14) {
    this._background = e14, this.requestRender();
  }
  get highlightOptions() {
    return this._highlightOptions;
  }
  set highlightOptions(e14) {
    this._highlightOptionsHandle && (this._highlightOptionsHandle.remove(), this._highlightOptionsHandle = null), this._highlightOptions = e14, this._highlightOptions && (this._highlightOptionsHandle = l(() => {
      var _a;
      return (_a = this._highlightOptions) == null ? void 0 : _a.version;
    }, () => {
      this.painter.setHighlightOptions(e14), this.requestRender();
    }, h));
  }
  get renderingOptions() {
    return this._renderingOptions;
  }
  set renderingOptions(e14) {
    this._renderingOptions = e14, this.requestRender();
  }
  get state() {
    return this._state;
  }
  set state(e14) {
    this._state = e14, this.requestRender();
  }
  get stationary() {
    return this._stationary;
  }
  set stationary(e14) {
    this._stationary !== e14 && (this._stationary = e14, this.requestRender());
  }
  trashDisplayObject(e14) {
    this._trash.add(e14), this.requestRender();
  }
  untrashDisplayObject(e14) {
    return this._trash.delete(e14);
  }
  requestRender() {
    this._renderRemainingTime = x2, this.renderRequested || (this.renderRequested = true, this.emit("will-render"), this._taskHandle.resume());
  }
  renderFrame(e14) {
    const t14 = this._lastFrameRenderTime ? e14.time - this._lastFrameRenderTime : 0;
    this._renderRemainingTime -= t14, this._renderRemainingTime <= 0 && this._taskHandle.pause(), this._lastFrameRenderTime = e14.time, this.renderRequested = false, this._renderParameters.state = this._state, this._renderParameters.stationary = this.stationary, this._renderParameters.pixelRatio = window.devicePixelRatio, this._renderParameters.globalOpacity = 1, this._renderParameters.time = e14.time, this._renderParameters.deltaTime = e14.deltaTime, this._renderParameters.effects = null, this.processRender(this._renderParameters), this._emptyTrash(), this.emit("post-render");
  }
  _createTransforms() {
    return { dvs: e6() };
  }
  renderChildren(e14) {
    for (const t14 of this.children)
      t14.beforeRender(e14);
    this._renderChildren(this.children, e14);
    for (const t14 of this.children)
      t14.afterRender(e14);
  }
  _renderChildren(e14, t14) {
    const s17 = this.context;
    s17.resetInfo(), t14.profiler.recordStart("drawLayers"), t14.dataUploadCounter = 0, t14.drawPhase = I3.MAP, this.painter.beforeRenderLayers(s17, this.background);
    for (const r16 of e14)
      r16.processRender(t14);
    this.painter.prepareDisplay(t14, this.background, this.state.padding), this.painter.renderLayers(s17), t14.drawPhase = I3.HIGHLIGHT, this.painter.beforeRenderLayers(s17);
    for (const r16 of e14)
      r16.processRender(t14);
    this.painter.renderLayers(s17);
    if (this._isLabelDrawPhaseRequired(e14)) {
      t14.drawPhase = I3.LABEL, this.painter.beforeRenderLayers(s17);
      for (const r16 of e14)
        r16.processRender(t14);
      this.painter.renderLayers(s17);
    }
    if (a("esri-tiles-debug")) {
      t14.drawPhase = I3.DEBUG, this.painter.beforeRenderLayers(s17);
      for (const r16 of e14)
        r16.processRender(t14);
      this.painter.renderLayers(s17);
    }
    t14.profiler.recordEnd("drawLayers"), s17.logInfo();
  }
  doRender(e14) {
    const t14 = this.context, { state: r16, pixelRatio: s17 } = e14;
    this._resizeCanvas(e14), t14.setViewport(0, 0, s17 * r16.size[0], s17 * r16.size[1]), t14.setDepthWriteEnabled(true), t14.setStencilWriteMask(255), super.doRender(e14);
  }
  async takeScreenshot(e14) {
    const { framebufferWidth: t14, framebufferHeight: r16 } = { framebufferWidth: Math.round(this.state.size[0] * e14.resolutionScale), framebufferHeight: Math.round(this.state.size[1] * e14.resolutionScale) }, s17 = 1, i13 = this.context, n21 = this._state.clone();
    if (null != e14.rotation) {
      const t15 = n21.viewpoint;
      n21.viewpoint.rotation = e14.rotation, n21.viewpoint = t15;
    }
    const a15 = { ...this._renderParameters, drawPhase: null, globalOpacity: 1, stationary: true, state: n21, pixelRatio: s17, time: performance.now(), deltaTime: 0, blendMode: null, effects: null, inFadeTransition: false }, o20 = new D2(i13, { colorTarget: Y.TEXTURE, depthStencilTarget: V.DEPTH_STENCIL_RENDER_BUFFER, width: t14, height: r16 }), h12 = i13.getBoundFramebufferObject(), d13 = i13.getViewport();
    i13.bindFramebuffer(o20), i13.setViewport(0, 0, t14, r16), this._renderChildren(e14.children, a15);
    const l16 = this._readbackScreenshot(o20, { ...e14.cropArea, y: r16 - (e14.cropArea.y + e14.cropArea.height) });
    i13.bindFramebuffer(h12), i13.setViewport(d13.x, d13.y, d13.width, d13.height), this.requestRender();
    const p9 = await l16;
    let c15;
    return 1 === e14.outputScale ? c15 = p9 : (c15 = new ImageData(Math.round(p9.width * e14.outputScale), Math.round(p9.height * e14.outputScale)), p(p9, c15, true)), c15;
  }
  async _readbackScreenshot(e14, t14) {
    const r16 = m3(t14.width, t14.height, document.createElement("canvas"));
    return await e14.readPixelsAsync(t14.x, t14.y, t14.width, t14.height, P.RGBA, G.UNSIGNED_BYTE, new Uint8Array(r16.data.buffer)), r16;
  }
  _resizeCanvas(e14) {
    const t14 = this._canvas, r16 = t14.style, { state: { size: s17 }, pixelRatio: i13 } = e14, n21 = s17[0], a15 = s17[1], o20 = Math.round(n21 * i13), h12 = Math.round(a15 * i13);
    t14.width === o20 && t14.height === h12 || (t14.width = o20, t14.height = h12), r16.width = n21 + "px", r16.height = a15 + "px";
  }
  _emptyTrash() {
    for (; this._trash.size > 0; ) {
      const e14 = Array.from(this._trash);
      this._trash.clear();
      for (const t14 of e14)
        t14.processDetach();
    }
  }
  _isLabelDrawPhaseRequired(e14) {
    let t14 = false;
    for (const r16 of e14) {
      if (!(r16 instanceof s7)) {
        t14 = t14 || false;
        break;
      }
      if (r16.hasLabels)
        return true;
      t14 = t14 || this._isLabelDrawPhaseRequired(r16.children);
    }
    return t14;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/collisions/CollisionGrid.js
var i11 = 2;
var o18 = 1;
var h8 = 0;
var r14 = 1;
var n18 = 2;
var c12 = class {
  constructor(t14, s17) {
    this.width = t14, this.height = s17;
    const i13 = Math.ceil(t14 / o18), h12 = Math.ceil(s17 / o18);
    this._cols = i13, this._rows = h12, this._cells = t4.create(i13 * h12);
  }
  insertMetrics(t14) {
    const s17 = this._hasCollision(t14);
    return s17 === h8 && this._markMetrics(t14), s17;
  }
  getCellId(t14, s17) {
    return t14 + s17 * this._cols;
  }
  has(t14) {
    return this._cells.has(t14);
  }
  hasRange(t14, s17) {
    return this._cells.hasRange(t14, s17);
  }
  set(t14) {
    this._cells.set(t14);
  }
  setRange(t14, s17) {
    this._cells.setRange(t14, s17);
  }
  _hasCollision(t14) {
    const s17 = t14.id;
    let e14 = 0, o20 = 0;
    t14.save();
    do {
      const s18 = t14.boundsCount;
      e14 += s18;
      for (let e15 = 0; e15 < s18; e15++) {
        const s19 = t14.boundsComputedAnchorX(e15), h12 = t14.boundsComputedAnchorY(e15), c15 = t14.boundsWidth(e15) + i11, l16 = t14.boundsHeight(e15) + i11;
        switch (this._collide(s19, h12, c15, l16)) {
          case n18:
            return n18;
          case r14:
            o20++;
        }
      }
    } while (t14.peekId() === s17 && t14.next());
    return t14.restore(), e14 === o20 ? r14 : h8;
  }
  _collide(s17, e14, i13, c15) {
    const l16 = s17 - i13 / 2, _10 = e14 - c15 / 2, a15 = l16 + i13, u13 = _10 + c15;
    if (a15 < 0 || u13 < 0 || l16 > this.width || _10 > this.height)
      return r14;
    const d13 = o3(Math.floor(l16 / o18), 0, this._cols), g9 = o3(Math.floor(_10 / o18), 0, this._rows), f11 = o3(Math.ceil(a15 / o18), 0, this._cols), m14 = o3(Math.ceil(u13 / o18), 0, this._rows);
    for (let t14 = g9; t14 <= m14; t14++)
      for (let s18 = d13; s18 <= f11; s18++) {
        const e15 = this.getCellId(s18, t14);
        if (this.has(e15))
          return n18;
      }
    return h8;
  }
  _mark(s17, e14, i13, h12) {
    const r16 = s17 - i13 / 2, n21 = e14 - h12 / 2, c15 = r16 + i13, l16 = n21 + h12, _10 = o3(Math.floor(r16 / o18), 0, this._cols), a15 = o3(Math.floor(n21 / o18), 0, this._rows), u13 = o3(Math.ceil(c15 / o18), 0, this._cols), d13 = o3(Math.ceil(l16 / o18), 0, this._rows);
    for (let t14 = a15; t14 <= d13; t14++)
      for (let s18 = _10; s18 <= u13; s18++) {
        const e15 = this.getCellId(s18, t14);
        this.set(e15);
      }
    return false;
  }
  _markMetrics(t14) {
    const s17 = t14.id;
    do {
      const s18 = t14.boundsCount;
      for (let e14 = 0; e14 < s18; e14++) {
        const s19 = t14.boundsComputedAnchorX(e14), o20 = t14.boundsComputedAnchorY(e14), h12 = t14.boundsWidth(e14) + i11, r16 = t14.boundsHeight(e14) + i11;
        this._mark(s19, o20, h12, r16);
      }
    } while (t14.peekId() === s17 && t14.next());
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/collisions/visualVariableSimpleUtils.js
var r15 = Math.PI;
function a12(e14, t14) {
  switch (t14.transformationType) {
    case i2.Additive:
      return s16(e14, t14);
    case i2.Constant:
      return u10(t14, e14);
    case i2.ClampedLinear:
      return o19(e14, t14);
    case i2.Proportional:
      return l13(e14, t14);
    case i2.Stops:
      return c13(e14, t14);
    case i2.RealWorldSize:
      return m12(e14, t14);
    case i2.Identity:
      return e14;
    case i2.Unknown:
      return null;
  }
}
function i12(e14, t14) {
  return "number" == typeof e14 ? e14 : a12(t14, e14);
}
function s16(e14, t14) {
  return e14 + (i12(t14.minSize, e14) || t14.minDataValue);
}
function u10(e14, t14) {
  const n21 = e14.stops;
  let r16 = n21 && n21.length && n21[0].size;
  return null == r16 && (r16 = e14.minSize), i12(r16, t14);
}
function o19(e14, t14) {
  const n21 = (e14 - t14.minDataValue) / (t14.maxDataValue - t14.minDataValue), r16 = i12(t14.minSize, e14), a15 = i12(t14.maxSize, e14);
  return e14 <= t14.minDataValue ? r16 : e14 >= t14.maxDataValue ? a15 : r16 + n21 * (a15 - r16);
}
function l13(t14, n21) {
  const r16 = t14 / n21.minDataValue, a15 = i12(n21.minSize, t14), s17 = i12(n21.maxSize, t14);
  let u13 = null;
  return u13 = r16 * a15, o3(u13, a15, s17);
}
function c13(e14, t14) {
  const [n21, r16, a15] = p6(e14, t14.cache.ipData);
  if (n21 === r16)
    return i12(t14.stops[n21].size, e14);
  {
    const s17 = i12(t14.stops[n21].size, e14);
    return s17 + (i12(t14.stops[r16].size, e14) - s17) * a15;
  }
}
function m12(n21, a15) {
  const s17 = m2[a15.valueUnit], u13 = i12(a15.minSize, n21), o20 = i12(a15.maxSize, n21), { valueRepresentation: l16 } = a15;
  let c15 = null;
  return c15 = "area" === l16 ? 2 * Math.sqrt(n21 / r15) / s17 : "radius" === l16 || "distance" === l16 ? 2 * n21 / s17 : n21 / s17, o3(c15, u13, o20);
}
function p6(e14, t14) {
  if (!t14)
    return;
  let n21 = 0, r16 = t14.length - 1;
  return t14.some((t15, a15) => e14 < t15 ? (r16 = a15, true) : (n21 = a15, false)), [n21, r16, (e14 - t14[n21]) / (t14[r16] - t14[n21])];
}

// node_modules/@arcgis/core/views/2d/engine/webgl/collisions/CollisionEngine.js
var c14 = 254;
var u11 = 255;
var f10 = 0;
function b4(e14, i13) {
  const o20 = [];
  e14.forEachTile((e15) => o20.push(e15)), o20.sort((e15, t14) => e15.instanceId - t14.instanceId), o20.forEach((e15) => {
    r(e15.labelMetrics) && e15.isReady && i13(e15, e15.labelMetrics.getCursor());
  });
}
function p7(e14) {
  return e14.layer && ("feature" === e14.layer.type || "csv" === e14.layer.type || "geojson" === e14.layer.type || "ogc-feature" === e14.layer.type || "stream" === e14.layer.type || "subtype-group" === e14.layer.type || "wfs" === e14.layer.type);
}
function y5(e14) {
  return (t14) => u2(a12(t14, e14));
}
function m13(e14) {
  const t14 = "visualVariables" in e14 && e14.visualVariables;
  if (!t14)
    return null;
  for (const i13 of t14)
    if ("size" === i13.type)
      return y5(i13);
  return null;
}
function h9(e14) {
  for (const t14 of e14) {
    const e15 = "featureReduction" in t14 && t14.featureReduction && "labelingInfo" in t14.featureReduction && t14.featureReduction, i13 = [...t14.labelingInfo || [], ...(e15 == null ? void 0 : e15.labelingInfo) || []];
    if (!t14.labelsVisible || !i13.length)
      continue;
    if (i13.some((e16) => "none" === e16.deconflictionStrategy))
      return true;
  }
  return false;
}
function M4(t14, i13) {
  var _a;
  if (!p7(i13))
    return;
  const o20 = "subtype-group" === i13.layer.type ? i13.layer.sublayers.items : [i13.layer], r16 = i13.layer.geometryType, n21 = !h9(o20), s17 = {};
  if ("subtype-group" !== i13.layer.type) {
    if ("heatmap" === ((_a = i13.tileRenderer) == null ? void 0 : _a.type))
      return;
    const e14 = m13(i13.layer.renderer);
    s17[0] = e14;
  }
  const a15 = i13.tileRenderer;
  if (t(a15))
    return;
  const l16 = i13.layer.visible && !i13.suspended;
  t14.push({ tileRenderer: a15, vvEvaluators: s17, deconflictionEnabled: n21, geometryType: r16, visible: l16 });
}
var g7 = class {
  run(e14, t14, i13) {
    const o20 = [];
    for (let r16 = e14.length - 1; r16 >= 0; r16--) {
      M4(o20, e14[r16]);
    }
    this._transformMetrics(o20, t14), this._runCollision(o20, t14, i13);
  }
  _runCollision(e14, t14, i13) {
    const [o20, r16] = t14.state.size, s17 = new c12(o20 * t14.pixelRatio, r16 * t14.pixelRatio);
    for (const { tileRenderer: n21, deconflictionEnabled: a15, visible: l16 } of e14) {
      const e15 = n21.featuresView.attributeView;
      a15 ? l16 ? (this._prepare(n21), this._collideVisible(s17, n21, i13), this._collideInvisible(s17, n21)) : b4(n21, (t15, i14) => {
        for (; i14.nextId(); )
          e15.setLabelMinZoom(i14.id, u11);
      }) : b4(n21, (t15, i14) => {
        for (; i14.nextId(); )
          e15.setLabelMinZoom(i14.id, f10);
      });
    }
  }
  _isFiltered(t14, i13, n21) {
    const s17 = i13.getFilterFlags(t14), a15 = !n21.hasFilter || !!(s17 & U2), l16 = t(n21.featureEffect) || n21.featureEffect.excludedLabelsVisible || !!(s17 & V2);
    return !(a15 && l16);
  }
  _prepare(e14) {
    const t14 = e14.featuresView.attributeView, i13 = /* @__PURE__ */ new Set();
    b4(e14, (o20, r16) => {
      for (; r16.nextId(); ) {
        if (i13.has(r16.id))
          continue;
        if (i13.add(r16.id), this._isFiltered(r16.id, t14, e14.layerView)) {
          t14.setLabelMinZoom(r16.id, c14);
          continue;
        }
        t14.getLabelMinZoom(r16.id) !== f10 ? t14.setLabelMinZoom(r16.id, u11) : t14.setLabelMinZoom(r16.id, f10);
      }
    });
  }
  _collideVisible(e14, t14, i13) {
    const o20 = t14.featuresView.attributeView, r16 = /* @__PURE__ */ new Set();
    b4(t14, (t15, n21) => {
      for (; n21.nextId(); )
        if (!r16.has(n21.id))
          if (t15.key.level === i13) {
            if (0 === o20.getLabelMinZoom(n21.id)) {
              switch (e14.insertMetrics(n21)) {
                case r14:
                  break;
                case n18:
                  o20.setLabelMinZoom(n21.id, c14), r16.add(n21.id);
                  break;
                case h8:
                  o20.setLabelMinZoom(n21.id, f10), r16.add(n21.id);
              }
            }
          } else
            o20.setLabelMinZoom(n21.id, c14);
    });
  }
  _collideInvisible(e14, t14) {
    const i13 = t14.featuresView.attributeView, o20 = /* @__PURE__ */ new Set();
    b4(t14, (t15, r16) => {
      for (; r16.nextId(); )
        if (!o20.has(r16.id) && i13.getLabelMinZoom(r16.id) === u11) {
          switch (e14.insertMetrics(r16)) {
            case r14:
              break;
            case n18:
              i13.setLabelMinZoom(r16.id, u11), o20.add(r16.id);
              break;
            case h8:
              i13.setLabelMinZoom(r16.id, f10), o20.add(r16.id);
          }
        }
    });
  }
  _transformMetrics(e14, i13) {
    for (const { tileRenderer: o20, geometryType: r16, vvEvaluators: n21 } of e14)
      b4(o20, (e15, s17) => {
        const a15 = o20.featuresView.attributeView, l16 = e15.transforms.labelMat2d;
        l16[4] = Math.round(l16[4]), l16[5] = Math.round(l16[5]);
        const d13 = l16[4], c15 = l16[5], u13 = "polyline" === r16;
        for (; s17.next(); ) {
          const e16 = s17.boundsCount, o21 = s17.anchorX, r17 = s17.anchorY;
          let f11 = s17.size;
          const b5 = n21[0];
          if (r(b5)) {
            const e17 = b5(a15.getVVSize(s17.id));
            f11 = isNaN(e17) || null == e17 || e17 === 1 / 0 ? f11 : e17;
          }
          const p9 = s17.directionX * (f11 / 2), y6 = s17.directionY * (f11 / 2);
          for (let t14 = 0; t14 < e16; t14++) {
            let e17 = o21, n22 = s17.anchorY;
            if (u13) {
              let o22 = e17 + s17.boundsX(t14) + p9, r18 = n22 + s17.boundsY(t14) + y6;
              i13.state.rotation ? (o22 = l16[0] * o22 + l16[2] * r18 + l16[4], r18 = l16[1] * o22 + l16[3] * r18 + l16[5]) : (o22 += d13, r18 += c15), s17.setBoundsComputedAnchorX(t14, Math.floor(o22)), s17.setBoundsComputedAnchorY(t14, Math.floor(r18));
            } else {
              i13.state.rotation ? (e17 = l16[0] * o21 + l16[2] * r17 + l16[4], n22 = l16[1] * o21 + l16[3] * r17 + l16[5]) : (e17 += d13, n22 += c15);
              const a16 = e17 + s17.boundsX(t14) + p9, u14 = n22 + s17.boundsY(t14) + y6;
              s17.setBoundsComputedAnchorX(t14, a16), s17.setBoundsComputedAnchorY(t14, u14);
            }
          }
        }
      });
  }
};

// node_modules/@arcgis/core/views/2d/LabelManager.js
var p8 = 32;
s2.getLogger("esri.views.2d.layers.labels.LabelManager");
var d8 = class extends a4(y) {
  constructor(e14) {
    super(e14), this._applyVisibilityPassThrottled = e4(this._applyVisibilityPass, p8, this), this.lastUpdateId = -1, this.updateRequested = false, this.view = null;
  }
  initialize() {
    this.collisionEngine = new g7();
  }
  destroy() {
    this.collisionEngine = null, this._applyVisibilityPassThrottled.remove(), this._applyVisibilityPassThrottled = null;
  }
  get updating() {
    return this.updateRequested;
  }
  update(e14) {
    this._applyVisibilityPassThrottled(e14);
  }
  viewChange() {
    this.requestUpdate();
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  processUpdate(e14) {
    this._set("updateParameters", e14), this.updateRequested && (this.updateRequested = false, this.update(e14));
  }
  _applyVisibilityPass(e14) {
    try {
      const t14 = this.view.featuresTilingScheme.getClosestInfoForScale(e14.state.scale).level;
      this.collisionEngine.run(this.view.allLayerViews.items, e14, t14);
    } catch (t14) {
    }
  }
};
e([d()], d8.prototype, "updateRequested", void 0), e([d({ readOnly: true })], d8.prototype, "updateParameters", void 0), e([d()], d8.prototype, "updating", null), e([d()], d8.prototype, "view", void 0), d8 = e([n2("esri.views.2d.layers.labels.LabelManager")], d8);
var n19 = d8;

// node_modules/@arcgis/core/views/2d/navigation/ZoomBox.js
var a13 = { container: "esri-zoom-box__container", overlay: "esri-zoom-box__overlay", background: "esri-zoom-box__overlay-background", box: "esri-zoom-box__outline" };
var n20 = { zoom: "Shift", counter: "Ctrl" };
var h10 = class extends y {
  constructor(t14) {
    super(t14), this._container = null, this._overlay = null, this._backgroundShape = null, this._boxShape = null, this._box = { x: 0, y: 0, width: 0, height: 0 }, this._redraw = this._redraw.bind(this);
  }
  destroy() {
    this.view = null;
  }
  set view(t14) {
    this._handles && this._handles.forEach((t15) => {
      t15.remove();
    }), this._handles = null, this._destroyOverlay(), this._set("view", t14), t14 && (t14.on("drag", [n20.zoom], (t15) => this._handleDrag(t15, 1), g2.INTERNAL), t14.on("drag", [n20.zoom, n20.counter], (t15) => this._handleDrag(t15, -1), g2.INTERNAL));
  }
  _start() {
    this._createContainer(), this._createOverlay(), this.navigation.begin();
  }
  _update(t14, e14, r16, i13) {
    this._box.x = t14, this._box.y = e14, this._box.width = r16, this._box.height = i13, this._rafId || (this._rafId = requestAnimationFrame(this._redraw));
  }
  _end(t14, e14, i13, o20, s17) {
    const a15 = this.view, n21 = a15.toMap(c(t14 + 0.5 * i13, e14 + 0.5 * o20));
    let h12 = Math.max(i13 / a15.width, o20 / a15.height);
    -1 === s17 && (h12 = 1 / h12), this._destroyOverlay(), this.navigation.end(), a15.goTo({ center: n21, scale: a15.scale * h12 });
  }
  _updateBox(t14, e14, r16, i13) {
    const o20 = this._boxShape;
    o20.setAttributeNS(null, "x", "" + t14), o20.setAttributeNS(null, "y", "" + e14), o20.setAttributeNS(null, "width", "" + r16), o20.setAttributeNS(null, "height", "" + i13), o20.setAttributeNS(null, "class", a13.box);
  }
  _updateBackground(t14, e14, r16, i13) {
    this._backgroundShape.setAttributeNS(null, "d", this._toSVGPath(t14, e14, r16, i13, this.view.width, this.view.height));
  }
  _createContainer() {
    const t14 = document.createElement("div");
    t14.className = a13.container, this.view.root.appendChild(t14), this._container = t14;
  }
  _createOverlay() {
    const t14 = this.view.width, e14 = this.view.height, r16 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    r16.setAttributeNS(null, "d", "M 0 0 L " + t14 + " 0 L " + t14 + " " + e14 + " L 0 " + e14 + " Z"), r16.setAttributeNS(null, "class", a13.background);
    const i13 = document.createElementNS("http://www.w3.org/2000/svg", "rect"), o20 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    o20.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink"), o20.setAttributeNS(null, "class", a13.overlay), o20.appendChild(r16), o20.appendChild(i13), this._container.appendChild(o20), this._backgroundShape = r16, this._boxShape = i13, this._overlay = o20;
  }
  _destroyOverlay() {
    this._container && this._container.parentNode && this._container.parentNode.removeChild(this._container), this._container = this._backgroundShape = this._boxShape = this._overlay = null;
  }
  _toSVGPath(t14, e14, r16, i13, o20, s17) {
    const a15 = t14 + r16, n21 = e14 + i13;
    return "M 0 0 L " + o20 + " 0 L " + o20 + " " + s17 + " L 0 " + s17 + " ZM " + t14 + " " + e14 + " L " + t14 + " " + n21 + " L " + a15 + " " + n21 + " L " + a15 + " " + e14 + " Z";
  }
  _handleDrag(t14, e14) {
    const r16 = t14.x, i13 = t14.y, o20 = t14.origin.x, s17 = t14.origin.y;
    let a15, n21, h12, l16;
    switch (r16 > o20 ? (a15 = o20, h12 = r16 - o20) : (a15 = r16, h12 = o20 - r16), i13 > s17 ? (n21 = s17, l16 = i13 - s17) : (n21 = i13, l16 = s17 - i13), t14.action) {
      case "start":
        this._start();
        break;
      case "update":
        this._update(a15, n21, h12, l16);
        break;
      case "end":
        this._end(a15, n21, h12, l16, e14);
    }
    t14.stopPropagation();
  }
  _redraw() {
    if (!this._rafId)
      return;
    if (this._rafId = null, !this._overlay)
      return;
    const { x: t14, y: e14, width: r16, height: i13 } = this._box;
    this._updateBox(t14, e14, r16, i13), this._updateBackground(t14, e14, r16, i13), this._rafId = requestAnimationFrame(this._redraw);
  }
};
e([d()], h10.prototype, "navigation", void 0), e([d()], h10.prototype, "view", null), h10 = e([n2("esri.views.2d.navigation.ZoomBox")], h10);
var l14 = h10;

// node_modules/@arcgis/core/views/2d/navigation/actions/Pan.js
var d9 = class extends y {
  constructor(t14) {
    super(t14), this.animationTime = 0, this.momentumEstimator = new h3(500, 6, 0.92), this.momentum = null, this.tmpMomentum = n3(), this.momentumFinished = false, this.viewpoint = new u4({ targetGeometry: new j(), scale: 0, rotation: 0 }), f2(() => this.momentumFinished, () => this.navigation.stop());
  }
  begin(t14, i13) {
    this.navigation.begin(), this.momentumEstimator.reset(), this.addToEstimator(i13), this.previousDrag = i13;
  }
  update(t14, i13) {
    this.addToEstimator(i13);
    let o20 = i13.center.x, m14 = i13.center.y;
    const s17 = this.previousDrag;
    o20 = s17 ? s17.center.x - o20 : -o20, m14 = s17 ? m14 - s17.center.y : m14, t14.viewpoint = St(this.viewpoint, t14.viewpoint, [o20 || 0, m14 || 0]), this.previousDrag = i13;
  }
  end(t14, i13) {
    this.addToEstimator(i13);
    const o20 = t14.navigation.momentumEnabled;
    this.momentum = o20 ? this.momentumEstimator.evaluateMomentum() : null, this.animationTime = 0, this.momentum && this.onAnimationUpdate(t14), this.previousDrag = null, this.navigation.end();
  }
  addToEstimator(t14) {
    const i13 = t14.center.x, o20 = t14.center.y, m14 = i(-i13, o20), e14 = r4(-i13, o20, 0);
    this.momentumEstimator.add(m14, e14, 1e-3 * t14.timestamp);
  }
  onAnimationUpdate(t14) {
    this.navigation.animationManager.animateContinous(t14.viewpoint, (i13, o20) => {
      this.momentumFinished = !this.momentum || this.momentum.isFinished(this.animationTime);
      const m14 = 1e-3 * o20;
      if (!this.momentumFinished) {
        const o21 = this.momentum.valueDelta(this.animationTime, m14);
        q(this.tmpMomentum, this.momentum.direction, o21), St(i13, i13, this.tmpMomentum), t14.constraints.constrainByGeometry(i13);
      }
      this.animationTime += m14;
    });
  }
  stopMomentumNavigation() {
    this.momentum && (this.momentumEstimator.reset(), this.momentum = null, this.navigation.stop());
  }
};
e([d()], d9.prototype, "momentumFinished", void 0), e([d()], d9.prototype, "viewpoint", void 0), e([d()], d9.prototype, "navigation", void 0), d9 = e([n2("esri.views.2d.navigation.actions.Pan")], d9);
var v4 = d9;

// node_modules/@arcgis/core/views/2d/navigation/actions/Pinch.js
var _8 = class extends y {
  constructor(t14) {
    super(t14), this._animationTime = 0, this._momentumFinished = false, this._rotationMomentumEstimator = new a7(0.6, 0.15, 0.95), this._rotationDirection = 1, this._zoomDirection = 1, this._zoomMomentumEstimator = new s8(), this._zoomOnly = null, this.zoomMomentum = null, this.rotateMomentum = null, this.viewpoint = new u4({ targetGeometry: new j(), scale: 0, rotation: 0 }), this.own(f2(() => this._momentumFinished, () => this.navigation.stop()));
  }
  begin(t14, o20) {
    this.navigation.begin(), this._rotationMomentumEstimator.reset(), this._zoomMomentumEstimator.reset(), this._zoomOnly = null, this._previousAngle = this._startAngle = o20.angle, this._previousRadius = this._startRadius = o20.radius, this._previousCenter = o20.center, this._updateTimestamp = null, t14.constraints.rotationEnabled && this.addToRotateEstimator(0, o20.timestamp), this.addToZoomEstimator(o20, 1);
  }
  update(t14, o20) {
    null === this._updateTimestamp && (this._updateTimestamp = o20.timestamp);
    const i13 = o20.angle, s17 = o20.radius, e14 = o20.center, n21 = Math.abs(180 * (i13 - this._startAngle) / Math.PI), m14 = Math.abs(s17 - this._startRadius), a15 = this._startRadius / s17;
    if (this._previousRadius) {
      const r16 = s17 / this._previousRadius;
      let h12 = 180 * (i13 - this._previousAngle) / Math.PI;
      this._rotationDirection = h12 >= 0 ? 1 : -1, this._zoomDirection = r16 >= 1 ? 1 : -1, t14.constraints.rotationEnabled ? (null === this._zoomOnly && o20.timestamp - this._updateTimestamp > 200 && (this._zoomOnly = m14 - n21 > 0), null === this._zoomOnly || this._zoomOnly ? h12 = 0 : this.addToRotateEstimator(i13 - this._startAngle, o20.timestamp)) : h12 = 0, this.addToZoomEstimator(o20, a15), this.navigation.setViewpoint([e14.x, e14.y], 1 / r16, h12, [this._previousCenter.x - e14.x, e14.y - this._previousCenter.y]);
    }
    this._previousAngle = i13, this._previousRadius = s17, this._previousCenter = e14;
  }
  end(t14) {
    this.rotateMomentum = this._rotationMomentumEstimator.evaluateMomentum(), this.zoomMomentum = this._zoomMomentumEstimator.evaluateMomentum(), this._animationTime = 0, (this.rotateMomentum || this.zoomMomentum) && this.onAnimationUpdate(t14), this.navigation.end();
  }
  addToRotateEstimator(t14, o20) {
    this._rotationMomentumEstimator.add(t14, 1e-3 * o20);
  }
  addToZoomEstimator(t14, o20) {
    this._zoomMomentumEstimator.add(o20, 1e-3 * t14.timestamp);
  }
  canZoomIn(t14) {
    const o20 = t14.scale, i13 = t14.constraints.effectiveMaxScale;
    return 0 === i13 || o20 > i13;
  }
  canZoomOut(t14) {
    const o20 = t14.scale, i13 = t14.constraints.effectiveMinScale;
    return 0 === i13 || o20 < i13;
  }
  onAnimationUpdate(t14) {
    this.navigation.animationManager.animateContinous(t14.viewpoint, (o20, i13) => {
      const s17 = !this.canZoomIn(t14) && this._zoomDirection > 1 || !this.canZoomOut(t14) && this._zoomDirection < 1, e14 = !this.rotateMomentum || this.rotateMomentum.isFinished(this._animationTime), n21 = s17 || !this.zoomMomentum || this.zoomMomentum.isFinished(this._animationTime), p9 = 1e-3 * i13;
      if (this._momentumFinished = e14 && n21, !this._momentumFinished) {
        const i14 = this.rotateMomentum ? Math.abs(this.rotateMomentum.valueDelta(this._animationTime, p9)) * this._rotationDirection * 180 / Math.PI : 0;
        let s18 = this.zoomMomentum ? Math.abs(this.zoomMomentum.valueDelta(this._animationTime, p9)) : 1;
        const e15 = n9(), n22 = n9();
        if (this._previousCenter) {
          r5(e15, this._previousCenter.x, this._previousCenter.y), nt(n22, t14.size, t14.padding), s4(e15, e15, n22);
          const { constraints: r16, scale: p10 } = t14, c15 = p10 * s18;
          s18 < 1 && !r16.canZoomInTo(c15) ? (s18 = p10 / r16.effectiveMaxScale, this.zoomMomentum = null, this.rotateMomentum = null) : s18 > 1 && !r16.canZoomOutTo(c15) && (s18 = p10 / r16.effectiveMinScale, this.zoomMomentum = null, this.rotateMomentum = null), Gt(o20, t14.viewpoint, s18, i14, e15, t14.size), t14.constraints.constrainByGeometry(o20);
        }
      }
      this._animationTime += p9;
    });
  }
  stopMomentumNavigation() {
    (this.rotateMomentum || this.zoomMomentum) && (this.rotateMomentum && (this._rotationMomentumEstimator.reset(), this.rotateMomentum = null), this.zoomMomentum && (this._zoomMomentumEstimator.reset(), this.zoomMomentum = null), this.navigation.stop());
  }
};
e([d()], _8.prototype, "_momentumFinished", void 0), e([d()], _8.prototype, "viewpoint", void 0), e([d()], _8.prototype, "navigation", void 0), _8 = e([n2("esri.views.2d.navigation.actions.Pinch")], _8);
var d10 = _8;

// node_modules/@arcgis/core/views/2d/navigation/actions/Rotate.js
var u12 = n9();
var d11 = n9();
var j3 = class extends y {
  constructor(t14) {
    super(t14), this._previousCenter = n9(), this.viewpoint = new u4({ targetGeometry: new j(), scale: 0, rotation: 0 });
  }
  begin(t14, e14) {
    this.navigation.begin(), r5(this._previousCenter, e14.center.x, e14.center.y);
  }
  update(t14, e14) {
    const { state: { size: o20, padding: r16 } } = t14;
    r5(u12, e14.center.x, e14.center.y), $(d11, o20, r16), t14.viewpoint = bt(this.viewpoint, t14.state.paddedViewState.viewpoint, pt(d11, this._previousCenter, u12)), a3(this._previousCenter, u12);
  }
  end() {
    this.navigation.end();
  }
};
e([d()], j3.prototype, "viewpoint", void 0), e([d()], j3.prototype, "navigation", void 0), j3 = e([n2("esri.views.2d.actions.Rotate")], j3);
var h11 = j3;

// node_modules/@arcgis/core/views/2d/navigation/MapViewNavigation.js
var l15 = 10;
var w2 = 1;
var v5 = new u4({ targetGeometry: new j() });
var d12 = [0, 0];
var g8 = 250;
var _9 = class extends y {
  constructor(t14) {
    super(t14), this._endTimer = null, this.animationManager = null;
  }
  initialize() {
    this.pan = new v4({ navigation: this }), this.rotate = new h11({ navigation: this }), this.pinch = new d10({ navigation: this }), this.zoomBox = new l14({ view: this.view, navigation: this });
  }
  destroy() {
    this.pan.destroy(), this.rotate.destroy(), this.pinch.destroy(), this.zoomBox.destroy(), this.pan = this.rotate = this.pinch = this.zoomBox = this.animationManager = null;
  }
  begin() {
    this._set("interacting", true);
  }
  end() {
    this._lastEventTimestamp = performance.now(), this._startTimer(g8);
  }
  async zoom(t14, i13 = this._getDefaultAnchor()) {
    if (this.stop(), this.begin(), this.view.constraints.snapToZoom && this.view.constraints.effectiveLODs)
      return t14 < 1 ? this.zoomIn(i13) : this.zoomOut(i13);
    this.setViewpoint(i13, t14, 0, [0, 0]);
  }
  async zoomIn(t14) {
    const i13 = this.view, o20 = i13.constraints.snapToNextScale(i13.scale);
    return this._zoomToScale(o20, t14);
  }
  async zoomOut(t14) {
    const i13 = this.view, o20 = i13.constraints.snapToPreviousScale(i13.scale);
    return this._zoomToScale(o20, t14);
  }
  setViewpoint(t14, i13, o20, n21) {
    this.begin(), this.view.state.viewpoint = this._scaleRotateTranslateViewpoint(this.view.viewpoint, t14, i13, o20, n21), this.end();
  }
  setViewpointImmediate(t14, i13 = 0, o20 = [0, 0], n21 = this._getDefaultAnchor()) {
    this.view.state.viewpoint = this._scaleRotateTranslateViewpoint(this.view.viewpoint, n21, t14, i13, o20);
  }
  continousRotateClockwise() {
    const t14 = this.get("view.viewpoint");
    this.animationManager.animateContinous(t14, (t15) => {
      bt(t15, t15, -w2);
    });
  }
  continousRotateCounterclockwise() {
    const t14 = this.get("view.viewpoint");
    this.animationManager.animateContinous(t14, (t15) => {
      bt(t15, t15, w2);
    });
  }
  resetRotation() {
    this.view.rotation = 0;
  }
  continousPanLeft() {
    this._continuousPan([-l15, 0]);
  }
  continousPanRight() {
    this._continuousPan([l15, 0]);
  }
  continousPanUp() {
    this._continuousPan([0, l15]);
  }
  continousPanDown() {
    this._continuousPan([0, -l15]);
  }
  stop() {
    this.pan.stopMomentumNavigation(), this.animationManager.stop(), this.end(), null !== this._endTimer && (clearTimeout(this._endTimer), this._endTimer = null, this._set("interacting", false));
  }
  _continuousPan(t14) {
    const i13 = this.view.viewpoint;
    this.animationManager.animateContinous(i13, (i14) => {
      St(i14, i14, t14), this.view.constraints.constrainByGeometry(i14);
    });
  }
  _startTimer(t14) {
    return null !== this._endTimer || (this._endTimer = setTimeout(() => {
      this._endTimer = null;
      const t15 = performance.now() - this._lastEventTimestamp;
      t15 < g8 ? this._endTimer = this._startTimer(t15) : this._set("interacting", false);
    }, t14)), this._endTimer;
  }
  _getDefaultAnchor() {
    const { size: t14, padding: { left: i13, right: o20, top: n21, bottom: e14 } } = this.view;
    return d12[0] = 0.5 * (t14[0] - o20 + i13), d12[1] = 0.5 * (t14[1] - e14 + n21), d12;
  }
  async _zoomToScale(t14, i13 = this._getDefaultAnchor()) {
    const { view: o20 } = this, { constraints: n21, scale: e14, viewpoint: s17, size: a15, padding: r16 } = o20, h12 = n21.canZoomInTo(t14), m14 = n21.canZoomOutTo(t14);
    if (!(t14 < e14 && !h12 || t14 > e14 && !m14))
      return Rt(v5, s17, t14 / e14, 0, i13, a15, r16), n21.constrainByGeometry(v5), o20.goTo(v5, { animate: true });
  }
  _scaleRotateTranslateViewpoint(t14, i13, o20, n21, e14) {
    const { view: s17 } = this, { size: a15, padding: h12, constraints: m14, scale: p9, viewpoint: u13 } = s17, l16 = p9 * o20, w3 = m14.canZoomInTo(l16), v6 = m14.canZoomOutTo(l16);
    return (o20 < 1 && !w3 || o20 > 1 && !v6) && (o20 = 1), St(u13, u13, e14), Rt(t14, u13, o20, n21, i13, a15, h12), m14.constrainByGeometry(t14);
  }
};
e([d()], _9.prototype, "animationManager", void 0), e([d({ type: Boolean, readOnly: true })], _9.prototype, "interacting", void 0), e([d()], _9.prototype, "pan", void 0), e([d()], _9.prototype, "pinch", void 0), e([d()], _9.prototype, "rotate", void 0), e([d()], _9.prototype, "view", void 0), e([d()], _9.prototype, "zoomBox", void 0), _9 = e([n2("esri.views.2d.navigation.MapViewNavigation")], _9);
var T2 = _9;

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/MagnifierPrograms.js
var a14 = { shaders: { vertexShader: n12("magnifier/magnifier.vert"), fragmentShader: n12("magnifier/magnifier.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };
function t13(r16) {
  return e5(r16, a14);
}

// node_modules/@arcgis/core/views/2d/magnifier/MagnifierView2D.js
var j4 = class extends a6 {
  constructor() {
    super(), this._handles = new u(), this._resourcePixelRatio = 1, this.visible = false;
  }
  destroy() {
    this._handles.destroy(), this._handles = null, this._disposeRenderResources(), this._resourcesTask && (this._resourcesTask.abort(), this._resourcesTask = null);
  }
  get background() {
    return this._background;
  }
  set background(e14) {
    this._background = e14, this.requestRender();
  }
  get magnifier() {
    return this._magnifier;
  }
  set magnifier(e14) {
    this._magnifier = e14, this._handles.removeAll(), this._handles.add([l(() => e14.version, () => {
      this.visible = e14.visible && r(e14.position) && e14.size > 0, this.requestRender();
    }, h), l(() => [e14.maskUrl, e14.overlayUrl], () => this._reloadResources()), l(() => e14.size, () => {
      this._disposeRenderResources(), this.requestRender();
    })]);
  }
  _createTransforms() {
    return { dvs: e6() };
  }
  doRender(e14) {
    var _a;
    const r16 = e14.context;
    if (!this._resourcesTask)
      return void this._reloadResources();
    if (e14.drawPhase !== I3.MAP || !this._canRender())
      return;
    this._updateResources(e14);
    const i13 = this._magnifier;
    if (t(i13.position))
      return;
    const a15 = e14.pixelRatio, o20 = i13.size * a15, n21 = 1 / i13.factor, l16 = Math.ceil(n21 * o20);
    this._readbackTexture.resize(l16, l16);
    const { size: h12 } = e14.state, m14 = a15 * h12[0], u13 = a15 * h12[1], d13 = 0.5 * l16, _10 = 0.5 * l16, p9 = o3(a15 * i13.position.x, d13, m14 - d13 - 1), f11 = o3(u13 - a15 * i13.position.y, _10, u13 - _10 - 1);
    r16.setBlendingEnabled(true);
    const g9 = p9 - d13, b5 = f11 - _10, x3 = this._readbackTexture;
    r16.bindTexture(x3, 0), r16.gl.copyTexImage2D(x3.descriptor.target, 0, x3.descriptor.pixelFormat, g9, b5, l16, l16, 0);
    const R3 = (_a = this.background) == null ? void 0 : _a.color, y6 = R3 ? [R3.a * R3.r / 255, R3.a * R3.g / 255, R3.a * R3.b / 255, R3.a] : [1, 1, 1, 1], k2 = (p9 + i13.offset.x * a15) / m14 * 2 - 1, A3 = (f11 - i13.offset.y * a15) / u13 * 2 - 1, v6 = o20 / m14 * 2, E4 = o20 / u13 * 2, j5 = this._program;
    r16.bindVAO(this._vertexArrayObject), r16.bindTexture(this._overlayTexture, 6), r16.bindTexture(this._maskTexture, 7), r16.useProgram(j5), j5.setUniform4fv("u_background", y6), j5.setUniform1i("u_readbackTexture", 0), j5.setUniform1i("u_overlayTexture", 6), j5.setUniform1i("u_maskTexture", 7), j5.setUniform4f("u_drawPos", k2, A3, v6, E4), j5.setUniform1i("u_maskEnabled", i13.maskEnabled ? 1 : 0), j5.setUniform1i("u_overlayEnabled", i13.overlayEnabled ? 1 : 0), r16.setStencilTestEnabled(false), r16.setColorMask(true, true, true, true), r16.drawArrays(E.TRIANGLE_STRIP, 0, 4), r16.bindVAO();
  }
  _canRender() {
    return this.mask && this.overlay && null != this._magnifier;
  }
  _reloadResources() {
    this._resourcesTask && this._resourcesTask.abort();
    const r16 = r(this._magnifier) ? this._magnifier.maskUrl : null, s17 = r(this._magnifier) ? this._magnifier.overlayUrl : null;
    this._resourcesTask = O(async (a15) => {
      const o20 = t(r16) || t(s17) ? s9(a15) : null, n21 = r(r16) ? U(r16, { responseType: "image", signal: a15 }).then((e14) => e14.data) : o20.then((e14) => e14.mask), l16 = r(s17) ? U(s17, { responseType: "image", signal: a15 }).then((e14) => e14.data) : o20.then((e14) => e14.overlay), [h12, m14] = await Promise.all([n21, l16]);
      this.mask = h12, this.overlay = m14, this._disposeRenderResources(), this.requestRender();
    });
  }
  _disposeRenderResources() {
    this._readbackTexture = s(this._readbackTexture), this._overlayTexture = s(this._overlayTexture), this._maskTexture = s(this._maskTexture), this._vertexArrayObject = s(this._vertexArrayObject), this._program = s(this._program);
  }
  _updateResources(e14) {
    if (e14.pixelRatio !== this._resourcePixelRatio && this._disposeRenderResources(), this._readbackTexture)
      return;
    const r16 = e14.context;
    this._resourcePixelRatio = e14.pixelRatio;
    const s17 = Math.ceil(this._magnifier.size * e14.pixelRatio);
    this._program = t13(r16);
    const t14 = new Uint16Array([0, 1, 0, 0, 1, 1, 1, 0]), i13 = a14.attributes;
    this._vertexArrayObject = new f4(r16, i13, m6, { geometry: c2.createVertex(r16, F.STATIC_DRAW, t14) }), this.overlay.width = s17, this.overlay.height = s17, this._overlayTexture = new u3(r16, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.NEAREST, flipped: true, preMultiplyAlpha: !It(this.overlay.src) || !e14.context.driverTest.svgAlwaysPremultipliesAlpha }, this.overlay), this.mask.width = s17, this.mask.height = s17, this._maskTexture = new u3(r16, { target: M.TEXTURE_2D, pixelFormat: P.ALPHA, internalFormat: P.ALPHA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.NEAREST, flipped: true }, this.mask);
    const a15 = 1 / this._magnifier.factor;
    this._readbackTexture = new u3(r16, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, wrapMode: D.CLAMP_TO_EDGE, samplingMode: L.LINEAR, flipped: false, width: Math.ceil(a15 * s17), height: Math.ceil(a15 * s17) });
  }
};
export {
  i3 as GraphicContainer,
  ae as GraphicsView2D,
  n19 as LabelManager,
  j4 as MagnifierView2D,
  T2 as MapViewNavigation,
  v3 as Stage
};
//# sourceMappingURL=mapViewDeps-MZZ7MOMX.js.map
