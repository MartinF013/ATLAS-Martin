import {
  w
} from "./chunk-FK4VVO2E.js";
import {
  A,
  E,
  O,
  T,
  _,
  d,
  g
} from "./chunk-FZCDFXBT.js";
import {
  L
} from "./chunk-FPMD6IB4.js";
import {
  r,
  s,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/terrain/RasterTile.js
var d2 = { bandCount: 3, outMin: 0, outMax: 1, minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255], factor: [1 / 255, 1 / 255, 1 / 255], useGamma: false, gamma: [1, 1, 1], gammaCorrection: [1, 1, 1], colormap: null, colormapOffset: null, stretchType: "none", type: "stretch" };
var _2 = class {
  constructor(t2, e, r2 = null, s2 = null) {
    this.type = "raster-tile", this._memoryUsed = null, this._source = null, this._symbolizerParameters = null, this._bandIds = null, this._interpolation = null, this._dirty = false, this._transformGrid = null, this.isRendereredSource = false, this.symbolizerRenderer = null, this.rawPixelData = null, this.lij = null, this.opacity = 1, this.lij = t2, this.source = e, this.width = r2 || e.width, this.height = s2 || e.height;
  }
  get source() {
    return this._source;
  }
  set source(e) {
    this._source = e, this._rasterTexture = s(this._rasterTexture), this._memoryUsed = null;
  }
  get symbolizerParameters() {
    return this.isRendereredSource ? { ...d2, maxCutOff: [1, 1, 1], factor: [1, 1, 1] } : this._symbolizerParameters || d2;
  }
  set symbolizerParameters(t2) {
    this._symbolizerParameters = t2;
  }
  get bandIds() {
    return this._bandIds;
  }
  set bandIds(t2) {
    if (r(t2) && t2.length > 0) {
      this._bandIds && t2.every((t3, e) => !!this._bandIds[e] && t3 === this._bandIds[e]) || (this._bandIds = t2, this._dirty = true);
    } else
      this._bandIds = null;
  }
  get interpolation() {
    return this._interpolation || "nearest";
  }
  set interpolation(t2) {
    if (this._interpolation = t2, r(this._rasterTexture)) {
      const e = this._getRasterTextureInterpolation(t2);
      this._rasterTexture.setSamplingMode("bilinear" === e ? L.LINEAR : L.NEAREST);
    }
  }
  get transformGrid() {
    return this._transformGrid;
  }
  set transformGrid(e) {
    this._transformGrid = e, this._transformGridTexture = s(this._transformGridTexture), this._memoryUsed = null;
  }
  bind(t2) {
    return !!(this.source && this.source.pixels && this.source.pixels.length > 0) && ((t(this._rasterTexture) || this._dirty) && this._updateRasterTexture(t2, this.bandIds), r(this._rasterTexture) && (this._updateColormapTexture(t2), this.transformGrid && t(this._transformGridTexture) && (this._transformGridTexture = E(t2, this.transformGrid))), true);
  }
  getUniforms() {
    const { symbolizerParameters: t2, transformGrid: e, width: r2, height: i, opacity: o } = this, u = g(e, [r2, i], [this.source.width, this.source.height], o), m = A(t2.colormap, t2.colormapOffset), d3 = "stretch" === this.symbolizerParameters.type ? d(this.symbolizerParameters) : null, _3 = "hillshade" === this.symbolizerParameters.type ? O(this.symbolizerParameters) : null;
    return new w(u, m, d3 || _3, this._rasterTexture, this._transformGridTexture, this._colormapTexture);
  }
  get memoryUsage() {
    if (t(this._memoryUsed)) {
      const t2 = [this._rasterTexture, this._transformGridTexture, this._colormapTexture];
      this._memoryUsed = t2.map((t3) => r(t3) ? t3.descriptor.width * t3.descriptor.height * 4 : 0).reduce((t3, e) => t3 + e, 0);
    }
    return this._memoryUsed;
  }
  release() {
    return this._rasterTexture = s(this._rasterTexture), this._transformGridTexture = s(this._transformGridTexture), this._colormapTexture = s(this._colormapTexture), this.source = null, this.transformGrid = null, this.rawPixelData = null, true;
  }
  _updateRasterTexture(s2, i) {
    const o = this.source ? this.source.extractBands(i) : null;
    if (!(o && o.pixels && o.pixels.length > 0))
      return void (this._rasterTexture = s(this._rasterTexture));
    const a = t(i) && t(this.bandIds) || r(i) && r(this.bandIds) && i.join("") === this.bandIds.join("");
    if (r(this._rasterTexture) && a)
      return;
    this._rasterTexture = s(this._rasterTexture);
    const h = this._getRasterTextureInterpolation(this.interpolation);
    this._rasterTexture = _(s2, o, h, this.isRendereredSource || this.hasStretchTypeNone());
  }
  hasStretchTypeNone() {
    return "stretchType" in this.symbolizerParameters && "none" === this.symbolizerParameters.stretchType && !this.symbolizerParameters.useGamma && "u8" === this.source.pixelType;
  }
  _getRasterTextureInterpolation(t2) {
    return "lut" === this.symbolizerParameters.type || "nearest" === t2 || "majority" === t2 ? "nearest" : "bilinear";
  }
  _updateColormapTexture(e) {
    const r2 = this._colormap, s2 = this.symbolizerParameters.colormap;
    return s2 ? r2 ? s2.length !== r2.length || s2.some((t2, e2) => t2 !== r2[e2]) ? (this._colormapTexture = s(this._colormapTexture), this._colormapTexture = T(e, s2), void (this._colormap = s2)) : void 0 : (this._colormapTexture = T(e, s2), void (this._colormap = s2)) : (this._colormapTexture = s(this._colormapTexture), void (this._colormap = null));
  }
};

export {
  _2 as _
};
//# sourceMappingURL=chunk-UPTIBS6K.js.map
