import {
  Ke
} from "./chunk-7LOJJ46D.js";
import {
  b
} from "./chunk-P3QN5DXX.js";
import {
  B
} from "./chunk-Q3R7XFM5.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import {
  n
} from "./chunk-GVELBHGI.js";
import {
  w
} from "./chunk-U3PSONS6.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/layers/support/FetchAssociatedFeatureLayer.js
var l = class {
  constructor(t2, r2, e, a) {
    this.parsedUrl = t2, this.portalItem = r2, this.apiKey = e, this.signal = a, this.rootDocument = null;
    const s = this.parsedUrl.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);
    s && (this.urlParts = { root: s[1], layerId: parseInt(s[2], 10) });
  }
  async fetch() {
    if (!this.urlParts)
      return null;
    const t2 = this.portalItem ?? await this._portalItemFromServiceItemId();
    if (t(t2))
      return this._loadFromUrl();
    const r2 = await this._findAndLoadRelatedPortalItem(t2);
    return t(r2) ? null : this._loadFeatureLayerFromPortalItem(r2);
  }
  async fetchPortalItem() {
    if (!this.urlParts)
      return null;
    const t2 = this.portalItem ?? await this._portalItemFromServiceItemId();
    return t(t2) ? null : this._findAndLoadRelatedPortalItem(t2);
  }
  async _fetchRootDocument() {
    if (r(this.rootDocument))
      return this.rootDocument;
    if (t(this.urlParts))
      return this.rootDocument = {}, {};
    const t2 = { query: { f: "json", token: this.apiKey }, responseType: "json", signal: this.signal }, s = `${this.urlParts.root}/SceneServer`;
    try {
      const e = await U(s, t2);
      this.rootDocument = e.data;
    } catch {
      this.rootDocument = {};
    }
    return this.rootDocument;
  }
  async _fetchServiceOwningPortalUrl() {
    var _a;
    const e = (_a = n) == null ? void 0 : _a.findServerInfo(this.parsedUrl.path);
    if (e == null ? void 0 : e.owningSystemUrl)
      return e.owningSystemUrl;
    const a = this.parsedUrl.path.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    try {
      const t2 = (await U(a, { query: { f: "json" }, responseType: "json", signal: this.signal })).data.owningSystemUrl;
      if (t2)
        return t2;
    } catch (i) {
      w(i);
    }
    return null;
  }
  async _findAndLoadRelatedPortalItem(t2) {
    try {
      return (await t2.fetchRelatedItems({ relationshipType: "Service2Service", direction: "reverse" }, { signal: this.signal })).find((t3) => "Feature Service" === t3.type) || null;
    } catch (r2) {
      return w(r2), null;
    }
  }
  async _loadFeatureLayerFromPortalItem(t2) {
    await t2.load({ signal: this.signal });
    const r2 = await this._findMatchingAssociatedSublayerUrl(t2.url);
    return new Ke({ url: r2, portalItem: t2 }).load({ signal: this.signal });
  }
  async _loadFromUrl() {
    const t2 = await this._findMatchingAssociatedSublayerUrl(`${this.urlParts.root}/FeatureServer`);
    return new Ke({ url: t2 }).load({ signal: this.signal });
  }
  async _findMatchingAssociatedSublayerUrl(t2) {
    const e = t2.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i, "$1"), a = { query: { f: "json" }, responseType: "json", authMode: "no-prompt", signal: this.signal }, s = this.urlParts.layerId, i = this._fetchRootDocument(), o = U(e, a), [n2, l2] = await Promise.all([o, i]), c = l2 && l2.layers, h = n2.data && n2.data.layers;
    if (!Array.isArray(h))
      throw new Error("expected layers array");
    if (Array.isArray(c))
      for (let r2 = 0; r2 < Math.min(c.length, h.length); r2++) {
        if (c[r2].id === s)
          return `${e}/${h[r2].id}`;
      }
    else if (s < h.length)
      return `${e}/${h[s].id}`;
    throw new Error("could not find matching associated sublayer");
  }
  async _portalItemFromServiceItemId() {
    const t2 = (await this._fetchRootDocument()).serviceItemId;
    if (!t2)
      return null;
    const r2 = new b({ id: t2, apiKey: this.apiKey }), e = await this._fetchServiceOwningPortalUrl();
    r(e) && (r2.portal = new B({ url: e }));
    try {
      return r2.load({ signal: this.signal });
    } catch (i) {
      return w(i), null;
    }
  }
};

export {
  l
};
//# sourceMappingURL=chunk-E6HTI5QN.js.map
