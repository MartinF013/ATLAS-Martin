import {
  s as s2
} from "./chunk-4OFLHC3C.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  E
} from "./chunk-U3PSONS6.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/layers/TileLayerView.js
var i = (i2) => {
  let c = class extends i2 {
    async fetchPopupFeatures(e2, s3) {
      const { layer: a } = this;
      if (!e2)
        throw new s("tilelayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: a });
      if ("tile" !== a.type)
        throw new s("tilelayerview:fetchPopupFeatures", "Layer type should be 'tile'", { type: a.type });
      const i3 = this.get("view.scale"), c2 = a.allSublayers.toArray().filter((e3) => {
        const r2 = 0 === e3.minScale || i3 <= e3.minScale, t = 0 === e3.maxScale || i3 >= e3.maxScale;
        return e3.popupTemplate && e3.popupEnabled && e3.visible && r2 && t;
      });
      return E(c2.map(async (r2) => {
        const o = r2.createQuery(), a2 = r(s3) ? s3.event : null, i4 = s2({ renderer: r2.renderer, event: a2 });
        o.geometry = this.createFetchPopupFeaturesQueryGeometry(e2, i4), o.outFields = await r2.popupTemplate.getRequiredFields();
        return (await r2.queryFeatures(o)).features;
      })).then((e3) => [].concat(...e3.map((e4) => e4.value).filter(Boolean)));
    }
  };
  return e([d()], c.prototype, "layer", void 0), c = e([n("esri.layers.mixins.TileLayerView")], c), c;
};

export {
  i
};
//# sourceMappingURL=chunk-4KPVL3JK.js.map
