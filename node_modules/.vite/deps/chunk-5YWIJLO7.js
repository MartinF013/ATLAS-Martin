import {
  l
} from "./chunk-22YODLVL.js";
import {
  d,
  t as t2,
  x
} from "./chunk-TB42IUV7.js";
import {
  me,
  ne
} from "./chunk-6SWQ7R36.js";
import {
  L
} from "./chunk-4I3W4KD5.js";
import {
  n as n2
} from "./chunk-6FKG7JUE.js";
import {
  S as S2,
  c,
  d as d2
} from "./chunk-L2YBXQTH.js";
import {
  r as r2
} from "./chunk-S4ZKPFDU.js";
import {
  o
} from "./chunk-YG6VFATO.js";
import {
  x as x2
} from "./chunk-4XBERLPX.js";
import {
  b
} from "./chunk-GSFXXEAM.js";
import {
  n
} from "./chunk-P6G64ARX.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import {
  i
} from "./chunk-GVELBHGI.js";
import {
  G,
  S,
  j
} from "./chunk-5N3FSR63.js";
import {
  v
} from "./chunk-4PRVTUEZ.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/rest/query/operations/pbfJSONFeatureSet.js
function i2(e, t3) {
  return t3;
}
function n3(e, t3, r4, s6) {
  switch (r4) {
    case 0:
      return d3(e, t3 + s6, 0);
    case 1:
      return "lowerLeft" === e.originPosition ? d3(e, t3 + s6, 1) : l2(e, t3 + s6, 1);
  }
}
function a(e, t3, r4, s6) {
  return 2 === r4 ? d3(e, t3, 2) : n3(e, t3, r4, s6);
}
function h(e, t3, r4, s6) {
  return 2 === r4 ? d3(e, t3, 3) : n3(e, t3, r4, s6);
}
function u(e, t3, r4, s6) {
  return 3 === r4 ? d3(e, t3, 3) : a(e, t3, r4, s6);
}
function d3({ translate: e, scale: t3 }, r4, s6) {
  return e[s6] + r4 * t3[s6];
}
function l2({ translate: e, scale: t3 }, r4, s6) {
  return e[s6] - r4 * t3[s6];
}
var c2 = class {
  constructor(e) {
    this.options = e, this.geometryTypes = ["esriGeometryPoint", "esriGeometryMultipoint", "esriGeometryPolyline", "esriGeometryPolygon"], this.previousCoordinate = [0, 0], this.transform = null, this.applyTransform = i2, this.lengths = [], this.currentLengthIndex = 0, this.toAddInCurrentPath = 0, this.vertexDimension = 0, this.coordinateBuffer = null, this.coordinateBufferPtr = 0, this._attributesConstructor = () => {
    };
  }
  createFeatureResult() {
    return { fields: [], features: [] };
  }
  finishFeatureResult(e) {
    if (this.options.applyTransform && (e.transform = null), this._attributesConstructor = () => {
    }, this.coordinateBuffer = null, this.lengths.length = 0, !e.hasZ)
      return;
    const s6 = o(e.geometryType, this.options.sourceSpatialReference, e.spatialReference);
    if (!t(s6))
      for (const t3 of e.features)
        s6(t3.geometry);
  }
  createSpatialReference() {
    return {};
  }
  addField(e, t3) {
    e.fields.push(t3);
    const r4 = e.fields.map((e2) => e2.name);
    this._attributesConstructor = function() {
      for (const e2 of r4)
        this[e2] = null;
    };
  }
  addFeature(e, t3) {
    e.features.push(t3);
  }
  prepareFeatures(t3) {
    switch (this.transform = t3.transform, this.options.applyTransform && t3.transform && (this.applyTransform = this._deriveApplyTransform(t3)), this.vertexDimension = 2, t3.hasZ && this.vertexDimension++, t3.hasM && this.vertexDimension++, t3.geometryType) {
      case "esriGeometryPoint":
        this.addCoordinate = (e, t4, r4) => this.addCoordinatePoint(e, t4, r4), this.createGeometry = (e) => this.createPointGeometry(e);
        break;
      case "esriGeometryPolygon":
        this.addCoordinate = (e, t4, r4) => this._addCoordinatePolygon(e, t4, r4), this.createGeometry = (e) => this._createPolygonGeometry(e);
        break;
      case "esriGeometryPolyline":
        this.addCoordinate = (e, t4, r4) => this._addCoordinatePolyline(e, t4, r4), this.createGeometry = (e) => this._createPolylineGeometry(e);
        break;
      case "esriGeometryMultipoint":
        this.addCoordinate = (e, t4, r4) => this._addCoordinateMultipoint(e, t4, r4), this.createGeometry = (e) => this._createMultipointGeometry(e);
        break;
      default:
        n(t3.geometryType);
    }
  }
  createFeature() {
    return this.lengths.length = 0, this.currentLengthIndex = 0, this.previousCoordinate[0] = 0, this.previousCoordinate[1] = 0, this.coordinateBuffer = null, this.coordinateBufferPtr = 0, { attributes: new this._attributesConstructor() };
  }
  allocateCoordinates() {
  }
  addLength(e, t3, r4) {
    0 === this.lengths.length && (this.toAddInCurrentPath = t3), this.lengths.push(t3);
  }
  addQueryGeometry(e, t3) {
    const { queryGeometry: r4, queryGeometryType: i3 } = t3, n8 = me(r4.clone(), r4, false, false, this.transform), a5 = ne(n8, i3, false, false);
    e.queryGeometryType = i3, e.queryGeometry = { ...a5 };
  }
  createPointGeometry(e) {
    const t3 = { x: 0, y: 0, spatialReference: e.spatialReference };
    return e.hasZ && (t3.z = 0), e.hasM && (t3.m = 0), t3;
  }
  addCoordinatePoint(e, t3, r4) {
    switch (t3 = this.applyTransform(this.transform, t3, r4, 0), r4) {
      case 0:
        e.x = t3;
        break;
      case 1:
        e.y = t3;
        break;
      case 2:
        "z" in e ? e.z = t3 : e.m = t3;
        break;
      case 3:
        e.m = t3;
    }
  }
  _transformPathLikeValue(e, t3) {
    let r4 = 0;
    return t3 <= 1 && (r4 = this.previousCoordinate[t3], this.previousCoordinate[t3] += e), this.applyTransform(this.transform, e, t3, r4);
  }
  _addCoordinatePolyline(e, t3, r4) {
    this._dehydratedAddPointsCoordinate(e.paths, t3, r4);
  }
  _addCoordinatePolygon(e, t3, r4) {
    this._dehydratedAddPointsCoordinate(e.rings, t3, r4);
  }
  _addCoordinateMultipoint(e, t3, r4) {
    0 === r4 && e.points.push([]);
    const s6 = this._transformPathLikeValue(t3, r4);
    e.points[e.points.length - 1].push(s6);
  }
  _createPolygonGeometry(e) {
    return { rings: [[]], spatialReference: e.spatialReference, hasZ: !!e.hasZ, hasM: !!e.hasM };
  }
  _createPolylineGeometry(e) {
    return { paths: [[]], spatialReference: e.spatialReference, hasZ: !!e.hasZ, hasM: !!e.hasM };
  }
  _createMultipointGeometry(e) {
    return { points: [], spatialReference: e.spatialReference, hasZ: !!e.hasZ, hasM: !!e.hasM };
  }
  _dehydratedAddPointsCoordinate(e, t3, r4) {
    0 === r4 && 0 == this.toAddInCurrentPath-- && (e.push([]), this.toAddInCurrentPath = this.lengths[++this.currentLengthIndex] - 1, this.previousCoordinate[0] = 0, this.previousCoordinate[1] = 0);
    const s6 = this._transformPathLikeValue(t3, r4), o3 = e[e.length - 1];
    0 === r4 && (this.coordinateBufferPtr = 0, this.coordinateBuffer = new Array(this.vertexDimension), o3.push(this.coordinateBuffer)), this.coordinateBuffer[this.coordinateBufferPtr++] = s6;
  }
  _deriveApplyTransform(e) {
    const { hasZ: t3, hasM: r4 } = e;
    return t3 && r4 ? u : t3 ? a : r4 ? h : n3;
  }
};

// node_modules/@arcgis/core/rest/query/executeQueryPBF.js
async function s(r4, e, t3) {
  const s6 = await n4(r4, b.from(e), t3);
  return x2.fromJSON(s6);
}
async function n4(o3, s6, n8) {
  const p2 = n2(o3), i3 = { ...n8 }, u3 = b.from(s6), m4 = !u3.quantizationParameters, { data: f } = await d(p2, u3, new c2({ sourceSpatialReference: u3.sourceSpatialReference, applyTransform: m4 }), i3);
  return f;
}

// node_modules/@arcgis/core/rest/query/operations/queryAttachments.js
function n5(t3) {
  const o3 = t3.toJSON();
  return o3.attachmentTypes && (o3.attachmentTypes = o3.attachmentTypes.join(",")), o3.keywords && (o3.keywords = o3.keywords.join(",")), o3.globalIds && (o3.globalIds = o3.globalIds.join(",")), o3.objectIds && (o3.objectIds = o3.objectIds.join(",")), o3.size && (o3.size = o3.size.join(",")), o3;
}
function a2(o3, r4) {
  const n8 = {};
  for (const a5 of o3) {
    const { parentObjectId: o4, parentGlobalId: c5, attachmentInfos: i3 } = a5;
    for (const a6 of i3) {
      const { id: i4 } = a6, m4 = S(i(`${r4}/${o4}/attachments/${i4}`)), p2 = l.fromJSON(a6);
      p2.set({ url: m4, parentObjectId: o4, parentGlobalId: c5 }), n8[o4] ? n8[o4].push(p2) : n8[o4] = [p2];
    }
  }
  return n8;
}
function c3(t3, e, s6) {
  let a5 = { query: t2({ ...t3.query, f: "json", ...n5(e) }) };
  return s6 && (a5 = { ...s6, ...a5, query: { ...s6.query, ...a5.query } }), U(t3.path + "/queryAttachments", a5);
}

// node_modules/@arcgis/core/rest/query/executeAttachmentQuery.js
async function a3(a5, m4, n8) {
  const s6 = n2(a5);
  return c3(s6, c.from(m4), { ...n8 }).then((t3) => a2(t3.data.attachmentGroups, s6.path));
}

// node_modules/@arcgis/core/rest/query/executeForExtent.js
async function m(m4, n8, s6) {
  const p2 = n2(m4);
  return x(p2, b.from(n8), { ...s6 }).then((t3) => ({ count: t3.data.count, extent: M.fromJSON(t3.data.extent) }));
}

// node_modules/@arcgis/core/rest/query/operations/queryRelatedRecords.js
function o2(e, t3) {
  const o3 = e.toJSON();
  return o3.objectIds && (o3.objectIds = o3.objectIds.join(",")), o3.orderByFields && (o3.orderByFields = o3.orderByFields.join(",")), o3.outFields && !(t3 == null ? void 0 : t3.returnCountOnly) ? o3.outFields.includes("*") ? o3.outFields = "*" : o3.outFields = o3.outFields.join(",") : delete o3.outFields, o3.outSpatialReference && (o3.outSR = o3.outSR.wkid || JSON.stringify(o3.outSR.toJSON()), delete o3.outSpatialReference), o3.dynamicDataSource && (o3.layer = JSON.stringify({ source: o3.dynamicDataSource }), delete o3.dynamicDataSource), o3;
}
async function r3(e, t3, o3) {
  const r4 = await s2(e, t3, o3), n8 = r4.data, a5 = n8.geometryType, d5 = n8.spatialReference, c5 = {};
  for (const s6 of n8.relatedRecordGroups) {
    const e2 = { fields: void 0, objectIdFieldName: void 0, geometryType: a5, spatialReference: d5, hasZ: !!n8.hasZ, hasM: !!n8.hasM, features: s6.relatedRecords };
    if (null != s6.objectId)
      c5[s6.objectId] = e2;
    else
      for (const t4 in s6)
        s6.hasOwnProperty(t4) && "relatedRecords" !== t4 && (c5[s6[t4]] = e2);
  }
  return { ...r4, data: c5 };
}
async function n6(e, t3, o3) {
  const r4 = await s2(e, t3, o3, { returnCountOnly: true }), n8 = r4.data, a5 = {};
  for (const s6 of n8.relatedRecordGroups)
    null != s6.objectId && (a5[s6.objectId] = s6.count);
  return { ...r4, data: a5 };
}
async function s2(r4, n8, s6 = {}, a5) {
  const d5 = t2({ ...r4.query, f: "json", ...a5, ...o2(n8, a5) });
  return U(r4.path + "/queryRelatedRecords", { ...s6, query: { ...s6.query, ...d5 } });
}

// node_modules/@arcgis/core/rest/query/executeRelationshipQuery.js
async function n7(e, n8, u3) {
  n8 = d2.from(n8);
  const a5 = n2(e);
  return r3(a5, n8, u3).then((t3) => {
    const r4 = t3.data, e2 = {};
    return Object.keys(r4).forEach((t4) => e2[t4] = x2.fromJSON(r4[t4])), e2;
  });
}
async function u2(r4, o3, n8) {
  o3 = d2.from(o3);
  const u3 = n2(r4);
  return n6(u3, o3, { ...n8 }).then((t3) => t3.data);
}

// node_modules/@arcgis/core/rest/query/operations/queryTopFeatures.js
var l3 = "Layer does not support extent calculation.";
function y(t3, r4) {
  var _a, _b;
  const o3 = t3.geometry, i3 = t3.toJSON(), s6 = i3;
  if (r(o3) && (s6.geometry = JSON.stringify(o3), s6.geometryType = v(o3), s6.inSR = o3.spatialReference.wkid || JSON.stringify(o3.spatialReference)), ((_a = i3.topFilter) == null ? void 0 : _a.groupByFields) && (s6.topFilter.groupByFields = i3.topFilter.groupByFields.join(",")), ((_b = i3.topFilter) == null ? void 0 : _b.orderByFields) && (s6.topFilter.orderByFields = i3.topFilter.orderByFields.join(",")), i3.topFilter && (s6.topFilter = JSON.stringify(s6.topFilter)), i3.objectIds && (s6.objectIds = i3.objectIds.join(",")), i3.orderByFields && (s6.orderByFields = i3.orderByFields.join(",")), i3.outFields && !((r4 == null ? void 0 : r4.returnCountOnly) || (r4 == null ? void 0 : r4.returnExtentOnly) || (r4 == null ? void 0 : r4.returnIdsOnly)) ? i3.outFields.includes("*") ? s6.outFields = "*" : s6.outFields = i3.outFields.join(",") : delete s6.outFields, i3.outSR ? s6.outSR = i3.outSR.wkid || JSON.stringify(i3.outSR) : o3 && i3.returnGeometry && (s6.outSR = s6.inSR), i3.returnGeometry && delete i3.returnGeometry, i3.timeExtent) {
    const t4 = i3.timeExtent, { start: e, end: r5 } = t4;
    null == e && null == r5 || (s6.time = e === r5 ? e : `${null == e ? "null" : e},${null == r5 ? "null" : r5}`), delete i3.timeExtent;
  }
  return s6;
}
async function d4(t3, e, r4, o3) {
  const n8 = await c4(t3, e, "json", o3);
  return r2(e, r4, n8.data), n8;
}
async function m2(t3, r4, o3) {
  return r(r4.timeExtent) && r4.timeExtent.isEmpty ? { data: { objectIds: [] } } : c4(t3, r4, "json", o3, { returnIdsOnly: true });
}
async function p(t3, r4, o3) {
  return r(r4.timeExtent) && r4.timeExtent.isEmpty ? { data: { count: 0, extent: null } } : c4(t3, r4, "json", o3, { returnExtentOnly: true, returnCountOnly: true }).then((t4) => {
    const e = t4.data;
    if (e.hasOwnProperty("extent"))
      return t4;
    if (e.features)
      throw new Error(l3);
    if (e.hasOwnProperty("count"))
      throw new Error(l3);
    return t4;
  });
}
function a4(t3, r4, o3) {
  return r(r4.timeExtent) && r4.timeExtent.isEmpty ? Promise.resolve({ data: { count: 0 } }) : c4(t3, r4, "json", o3, { returnIdsOnly: true, returnCountOnly: true });
}
function c4(n8, u3, l4, d5 = {}, m4 = {}) {
  const p2 = "string" == typeof n8 ? j(n8) : n8, a5 = u3.geometry ? [u3.geometry] : [];
  return d5.responseType = "pbf" === l4 ? "array-buffer" : "json", L(a5, null, d5).then((o3) => {
    const n9 = o3 && o3[0];
    r(n9) && ((u3 = u3.clone()).geometry = n9);
    const i3 = t2({ ...p2.query, f: l4, ...m4, ...y(u3, m4) });
    return U(G(p2.path, "queryTopFeatures"), { ...d5, query: { ...i3, ...d5.query } });
  });
}

// node_modules/@arcgis/core/rest/query/executeTopFeaturesQuery.js
async function s3(s6, p2, u3, a5) {
  const m4 = n2(s6), i3 = { ...a5 }, { data: f } = await d4(m4, S2.from(p2), u3, i3);
  return x2.fromJSON(f);
}

// node_modules/@arcgis/core/rest/query/executeForTopIds.js
async function s4(s6, e, p2) {
  const a5 = n2(s6);
  return (await m2(a5, S2.from(e), { ...p2 })).data.objectIds;
}

// node_modules/@arcgis/core/rest/query/executeForTopExtents.js
async function m3(m4, s6, n8) {
  const p2 = n2(m4), a5 = await p(p2, S2.from(s6), { ...n8 });
  return { count: a5.data.count, extent: M.fromJSON(a5.data.extent) };
}

// node_modules/@arcgis/core/rest/query/executeForTopCount.js
async function s5(s6, e, p2) {
  const u3 = n2(s6);
  return (await a4(u3, S2.from(e), { ...p2 })).data.count;
}

export {
  s,
  n4 as n,
  a2 as a,
  a3 as a2,
  m,
  n7 as n2,
  u2 as u,
  s3 as s2,
  s4 as s3,
  m3 as m2,
  s5 as s4
};
//# sourceMappingURL=chunk-5YWIJLO7.js.map
