import {
  a as a4,
  b as b2,
  c as c3,
  d as d6,
  f as f4,
  h as h4,
  i,
  l as l7,
  m as m8,
  n as n8,
  p as p3,
  r as r7,
  s as s4,
  t as t5,
  u as u3,
  x as x3
} from "./chunk-4TO6Q65E.js";
import {
  x
} from "./chunk-34PN3B7O.js";
import {
  r as r6
} from "./chunk-B6K3W2TL.js";
import {
  pe
} from "./chunk-QWXV2ME4.js";
import "./chunk-2NTPDKQY.js";
import "./chunk-KXA3AZ4N.js";
import "./chunk-D7PQAHH6.js";
import "./chunk-A2XF5TZW.js";
import "./chunk-73VW7LOZ.js";
import "./chunk-EMETVH63.js";
import "./chunk-V56SVRSV.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-X64NQ2GK.js";
import "./chunk-NVOCHKIH.js";
import "./chunk-DGELARKE.js";
import "./chunk-WN3KE5M2.js";
import {
  y as y4
} from "./chunk-E5H77TRE.js";
import "./chunk-NSEAWM6P.js";
import "./chunk-XKY65LLM.js";
import "./chunk-ILEVWNLM.js";
import "./chunk-3HMF3PNP.js";
import "./chunk-N5C77AAH.js";
import {
  a as a3,
  u as u2
} from "./chunk-DSCM4HDL.js";
import {
  l as l5
} from "./chunk-G2GJVIQC.js";
import {
  t as t4
} from "./chunk-YJCOSBLY.js";
import {
  d as d5
} from "./chunk-3LEH5KDJ.js";
import {
  t as t3,
  x as x2
} from "./chunk-WQLER7IU.js";
import "./chunk-7GTYHKA3.js";
import "./chunk-MOXYEJRV.js";
import "./chunk-EEJIELE6.js";
import "./chunk-Y55TYMBP.js";
import "./chunk-NAB3NF54.js";
import "./chunk-MHB3L22D.js";
import "./chunk-MDCKEJ7B.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-T4FVDPUN.js";
import "./chunk-VMF4NMEB.js";
import "./chunk-UTJPTN6P.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-53KI6WDE.js";
import {
  d as d4,
  p as p2
} from "./chunk-W2HLA6I3.js";
import "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-3NPGGTI6.js";
import {
  A as A4
} from "./chunk-KBILTFOD.js";
import {
  w as w5
} from "./chunk-GRW2GUB3.js";
import "./chunk-RBVTRJPJ.js";
import {
  A as A3,
  m as m6
} from "./chunk-YZNDHJDJ.js";
import {
  c as c2
} from "./chunk-ZZCCRN4U.js";
import "./chunk-TWQ374WD.js";
import {
  g as g4,
  l as l6,
  w as w4
} from "./chunk-GT2OBOXC.js";
import "./chunk-Z3S5X75I.js";
import {
  e as e5
} from "./chunk-YK4ZKK2Q.js";
import "./chunk-NMRWU44S.js";
import "./chunk-LBBA3SFR.js";
import "./chunk-2KZBVPWA.js";
import "./chunk-CXIMLSDF.js";
import "./chunk-ZDSMRGKC.js";
import "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RRFFPL7N.js";
import "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import "./chunk-V7M26XZ7.js";
import "./chunk-ZN2MGN4S.js";
import {
  L as L2
} from "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-XZTXACPW.js";
import "./chunk-EHYYP2L2.js";
import "./chunk-ZUEYZA7M.js";
import {
  r as r5
} from "./chunk-74GUBHRJ.js";
import "./chunk-E447OCKN.js";
import "./chunk-LPU5TMA4.js";
import {
  O as O2,
  e2 as e3
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n5
} from "./chunk-UHJVTABQ.js";
import {
  f as f3,
  g as g2,
  m as m5
} from "./chunk-W66LN57L.js";
import {
  t as t2
} from "./chunk-PNUWGOXY.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-22YODLVL.js";
import "./chunk-TB42IUV7.js";
import "./chunk-ZWMYDR2G.js";
import "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-6FKG7JUE.js";
import {
  fn,
  rn
} from "./chunk-PZWU5EHT.js";
import {
  h as h3
} from "./chunk-BS7TS6UC.js";
import "./chunk-37ZVELW7.js";
import "./chunk-POPR7XUB.js";
import "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import {
  s as s3
} from "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-4XBERLPX.js";
import {
  o as o4
} from "./chunk-7ZPDA3EC.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import {
  e as e4
} from "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import {
  n as n6
} from "./chunk-U7B2WKBH.js";
import {
  o as o5
} from "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  U,
  a as a2,
  f as f2,
  h as h2,
  l as l4,
  w as w3
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-6J6RPVFW.js";
import {
  M,
  v as v2,
  y as y3,
  z as z2
} from "./chunk-DYETG5YB.js";
import "./chunk-CLGCKZUR.js";
import {
  F,
  N,
  P,
  W,
  j as j2,
  p,
  v,
  z
} from "./chunk-RN2KRYDN.js";
import {
  g as g3
} from "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import {
  d as d3
} from "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import {
  m as m7
} from "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import {
  n as n7
} from "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j as j4
} from "./chunk-TT2HIXWQ.js";
import {
  n as n4
} from "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import {
  m as m4
} from "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import {
  l as l3
} from "./chunk-FVPTCNCX.js";
import {
  s as s2
} from "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import {
  A as A2,
  o as o3
} from "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import {
  m as m2,
  m2 as m3
} from "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import {
  j2 as j3
} from "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d as d2,
  n2,
  n8 as n3,
  o4 as o2,
  r as r3,
  y3 as y2
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  L,
  O,
  b,
  f,
  g,
  j,
  m,
  r2 as r4,
  w as w2,
  y
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  A,
  a2 as a,
  c,
  d2 as d,
  e as e2,
  h,
  l,
  l2,
  n,
  o,
  r,
  r2,
  t,
  w2 as w
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/core/memoize.js
function t6(t9) {
  let r12, e9, i4 = [], u8 = false;
  function f6(...f7) {
    return u8 && r12 === this && n9(f7, i4) || (e9 = t9.apply(this, f7), r12 = this, i4 = f7, u8 = true), e9;
  }
  return f6;
}
function n9(t9, n14) {
  if (t9.length !== n14.length)
    return false;
  for (let r12 = 0; r12 < t9.length; ++r12)
    if (t9[r12] !== n14[r12])
      return false;
  return true;
}

// node_modules/@arcgis/core/widgets/ElevationProfile/css.js
var e6 = "esri-elevation-profile";
var t7 = { esriWidget: "esri-widget--panel esri-widget", esriWidgetDisabled: "esri-widget--disabled", buttonDisabled: "esri-button--disabled", widgetIcon: "esri-icon-elevation-profile", base: `${e6}`, portrait: `${e6}--portrait`, refined: `${e6}--refined`, mainContainer: `${e6}__main-container`, promptContainer: `${e6}__prompt-container`, header: `${e6}__header`, zoomOutButton: `${e6}__zoom-out-button esri-icon-zoom-out-magnifying-glass`, clearButton: `${e6}__clear-button esri-icon-trash`, actionButton: `${e6}__action-button esri-button`, sketchButton: `${e6}__sketch-button esri-button--primary`, sketchCancelButton: `${e6}__sketch-cancel-button esri-button--secondary`, sketchDoneButton: `${e6}__sketch-done-button esri-button--primary`, selectButton: `${e6}__select-button esri-button--secondary`, selectCancelButton: `${e6}__select-cancel-button esri-button--secondary`, chartContainer: `${e6}__chart-container`, chartSpinner: `${e6}__chart-spinner esri-icon-loading-indicator esri-rotating`, chartSpinnerVisible: `${e6}__chart-spinner--visible`, chartSpinnerSmall: `${e6}__chart-spinner--small`, footer: `${e6}__footer` };
var i2 = { line: "amcharts-LineSeries", cursorEnabled: "amcharts-cursor--enabled", axisTooltip: "amcharts-axis-tooltip", seriesTooltip: "amcharts-series-tooltip" };
var n10 = { base: "esri-elevation-profile-legend" };
var a5 = "esri-elevation-profile-legend-item";
var r8 = { base: a5, disabled: `${a5}--disabled`, expanded: `${a5}--expanded`, colorIndicator: `${a5}__color-indicator`, header: `${a5}__header`, content: `${a5}__content`, collapseToggle: `${a5}__collapse-toggle esri-button esri-button--tertiary`, collapseToggleIcon: `${a5}__collapse-toggle__icon esri-icon-down`, label: `${a5}__label`, labelDisabled: `${a5}__label--disabled`, checkbox: `${a5}__checkbox` };
var s5 = "esri-elevation-profile-statistics";
var c4 = { base: s5, statistic: `${s5}__statistic`, statisticLabel: `${s5}__statistic__label`, statisticValue: `${s5}__statistic__value`, slopeValue: `${s5}__slope-value`, slopeUpIcon: "esri-icon-arrow-up", slopeDownIcon: "esri-icon-arrow-down" };
var l8 = "esri-elevation-profile-settings";
var _ = { base: `${l8} esri-icon-handle-vertical`, popoverContent: `${l8}__popover-content`, select: `${l8}__select esri-select`, selectLabel: `${l8}__select-label`, checkboxLabel: `${l8}__checkbox-label`, checkbox: `${l8}__checkbox`, uniformChartScalingCheckbox: `${l8}__uniform-chart-scaling-checkbox` };

// node_modules/@arcgis/core/widgets/ElevationProfile/support/ProfileGenerationError.js
var e7 = "ProfileGenerationError";
var o6;
!function(e9) {
  e9.TooComplex = "too-complex", e9.InvalidGeometry = "invalid-geometry", e9.InvalidElevationInfo = "invalid-elevation-info", e9.ElevationQueryError = "elevation-query-error";
}(o6 || (o6 = {}));
var r9 = class extends Error {
  constructor(o9) {
    super("profile could not be generated"), this.cause = o9, this.type = e7;
  }
};
function n11(o9) {
  return o9.type === e7;
}

// node_modules/@arcgis/core/widgets/ElevationProfile/support/geometryUtils.js
async function R(e9, t9, n14, r12, a7, i4, c7) {
  let u8, p6, d9;
  const g7 = e9.spatialReference, R5 = g7.isGeographic || g7.isWebMercator, P4 = await import("./geometryEngineAsync-6GSN5LPB.js");
  f(c7);
  let Z3 = 0;
  R5 || (Z3 = await P4.planarLength(e9, "meters"), f(c7));
  const A7 = 1 / z(r12);
  if (R5 || Z3 >= a7.geodesicDistanceThreshold) {
    await fn([{ source: g7, dest: r12 }, { source: g7, dest: k.WGS84 }], c7);
    const s9 = D(e9);
    u8 = y3([s9], "meters")[0];
    const o9 = j5(u8, a7);
    if (q(e9, u8, o9) > i4)
      throw new r9(o6.TooComplex);
    const R6 = v3(s9, t9, n14);
    ({ densifiedPath: p6, distances: d9 } = G(R6, o9, A7)), p6 = rn(p6, r12);
  } else {
    await fn([{ source: g7, dest: r12 }], c7), u8 = Z3;
    const o9 = j5(u8, a7);
    if (q(e9, u8, o9) > i4)
      throw new r9(o6.TooComplex);
    const h6 = v3(e9, t9, n14);
    ({ densifiedPath: p6, distances: d9 } = z3(h6, o9, A7)), f(c7), p6 = rn(p6, r12);
  }
  return { densifiedPath: p6, pathLength: u8 * A7, distances: d9 };
}
function j5(e9, t9) {
  const n14 = e9 / t9.densificationMaxSamples;
  return Math.max(t9.samplingDistance, n14);
}
function v3(e9, r12, s9) {
  if (t(r12))
    return A5(e9);
  const o9 = e9.spatialReference, a7 = r12.mode, i4 = c(r12.offset, 0);
  let c7 = null;
  switch (s9.type) {
    case "2d":
      c7 = P2(e9, a7, i4);
      break;
    case "3d":
      c7 = Z(e9, a7, i4, s9);
  }
  return t(c7) ? A5(e9) : new m3({ hasZ: true, hasM: false, spatialReference: o9, paths: M2(e9.paths, c7) });
}
function P2({ hasZ: e9 }, t9, n14) {
  return "absolute-height" === t9 ? e9 ? ([e10, t10, r12]) => [e10, t10, r12 + n14] : ([e10, t10]) => [e10, t10, n14] : null;
}
function Z({ spatialReference: e9, hasZ: t9 }, r12, s9, { elevationProvider: o9 }) {
  const a7 = (t10, r13, s10, a8) => c(o9.getElevation(t10, r13, s10, e9, a8), 0);
  switch (r12) {
    case "on-the-ground":
      return ([e10, t10]) => [e10, t10, a7(e10, t10, 0, "ground")];
    case "absolute-height":
      return t9 ? ([e10, t10, n14]) => [e10, t10, n14 + s9] : ([e10, t10]) => [e10, t10, s9];
    case "relative-to-ground":
      return t9 ? ([e10, t10, n14]) => [e10, t10, n14 + a7(e10, t10, n14, "ground") + s9] : ([e10, t10]) => [e10, t10, a7(e10, t10, 0, "ground") + s9];
    case "relative-to-scene":
      return t9 ? ([e10, t10, n14]) => [e10, t10, n14 + a7(e10, t10, n14, "scene") + s9] : ([e10, t10]) => [e10, t10, a7(e10, t10, 0, "scene") + s9];
    default:
      return null;
  }
}
function A5(e9) {
  return e9.hasZ ? new m3({ hasZ: false, hasM: false, spatialReference: e9.spatialReference, paths: M2(e9.paths, ([e10, t9]) => [e10, t9]) }) : e9;
}
function M2(e9, t9) {
  const n14 = e9.length, r12 = new Array(n14);
  for (let s9 = 0; s9 < n14; ++s9) {
    const n15 = e9[s9], o9 = n15.length, a7 = new Array(n15.length);
    r12[s9] = a7;
    for (let e10 = 0; e10 < o9; ++e10)
      a7[e10] = t9(n15[e10]);
  }
  return r12;
}
function x4(e9) {
  return S(e9) && e9.paths.length > 0 && e9.paths.every((e10) => e10.length >= 2);
}
function S(e9) {
  return r(e9) && "polyline" === e9.type;
}
function b3(e9, t9, n14, r12, s9) {
  const { spatialReference: a7, hasZ: i4 } = e9, c7 = { from: null, to: null, distance: 0, azimuth: 0, reverseAzimuth: 0, spatialReference: a7, metersPerSR: z(a7) }, f6 = new Array(e9.paths.length), l12 = new Array(e9.paths.length);
  let h6 = 0;
  for (let o9 = 0; o9 < e9.paths.length; ++o9) {
    const a8 = e9.paths[o9], i5 = new Array(), u8 = new Array();
    let p6 = 0;
    for (let e10 = 1; e10 < a8.length; ++e10) {
      const o10 = a8[e10 - 1], f7 = a8[e10], l13 = r12(c7, o10, f7);
      let m11;
      for (m11 = p6; m11 < l13.distance; m11 += t9)
        i5.push(s9(l13, m11)), u8.push((h6 + m11) * n14);
      p6 = m11 - l13.distance, h6 += l13.distance, i5.push(f7), u8.push(h6 * n14);
    }
    f6[o9] = i5, l12[o9] = u8;
  }
  return { densifiedPath: new m3({ spatialReference: a7, hasZ: i4, paths: f6 }), distances: l12 };
}
function z3(e9, t9, n14) {
  const { hasZ: r12 } = e9;
  return b3(e9, t9, n14, k2, r12 ? C : W2);
}
function G(e9, t9, n14) {
  const { hasZ: r12 } = e9;
  return b3(e9, t9, n14, U2, r12 ? T : E);
}
function U2(e9, t9, n14) {
  return e9.distance = 0, z2(e9, t9, n14, e9.spatialReference), e9.from = t9, e9.to = n14, e9;
}
function k2(e9, t9, n14) {
  return e9.from = t9, e9.to = n14, e9.distance = m6(n14, t9) * e9.metersPerSR, e9;
}
function E({ from: e9, azimuth: t9, spatialReference: n14 }, r12) {
  return v2([0, 0], e9, t9, r12, n14);
}
function T({ from: t9, to: n14, azimuth: r12, distance: s9, spatialReference: o9 }, a7) {
  const i4 = a7 / s9, c7 = [0, 0, s2(t9[2], n14[2], i4)];
  return v2(c7, t9, r12, a7, o9), c7;
}
function W2({ from: e9, to: t9, distance: n14 }, r12) {
  return A3([0, 0], e9, t9, r12 / n14);
}
function C({ from: e9, to: t9, distance: n14 }, r12) {
  return A2([0, 0, 0], e9, t9, r12 / n14);
}
function D(e9) {
  return M(e9.spatialReference) ? e9 : rn(e9, k.WGS84);
}
function L3(e9) {
  return e9.paths.reduce((e10, t9) => e10 + t9.length, 0);
}
function q(e9, t9, n14) {
  return L3(e9) + Math.floor(t9 / n14) + Math.max(0, e9.paths.reduce((e10) => 1 + e10, 0) - 1);
}

// node_modules/@arcgis/core/widgets/ElevationProfile/support/statisticsUtils.js
function s6(n14, s9) {
  const r12 = n14.length;
  if (0 === r12)
    return null;
  const m11 = n14[0], c7 = m11.sampledZ;
  let h6 = c7, E6 = c7, f6 = 0, g7 = 0, x8 = null, _3 = null, S4 = r(c7) ? c7 : 0, d9 = 0, C3 = 0, D4 = r(c7) ? 1 : 0, N4 = 0, P4 = 0;
  const H2 = z(s9), Z3 = W(s9), j10 = x3 / H2, y8 = 2 * j10, M6 = new p4(), w8 = new p4(), G4 = () => {
    b6(), M6.copy(w8), w8.reset();
  }, L7 = (t9, e9) => {
    G4();
    const n15 = M6 || t9 - M6.start > y8 ? t9 : M6.start + j10;
    w8.restart(n15, e9);
  }, b6 = () => {
    if (M6.isHole || w8.isHole)
      return;
    const t9 = w8.avgElevation - M6.avgElevation, e9 = w8.start - M6.start, n15 = t9 * Z3, a7 = e9 * H2, i4 = N(Math.atan2(n15, a7), "radians", "degrees");
    i4 > 0 ? (d9 += i4, x8 = v4(x8, i4), N4++) : i4 < 0 && (C3 -= i4, _3 = v4(_3, -i4), P4++);
  };
  r(m11.sampledZ) && L7(m11.distance, m11.sampledZ);
  for (let a7 = 1; a7 < r12; ++a7) {
    const i4 = n14[a7 - 1], l12 = n14[a7], o9 = l12.sampledZ;
    if (t(o9)) {
      w8.isHole || G4();
      continue;
    }
    D4++, S4 += o9, h6 = u4(h6, o9), E6 = v4(E6, o9), w8.isHole || l12.distance - w8.start >= j10 ? L7(l12.distance, o9) : w8.insert(o9);
    const s10 = i4.sampledZ;
    if (r(s10)) {
      const t9 = o9 - s10;
      t9 > 0 ? f6 += t9 : t9 < 0 && (g7 -= t9);
    }
  }
  return G4(), 0 === D4 ? null : { maxDistance: n14[r12 - 1].distance, minElevation: h6, maxElevation: E6, avgElevation: 0 === D4 ? null : S4 / D4, elevationGain: f6, elevationLoss: g7, maxPositiveSlope: x8, maxNegativeSlope: _3, avgPositiveSlope: 0 === N4 ? null : d9 / N4, avgNegativeSlope: 0 === P4 ? null : C3 / P4 };
}
function r10(e9) {
  const n14 = e9.filter(r), a7 = n14.length;
  if (0 === a7)
    return null;
  const i4 = n14[0];
  if (1 === a7)
    return i4;
  let l12 = i4.maxDistance, o9 = i4.minElevation, s9 = i4.maxElevation, r12 = i4.maxPositiveSlope, m11 = i4.maxNegativeSlope;
  for (let t9 = 1; t9 < n14.length; ++t9) {
    const e10 = n14[t9];
    l12 = v4(l12, e10.maxDistance), o9 = u4(o9, e10.minElevation), s9 = v4(s9, e10.maxElevation), r12 = v4(r12, e10.maxPositiveSlope), m11 = v4(m11, e10.maxNegativeSlope);
  }
  return { maxDistance: l12, minElevation: o9, maxElevation: s9, avgElevation: null, elevationGain: null, elevationLoss: null, maxPositiveSlope: r12, maxNegativeSlope: m11, avgPositiveSlope: null, avgNegativeSlope: null };
}
function m9(t9) {
  let l12 = null, o9 = null, s9 = null;
  for (const n14 of t9) {
    if (t(n14))
      continue;
    const { statistics: t10, spatialReference: r12 } = n14;
    if (t(t10))
      continue;
    const m11 = z(r12);
    l12 = v4(l12, c5(t10.maxDistance, m11));
    const p6 = W(r12);
    s9 = u4(s9, c5(t10.minElevation, p6)), o9 = v4(o9, c5(t10.maxElevation, p6));
  }
  return { minDistance: 0, maxDistance: c(l12, 0), minElevation: c(s9, 0), maxElevation: c(o9, 0) };
}
function u4(n14, a7) {
  return t(a7) ? n14 : r(n14) ? Math.min(n14, a7) : a7;
}
function v4(n14, a7) {
  return t(a7) ? n14 : r(n14) ? Math.max(n14, a7) : a7;
}
function c5(e9, n14) {
  return r(e9) && r(n14) ? e9 * n14 : null;
}
var p4 = class {
  constructor() {
    this._start = 0, this._totalElevation = 0, this._sampleCount = 0;
  }
  get avgElevation() {
    return this._totalElevation / this._sampleCount;
  }
  get isHole() {
    return 0 === this._sampleCount;
  }
  get start() {
    return this._start;
  }
  copy(t9) {
    this._start = t9._start, this._sampleCount = t9._sampleCount, this._totalElevation = t9._totalElevation;
  }
  reset() {
    this._start = 0, this._sampleCount = 0, this._totalElevation = 0;
  }
  restart(t9, e9) {
    this._start = t9, this._sampleCount = 1, this._totalElevation = e9;
  }
  insert(t9) {
    ++this._sampleCount, this._totalElevation += t9;
  }
};

// node_modules/@arcgis/core/widgets/support/traversalUtils.js
function n12(n14, o9, t9 = []) {
  if (n14 >= o9)
    return t9;
  t9.push(n14);
  if (o9 - n14 < 2)
    return t9;
  const r12 = o9 - 1;
  t9.push(r12);
  const u8 = e8(n14 + 1, r12);
  for (; ; ) {
    const n15 = u8.next();
    if (n15.done)
      break;
    t9.push(n15.value);
  }
  return t9;
}
function* e8(n14, o9) {
  if (n14 >= o9)
    return;
  const t9 = n14 + Math.floor((o9 - n14) / 2);
  yield t9;
  const r12 = e8(n14, t9), u8 = e8(t9 + 1, o9);
  for (; ; ) {
    const n15 = r12.next(), e9 = u8.next();
    if (n15.done && e9.done)
      break;
    n15.done || (yield n15.value), e9.done || (yield e9.value);
  }
}

// node_modules/@arcgis/core/widgets/ElevationProfile/support/profileUtils.js
async function* j6(e9, t9) {
  const { view: l12, geometry: a7, elevationInfo: c7, providers: p6, options: u8 } = e9;
  if (t(a7) || !x4(a7))
    throw new r9(o6.InvalidGeometry);
  const f6 = l12.spatialReference, d9 = p6.length;
  if (0 === d9)
    return n;
  const P4 = Math.round(u8.maxTotalSamples / d9);
  if (L3(a7) > P4)
    throw new r9(o6.TooComplex);
  const Z3 = await R(a7, c7, l12, f6, u8, P4, t9);
  let j10 = 0;
  const x8 = new Array(d9), E6 = new Array(d9);
  for (let r12 = 0; r12 < d9; r12++) {
    const o9 = U3(Z3);
    x8[r12] = o9, j10 += o9.samples.length;
    const n14 = { ...e9, provider: p6[r12], result: o9, densificationResult: Z3 };
    E6[r12] = R2(n14, t9)[Symbol.iterator]();
  }
  if (j10 > u8.maxTotalSamples)
    throw new r9(o6.TooComplex);
  const O5 = await Promise.all(E6.map((e10) => {
    const t10 = e10.next();
    return true === t10.done ? Promise.resolve(null) : t10.value;
  }));
  f(t9);
  for (let r12 = 0; r12 < d9; r12++)
    x8[r12] = O5[r12];
  yield x8, await L(e9.delayAfterPreview ?? r7, null, t9.signal);
  const S4 = [];
  try {
    let e10;
    do {
      e10 = false;
      for (let t10 = 0; t10 < d9; t10++) {
        const r12 = E6[t10].next();
        false === r12.done && (S4.push({ resultPromise: r12.value, index: t10 }), e10 = true);
      }
    } while (e10);
  } finally {
    E6.forEach((e10) => {
      var _a;
      return (_a = e10.return) == null ? void 0 : _a.call(e10);
    });
  }
  for (const { resultPromise: r12, index: o9 } of S4)
    x8[o9] = await r12, f(t9), yield x8;
  A(x8, (e10) => {
    e10.progress = 1;
  }), yield x8;
}
function* R2(t9, r12) {
  const { densificationResult: o9 } = t9, n14 = { ...t9, abortOptions: r12, densificationResult: o9 }, s9 = n12(0, n14.result.samples.length), i4 = s9.slice(0, n14.provider.numSamplesForPreview);
  yield x5(n14, i4, true);
  const l12 = d(s9, n14.provider.numSamplesPerChunk);
  for (const e9 of l12)
    yield x5(n14, e9, false);
}
async function x5({ densificationResult: e9, result: t9, provider: r12, queue: o9, abortOptions: n14, cache: s9 }, i4, a7) {
  const { densifiedPath: p6, pathLength: u8 } = e9, m11 = t9.spatialReference, { samples: h6 } = t9, y8 = new Array(i4.length);
  for (let l12 = 0; l12 < i4.length; l12++) {
    const e10 = h6[i4[l12]];
    y8[l12] = e10.coordinate;
  }
  try {
    return await o9.push({ geometry: new m2({ spatialReference: m11, points: y8, hasZ: p6.hasZ }), provider: r12, indices: i4, preview: a7, result: t9, queryOptions: { ...t5, minDemResolution: a7 ? Math.round(u8 / r12.numSamplesForPreview) : Math.round(u8 / h6.length), cache: s9 } }, n14), { ...t9 };
  } catch (w8) {
    return g(w8) ? null : h4;
  }
}
function E2(e9) {
  return new l5({ priority: L2.ELEVATION_PROFILE, concurrency: 1, scheduler: e9, process: async (e10) => {
    f(e10.queryOptions);
    try {
      await O3(e10);
    } catch (t9) {
      b(t9);
    }
  } });
}
async function O3({ geometry: e9, provider: t9, indices: r12, preview: o9, result: n14, queryOptions: s9 }) {
  if (0 === r12.length)
    return;
  const i4 = (await b4(t9, e9, s9)).geometry, { hasZ: l12, points: a7 } = i4, c7 = s9.noDataValue, { samples: p6 } = n14;
  for (let u8 = 0; u8 < r12.length; u8++) {
    const e10 = p6[r12[u8]];
    if (e10.isHole)
      continue;
    const t10 = l12 ? a7[u8][2] : null;
    null === t10 || t10 === c7 ? e10.sampledZ = null : (n14.hasZ = true, e10.sampledZ = t10), e10.sampled = true;
  }
  S2(p6), n14.progress = o9 ? 0 : n14.progress + r12.length / p6.length, n14.statistics = s6(n14.samples, n14.spatialReference);
}
function S2(e9) {
  const t9 = e9.length - 1;
  let r12 = 0;
  for (let o9 = 1; o9 <= t9; o9++) {
    (e9[o9].sampled || o9 === t9) && (A6(e9, r12, o9), r12 = o9);
  }
}
function A6(e9, o9, n14) {
  if (n14 - o9 == 1)
    return;
  const s9 = e9[o9], i4 = s9.sampledZ, l12 = e9[n14], a7 = l12.sampledZ;
  if (t(i4) || t(a7)) {
    for (let t9 = o9 + 1; t9 < n14; t9++)
      e9[t9].sampledZ = null;
    return;
  }
  const c7 = s9.distance, p6 = l12.distance - c7;
  for (let r12 = o9 + 1; r12 < n14; r12++) {
    const o10 = e9[r12], n15 = (o10.distance - c7) / p6;
    o10.sampledZ = s2(i4, a7, n15);
  }
}
function U3({ densifiedPath: e9, distances: t9 }) {
  const r12 = e9.spatialReference, o9 = e9.paths, n14 = o9.length, s9 = 2 * (n14 - 1), i4 = o9.reduce((e10, t10) => e10 + t10.length, 0) + s9, l12 = new Array(i4);
  let a7 = 0, c7 = null, p6 = 0;
  const u8 = (e10, t10, r13, o10) => {
    l12[a7++] = T2(e10, r13), l12[a7++] = T2(t10, o10);
  };
  for (let m11 = 0; m11 < n14; m11++) {
    const e10 = o9[m11], r13 = t9[m11];
    for (let t10 = 0; t10 < e10.length; t10++) {
      const o10 = e10[t10], n15 = r13[t10];
      c7 && 0 === t10 && u8(c7, o10, p6, n15), l12[a7++] = q2(o10, n15), c7 = o10, p6 = n15;
    }
  }
  return { progress: 0, samples: l12, hasZ: false, statistics: null, spatialReference: r12 };
}
function q2(e9, t9) {
  return { coordinate: e9, distance: t9, sampledZ: null, sampled: false, isHole: false };
}
function T2(e9, t9) {
  return { coordinate: e9, distance: t9, sampledZ: null, sampled: true, isHole: true };
}
async function b4(e9, t9, r12) {
  try {
    return await e9.queryElevation(t9, r12);
  } catch (o9) {
    throw new r9(o6.ElevationQueryError);
  }
}

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileController.js
var I = "line-change";
var k3 = class extends y2 {
  constructor(e9) {
    super(e9), this._handles = new u(), this._updateTask = null, this._paramsPerProfile = /* @__PURE__ */ new Map(), this._getUpdateParametersMemoized = t6((e10, t9, o9) => ({ stationary: e10, visibleProfiles: t9, generationParameters: o9 })), this._getGenerationParametersMemoized = t6((e10, t9, o9, s9, i4, a7, l12) => S(t9) && x4(t9) && !t(s9) ? { view: e10, geometry: t9, elevationInfo: o9, options: a7, queue: s9, cache: i4, slicePlane: l12 } : null), this._getElevationInfoMemoized = t6((e10, t9) => ({ mode: e10, offset: t9 })), this._getOptionsMemoized = t6((e10, t9, o9) => ({ geodesicDistanceThreshold: e10, samplingDistance: t9, densificationMaxSamples: Math.round(s4 / o9), maxTotalSamples: c3 })), this._updateThrottled = e5((e10) => j(this._update(e10)), a4);
  }
  initialize() {
    const e9 = this.viewModel;
    this._handles.add([l4(() => e9.profiles.toArray(), (e10) => {
      this._abortUpdate(), this._paramsPerProfile.clear(), this._handles.remove(I), this._handles.add(e10.map((e11) => r3([e11.attach(this.viewModel), e11.on("change", () => {
        this._invalidateProfile(e11);
      })])), I);
    }, w3), this._updateThrottled, l4(() => this._updateParameters, this._updateThrottled, w3)]);
  }
  destroy() {
    this._handles.destroy(), this._paramsPerProfile.clear();
  }
  get _updateParameters() {
    const { viewModel: e9 } = this, t9 = e9.view;
    return this._getUpdateParametersMemoized(!r(t9) || t9.stationary, this.viewModel.visibleProfiles, this._generationParameters);
  }
  get _generationParameters() {
    const { view: e9, input: t9, queue: o9, tileCache: s9 } = this.viewModel;
    return t(e9) || !e9.ready ? null : this._getGenerationParametersMemoized(e9, o(t9, (e10) => e10.geometry), this._elevationInfo, o9, s9, this._options, "3d" === e9.type ? e9.slicePlane : null);
  }
  get _elevationInfo() {
    const e9 = o(this.viewModel.input, (e10) => a3(e10) ? null : u2(e10));
    return r(e9) ? this._getElevationInfoMemoized(e9.mode, e9.offset) : null;
  }
  get _options() {
    const e9 = this.viewModel, t9 = e9.visibleProfiles.length;
    let o9 = c(e9.minDemResolution, d6);
    return o9 = parseFloat(o9.toFixed(2)), this._getOptionsMemoized(e9.geodesicDistanceThreshold, o9, t9);
  }
  async _update({ stationary: e9, visibleProfiles: t9, generationParameters: o9 }) {
    this._abortUpdate(), e9 && (t(o9) ? this._clearResults() : this._updateTask = O(async (e10) => {
      this.viewModel.error = null;
      const s9 = t9.filter((e11) => !this._isProfileValid(e11, o9)), r12 = j6({ ...o9, providers: s9 }, { signal: e10 });
      try {
        for await (const t10 of r12) {
          f(e10), this._clearInvalidResults(o9);
          for (let e11 = 0; e11 < s9.length; e11++)
            s9[e11].result = t10[e11];
        }
        for (const e11 of s9)
          this._paramsPerProfile.set(e11, o9);
      } catch (i4) {
        w2(i4), this._abortUpdate(), this.viewModel.error = i4, s9.forEach((e11) => {
          e11.result = null;
        });
      }
    }));
  }
  _abortUpdate() {
    this._updateTask = h(this._updateTask);
  }
  _isProfileValid(e9, t9) {
    return this._paramsPerProfile.has(e9) && this._paramsPerProfile.get(e9) === t9;
  }
  _invalidateProfile(e9) {
    this._paramsPerProfile.delete(e9), this._updateThrottled(this._updateParameters);
  }
  _clearInvalidResults(e9) {
    for (const t9 of this.viewModel.profiles.items)
      this._isProfileValid(t9, e9) || (t9.result = null, this._paramsPerProfile.delete(t9));
  }
  _clearResults() {
    for (const e9 of this.viewModel.profiles.items)
      e9.result = null, this._paramsPerProfile.delete(e9);
  }
};
e([d2({ nonNullable: true })], k3.prototype, "viewModel", void 0), e([d2()], k3.prototype, "_updateParameters", null), e([d2()], k3.prototype, "_generationParameters", null), e([d2()], k3.prototype, "_elevationInfo", null), e([d2()], k3.prototype, "_options", null), k3 = e([n3("esri.widgets.ElevationProfile.ElevationProfileController")], k3);

// node_modules/@arcgis/core/widgets/ElevationProfile/support/unitUtils.js
function a6(n14, a7) {
  if (t(n14) || t(a7))
    return null;
  const { samples: o9, spatialReference: r12 } = n14, { distance: v7, elevation: c7 } = a7, m11 = z(r12), u8 = W(r12), p6 = o9.length, f6 = new Array(p6);
  for (let e9 = 0; e9 < p6; ++e9) {
    const t9 = o9[e9], i4 = t9.sampledZ, n15 = t9.coordinate;
    f6[e9] = { x: n15[0], y: n15[1], z: i4, distance: l9(t9.distance, m11, v7), elevation: s7(i4, u8, c7) };
  }
  return f6;
}
function o7(n14, a7) {
  if (t(n14) || t(a7) || t(n14.statistics) || t(n14.spatialReference))
    return null;
  const { distance: o9, elevation: r12 } = a7, { statistics: v7, spatialReference: c7 } = n14, m11 = z(c7), u8 = W(c7);
  return { maxDistance: l9(v7.maxDistance, m11, o9), minElevation: s7(v7.minElevation, u8, r12), maxElevation: s7(v7.maxElevation, u8, r12), avgElevation: s7(v7.avgElevation, u8, r12), elevationGain: s7(v7.elevationGain, u8, r12), elevationLoss: s7(v7.elevationLoss, u8, r12), maxPositiveSlope: v7.maxPositiveSlope, maxNegativeSlope: v7.maxNegativeSlope, avgPositiveSlope: v7.avgPositiveSlope, avgNegativeSlope: v7.avgNegativeSlope };
}
function l9(e9, t9, i4) {
  return null == e9 ? null : N(e9 * t9, "meters", i4);
}
function s7(e9, t9, i4) {
  return null == e9 ? null : N(e9 * t9, "meters", i4);
}

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLine.js
var b5 = class extends n4.EventedAccessor {
  constructor(t9) {
    super(t9), this.type = null, this.id = t2(), this.title = null, this.color = new l3("#000000"), this.visible = true, this._getSamplesMemoized = t6((t10, e9) => a6(t10, e9)), this._getStatisticsMemoized = t6((t10, e9) => o7(t10, e9)), this.viewVisualizationEnabled = true, this.result = null, this.effectiveUnits = null, this.numSamplesForPreview = 30, this.numSamplesPerChunk = 200, this.chartFillEnabled = true, this.chartStrokeWidth = 1.5, this.chartStrokeOffsetY = 0;
  }
  get progress() {
    return r(this.result) && this.visible ? this.result.progress : 0;
  }
  get samples() {
    return this._getSamplesMemoized(this.result, this.effectiveUnits);
  }
  get statistics() {
    return this._getStatisticsMemoized(this.result, this.effectiveUnits);
  }
  get hoveredPoint() {
    return o(this._viewModel.hoveredChartPosition, (t9) => this._getPoint(t9));
  }
  get available() {
    return true;
  }
  get hasZ() {
    const t9 = this.result;
    return r(t9) && t9.hasZ;
  }
  get minDemResolution() {
    return d6;
  }
  queryElevation() {
    throw new Error("not implemented");
  }
  attach(t9) {
    return this._viewModel = t9, r3([l4(() => t9.effectiveUnits, (t10) => {
      this.effectiveUnits = t10;
    }, w3), l4(() => [t9.input], () => this._onChange(), U)]);
  }
  toggleVisibility(t9) {
    this.visible = void 0 === t9 ? !this.visible : t9;
  }
  _onChange() {
    this.emit("change");
  }
  _getPoint(t9) {
    const { samples: e9, result: i4 } = this;
    if (t(e9) || t(i4))
      return null;
    const r12 = e9.length;
    if (0 === r12)
      return null;
    const s9 = t9 * e9[r12 - 1].distance, { x: l12, y: p6, z: a7 } = w(e9, s9, (t10) => t10.distance);
    return t(a7) ? null : new j3({ x: l12, y: p6, z: a7, spatialReference: i4.spatialReference });
  }
};
e([d2({ nonNullable: true })], b5.prototype, "id", void 0), e([d2({ nonNullable: true })], b5.prototype, "title", void 0), e([d2({ type: l3, nonNullable: true })], b5.prototype, "color", void 0), e([d2({ nonNullable: true })], b5.prototype, "visible", void 0), e([d2({ readOnly: true })], b5.prototype, "progress", null), e([d2({ readOnly: true })], b5.prototype, "samples", null), e([d2({ readOnly: true })], b5.prototype, "statistics", null), e([d2()], b5.prototype, "hoveredPoint", null), e([d2()], b5.prototype, "viewVisualizationEnabled", void 0), e([d2()], b5.prototype, "available", null), e([d2()], b5.prototype, "result", void 0), e([d2()], b5.prototype, "effectiveUnits", void 0), e([d2()], b5.prototype, "numSamplesForPreview", void 0), e([d2()], b5.prototype, "numSamplesPerChunk", void 0), e([d2()], b5.prototype, "chartFillEnabled", void 0), e([d2()], b5.prototype, "chartStrokeWidth", void 0), e([d2()], b5.prototype, "chartStrokeOffsetY", void 0), e([d2({ readOnly: true })], b5.prototype, "hasZ", null), e([d2({ readOnly: true })], b5.prototype, "minDemResolution", null), e([d2()], b5.prototype, "_viewModel", void 0), b5 = e([n3("esri.widgets.ElevationProfile.ElevationProfileLine")], b5);
var j7 = b5;

// node_modules/@arcgis/core/widgets/ElevationProfile/support/elevationQuerySourceUtils.js
function l10(t9) {
  if (t(t9))
    return null;
  if (t9 instanceof A4)
    return u5(t9);
  const e9 = t9.tileInfo;
  if (t(e9))
    return null;
  const l12 = r2(e9.lods);
  return t(l12) ? null : l12.resolution * z(e9.spatialReference);
}
function u5(r12) {
  if (t(r12))
    return null;
  const n14 = r12.layers.items.map(f5).filter(r);
  return l2(n14) ?? null;
}
function f5(r12) {
  return "tileInfo" in r12 ? l10(r12) : null;
}

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineGround.js
var y5 = class extends j7 {
  constructor(e9) {
    super(e9), this.type = "ground", this.color = new l3("#ff7f00"), this.viewVisualizationEnabled = true, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 1e3, this._getQueryElevationDependencies = t6((e10, o9) => ({ ground: e10, groundLayers: o9 }));
  }
  get available() {
    const e9 = this._ground;
    return r(e9) && e9.layers.some((e10) => e10.visible);
  }
  get minDemResolution() {
    return u5(this._ground);
  }
  get queryElevationDependencies() {
    return this._getQueryElevationDependencies(this._ground, this._groundLayers);
  }
  get _ground() {
    var _a;
    return o((_a = this._viewModel) == null ? void 0 : _a.view, (e9) => {
      var _a2;
      return (_a2 = e9.map) == null ? void 0 : _a2.ground;
    });
  }
  get _groundLayers() {
    const e9 = this._ground, o9 = o(e9, (e10) => {
      var _a;
      return (_a = e10.layers) == null ? void 0 : _a.toArray();
    });
    return c(o9, []);
  }
  async queryElevation(e9, o9) {
    const r12 = this.queryElevationDependencies;
    if (t(r12))
      throw new Error("ElevationProfileLineGround: no dependencies");
    const { ground: t9 } = r12;
    if (t(t9))
      throw new Error("No ground configured in the view");
    const i4 = await t9.queryElevation(e9, o9), n14 = W(e9.spatialReference), a7 = W(t9.layers.getItemAt(0).spatialReference);
    if (n14 !== a7) {
      const e10 = i4.geometry;
      e10.points = e10.points.map(([e11, r13, t10]) => [e11, r13, t10 === o9.noDataValue ? t10 : t10 * a7 / n14]);
    }
    return i4;
  }
  attach(e9) {
    return r3([super.attach(e9), l4(() => this.queryElevationDependencies, () => this._onChange())]);
  }
};
e([d2({ type: l3, nonNullable: true })], y5.prototype, "color", void 0), e([d2()], y5.prototype, "viewVisualizationEnabled", void 0), e([d2()], y5.prototype, "available", null), e([d2({ readOnly: true })], y5.prototype, "minDemResolution", null), e([d2()], y5.prototype, "queryElevationDependencies", null), e([d2()], y5.prototype, "_ground", null), e([d2()], y5.prototype, "_groundLayers", null), y5 = e([n3("esri.widgets.ElevationProfile.ElevationProfileLineGround")], y5);
var g5 = y5;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineInput.js
var y6 = class extends j7 {
  constructor(e9) {
    super(e9), this.type = "input", this.color = new l3("#00c8c8"), this.viewVisualizationEnabled = false, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 500, this.chartFillEnabled = false, this.chartStrokeOffsetY = -1, this._getQueryElevationDependencies = t6((e10, t9, o9, i4, n14) => o(e10, (e11) => ({ elevationInfo: e11, visibleLayers: t9, view: o9, stationary: i4, spatialReference: n14 })));
  }
  get queryElevationDependencies() {
    const e9 = this._viewModel.view;
    return t(e9) ? null : this._getQueryElevationDependencies(this._elevationInfo, this._visibleLayers, e9, e9.stationary, e9.spatialReference);
  }
  get available() {
    return !this._viewModel.inputIsSketched;
  }
  get _elevationInfo() {
    return o(this._viewModel.input, u2);
  }
  get _visibleLayers() {
    var _a;
    const e9 = (_a = this._viewModel) == null ? void 0 : _a.view, t9 = o(e9, (e10) => {
      var _a2, _b;
      return (_b = (_a2 = e10.map) == null ? void 0 : _a2.allLayers) == null ? void 0 : _b.filter((e11) => e11.visible).toArray();
    });
    return c(t9, []);
  }
  async queryElevation(e9, { noDataValue: t9, signal: o9 }) {
    const r12 = this.queryElevationDependencies;
    if (t(r12))
      throw new Error("ElevationProfileLineInput: no dependencies");
    const { view: s9, elevationInfo: a7, spatialReference: l12 } = r12;
    if ("on-the-ground" === a7.mode && "3d" === s9.type) {
      const r13 = await x.fromGeometry(e9).project(l12, o9), i4 = s9.elevationProvider;
      return r13.coordinates.forEach((e10) => {
        e10.z = c(i4.getElevation(e10.x, e10.y, 0, l12, "ground"), 0);
      }), { geometry: r13.export(), noDataValue: t9 };
    }
    return { geometry: e9, noDataValue: t9 };
  }
  attach(e9) {
    const t9 = () => this._onChange();
    return r3([super.attach(e9), l4(() => this.queryElevationDependencies, t9), a2(() => e9.elevationProvider, "elevation-change", t9, { onListenerAdd: t9, onListenerRemove: t9 })]);
  }
};
e([d2({ type: l3, nonNullable: true })], y6.prototype, "color", void 0), e([d2()], y6.prototype, "viewVisualizationEnabled", void 0), e([d2()], y6.prototype, "queryElevationDependencies", null), e([d2()], y6.prototype, "available", null), e([d2()], y6.prototype, "_elevationInfo", null), e([d2()], y6.prototype, "_visibleLayers", null), y6 = e([n3("esri.widgets.ElevationProfile.ElevationProfileLineInput")], y6);
var d7 = y6;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineQuery.js
var u6 = class extends j7 {
  constructor(e9) {
    super(e9), this.type = "query", this.color = new l3("#db334a"), this.viewVisualizationEnabled = true, this.source = null, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 500;
  }
  get minDemResolution() {
    return l10(this.source);
  }
  get available() {
    const e9 = this.source;
    return !!e9 && (t(e9.visible) || e9.visible) && (t(e9.layers) || e9.layers.some((e10) => e10.visible));
  }
  queryElevation(e9, o9) {
    if (!this.source)
      throw new Error("No source configured for the elevation profile line");
    return this.source.queryElevation(e9, o9);
  }
  attach(e9) {
    return r3([super.attach(e9), l4(() => this.source, () => this._onChange(), U)]);
  }
};
e([d2({ type: l3, nonNullable: true })], u6.prototype, "color", void 0), e([d2()], u6.prototype, "viewVisualizationEnabled", void 0), e([d2()], u6.prototype, "source", void 0), e([d2({ readOnly: true })], u6.prototype, "minDemResolution", null), e([d2()], u6.prototype, "available", null), u6 = e([n3("esri.widgets.ElevationProfile.ElevationProfileLineQuery")], u6);
var c6 = u6;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileLineView.js
var x6 = 2e5;
var E3 = class extends j7 {
  constructor(e9) {
    super(e9), this.type = "view", this.color = new l3("#cf4ccf"), this.viewVisualizationEnabled = true, this.include = null, this.exclude = null, this.numSamplesForPreview = 50, this.numSamplesPerChunk = 25, this._getQueryElevationDependencies = t6((e10, t9, r12, o9, n14, s9, l12) => ({ inputGraphicUid: r(e10) ? D2(e10) : null, visibleLayers: t9, maxIntersectionDistance: r12, intersectOptions: o9, view: n14, stationary: s9, spatialReference: l12 })), this._vecA = n6(), this._vecB = n6(), this._ray = d4();
  }
  get minDemResolution() {
    var _a, _b, _c;
    const e9 = (_a = this._viewModel) == null ? void 0 : _a.view;
    if (t(e9) || "3d" !== e9.type)
      return null;
    const t9 = (_c = (_b = e9.pointsOfInterest) == null ? void 0 : _b.focus) == null ? void 0 : _c.renderLocation;
    if (!t9)
      return null;
    return e9.state.camera.computeRenderPixelSizeAt(t9) * W(e9.spatialReference);
  }
  get queryElevationDependencies() {
    return o(this._view, (e9) => this._getQueryElevationDependencies(this._viewModel.input, this._visibleLayers, this._maxIntersectionDistance, this._intersectOptions, e9, e9.stationary, e9.spatialReference));
  }
  get _visibleLayers() {
    const e9 = this._view, t9 = o(e9, (e10) => {
      var _a, _b;
      return (_b = (_a = e10.map) == null ? void 0 : _a.allLayers) == null ? void 0 : _b.filter((e11) => e11.visible).toArray();
    });
    return c(t9, []);
  }
  get _intersectOptions() {
    const e9 = this._view;
    if (t(e9))
      return {};
    const t9 = e9.externalToInternalIntersectOptions({ include: this.include, exclude: this.exclude }), r12 = e9.externalToInternalIntersectOptions({ exclude: this._pointCloudLayers });
    return t9.exclude = o2(t9.exclude, r12.exclude), t9;
  }
  get _pointCloudLayers() {
    const e9 = this._view;
    return t(e9) ? [] : e9.allLayerViews.toArray().filter((e10) => {
      var _a;
      return "point-cloud" === ((_a = e10.layer) == null ? void 0 : _a.type);
    }).map((e10) => e10.layer);
  }
  get _view() {
    const e9 = this._viewModel.view;
    return r(e9) && "3d" === e9.type ? e9 : null;
  }
  get _maxIntersectionDistance() {
    const e9 = this._view;
    return t(e9) || !e9.renderCoordsHelper ? Number.POSITIVE_INFINITY : p(e9.spatialReference).radius / e9.renderCoordsHelper.unitInMeters;
  }
  get _intersector() {
    const e9 = this._view;
    if (t(e9))
      return null;
    const t9 = x2(e9.state.viewingMode), r12 = t9.options;
    return r12.hud = false, r12.invisibleTerrain = false, r12.backfacesTerrain = false, r12.selectionMode = false, r12.store = t3.ALL, t9;
  }
  async queryElevation(e9, { noDataValue: t9, signal: r12 }) {
    const i4 = this.queryElevationDependencies;
    if (t(i4))
      throw new Error("ElevationProfileLineInput: no dependencies");
    const n14 = this._intersector;
    if (t(n14))
      throw new Error("ElevationProfileLineInput: no view");
    const { intersectOptions: s9, view: l12, spatialReference: c7 } = i4, a7 = l12.renderCoordsHelper, p6 = l12.sceneIntersectionHelper, u8 = this._vecA, d9 = this._vecA, m11 = this._vecB, y8 = this._ray, f6 = await x.fromGeometry(e9).project(c7, r12), h6 = f6.coordinates, I4 = h6.length;
    for (let o9 = 0; o9 < I4; ++o9) {
      const e10 = h6[o9];
      o3(m11, e10.x, e10.y, e10.z ?? 0), a7.toRenderCoords(m11, c7, m11), a7.setAltitude(u8, x6, m11);
      const r13 = p2(u8, m11, y8);
      p6.computeIntersection(r13, n14, s9);
      const l13 = L4(i4, n14.results.all);
      l13 ? (l13.getIntersectionPoint(d9), a7.fromRenderCoords(d9, d9, c7), e10.z = d9[2]) : e10.z = t9;
    }
    return { geometry: f6.export(), noDataValue: t9 };
  }
  attach(e9) {
    const t9 = () => this._onChange();
    return r3([super.attach(e9), l4(() => this.queryElevationDependencies, t9), a2(() => e9.elevationProvider, "elevation-change", t9, { onListenerAdd: t9, onListenerRemove: t9 })]);
  }
};
function L4({ view: e9, inputGraphicUid: t9, maxIntersectionDistance: r12 }, i4) {
  for (const n14 of i4) {
    if (n14.distanceInRenderSpace > r12)
      continue;
    const i5 = d5(n14, e9);
    if (t(i5) || D2(i5) !== t9)
      return n14;
  }
  return null;
}
function D2(e9) {
  if (e9.layer && "objectIdField" in e9.layer) {
    const t9 = e9.attributes[e9.layer.objectIdField];
    if (t9)
      return `o-${e9.layer.id}-${t9}`;
  }
  return `u-${e9.uid}`;
}
e([d2({ type: l3, nonNullable: true })], E3.prototype, "color", void 0), e([d2()], E3.prototype, "viewVisualizationEnabled", void 0), e([d2()], E3.prototype, "include", void 0), e([d2()], E3.prototype, "exclude", void 0), e([d2({ readOnly: true })], E3.prototype, "minDemResolution", null), e([d2()], E3.prototype, "queryElevationDependencies", null), e([d2()], E3.prototype, "_visibleLayers", null), e([d2()], E3.prototype, "_intersectOptions", null), e([d2()], E3.prototype, "_pointCloudLayers", null), e([d2()], E3.prototype, "_view", null), e([d2()], E3.prototype, "_maxIntersectionDistance", null), e([d2()], E3.prototype, "_intersector", null), E3 = e([n3("esri.widgets.ElevationProfile.ElevationProfileLineView")], E3);
var C2 = E3;

// node_modules/@arcgis/core/widgets/ElevationProfile/elevationProfileLineTypes.js
var l11 = { base: j7, key: "type", typeMap: { ground: g5, input: d7, query: c6, view: C2 }, errorContext: "elevation-profile-line" };
var p5 = j4.ofType(l11);

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileInteraction.js
var w6;
var R3;
function M3(t9) {
  return "2d" === t9 ? new d3({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", effects: [{ type: "CIMGeometricEffectDashes", dashTemplate: [5, 4], lineDashEnding: "FullGap", controlPointEnding: "NoConstraint" }], enable: true, capStyle: "Butt", joinStyle: "Round", width: 1.5, color: [0, 0, 0, 255] }, { type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", width: 1.5, color: [255, 255, 255, 255] }] } } }) : new m7({ color: [0, 0, 0, 0] });
}
!function(t9) {
  t9.Ready = "ready", t9.Creating = "creating", t9.Reshaping = "reshaping", t9.ReshapingDisabled = "rehsaping-disabled", t9.Selecting = "selecting", t9.Selected = "selected";
}(w6 || (w6 = {})), function(t9) {
  t9.View = "view", t9.Main = "main", t9.Interaction = "interaction";
}(R3 || (R3 = {}));
var G2 = class extends y2 {
  constructor(t9) {
    super(t9), this.state = w6.Ready, this._handles = new u(), this._pendingStartOptions = null, this._previousInputInfo = null, this._shouldRemoveLastPoint = false, this._sketchedGraphics = /* @__PURE__ */ new WeakSet(), this._creationToolPromise = null, this._updateToolPromise = null, this._updateDisabled = false;
  }
  initialize() {
    this._handles.add(l4(() => ({ view: this.tool.viewModel.view, visible: this.tool.visible }), ({ view: t9, visible: e9 }) => {
      r(t9) && e9 ? this._attach(t9) : this._detach();
    }, w3), R3.View);
  }
  destroy() {
    this._detach(), this._handles = l(this._handles);
  }
  get canStopCreating() {
    const t9 = this._geometry, e9 = this._shouldRemoveLastPoint ? 3 : 2;
    return S(t9) && t9.paths.length > 0 && t9.paths[0].length >= e9;
  }
  get _input() {
    return this.tool.viewModel.input;
  }
  set _input(t9) {
    this.tool.viewModel.input = t9;
  }
  get _geometry() {
    return o(this._input, (t9) => t9.geometry);
  }
  get _visibleAndEditable() {
    return this.tool.visible && this.tool.editable;
  }
  get _view() {
    return this.tool.viewModel.view;
  }
  get test() {
    return { sketchVM: this._sketchVM, toolPromise: Promise.all([c(this._creationToolPromise, Promise.resolve()), c(this._updateToolPromise, Promise.resolve())]) };
  }
  start(t9 = { mode: "sketch" }) {
    if (!this.tool.editable)
      return;
    const e9 = this._view;
    if (!t(e9) && e9.ready)
      switch (this._pendingStartOptions = null, this._stopInteraction(), t(this._previousInputInfo) && this._storePreviousInput(this._input), this._setSketchedGraphic(null), t9.mode) {
        case "sketch":
          this._set("state", w6.Creating), this._startCreationInteraction();
          break;
        case "select":
          this._set("state", w6.Selecting), this._startSelectionInteraction();
      }
    else
      this._pendingStartOptions = t9;
  }
  stop() {
    this._pendingStartOptions = null, this._stopInteractionAndUpdate(), this._clearPreviousInput();
  }
  cancel() {
    this._pendingStartOptions = null, this._stopInteractionAndUpdate(), this._restorePreviousInput();
  }
  clear() {
    this._stopInteractionAndUpdate(), this._set("state", w6.Ready), this._clearPreviousInput(), this._input = null, this._pendingStartOptions = null;
  }
  isSketchedGraphic(t9) {
    return r(t9) && this._sketchedGraphics.has(t9);
  }
  _attach(t9) {
    this._detach();
    const e9 = { mode: "3d" === t9.type ? "relative-to-ground" : "on-the-ground", offset: null };
    this._graphicsLayer = new h3({ listMode: "hide", internal: true, elevationInfo: e9 });
    const i4 = M3(t9.type);
    this._sketchVM = new pe({ layer: this._graphicsLayer, view: t9, defaultCreateOptions: { mode: "click", hasZ: false }, updateOnGraphicClick: false, defaultUpdateOptions: { reshapeOptions: { shapeOperation: "none" }, enableRotation: false, enableScaling: false, enableMoveAllGraphics: false, enableZ: false, multipleSelectionEnabled: false, toggleToolOnClick: false, tool: "reshape" }, polylineSymbol: i4, updatePolylineSymbol: i4, activeLineSymbol: i4 }), this._handles.add([f2(() => t9.ready, () => o(this._pendingStartOptions, (t10) => this.start(t10)), w3), l4(() => [this._input, this._visibleAndEditable], () => this._update(), w3), l4(() => ({ map: t9.map, graphicsLayer: this._graphicsLayer }), ({ map: t10, graphicsLayer: e10 }) => {
      r(t10) && r(e10) && t10.add(e10), this._update();
    }, w3)], R3.Main);
  }
  _detach() {
    this._handles.remove(R3.Main), this._sketchVM = l(this._sketchVM), this._creationToolPromise = null, this._updateToolPromise = null;
    const t9 = o(this._view, (t10) => t10.map), e9 = this._graphicsLayer;
    r(t9) && r(e9) && t9.remove(e9), this._graphicsLayer = l(this._graphicsLayer), this._shouldRemoveLastPoint = false, this._set("state", w6.Ready);
  }
  _startCreationInteraction() {
    this._stopInteractionAndUpdate();
    const t9 = this._view, i4 = this._sketchVM;
    if (t(t9) || t(i4))
      return;
    this._shouldRemoveLastPoint = false;
    const s9 = i4.on("create", (t10) => {
      const e9 = t10.graphic;
      switch (t10.state) {
        case "complete":
          this._shouldRemoveLastPoint = false, this._setSketchedGraphic(e9), this._stopInteractionAndUpdate(), this._clearPreviousInput();
          break;
        case "cancel":
          this.cancel();
          break;
        case "active":
          this._setSketchedGraphic(e9), "cursor-update" === t10.toolEventInfo.type && (this._shouldRemoveLastPoint = true);
          break;
        case "start":
          this._setSketchedGraphic(e9);
      }
    }), a7 = () => {
      s9.remove();
      const t10 = this.canStopCreating, o9 = o(this._geometry, (t11) => t11.clone());
      i4.cancel(), this._creationToolPromise = null, !t(o9) && t10 ? this._shouldRemoveLastPoint && this._setSketchedGraphic(new g3({ geometry: L5(o9) })) : this._input = null;
    };
    this._handles.remove(R3.Interaction), this._handles.add(n2(a7), R3.Interaction), this._creationToolPromise = j(i4.create("polyline"));
  }
  _startReshapeInteraction() {
    this._stopInteraction();
    const t9 = this._view, e9 = this._sketchVM;
    if (t(t9) || t(e9))
      return;
    const i4 = e9.on("update", (t10) => {
      const e10 = t10.graphics[0];
      switch (t10.state) {
        case "complete":
          this._setSketchedGraphic(e10), this._stopInteractionAndUpdate(), this._clearPreviousInput();
          break;
        case "active":
        case "start":
          this._setSketchedGraphic(e10);
      }
    }), s9 = () => {
      i4.remove(), e9.cancel(), this._updateToolPromise = null;
    };
    this._handles.remove(R3.Interaction), this._handles.add(n2(s9), R3.Interaction), o(this._input, (t10) => {
      t10.visible = true, this._updateToolPromise = j(e9.update(t10, { tool: "reshape" }));
    });
  }
  _startSelectionInteraction() {
    this._stopInteraction();
    const t9 = this._view;
    if (t(t9))
      return;
    const e9 = t9.cursor, i4 = n2(() => t9.cursor = e9);
    t9.cursor = "crosshair", t9.popup.close();
    let s9 = null;
    const n14 = n2(() => h(s9)), r12 = t9.on("immediate-click", (e10) => {
      e10.preventDefault(), e10.stopPropagation(), h(s9), s9 = O(async (i5) => {
        const { results: s10 } = await t9.hitTest(e10);
        f(i5);
        const o9 = s10.filter((t10) => "graphic" === t10.type && null != t10.graphic).map((t10) => t10.graphic).find((t10) => r(t10.geometry) && "polyline" === t10.geometry.type);
        o9 && (this._input = o9, this._clearPreviousInput(), this._stopInteractionAndUpdate());
      });
    }), h6 = t9.on("key-down", (t10) => {
      "Escape" === t10.key && this.cancel();
    });
    this._handles.remove(R3.Interaction), this._handles.add([r12, h6, n14, i4], R3.Interaction), t9.ready && w5(t9) && t9.focus();
  }
  _stopInteraction() {
    this._handles.remove(R3.Interaction);
  }
  _stopInteractionAndUpdate() {
    this._handles.has(R3.Interaction) && (this._updateDisabled = true, this._stopInteraction(), this._updateDisabled = false, this._triggerUpdate());
  }
  _triggerUpdate() {
    this._set("state", w6.Ready), this._update();
  }
  _update() {
    if (this._updateDisabled)
      return;
    const t9 = this.state;
    if (t9 !== w6.Selecting) {
      if (this._visibleAndEditable) {
        if (t9 === w6.Creating || t9 === w6.Reshaping && this.isSketchedGraphic(this._input))
          return;
      } else
        this.cancel();
      this._set("state", this._getNextState()), this._updateVisuals();
    } else
      this.stop();
  }
  _getNextState() {
    return t(this._input) ? w6.Ready : this.isSketchedGraphic(this._input) ? this.state === w6.Creating ? w6.Creating : this._visibleAndEditable ? w6.Reshaping : w6.ReshapingDisabled : w6.Selected;
  }
  _updateVisuals() {
    switch (this.state) {
      case w6.Creating:
        break;
      case w6.Reshaping:
        this._startReshapeInteraction();
        break;
      case w6.ReshapingDisabled: {
        this._stopInteractionAndUpdate();
        const t9 = this._input;
        r(t9) && this.isSketchedGraphic(t9) && (t9.visible = false);
        break;
      }
      case w6.Ready:
      case w6.Selected:
        this._stopInteractionAndUpdate();
      case w6.Selecting:
    }
    this._updateSketchedGraphic();
  }
  _storePreviousInput(t9) {
    this._previousInputInfo = { graphic: t9 };
  }
  _restorePreviousInput() {
    const t9 = this._previousInputInfo;
    t(t9) || (this._clearPreviousInput(), this._input = t9.graphic, this._triggerUpdate());
  }
  _clearPreviousInput() {
    this._previousInputInfo = null;
  }
  _updateSketchedGraphic() {
    const t9 = this._graphicsLayer;
    if (t(t9))
      return;
    const e9 = t9.graphics, i4 = this._input;
    if (t(i4) || !this.isSketchedGraphic(i4))
      return void e9.removeAll();
    if (-1 === e9.indexOf(i4))
      e9.removeAll(), e9.add(i4);
    else if (1 !== e9.length) {
      const t10 = e9.filter((t11) => t11 !== i4);
      e9.removeMany(t10);
    }
  }
  _setSketchedGraphic(t9) {
    r(t9) && this._sketchedGraphics.add(t9), this._input = t9, this._updateSketchedGraphic();
  }
};
function L5(t9) {
  if (S(t9)) {
    const e9 = t9.clone();
    return e9.paths = [e9.paths[0].slice(0, -1)], e9;
  }
  return t9;
}
e([d2({ nonNullable: true })], G2.prototype, "state", void 0), e([d2({ nonNullable: true })], G2.prototype, "tool", void 0), e([d2()], G2.prototype, "canStopCreating", null), e([d2()], G2.prototype, "_graphicsLayer", void 0), e([d2()], G2.prototype, "_sketchVM", void 0), e([d2()], G2.prototype, "_input", null), e([d2()], G2.prototype, "_geometry", null), e([d2()], G2.prototype, "_visibleAndEditable", null), e([d2()], G2.prototype, "_view", null), e([d2()], G2.prototype, "_shouldRemoveLastPoint", void 0), G2 = e([n3("esri.widgets.ElevationProfile.ElevationProfileInteraction")], G2);

// node_modules/@arcgis/core/widgets/ElevationProfile/support/ElevationProfileView.js
var d8 = class extends y2 {
  constructor(i4) {
    super(i4), this._implementation = null, this._loadingTask = null, this._handles = new u();
  }
  initialize() {
    this._handles.add(l4(() => ({ tool: this.tool, view: this.tool.viewModel.view, visible: this.tool.visible && !!o(this.tool.viewModel.view, (i4) => i4.ready) }), ({ tool: i4, view: o9, visible: e9 }) => {
      r(o9) && e9 ? this._show(o9, i4) : this._hide();
    }, w3));
  }
  destroy() {
    this._handles = l(this._handles), this._hide();
  }
  _show(i4, o9) {
    this._loadingTask = h(this._loadingTask), this._loadingTask = O(async (e9) => {
      if ("2d" === i4.type) {
        const s9 = import("./ElevationProfileView2D-DSGMQQD3.js"), t9 = (await y(s9, e9)).ElevationProfileView2D;
        this._implementation = new t9(i4, o9);
      } else if ("3d" === i4.type) {
        const s9 = import("./ElevationProfileView3D-OYFJPO2J.js"), t9 = (await y(s9, e9)).ElevationProfileView3D;
        this._implementation = new t9(i4, o9);
      }
    });
  }
  _hide() {
    this._loadingTask = h(this._loadingTask), this._implementation = l(this._implementation);
  }
};
e([d2()], d8.prototype, "tool", void 0), d8 = e([n3("esri.widgets.ElevationProfile.support.ElevationProfileView")], d8);

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileTool.js
var n13 = class extends y2 {
  constructor(e9) {
    super(e9), this.editable = true, this.visible = true, this.highlightEnabled = true;
  }
  initialize() {
    this.view = new d8({ tool: this }), this.interaction = new G2({ tool: this });
  }
  destroy() {
    this.interaction.destroy(), this.view.destroy();
  }
  get state() {
    var _a;
    const e9 = (_a = this.interaction) == null ? void 0 : _a.state;
    switch (e9) {
      case w6.Ready:
        return i.Ready;
      case w6.Creating:
        return i.Creating;
      case w6.Selecting:
        return i.Selecting;
      case w6.Selected:
        return i.Selected;
      case w6.Reshaping:
      case w6.ReshapingDisabled:
        return i.Created;
    }
  }
};
e([d2({ nonNullable: true })], n13.prototype, "viewModel", void 0), e([d2()], n13.prototype, "view", void 0), e([d2()], n13.prototype, "interaction", void 0), e([d2()], n13.prototype, "editable", void 0), e([d2()], n13.prototype, "visible", void 0), e([d2()], n13.prototype, "highlightEnabled", void 0), n13 = e([n3("esri.widgets.ElevationProfile.ElevationProfileTool")], n13);

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileViewModel.js
var M4 = s.getLogger("esri.widgets.ElevationProfile.ElevationProfileViewModel");
var N2 = class extends y2 {
  constructor(t9) {
    super(t9), this.view = null, this.input = null, this._getEffectiveUnitsMemoized = t6((t10, e9) => ({ distance: t10, elevation: e9 })), this.geodesicDistanceThreshold = 1e5, this.hoveredChartPosition = null, this.uniformChartScaling = false, this.highlightEnabled = true, this.defaultUnit = null, this.queue = null, this._currentTileCache = null, this.error = null, this._handles = new u(), this._defaultProfileLineGround = new g5(), this._userUnitOptions = null, this._userUnit = null, (t9 == null ? void 0 : t9.profiles) || (this.profiles = new j4([this._defaultProfileLineGround]));
  }
  initialize() {
    this._handles.add(l4(() => this.view, (t9) => {
      var _a;
      t(t9) ? M4.warnOnce("no view. Widget will be disabled until a view is provided.") : this.queue = E2("3d" === t9.type ? (_a = t9.resourceController) == null ? void 0 : _a.scheduler : void 0);
    }, w3)), this.tool = new n13({ viewModel: this }), this._controller = new k3({ viewModel: this });
  }
  destroy() {
    this._handles = l(this._handles), this._defaultProfileLineGround = l(this._defaultProfileLineGround), this._controller = l(this._controller), this._currentTileCache = l(this._currentTileCache), this.tool = l(this.tool), this.queue = l(this.queue);
  }
  set profiles(t9) {
    const e9 = this._get("profiles"), i4 = t9 ?? new j4();
    this._set("profiles", n7(i4, e9));
  }
  get state() {
    const t9 = this.view;
    return r(t9) && t9.ready ? this.tool.state : i.Disabled;
  }
  get progress() {
    let t9 = 0, e9 = 0;
    for (const i4 of this.visibleProfiles)
      t9++, e9 += i4.progress;
    return t9 > 0 ? e9 / t9 : 0;
  }
  set unitOptions(t9) {
    this._userUnitOptions = t9, this._set("unitOptions", this._filteredOrAllUnits(this._userUnitOptions));
  }
  get unitOptions() {
    return this._filteredOrAllUnits(this._userUnitOptions);
  }
  set unit(t9) {
    this._userUnit = t9 ? this._findSelectableUnit(t9, this._userUnit) : null, this.notifyChange("unit");
  }
  get unit() {
    return this._userUnit ? (this._userUnit = this._findSelectableUnit(this._userUnit, this.defaultUnit), this._userUnit) : this._findSelectableUnit(this.defaultUnit);
  }
  get effectiveUnits() {
    const t9 = m9(this.visibleProfiles.map((t10) => t10.result)), e9 = v(t9.maxDistance, "meters", this.unit), i4 = F(t9.maxElevation, "meters", this.unit);
    return this._getEffectiveUnitsMemoized(e9, i4);
  }
  get hasVertices() {
    const t9 = o(this.input, (t10) => t10.geometry);
    return S(t9) && t9.paths.reduce((t10, e9) => t10 + e9.length, 0) > 0;
  }
  get hoveredPoints() {
    return !t(this.input) && this.visible && this.tool.editable ? this.visibleProfiles.map((t9) => {
      const e9 = t9.hoveredPoint;
      return r(e9) ? { hoveredPoint: e9, color: t9.color } : null;
    }).filter(r) : [];
  }
  get statistics() {
    return r10(this.visibleProfiles.map((t9) => t9.statistics));
  }
  get chartData() {
    if (t(this.input))
      return null;
    const { effectiveUnits: t9, progress: e9, statistics: i4, visibleProfiles: o9, uniformChartScaling: r12 } = this, s9 = o9.filter((t10) => t10.hasZ).map((t10) => ({ id: t10.id, type: t10.type, title: t10.title, color: t10.color, samples: t10.samples, progress: t10.progress, chartFillEnabled: t10.chartFillEnabled, chartStrokeWidth: t10.chartStrokeWidth, chartStrokeOffsetY: t10.chartStrokeOffsetY, viewVisualizationEnabled: t10.viewVisualizationEnabled }));
    return 0 === s9.length ? null : { lines: s9, effectiveUnits: t9, statistics: i4, refined: 1 === e9, dynamicElevationRange: o9.some((t10) => "view" === t10.type), uniformScaling: r12 };
  }
  get visibleProfiles() {
    return this.profiles.toArray().filter((t9) => t9.available && t9.visible);
  }
  get minDemResolutions() {
    const t9 = [];
    for (const { minDemResolution: e9 } of this.visibleProfiles)
      r(e9) && t9.push(e9);
    return t9;
  }
  get minDemResolution() {
    return l2(this.minDemResolutions);
  }
  get errorState() {
    const t9 = o(this.input, (t10) => t10.geometry);
    if (!x4(t9))
      return n8.NoValidInput;
    if (r(this.error)) {
      if (n11(this.error))
        switch (this.error.cause) {
          case o6.TooComplex:
            return n8.TooComplex;
          case o6.InvalidGeometry:
            return n8.InvalidGeometry;
          case o6.InvalidElevationInfo:
            return n8.InvalidElevationInfo;
          case o6.ElevationQueryError:
            return n8.NoValidInput;
        }
      return n8.UnknownError;
    }
    return 0 === this.visibleProfiles.length ? n8.NoVisibleProfiles : t(this.chartData) && 1 === this.progress ? n8.RefinedButNoChartData : n8.None;
  }
  get tileCache() {
    var _a;
    this._currentTileCache = l(this._currentTileCache);
    const t9 = this.view;
    if (r(t9) && "3d" === (t9 == null ? void 0 : t9.type)) {
      const e9 = (_a = t9.basemapTerrain) == null ? void 0 : _a.elevationQueryCache;
      if (r(e9))
        return e9;
    }
    return t(this._currentTileCache) && (this._currentTileCache = new t4(new e4(20 * o4.MEGABYTES))), this._currentTileCache;
  }
  get inputIsSketched() {
    return this.tool.interaction.isSketchedGraphic(this.input);
  }
  get elevationProvider() {
    const t9 = this.view;
    return r(t9) && "3d" === t9.type ? t9.elevationProvider : null;
  }
  start(t9) {
    this.tool.interaction.start(t9);
  }
  stop() {
    this.tool.interaction.stop();
  }
  cancel() {
    this.tool.interaction.cancel();
  }
  clear() {
    this.tool.interaction.clear();
  }
  _findSelectableUnit(t9, e9) {
    const i4 = this.unitOptions;
    return r(t9) && i4.includes(t9) ? t9 : e9 ? this._findSelectableUnit(e9) : i4[0];
  }
  _filteredOrAllUnits(t9) {
    const e9 = (r(t9) ? t9 : []).filter((t10) => j2.includes(t10));
    return 0 === e9.length ? j2.slice() : e9;
  }
};
e([d2()], N2.prototype, "view", void 0), e([d2({ type: g3 })], N2.prototype, "input", void 0), e([d2({ type: p5, nonNullable: true })], N2.prototype, "profiles", null), e([d2({ readOnly: true })], N2.prototype, "state", null), e([d2({ readOnly: true })], N2.prototype, "progress", null), e([d2()], N2.prototype, "unitOptions", null), e([d2()], N2.prototype, "unit", null), e([d2({ readOnly: true })], N2.prototype, "effectiveUnits", null), e([d2({ type: Number })], N2.prototype, "geodesicDistanceThreshold", void 0), e([d2()], N2.prototype, "hoveredChartPosition", void 0), e([d2()], N2.prototype, "uniformChartScaling", void 0), e([o5("tool.highlightEnabled")], N2.prototype, "highlightEnabled", void 0), e([d2({ readOnly: true })], N2.prototype, "hoveredPoints", null), e([d2({ readOnly: true })], N2.prototype, "statistics", null), e([d2()], N2.prototype, "chartData", null), e([d2()], N2.prototype, "visibleProfiles", null), e([d2()], N2.prototype, "minDemResolutions", null), e([d2({ readOnly: true })], N2.prototype, "minDemResolution", null), e([d2({ readOnly: true })], N2.prototype, "errorState", null), e([d2(r6)], N2.prototype, "defaultUnit", void 0), e([d2()], N2.prototype, "queue", void 0), e([d2()], N2.prototype, "tileCache", null), e([d2()], N2.prototype, "tool", void 0), e([o5("tool.visible")], N2.prototype, "visible", void 0), e([d2()], N2.prototype, "error", void 0), e([d2()], N2.prototype, "inputIsSketched", null), e([d2()], N2.prototype, "elevationProvider", null), e([d2()], N2.prototype, "_defaultProfileLineGround", void 0), e([d2()], N2.prototype, "_userUnitOptions", void 0), e([d2()], N2.prototype, "_controller", void 0), e([d2()], N2.prototype, "_userUnit", void 0), N2 = e([n3("esri.widgets.ElevationProfile.ElevationProfileViewModel")], N2);
var x7 = N2;

// node_modules/@arcgis/core/widgets/ElevationProfile/ElevationProfileVisibleElements.js
var s8 = class extends y2 {
  constructor() {
    super(...arguments), this.legend = true, this.chart = true, this.clearButton = true, this.settingsButton = true, this.sketchButton = true, this.selectButton = true, this.unitSelector = true, this.uniformChartScalingToggle = true;
  }
};
e([d2()], s8.prototype, "legend", void 0), e([d2()], s8.prototype, "chart", void 0), e([d2()], s8.prototype, "clearButton", void 0), e([d2()], s8.prototype, "settingsButton", void 0), e([d2()], s8.prototype, "sketchButton", void 0), e([d2()], s8.prototype, "selectButton", void 0), e([d2()], s8.prototype, "unitSelector", void 0), e([d2()], s8.prototype, "uniformChartScalingToggle", void 0), s8 = e([n3("esri.widgets.ElevationProfile.ElevationProfileVisibleElements")], s8);
var i3 = s8;

// node_modules/@arcgis/core/widgets/ElevationProfile/components/Statistics.js
var u7 = 100;
var v5 = class extends O2 {
  constructor(t9, e9) {
    super(t9, e9), this._messagesUnits = null, this._updateLayout = (t10) => {
      const e10 = t10.parentElement, s9 = t10.style.display;
      e10.removeChild(t10), document.body.appendChild(t10), t10.style.display = "block";
      let i4 = 80;
      for (const r12 of t10.childNodes)
        r12 instanceof HTMLElement && (i4 = Math.max(i4, r12.offsetWidth));
      document.body.removeChild(t10), e10.appendChild(t10), t10.style.display = s9, t10.style.setProperty("--max-width", `${i4}px`);
    }, this._updateLayoutThrottled = e5(this._updateLayout, u7);
  }
  initialize() {
    this.own(this._updateLayoutThrottled);
  }
  render() {
    return n5("div", { bind: this, class: c4.base, afterCreate: this._updateLayout, afterUpdate: this._updateLayoutThrottled }, this._renderStatistics());
  }
  _renderStatistics() {
    var _a;
    const t9 = (_a = this._messages) == null ? void 0 : _a.statistics;
    return t9 ? [this._renderDistanceStatistic("maxDistance", t9.maxDistance), this._renderElevationStatistic("elevationGain", t9.gain), this._renderElevationStatistic("elevationLoss", t9.loss), this._renderElevationStatistic("minElevation", t9.minElevation), this._renderElevationStatistic("maxElevation", t9.maxElevation), this._renderElevationStatistic("avgElevation", t9.avgElevation), this._renderSlopeStatistic("maxPositiveSlope", "maxNegativeSlope", t9.maxSlope), this._renderSlopeStatistic("avgPositiveSlope", "avgNegativeSlope", t9.avgSlope)] : [];
  }
  _renderDistanceStatistic(t9, e9) {
    const s9 = this._renderValue(t9, (t10) => {
      const e10 = this.effectiveUnits.distance;
      return l6(this._messagesUnits, t10, e10, p3);
    });
    return this._renderStatistic(e9, s9);
  }
  _renderElevationStatistic(t9, e9) {
    const s9 = this._renderValue(t9, (t10) => {
      const e10 = this.effectiveUnits.elevation;
      return l6(this._messagesUnits, t10, e10, p3);
    });
    return this._renderStatistic(e9, s9);
  }
  _renderSlopeStatistic(t9, e9, s9) {
    const i4 = n5("div", { key: "slope-up", class: c4.slopeValue }, n5("div", { class: c4.slopeUpIcon }), this._renderValue(t9, (t10) => w4(t10, "degrees", "geographic", "geographic", p3)), n5("div", { class: c4.slopeDownIcon }), this._renderValue(e9, (t10) => w4(t10, "degrees", "geographic", "geographic", p3)));
    return this._renderStatistic(s9, i4);
  }
  _renderStatistic(t9, e9) {
    return n5("div", { class: c4.statistic }, n5("label", { class: c4.statisticLabel }, t9), n5("div", { class: c4.statisticValue }, e9));
  }
  _renderValue(t9, i4) {
    const r12 = this.line, o9 = 1 === r12.progress ? r12.statistics : null, a7 = o(o9, (e9) => e9[t9]);
    return r(a7) ? i4(a7) : m8;
  }
};
e([d2()], v5.prototype, "effectiveUnits", void 0), e([d2()], v5.prototype, "line", void 0), e([d2(), e3("esri/widgets/ElevationProfile/t9n/ElevationProfile")], v5.prototype, "_messages", void 0), e([d2(), e3("esri/core/t9n/Units")], v5.prototype, "_messagesUnits", void 0), v5 = e([n3("esri.widgets.ElevationProfile.Statistics")], v5);

// node_modules/@arcgis/core/widgets/ElevationProfile/support/intlUtils.js
function r11(r12, { profiles: t9 }) {
  const u8 = r12.title;
  if (r(u8))
    return u8;
  switch (r12.type) {
    case "ground":
      return t9.ground;
    case "input":
      return t9.input;
    case "query":
      return t9.query;
    case "view":
      return t9.view;
    default:
      return "";
  }
}

// node_modules/@arcgis/core/widgets/ElevationProfile/components/LegendItem.js
var h5 = class extends O2 {
  constructor(e9, s9) {
    super(e9, s9), this.expanded = false, this.checkboxVisible = true, this._messages = null;
  }
  initialize() {
    this._statistics = new v5(this._statisticsProps), this.own(l4(() => this._statisticsProps, (e9) => this._statistics.set(e9)));
  }
  destroy() {
    this._statistics = l(this._statistics);
  }
  render() {
    const e9 = this.expanded;
    return n5("div", { key: this, class: this.classes(r8.base, { [r8.disabled]: this.disabled, [r8.expanded]: e9 }) }, this._renderColorIndicator(), n5("div", { key: "header", class: r8.header }, this._renderLabelWithCheckbox(), this._renderCollapseToggleButton()), e9 && n5("div", { key: "content", class: r8.content }, this._statistics.render()));
  }
  get disabled() {
    return !this.line.available;
  }
  get _statisticsProps() {
    return { line: this.line, effectiveUnits: this.effectiveUnits };
  }
  _renderColorIndicator() {
    return n5("div", { key: "color-indicator", class: r8.colorIndicator, styles: { backgroundColor: this.line.color.toCss() } });
  }
  _renderCollapseToggleButton() {
    const e9 = this._messages, s9 = this.expanded ? e9.hideDetails : e9.showDetails;
    return n5("button", { key: "collapse-toggle", bind: this, class: r8.collapseToggle, onclick: this._onCollapseToggleClick, title: s9, "aria-label": s9, type: "button" }, n5("span", { class: r8.collapseToggleIcon }));
  }
  _onCollapseToggleClick() {
    this.onExpandedToggle();
  }
  _renderLabelWithCheckbox() {
    const { line: e9, checkboxVisible: s9, disabled: t9 } = this, i4 = `${r8.base}__check-${e9.id}`;
    return n5("label", { key: "id", for: i4, class: this.classes(r8.label, { [r8.labelDisabled]: t9 || !s9 }) }, s9 && this._renderCheckbox(i4), n5("span", null, r11(e9, this._messages)));
  }
  _renderCheckbox(e9) {
    const s9 = this.line, t9 = s9.visible, i4 = this.disabled, o9 = this._messages, r12 = t9 ? o9.hideProfile : o9.showProfile, a7 = r11(s9, this._messages), n14 = s3(r12, { name: a7 });
    return n5("input", { key: "checkbox", id: e9, type: "checkbox", class: r8.checkbox, title: n14, checked: t9, disabled: i4, "aria-label": n14, bind: this, onchange: (e10) => this._onCheckboxToggle(e10, s9) });
  }
  _onCheckboxToggle(e9, s9) {
    e9.stopPropagation(), s9.toggleVisibility();
  }
};
e([d2({ nonNullable: true })], h5.prototype, "effectiveUnits", void 0), e([d2({ nonNullable: true })], h5.prototype, "line", void 0), e([d2()], h5.prototype, "expanded", void 0), e([d2()], h5.prototype, "disabled", null), e([d2()], h5.prototype, "checkboxVisible", void 0), e([d2()], h5.prototype, "onExpandedToggle", void 0), e([d2()], h5.prototype, "_statistics", void 0), e([d2(), e3("esri/widgets/ElevationProfile/t9n/ElevationProfile")], h5.prototype, "_messages", void 0), h5 = e([n3("esri.widgets.ElevationProfile.LegendItem")], h5);

// node_modules/@arcgis/core/widgets/ElevationProfile/components/Legend.js
var m10 = class extends O2 {
  constructor(e9, s9) {
    super(e9, s9), this._items = new j4(), this._expandedLine = null;
  }
  initialize() {
    this.own([l4(() => this.profiles, (e9) => {
      this._destroyItems(), this._items.addMany(e9.map((e10) => this._createItemForLine(e10)));
    }, h2), l4(() => this.effectiveUnits, (e9) => {
      this._items.forEach((t9) => {
        t9.effectiveUnits = e9;
      });
    }, h2)]);
  }
  destroy() {
    this._destroyItems();
  }
  render() {
    return n5("div", { class: n10.base }, this._items.toArray().map((e9) => e9.render()));
  }
  _onExpandedToggle(e9) {
    this._expandedLine = e9 === this._expandedLine ? null : e9, this._items.forEach((e10) => e10.expanded = e10.line === this._expandedLine);
  }
  _createItemForLine(e9) {
    return new h5({ line: e9, effectiveUnits: this.effectiveUnits, expanded: e9 === this._expandedLine, checkboxVisible: this.profiles.length > 1, onExpandedToggle: () => this._onExpandedToggle(e9) });
  }
  _destroyItems() {
    this._items.drain((e9) => e9.destroy());
  }
};
e([d2()], m10.prototype, "profiles", void 0), e([d2()], m10.prototype, "effectiveUnits", void 0), e([d2()], m10.prototype, "_items", void 0), e([d2()], m10.prototype, "_expandedLine", void 0), m10 = e([n3("esri.widgets.ElevationProfile.Legend")], m10);

// node_modules/@arcgis/core/widgets/ElevationProfile/components/SettingsButton.js
var g6 = class extends O2 {
  constructor(e9, t9) {
    super(e9, t9), this._messagesUnits = null, this._popover = null, this._buttonElement = null, this._focusOutElement = null, this._requestFocusOnCreate = false;
  }
  destroy() {
    this._destroyPopover();
  }
  render() {
    const { unitSelector: e9, uniformChartScalingToggle: t9 } = this.visibleElements;
    if (!e9 && !t9)
      return n5("div", { key: `${this.id}-empty` });
    const s9 = r(this._popover) && this._popover.open ? this._messages.hideSettings : this._messages.showSettings;
    return n5("button", { class: _.base, title: s9, bind: this, afterCreate: this._initializePopover, onclick: this._togglePopover, "aria-label": s9, type: "button" });
  }
  _initializePopover(e9) {
    this._destroyPopover(), this._buttonElement = e9, this._popover = new y4({ owner: this, placement: "bottom-end", offset: [0, 0], anchorElement: e9, renderContentFunction: () => this._renderPopoverContent() });
  }
  _destroyPopover() {
    this._focusOutElement = a(this._focusOutElement), this._popover = l(this._popover);
  }
  _renderPopoverContent() {
    const { unitSelector: e9, uniformChartScalingToggle: t9 } = this.visibleElements;
    return n5("div", { class: _.popoverContent, dir: m5(e2(this._buttonElement)), bind: this, afterCreate: this._onPopoverContentAfterCreate }, e9 && this._renderUnitSelector(), t9 && this._renderUniformChartScalingToggle());
  }
  _renderUnitSelector() {
    const { unit: e9, unitOptions: t9 } = this.viewModel, o9 = this._messagesUnits;
    return n5("label", { key: "unit-selector-label", class: _.selectLabel }, this._messages.unitSelectLabel, n5("select", { class: _.select, value: e9, bind: this, onchange: this._onUnitChange, afterCreate: this._onUnitSelectAfterCreate }, t9.map((e10) => n5("option", { key: e10, value: e10 }, P(e10) ? o9.systems[e10] : o9.units[e10].pluralCapitalized))));
  }
  _onUnitChange(e9) {
    this.viewModel.unit = e9.target.value;
  }
  _onUnitSelectAfterCreate(e9) {
    this._requestFocusOnCreate && (this._requestFocusOnCreate = false, e9.focus());
  }
  _renderUniformChartScalingToggle() {
    const e9 = this._messages, t9 = this.viewModel.uniformChartScaling, o9 = t9 ? e9.uniformChartScalingDisable : e9.uniformChartScalingEnable;
    return n5("label", { key: "uniform-chart-scaling-label", class: _.checkboxLabel, onmousedown: v6 }, n5("input", { class: this.classes(_.checkbox, _.uniformChartScalingCheckbox), type: "checkbox", checked: t9, title: o9, "aria-label": o9, bind: this, onchange: this._onUniformChartScalingChange }), e9.uniformChartScalingLabel);
  }
  _onUniformChartScalingChange(e9) {
    this.viewModel.uniformChartScaling = e9.target.checked;
  }
  _togglePopover(e9) {
    r(this._popover) && this._popover.open ? this._closePopover() : this._openPopover();
  }
  _openPopover() {
    o(this._popover, (e9) => e9.open = true), this._requestFocusOnCreate = true;
  }
  _closePopover({ focusOnButton: e9 = true } = {}) {
    o(this._popover, (e10) => e10.open = false), e9 && o(this._buttonElement, (e10) => e10.focus());
  }
  _onPopoverContentAfterCreate(e9) {
    a(this._focusOutElement), this._focusOutElement = r4(e9, "focusout", ({ relatedTarget: t9 }) => {
      const o9 = e9.contains(t9), s9 = t9 === this._buttonElement;
      o9 || s9 || this._closePopover({ focusOnButton: false });
    });
  }
};
function v6(e9) {
  e9.preventDefault();
}
e([d2()], g6.prototype, "viewModel", void 0), e([d2()], g6.prototype, "visibleElements", void 0), e([d2(), e3("esri/widgets/ElevationProfile/t9n/ElevationProfile")], g6.prototype, "_messages", void 0), e([d2(), e3("esri/core/t9n/Units")], g6.prototype, "_messagesUnits", void 0), g6 = e([n3("esri.widgets.ElevationProfile.SettingsButton")], g6);

// node_modules/@arcgis/core/widgets/ElevationProfile/support/niceScale.js
function t8(t9, n14, r12 = 10) {
  const c7 = o8(n14 - t9, false);
  if (0 === c7)
    return [t9, n14];
  const e9 = o8(c7 / (r12 - 1), true);
  return [Math.floor(t9 / e9) * e9, Math.ceil(n14 / e9) * e9];
}
function o8(t9, o9) {
  const n14 = Math.floor(Math.log10(t9)), r12 = t9 / 10 ** n14;
  let c7;
  return c7 = o9 ? r12 < 1.5 ? 1 : r12 < 3 ? 2 : r12 < 5 ? 2.5 : r12 < 7 ? 5 : 10 : r12 <= 1 ? 1 : r12 <= 2 ? 2 : r12 <= 3 ? 2.5 : r12 <= 5 ? 5 : 10, c7 * 10 ** n14;
}

// node_modules/@arcgis/core/widgets/ElevationProfile/support/chartUtils.js
var y7 = "#f8f8f8";
var L6 = "#a9a9a9";
var z4 = "#323232";
var k4 = "line";
var P3 = "fill";
var S3 = 15;
var F2 = 12;
var w7 = 30;
var M5 = 1e-3;
var Y = 0.5;
var X = 0.5;
var I2 = 30;
var W3 = 0.02;
var j8 = 0.02;
var H = { sideSpacing: S3, paddingBottom: 0, paddingLeft: 0, paddingRight: 0, paddingTop: 0, axisFontSize: 9, axisFontWeight: "400", axisGridStroke: "#f4f4f4", axisLabelsFontSize: 9, axisLabelsFontWeight: "400", axisLabelsColor: L6, axisTooltipFontSize: 12, axisTooltipBackgroundColor: z4, axisTooltipLabelColor: y7, axisTooltipPaddingTop: Math.round(F2 / 4), axisTooltipPaddingBottom: Math.round(F2 / 4), axisTooltipPaddingHorizontal: Math.round(S3 / 4), xAxisMinGridDistance: 50, xAxisLabelsSpacing: Math.round(F2 / 2), xAxisMinLabelPosition: 0.05, xAxisMaxLabelPosition: 0.9, yAxisMinGridDistance: 30, yAxisLabelSpacing: Math.round(S3 / 4), yAxisMinLabelPosition: 0, yAxisMaxLabelPosition: 0.8, seriesTooltipFontSize: 12, seriesTooltipBackgroundColor: y7, seriesTooltipLabelColor: z4, seriesFillLighten: 0.9, seriesTooltipSpacing: F2 / 2, seriesTooltipPaddingVertical: Math.round(S3 / 4), seriesTooltipPaddingHorizontal: Math.round(S3 / 4), tooltipBorderRadius: 0 };
var O4 = { ...H, axisGridStroke: z4, axisLabelsColor: L6, axisTooltipBackgroundColor: z4, axisTooltipLabelColor: y7, seriesTooltipBackgroundColor: z4, seriesTooltipLabelColor: y7, seriesFillLighten: -0.75 };
var U4 = { minX: void 0, maxX: void 0, minY: void 0, maxY: void 0 };
async function B(i4) {
  const e9 = await c2(), { am4core: n14, am4charts: a7 } = e9;
  f(i4.abortOptions);
  const { options: s9 } = n14;
  s9.minPolylineStep = Y, s9.autoSetClassName = true, s9.animationsEnabled = false;
  const l12 = r5(), d9 = l12 ? O4 : H;
  l12 && n14.useTheme(e9.am4themes_dark);
  const c7 = n14.create(i4.container, a7.XYChart);
  c7.arrangeTooltips = false, c7.preloader.disabled = true, c7.zoomOutButton.disabled = true;
  const m11 = f3(i4.container);
  c7.rtl = m11, c7.padding(d9.paddingTop, m11 ? d9.paddingLeft : d9.paddingRight, d9.paddingBottom, m11 ? d9.paddingRight : d9.paddingLeft);
  const x8 = c7.plotContainer.background;
  x8.strokeWidth = 0, x8.strokeOpacity = 0, x8.stroke = null;
  const p6 = c7.xAxes.push(new a7.ValueAxis()), u8 = c7.yAxes.push(new a7.ValueAxis()), g7 = { params: i4, amCharts4Index: e9, amChart: c7, xAxis: p6, yAxis: u8, series: /* @__PURE__ */ new Map(), data: null, messages: null, theme: d9, zooming: false, pointerIsOver: false };
  c7.cursor = E4(g7), D3(g7), G3(g7), R4(g7);
  const f6 = [ei(g7, i4.onRangeChange), oi(g7, i4.onCursorPositionChange), ti(g7)];
  let h6 = null, A7 = false;
  const C3 = () => {
    t(h6) || ("undefined" != typeof window && "cancelIdleCallback" in window ? window.cancelIdleCallback(h6) : clearTimeout(h6), h6 = null);
  };
  return { ...g7, destroy() {
    A7 = true, C3(), r3(f6).remove(), c7.dispose();
  }, update(i5) {
    if (i5.data === g7.data && i5.messages === g7.messages)
      return;
    if (C3(), A7)
      return;
    const e10 = () => {
      A7 || (h6 = null, V(g7, i5));
    };
    h6 = "undefined" != typeof window && "requestIdleCallback" in window ? window.requestIdleCallback(e10, { timeout: I2 }) : setTimeout(e10, I2);
  }, zoomOut() {
    A7 || (g7.yAxis.zoom({ start: 0, end: 1 }, false, true), g7.xAxis.zoom({ start: 0, end: 1 }, false, true));
  } };
}
function E4(i4) {
  const e9 = new i4.amCharts4Index.am4charts.XYCursor();
  return e9.trackable = true, e9.lineY.disabled = true, e9.behavior = "zoomXY", e9;
}
function D3(i4) {
  const e9 = i4.theme, t9 = i4.amChart.tooltip, { am4core: o9 } = i4.amCharts4Index;
  t9.id = "series-tooltip", t9.fitPointerToBounds = true, t9.pointerOrientation = "vertical", t9.zIndex = -1, t9.getFillFromObject = false, t9.label.fontSize = e9.seriesTooltipFontSize, t9.label.fill = o9.color(e9.seriesTooltipLabelColor), t9.label.padding(e9.seriesTooltipPaddingVertical, e9.seriesTooltipPaddingHorizontal, e9.seriesTooltipPaddingVertical, e9.seriesTooltipPaddingHorizontal), t9.background.cornerRadius = e9.tooltipBorderRadius, t9.background.stroke = null, t9.background.fill = o9.color(e9.seriesTooltipBackgroundColor), t9.background.padding(0, 0, 0, 0), t9.adapter.add("dy", () => e9.seriesTooltipSpacing * (t9.background.pointerY <= 0 ? 1 : -1)), f3(i4.params.container) && (t9.label.textAlign = "middle");
}
function G3(i4) {
  const { xAxis: e9, theme: t9 } = i4, { am4core: o9 } = i4.amCharts4Index;
  e9.numberFormatter = di(i4, "distance"), e9.strictMinMax = true, e9.cursorTooltipEnabled = false, e9.title.visible = false;
  const n14 = e9.renderer;
  n14.line.visible = false, n14.minGridDistance = t9.xAxisMinGridDistance, n14.minLabelPosition = t9.xAxisMinLabelPosition, n14.maxLabelPosition = t9.xAxisMaxLabelPosition, n14.fontWeight = t9.axisFontWeight, n14.fontSize = t9.axisFontSize, n14.baseGrid.disabled = true;
  const a7 = n14.labels.template;
  a7.fontSize = t9.axisLabelsFontSize, a7.fontWeight = t9.axisLabelsFontWeight, a7.fill = o9.color(t9.axisLabelsColor), a7.paddingTop = t9.xAxisLabelsSpacing, a7.horizontalCenter = "left", a7.paddingLeft = 0;
  const s9 = e9.tooltip;
  s9.id = "axis-tooltip", s9.background.fill = o9.color(t9.axisTooltipBackgroundColor), s9.background.stroke = null, s9.background.padding(0, 0, 0, 0), s9.label.fontSize = t9.axisTooltipFontSize, s9.label.fill = o9.color(t9.axisTooltipLabelColor), s9.label.padding(t9.axisTooltipPaddingTop, t9.axisTooltipPaddingHorizontal, t9.axisTooltipPaddingBottom, t9.axisTooltipPaddingHorizontal);
  const r12 = n14.grid.template;
  r12.strokeOpacity = 1, r12.stroke = o9.color(t9.axisGridStroke);
}
function R4(i4) {
  const { yAxis: e9, theme: t9 } = i4, { am4core: o9 } = i4.amCharts4Index;
  e9.numberFormatter = di(i4, "elevation"), e9.title.visible = false, e9.cursorTooltipEnabled = false, e9.strictMinMax = true, e9.baseValue = l7;
  const n14 = e9.renderer;
  n14.inside = true, n14.line.opacity = 0, n14.line.visible = false, n14.minGridDistance = t9.yAxisMinGridDistance, n14.minLabelPosition = t9.yAxisMinLabelPosition, n14.maxLabelPosition = t9.yAxisMaxLabelPosition, n14.fontWeight = t9.axisFontWeight, n14.fontSize = t9.axisFontSize, n14.baseGrid.disabled = true;
  const a7 = n14.labels.template;
  a7.fontSize = t9.axisLabelsFontSize, a7.fontWeight = t9.axisLabelsFontWeight, a7.fill = o9.color(t9.axisLabelsColor), a7.verticalCenter = "bottom", a7.paddingLeft = t9.yAxisLabelSpacing, a7.paddingBottom = 0;
  const s9 = n14.grid.template;
  s9.strokeOpacity = 1, s9.stroke = o9.color(t9.axisGridStroke), f3(i4.params.container) && (n14.opposite = true, a7.textAlign = "middle", a7.paddingLeft = 0, a7.paddingRight = t9.yAxisLabelSpacing);
}
function V(i4, { data: e9, messages: t9 }) {
  const { htmlContainer: o9 } = i4.amChart;
  if (!o9)
    return;
  const s9 = r(e9) && e9.refined;
  i4.amChart.cursor.disabled = !s9, o9.classList.toggle(i2.cursorEnabled, s9);
  const r12 = i4.data !== e9, l12 = o(i4.data, (i5) => i5.effectiveUnits) !== o(e9, (i5) => i5.effectiveUnits);
  i4.data = e9, i4.messages = t9, r12 && ($(i4), _2(i4)), l12 && (i4.yAxis.invalidateLabels(), i4.xAxis.invalidateLabels()), ni(i4);
}
function $(i4) {
  const { xAxis: e9, yAxis: t9 } = i4, { minX: o9, maxX: n14, minY: a7, maxY: s9 } = Z2({ data: i4.data, pixelWidth: e9.pixelWidth, pixelHeight: t9.pixelHeight });
  e9.min = o9, e9.max = n14, t9.min = a7, t9.max = s9;
}
function Z2({ data: i4, pixelWidth: e9, pixelHeight: t9 }) {
  if (t(i4))
    return U4;
  const a7 = i4.statistics, s9 = 0, r12 = o(a7, (i5) => i5.maxDistance);
  let l12 = o(a7, (i5) => i5.minElevation), d9 = o(a7, (i5) => i5.maxElevation);
  if (t(r12) || t(l12) || t(d9))
    return U4;
  const m11 = Math.max(r12 - s9, M5);
  let x8 = Math.max(d9 - l12, M5);
  const p6 = i4.effectiveUnits;
  if (i4.dynamicElevationRange) {
    const i5 = N(m11, p6.distance, p6.elevation);
    x8 = Math.max(x8, i5 / u3);
  }
  return l12 -= j8 * x8, d9 = l12 + x8 + W3 * x8, [l12, d9] = t8(l12, d9, 10), x8 = d9 - l12, i4.uniformScaling ? q3({ data: i4, bounds: { minX: s9, maxX: r12, minY: l12, maxY: d9 }, pixelWidth: e9, pixelHeight: t9, centered: true }) : { minX: s9, maxX: s9 + m11, minY: l12, maxY: l12 + x8 };
}
function q3({ data: i4, bounds: e9, pixelWidth: t9, pixelHeight: n14, centered: a7 }) {
  if (t(i4))
    return e9;
  let { minX: s9, maxX: r12, minY: l12, maxY: d9 } = e9;
  const m11 = r12 - s9, x8 = d9 - l12, p6 = i4.effectiveUnits, u8 = N(x8, p6.elevation, p6.distance) / n14 / (m11 / t9);
  return u8 >= 1 ? [s9, r12] = N3([s9, r12], u8, a7) : [l12, d9] = N3([l12, d9], 1 / u8, a7), { minX: s9, maxX: r12, minY: l12, maxY: d9 };
}
function N3([i4, e9], t9, o9) {
  const n14 = (e9 - i4) * t9;
  if (o9) {
    const t10 = (i4 + e9) / 2 - n14 / 2;
    return [t10, t10 + n14];
  }
  return [i4, i4 + n14];
}
function _2(i4) {
  const { amChart: e9, data: t9 } = i4;
  if (t(t9) || 0 === t9.lines.length)
    return void e9.series.clear();
  const a7 = /* @__PURE__ */ new Map(), s9 = new Set(e9.series.values), r12 = t9.lines.length;
  for (let o9 = 0; o9 < r12; o9++) {
    const l12 = t9.lines[o9];
    let d9 = i4.series.get(l12.id);
    d9 ? (o(d9.fill, (i5) => s9.delete(i5)), s9.delete(d9.line)) : (d9 = Q(i4, l12), o(d9.fill, (i5) => e9.series.push(i5)), e9.series.push(d9.line)), a7.set(d9.id, d9);
    const c7 = r12 - o9 - 1;
    o(d9.fill, (i5) => i5.zIndex = c7), d9.line.zIndex = r12 + c7, J(i4, d9, l12);
  }
  i4.series = a7;
  for (const o9 of s9)
    e9.series.removeValue(o9);
}
function J(i4, { line: e9, fill: t9 }, o9) {
  const { theme: a7 } = i4, { am4core: r12 } = i4.amCharts4Index, { r: l12, g: d9, b: c7, a: m11 } = o9.color, x8 = r12.color({ r: l12, g: d9, b: c7, a: m11 }), p6 = c(o9.samples, []), u8 = p6.length > 0;
  e9.stroke = x8, e9.visible = u8, o(t9, (i5) => {
    i5.visible = u8, i5.fill = x8.lighten(a7.seriesFillLighten);
  });
  const g7 = p6.length, f6 = e9.data;
  if (f6.length === g7) {
    for (let i5 = 0; i5 < g7; ++i5)
      K(f6[i5], p6[i5]);
    e9.invalidateRawData(), o(t9, (i5) => i5.invalidateRawData());
  } else
    e9.data = p6, o(t9, (i5) => i5.data = p6);
}
function K(i4, e9) {
  i4.x = e9.x, i4.y = e9.y, i4.z = e9.z, i4.distance = e9.distance, i4.elevation = e9.elevation;
}
function Q(i4, e9) {
  const { id: t9 } = e9, o9 = ii(i4, `${k4}-${t9}`);
  o9.strokeWidth = e9.chartStrokeWidth, o9.dy = e9.chartStrokeOffsetY;
  let n14 = null;
  return e9.chartFillEnabled && (n14 = ii(i4, `${P3}-${t9}`), n14.fillOpacity = 1), { id: t9, line: o9, fill: n14 };
}
function ii(i4, e9) {
  const t9 = new i4.amCharts4Index.am4charts.LineSeries();
  t9.id = e9, t9.showOnInit = false, t9.simplifiedProcessing = true, t9.minDistance = X, t9.excludeFromTotal = true, t9.clickable = false, t9.contextMenuDisabled = true, t9.cursorHoverEnabled = false, t9.cursorTooltipEnabled = false, t9.connect = false, t9.fill = null, t9.stroke = null;
  const o9 = "distance";
  t9.dataFields.valueX = o9;
  const n14 = "elevation";
  return t9.dataFields.valueY = n14, t9;
}
function ei(i4, t9) {
  const { amChart: n14, xAxis: a7, yAxis: s9 } = i4;
  let r12 = false;
  const l12 = () => {
    const { data: e9 } = i4;
    if (!r12 || t(e9) || !e9.uniformScaling)
      return;
    r12 = false;
    const { minX: t10, maxX: l13, minY: d10, maxY: c8 } = q3({ data: i4.data, bounds: { minX: a7.minZoomed, maxX: a7.maxZoomed, minY: s9.minZoomed, maxY: s9.maxZoomed }, pixelWidth: a7.pixelWidth, pixelHeight: s9.pixelHeight, centered: true });
    a7.zoomToValues(t10, l13, true), s9.zoomToValues(d10, c8, true), n14.validate(), ni(i4);
  }, d9 = () => {
    t9(i4.xAxis.zoomFactor, i4.yAxis.zoomFactor);
  }, c7 = (e9) => {
    i4.zooming = e9, ni(i4);
  }, m11 = [n14.events.on("down", () => c7(true)), n14.events.on("up", () => c7(false)), n14.cursor.events.on("zoomended", () => {
    r12 = true;
  }), a7.events.on("startendchanged", l12), s9.events.on("startendchanged", l12), a7.events.on("rangechangeended", d9), s9.events.on("rangechangeended", d9)];
  return n2(() => {
    m11.forEach((i5) => i5.dispose());
  });
}
function ti({ xAxis: i4, yAxis: t9 }) {
  const o9 = (i5) => () => {
    i5.renderer.grid.each((i6) => {
      i6.visible = "none" !== i6.dataItem.label.dom.getAttribute("display");
    });
  }, n14 = [i4.events.on("rangechangeended", o9(i4)), i4.events.on("validated", o9(i4)), t9.events.on("rangechangeended", o9(t9)), t9.events.on("validated", o9(t9))];
  return n2(() => {
    n14.forEach((i5) => i5.dispose());
  });
}
function oi(i4, t9) {
  const { amChart: o9, xAxis: n14, yAxis: a7 } = i4, { cursor: s9, events: r12 } = o9, l12 = (e9) => {
    i4.pointerIsOver = e9, ni(i4);
  }, d9 = () => {
    l12(false), t9(null, null);
  }, c7 = [s9.events.on("cursorpositionchanged", () => {
    if (!i4.pointerIsOver)
      return;
    ni(i4);
    const e9 = n14.toAxisPosition(s9.xPosition), o10 = a7.toAxisPosition(s9.yPosition);
    t9(e9, o10);
  }), r12.on("over", () => l12(true)), r12.on("out", d9), r12.on("blur", d9)];
  return n2(() => {
    c7.forEach((i5) => i5.dispose());
  });
}
function ni(i4) {
  const { amChart: e9, xAxis: t9, data: n14, theme: s9, zooming: r12, pointerIsOver: l12 } = i4;
  if (i4.amChart.tooltip.hide(), i4.xAxis.hideTooltip(), !l12)
    return;
  if (r12)
    return;
  if (t(n14) || !n14.refined)
    return;
  const d9 = ai(i4);
  if (r(d9)) {
    const { cursor: o9, tooltip: n15 } = e9;
    o9.show(0), o9.validate(), n15.text = d9.text, n15.show(0), n15.validate();
    const a7 = d9.y - n15.contentHeight - s9.seriesTooltipSpacing;
    n15.pointerOrientation = a7 < w7 ? "up" : "down", n15.pointTo(d9, true), n15.validate();
    const r13 = t9.tooltip;
    r13.text = li(i4), r13.show(0), r13.validate();
  }
}
function ai(i4) {
  const { amChart: e9, yAxis: t9, data: a7 } = i4;
  if (t(a7))
    return null;
  const s9 = a7.lines.map((e10) => ({ line: e10, y: o(ci(i4, e10), (i5) => i5.elevation) })).sort(si), r12 = s9.length ? s9[0].y : null;
  if (t(r12))
    return null;
  const l12 = e9.cursor, d9 = t9.measuredHeight, c7 = d9 + e9.pixelPaddingTop;
  return { text: s9.map(({ y: e10, line: t10 }) => ri(i4, t10, e10)).join("\n"), x: l12.point.x + l12.parent.pixelX + e9.pixelPaddingLeft, y: c7 - t9.valueToPosition(r12) * d9 };
}
function si({ y: i4 }, { y: e9 }) {
  return t(i4) ? 1 : t(e9) ? -1 : e9 - i4;
}
function ri(i4, e9, t9) {
  const { data: n14, messages: s9 } = i4;
  if (t(n14) || t(s9))
    return "";
  const r12 = s3(s9.chartTooltip, { name: r11(e9, s9), elevation: r(t9) ? l6(s9, t9, n14.effectiveUnits.elevation, p3) : m8 });
  return `[${e9.color.toHex()}]●[/] ${r12}`;
}
function li(i4) {
  const { data: e9, messages: t9 } = i4;
  if (t(e9) || t(t9))
    return "";
  const n14 = e9.lines[0], s9 = n14 ? ci(i4, n14) : null;
  return r(s9) ? l6(t9, s9.distance, e9.effectiveUnits.distance, p3) : "-";
}
function di(i4, e9) {
  const t9 = i4.xAxis.numberFormatter.clone();
  return t9.format = (t10, n14, a7) => {
    const { messages: s9, data: r12 } = i4;
    if (t(s9) || t(r12) || "string" == typeof t10)
      return "";
    return `${m4(t10, { maximumFractionDigits: a7 })} ${g4(s9, r12.effectiveUnits[e9], "abbr")}`;
  }, t9;
}
function ci({ amChart: e9, xAxis: t9 }, o9) {
  const n14 = c(o9.samples, []);
  if (0 === n14.length)
    return null;
  const a7 = t9.toAxisPosition(e9.cursor.xPosition), r12 = t9.positionToValue(a7);
  return w(n14, r12, (i4) => i4.distance);
}

// node_modules/@arcgis/core/widgets/ElevationProfile.js
var E5;
!function(t9) {
  t9.Sketch = "sketch", t9.SketchCancel = "sketch-cancel", t9.SketchDone = "sketch-done", t9.Select = "select", t9.SelectCancel = "select-cancel";
}(E5 || (E5 = {}));
var j9 = [{ type: E5.Select }, { type: E5.Sketch }];
var z5 = { [n8.None]: null, [n8.NoValidInput]: "noProfile", [n8.NoVisibleProfiles]: "noProfile", [n8.RefinedButNoChartData]: "noProfile", [n8.TooComplex]: "tooComplex", [n8.UnknownError]: "unknown", [n8.InvalidGeometry]: "invalidGeometry", [n8.InvalidElevationInfo]: "invalidElevationInfo" };
var I3 = class extends O2 {
  constructor(t9, e9) {
    super(t9, e9), this.viewModel = null, this.view = null, this.input = null, this.profiles = null, this.unitOptions = [], this.unit = "metric", this.geodesicDistanceThreshold = 1e5, this.visibleElements = new i3(), this.iconClass = t7.widgetIcon, this.label = void 0, this.messages = null, this.messagesCommon = null, this.messagesUnits = null, this._chartContainer = null, this._chart = null, this._chartInitTask = null, this._chartIsRefined = false, this._width = 0, this._zoomOutButtonVisible = false, this._getChartUpdateParamsMemoized = t6((t10, e10, i4, s9) => ({ chart: t10, data: e10, stationary: i4, messages: s9 })), this._getDetailsPropsMemoized = t6((t10, e10) => ({ effectiveUnits: t10, profiles: e10 })), (t9 == null ? void 0 : t9.viewModel) || (this._defaultViewModel = new x7({ view: t9 == null ? void 0 : t9.view }), this.viewModel = this._defaultViewModel);
  }
  initialize() {
    this._legend = new m10(this._legendProps), this._settingsButton = new g6(this._settingsButtonProps), this.own([l4(() => this._legendProps, (t9) => this._legend.set(t9)), l4(() => this._settingsButtonProps, (t9) => this._settingsButton.set(t9))]);
  }
  postInitialize() {
    this.own([l4(() => ({ container: this._chartContainer, width: this._width }), ({ container: t9, width: i4 }) => {
      this._destroyChart(), r(t9) && i4 > 0 && this._initializeChart(t9);
    }, h2), l4(() => this._chartUpdateParams, () => this._updateChart(this._chartUpdateParams), h2)]);
  }
  destroy() {
    this._destroyChart(), r(this._defaultViewModel) && this.viewModel !== this._defaultViewModel && this._defaultViewModel.destroy(), this._legend = l(this._legend), this._settingsButton = l(this._settingsButton);
  }
  get _portrait() {
    return this._width < b2;
  }
  get _chartUpdateParams() {
    const t9 = this.view;
    return this._getChartUpdateParamsMemoized(this._chart, this.viewModel.chartData, !r(t9) || t9.stationary, this._chartMessages);
  }
  get _chartMessages() {
    return { ...this.messagesUnits, ...this.messages };
  }
  get _legendProps() {
    return this._getDetailsPropsMemoized(this.viewModel.effectiveUnits, this._profilesArray);
  }
  get _profilesArray() {
    return this.profiles.toArray();
  }
  get _settingsButtonProps() {
    return { viewModel: this.viewModel, visibleElements: this.visibleElements };
  }
  render() {
    const { viewModel: t9, visible: e9 } = this;
    return n5("div", { key: this, class: this.classes({ [t7.base]: e9, [t7.esriWidget]: e9, [t7.esriWidgetDisabled]: e9 && "disabled" === t9.state, [t7.portrait]: this._portrait, [t7.refined]: 1 === t9.progress }), "aria-label": this.messages.widgetLabel, afterCreate: (t10) => {
      this.own(g2(t10, (t11) => {
        this._width = t11.contentRect.width;
      }));
    } }, e9 && this._renderContentForState());
  }
  _renderContentForState() {
    switch (this.viewModel.state) {
      case i.Ready:
        return this._renderContentForReadyState();
      case i.Selecting:
        return this._renderContentForSelectingState();
      case i.Creating:
        return this._renderContentForCreatingState();
      case i.Selected:
        return this._renderContentForSelectedState();
      case i.Created:
        return this._renderContentForCreatedState();
      case i.Disabled:
        return this._renderContentForReadyState();
    }
  }
  _renderContentForReadyState() {
    var _a;
    const { sketchButton: t9, selectButton: e9 } = this.visibleElements, i4 = this.messages;
    let s9;
    return s9 = t9 && e9 ? i4.readyPrompt : t9 ? i4.readyPromptCreateOnly : e9 ? i4.readyPromptSelectOnly : (_a = i4.errors) == null ? void 0 : _a.noProfile, this._renderContent({ prompt: s9, chart: false, actions: j9 });
  }
  _renderContentForSelectingState() {
    const t9 = this.view;
    if (t(t9))
      return null;
    const e9 = this.messages[`selectingPrompt-${t9.type}`];
    return this._renderContent({ prompt: e9, chart: false, actions: [{ type: E5.SelectCancel }] });
  }
  _renderContentForCreatingState() {
    const { view: t9, viewModel: e9 } = this;
    if (t(t9))
      return null;
    const i4 = e9.hasVertices ? [{ type: E5.SketchCancel }, { type: E5.SketchDone, disabled: !e9.tool.interaction.canStopCreating }] : [{ type: E5.Select }, { type: E5.Sketch, disabled: true }];
    if (e9.errorState === n8.NoValidInput) {
      const e10 = this.messages[`creatingPrompt-${t9.type}`];
      return this._renderContent({ chart: false, actions: i4, prompt: e10 });
    }
    const o9 = this._getErrorMessage();
    return o9 ? this._renderContent({ chart: false, actions: i4, prompt: o9 }) : this._renderContent({ chart: true, actions: i4 });
  }
  _renderContentForSelectedState() {
    const t9 = this._getErrorMessage();
    return t9 ? this._renderContent({ chart: false, actions: j9, prompt: t9 }) : this._renderContent({ chart: true, actions: j9 });
  }
  _renderContentForCreatedState() {
    const t9 = this._getErrorMessage();
    return t9 ? this._renderContent({ chart: false, actions: j9, prompt: t9 }) : this._renderContent({ chart: true, actions: j9 });
  }
  _getErrorMessage() {
    var _a, _b;
    const t9 = z5[this.viewModel.errorState];
    return (_b = (_a = this.messages) == null ? void 0 : _a.errors) == null ? void 0 : _b[t9];
  }
  _renderContent(t9) {
    const i4 = r(t9.prompt) ? this._renderPrompt(t9.prompt) : t9.chart && this._renderChart(), s9 = r(this.viewModel.input);
    return [n5("header", { key: "header", class: t7.header }, this._zoomOutButtonVisible && this._renderZoomOutButton(), this.visibleElements.clearButton && s9 && this._renderClearButton(), this.visibleElements.settingsButton && this._settingsButton.render()), n5("div", { class: t7.mainContainer }, ...i4), this.visibleElements.legend && this._legend.render(), this._renderActions(t9)];
  }
  _renderZoomOutButton() {
    return n5("button", { key: "zoom-out", class: t7.zoomOutButton, bind: this, onclick: this._onZoomOutButtonClick, title: this.messages.zoomOut, type: "button" });
  }
  _onZoomOutButtonClick() {
    o(this._chart, (t9) => t9.zoomOut());
  }
  _renderClearButton() {
    return n5("button", { key: "clear-profile", class: t7.clearButton, bind: this, onclick: this._onClearButtonClick, title: this.messages.clearProfile, type: "button" });
  }
  _onClearButtonClick() {
    this.viewModel.clear();
  }
  _renderPrompt(t9) {
    return [n5("div", { key: "prompt-container", bind: this, class: t7.promptContainer }, n5("p", null, t9))];
  }
  _renderChart() {
    if (!this.visibleElements.chart)
      return [n5("div", { key: "empty-chart-container", class: t7.chartContainer })];
    const t9 = this._chartIsRefined || this._canRenderChart();
    if (!t9)
      return [this._renderSpinner({ size: "large" }), n5("div", { key: "chart-container-empty", class: t7.chartContainer })];
    const { chartData: i4, progress: s9 } = this.viewModel;
    return [r(i4) && s9 > 0 && s9 < 1 && this._renderSpinner({ size: t9 ? "small" : "large" }), n5("div", { key: "chart-container", bind: this, class: t7.chartContainer, afterCreate: this._onChartContainerAfterCreate, afterRemoved: this._onChartContainerRemoved })];
  }
  _renderSpinner(t9) {
    return n5("div", { key: "spinner", class: this.classes(t7.chartSpinner, { [t7.chartSpinnerSmall]: "small" === t9.size }), afterCreate: this._onSpinnerAfterCreate, exitAnimation: this._onSpinnerExit });
  }
  _onSpinnerAfterCreate(t9) {
    requestAnimationFrame(() => t9.classList.add(t7.chartSpinnerVisible));
  }
  _onSpinnerExit(t9, e9) {
    t9.classList.remove(t7.chartSpinnerVisible), setTimeout(e9, 200);
  }
  _canRenderChart() {
    const t9 = this.viewModel.chartData;
    if (t(t9))
      return false;
    if (!this.viewModel.inputIsSketched)
      return t9.refined;
    let i4 = 0;
    for (const { samples: s9 } of t9.lines)
      i4 += r(s9) ? s9.length : 0;
    return t9.refined || i4 <= f4;
  }
  _renderActions({ actions: t9 }) {
    const e9 = t9.map((t10) => {
      switch (t10.type) {
        case E5.Sketch:
          return this.visibleElements.sketchButton && this._renderAction({ action: t10, onClick: this._onSketchButtonClick, className: t7.sketchButton, label: this.messages.sketchButtonLabel });
        case E5.SketchCancel:
          return this.visibleElements.sketchButton && this._renderAction({ action: t10, onClick: this._onCancelButtonClick, className: t7.sketchCancelButton, label: this.messagesCommon.cancel });
        case E5.SketchDone:
          return this.visibleElements.sketchButton && this._renderAction({ action: t10, onClick: this._onDoneButtonClick, className: t7.sketchDoneButton, label: this.messagesCommon.done });
        case E5.Select:
          return this.visibleElements.selectButton && this._renderAction({ action: t10, onClick: this._onSelectButtonClick, className: t7.selectButton, label: this.messages.selectButtonLabel });
        case E5.SelectCancel:
          return this.visibleElements.selectButton && this._renderAction({ action: t10, onClick: this._onCancelButtonClick, className: t7.selectCancelButton, label: this.messagesCommon.cancel });
      }
    }).filter(Boolean);
    return e9.length ? n5("footer", { key: "footer", class: t7.footer }, ...e9) : null;
  }
  _renderAction({ action: t9, onClick: e9, className: i4, label: s9 }) {
    return n5("button", { key: `action-${t9.type}`, class: this.classes(t7.actionButton, i4, { [t7.buttonDisabled]: t9.disabled }), bind: this, disabled: t9.disabled, onclick: e9, type: "button" }, s9);
  }
  _onSketchButtonClick() {
    this.viewModel.start({ mode: "sketch" });
  }
  _onSelectButtonClick() {
    this.viewModel.start({ mode: "select" });
  }
  _onCancelButtonClick() {
    this.viewModel.cancel();
  }
  _onDoneButtonClick() {
    this.viewModel.stop();
  }
  _updateChart(t9) {
    const { data: i4, chart: o9, messages: r12, stationary: n14 } = t9;
    !t(o9) && !t(r12) && n14 && this._canRenderChart() && (o9.update(t9), this._chartIsRefined = r(i4) && i4.refined);
  }
  _onChartContainerAfterCreate(t9) {
    this._chartContainer = t9;
  }
  _onChartContainerRemoved() {
    this._chartContainer = null;
  }
  _initializeChart(t9) {
    h(this._chartInitTask), this._chartInitTask = O(async (e9) => {
      const s9 = await B({ container: t9, abortOptions: { signal: e9 }, onRangeChange: (t10, e10) => {
        this._zoomOutButtonVisible = 1 !== t10 || 1 !== e10;
      }, onCursorPositionChange: (t10) => {
        this.viewModel.hoveredChartPosition = t10;
      } });
      if (e9.aborted)
        throw l(s9), m();
      this._chart = s9, this._updateChart(this._chartUpdateParams);
    });
  }
  _destroyChart() {
    this._chartInitTask = h(this._chartInitTask), this._chart = l(this._chart), this._chartIsRefined = false;
  }
};
e([d2({ type: x7 })], I3.prototype, "viewModel", void 0), e([o5("viewModel.view")], I3.prototype, "view", void 0), e([o5("viewModel.input")], I3.prototype, "input", void 0), e([o5("viewModel.profiles")], I3.prototype, "profiles", void 0), e([o5("viewModel.unitOptions")], I3.prototype, "unitOptions", void 0), e([o5("viewModel.unit")], I3.prototype, "unit", void 0), e([o5("viewModel.geodesicDistanceThreshold")], I3.prototype, "geodesicDistanceThreshold", void 0), e([d2({ type: i3, nonNullable: true })], I3.prototype, "visibleElements", void 0), e([d2()], I3.prototype, "iconClass", void 0), e([o5("messages.widgetLabel", { overridable: true })], I3.prototype, "label", void 0), e([o5("viewModel.visible")], I3.prototype, "visible", void 0), e([d2(), e3("esri/widgets/ElevationProfile/t9n/ElevationProfile")], I3.prototype, "messages", void 0), e([d2(), e3("esri/t9n/common")], I3.prototype, "messagesCommon", void 0), e([d2(), e3("esri/core/t9n/Units")], I3.prototype, "messagesUnits", void 0), e([d2()], I3.prototype, "_chartContainer", void 0), e([d2()], I3.prototype, "_chart", void 0), e([d2()], I3.prototype, "_chartInitTask", void 0), e([d2()], I3.prototype, "_chartIsRefined", void 0), e([d2()], I3.prototype, "_settingsButton", void 0), e([d2()], I3.prototype, "_legend", void 0), e([d2()], I3.prototype, "_width", void 0), e([d2()], I3.prototype, "_portrait", null), e([d2()], I3.prototype, "_zoomOutButtonVisible", void 0), e([d2()], I3.prototype, "_chartUpdateParams", null), e([d2()], I3.prototype, "_chartMessages", null), e([d2()], I3.prototype, "_legendProps", null), e([d2()], I3.prototype, "_profilesArray", null), e([d2()], I3.prototype, "_settingsButtonProps", null), I3 = e([n3("esri.widgets.ElevationProfile")], I3);
var U5 = I3;
export {
  U5 as default
};
//# sourceMappingURL=@arcgis_core_widgets_ElevationProfile__js.js.map
