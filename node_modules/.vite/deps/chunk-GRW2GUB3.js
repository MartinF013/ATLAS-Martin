import {
  j as j2
} from "./chunk-ZZCCRN4U.js";
import {
  e as e2,
  r,
  t
} from "./chunk-25QHXOZB.js";
import {
  i
} from "./chunk-W66LN57L.js";
import {
  c
} from "./chunk-K2FQEYBG.js";
import {
  h,
  l
} from "./chunk-T7BEWVV3.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  A,
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";

// node_modules/@arcgis/core/views/overlay/ViewOverlay.js
var c2 = class extends y {
  constructor() {
    super(...arguments), this.items = new j(), this._watchUpdatingTracking = new c(), this._callbacks = /* @__PURE__ */ new Map(), this._projector = i(), this._hiddenProjector = i();
  }
  get needsRender() {
    return this.items.length > 0;
  }
  initialize() {
    const t2 = document.createElement("div");
    t2.className = "esri-overlay-surface", this._set("surface", t2), this._hiddenSurface = document.createElement("div"), this._hiddenSurface.setAttribute("style", "visibility: hidden;"), t2.appendChild(this._hiddenSurface), this._watchUpdatingTracking.addOnCollectionChange(() => this.items, (t3) => {
      for (const e3 of t3.added) {
        const t4 = () => e3.render();
        this._callbacks.set(e3, t4), this._projector.append(this.surface, t4);
      }
      for (const e3 of t3.removed) {
        const t4 = this._projector.detach(this._callbacks.get(e3));
        this.surface.removeChild(t4.domNode), this._callbacks.delete(e3);
      }
    });
  }
  addItem(t2) {
    this.items.add(t2);
  }
  removeItem(t2) {
    this.items.remove(t2);
  }
  destroy() {
    this.items.removeAll(), this._callbacks.forEach((t2) => this._projector.detach(t2)), this._callbacks = null, this._projector = null, this._watchUpdatingTracking.destroy();
  }
  render() {
    this._projector.renderNow();
  }
  computeBoundingRect(t2) {
    const e3 = this._hiddenSurface, r2 = this._hiddenProjector;
    let o = null;
    const s = () => (o = t2.render(), o);
    r2.append(e3, s), r2.renderNow();
    const i2 = { left: 0, top: 0, right: 0, bottom: 0 };
    if (o && o.domNode) {
      const t3 = o.domNode.getBoundingClientRect();
      i2.left = t3.left, i2.top = t3.top, i2.right = t3.right, i2.bottom = t3.bottom;
    }
    for (r2.detach(s); e3.firstChild; )
      e3.removeChild(e3.firstChild);
    return i2;
  }
  overlaps(t2, e3) {
    const r2 = this.computeBoundingRect(t2), o = this.computeBoundingRect(e3);
    return Math.max(r2.left, o.left) <= Math.min(r2.right, o.right) && Math.max(r2.top, o.top) <= Math.min(r2.bottom, o.bottom);
  }
  get hasVisibleItems() {
    return this.items.some((t2) => t2.visible);
  }
  renderCanvas(t2) {
    if (!this.items.some((t3) => t3.visible))
      return;
    const e3 = t2.getContext("2d");
    e3.save(), e3.font = `10px ${getComputedStyle(this.surface).fontFamily}`, this.items.forEach((t3) => {
      e3.save(), t3.renderCanvas(e3), e3.restore();
    }), e3.restore();
  }
};
e([d({ readOnly: true })], c2.prototype, "surface", void 0), e([d({ readOnly: true })], c2.prototype, "items", void 0), e([d({ readOnly: true })], c2.prototype, "needsRender", null), e([d({ readOnly: true })], c2.prototype, "_watchUpdatingTracking", void 0), e([d({ readOnly: true, aliasOf: "_watchUpdatingTracking.updating" })], c2.prototype, "updating", void 0), c2 = e([n("esri.views.overlay.ViewOverlay")], c2);
var n2 = c2;

// node_modules/@arcgis/core/views/DOMContainer.js
var l2 = [0, 0];
function p(e3) {
  const t2 = (e3.ownerDocument || window.document).defaultView, s = e3.getBoundingClientRect();
  return l2[0] = s.left + t2.pageXOffset, l2[1] = s.top + t2.pageYOffset, l2;
}
function c3(e3) {
  e3 && (t(e3), e3.parentNode && e3.parentNode.removeChild(e3));
}
function m(e3) {
  const t2 = document.createElement("div");
  return e3.appendChild(t2), t2;
}
var f = 16;
var y2 = 750;
var v = 512;
var _ = 2;
var g = (i2) => {
  let l3 = class extends i2 {
    constructor(...e3) {
      super(...e3), this._freqInfo = { freq: f, time: y2 }, this._overlayRenderTaskHandle = null, this.height = 0, this.position = null, this.resizing = false, this.root = null, this.surface = null, this.suspended = true, this.ui = null, this.userContent = null, this.width = 0, this.widthBreakpoint = null, this.handles.add([l(() => this.cursor, (e4) => {
        const { surface: t2 } = this;
        t2 && t2.setAttribute("data-cursor", e4);
      }), l(() => this.interacting, (e4) => {
        const { surface: t2 } = this;
        t2 && t2.setAttribute("data-interacting", e4.toString());
      })]);
    }
    initialize() {
      this.handles.add(l(() => this.ui, (e3, t2) => this._handleUIChange(e3, t2))), this._wireUI(this.ui), this.handles.add([this.on("focus", () => this.notifyChange("focused")), this.on("blur", () => this.notifyChange("focused"))]);
    }
    destroy() {
      this.destroyed || (this.ui && (this.ui.destroy(), this.ui = null), this.popup && !this.popup.destroyed && this.popup.destroy(), this.container = null);
    }
    set container(e3) {
      const s = this._get("container");
      if (s === e3)
        return;
      const i3 = "dom-size";
      if (this.handles.remove(i3), this._stopMeasuring(), s && (s.classList.remove("esri-view"), this._overlayRenderTaskHandle && (this._overlayRenderTaskHandle.remove(), this._overlayRenderTaskHandle = null), this.overlay.destroy(), this._set("overlay", null), c3(this.root), this._set("root", null), r(this.userContent, s), c3(this.userContent), this._set("userContent", null)), e3) {
        e3.classList.add("esri-view");
        const s2 = document.createElement("div");
        s2.className = "esri-view-user-storage", r(e3, s2), e3.appendChild(s2), this._set("userContent", s2);
        const h2 = document.createElement("div");
        h2.className = "esri-view-root", e3.insertBefore(h2, e3.firstChild), this._set("root", h2);
        const a = document.createElement("div");
        a.className = "esri-view-surface", a.setAttribute("role", "application"), a.tabIndex = 0, h2.appendChild(a), this._set("surface", a);
        const u = new n2();
        h2.appendChild(u.surface), this._set("overlay", u), l(() => u.needsRender, (e4) => {
          e4 && !this._overlayRenderTaskHandle ? this._overlayRenderTaskHandle = A({ render: () => {
            this.overlay.render();
          } }) : this._overlayRenderTaskHandle && (this._overlayRenderTaskHandle.remove(), this._overlayRenderTaskHandle = null);
        }), this.forceDOMReadyCycle(), this.handles.add(l(() => this.size, (e4) => {
          const [t2, s3] = e4, i4 = "esri-view-surface--inset-outline";
          t2 >= document.body.clientWidth || s3 >= document.body.clientHeight ? a.classList.add(i4) : a.classList.remove(i4);
        }, h), i3), this._set("container", e3), this._startMeasuring();
      } else
        this._set("width", 0), this._set("height", 0), this._set("position", null), this._set("suspended", true), this._set("surface", null), this._set("container", null);
    }
    get focused() {
      const e3 = document.activeElement === this.surface;
      return document.hasFocus() && e3;
    }
    get popup() {
      return this._get("popup") || new j2({ view: this });
    }
    set popup(e3) {
      const t2 = this._get("popup");
      t2 && t2 !== e3 && t2.destroy(), this._set("popup", e3);
    }
    get size() {
      return [this.width, this.height];
    }
    blur() {
      this.surface && this.surface.blur();
    }
    focus() {
      this.surface && this.surface.focus();
    }
    pageToContainer(e3, t2, s) {
      const i3 = this.position;
      return e3 -= i3[0], t2 -= i3[1], s ? (s[0] = e3, s[1] = t2) : s = [e3, t2], s;
    }
    containerToPage(e3, t2, s) {
      const i3 = this.position;
      return e3 += i3[0], t2 += i3[1], s ? (s[0] = e3, s[1] = t2) : s = [e3, t2], s;
    }
    _handleUIChange(e3, t2) {
      t2 && (this.handles.remove("ui"), t2.destroy()), e3 && this._wireUI(e3), this._set("ui", e3);
    }
    _wireUI(e3) {
      this.handles.remove("ui"), e3 && (e3.view = this, this.handles.add([l(() => this.root, (t2) => {
        e3.container = t2 ? m(t2) : null;
      }, h), l(() => this.popup, (t2, s) => {
        const i3 = "popup", o = "manual";
        s && e3.remove(s, i3), t2 && (t2.view = e3.view, e3.add(t2, { key: i3, position: o }));
      }, h)], "ui"));
    }
    _stopMeasuring() {
      this.handles.remove("measuring"), this._get("resizing") && this._set("resizing", false);
    }
    _startMeasuring() {
      const e3 = this._freqInfo;
      e3.freq = f, e3.time = y2, this.handles.add([(() => {
        const t2 = () => {
          e3.freq = f, e3.time = y2;
        };
        return window.addEventListener("resize", t2), { remove() {
          window.removeEventListener("resize", t2);
        } };
      })(), A({ prepare: (e4) => {
        const t2 = this._measure(), s = this._freqInfo;
        if (s.time += e4.deltaTime, t2 && (s.freq = f, this._get("resizing") || this._set("resizing", true)), s.time < s.freq)
          return;
        s.time = 0;
        const i3 = this._position();
        s.freq = i3 || t2 ? f : Math.min(y2, s.freq * _), !t2 && s.freq >= v && this._get("resizing") && this._set("resizing", false);
      } })], "measuring"), this._measure(), this._position();
    }
    _measure() {
      const e3 = this.container, t2 = e3 ? e3.clientWidth : 0, s = e3 ? e3.clientHeight : 0;
      if (0 === t2 || 0 === s)
        return this.suspended || this._set("suspended", true), false;
      const i3 = this.width, o = this.height;
      return t2 === i3 && s === o ? (this.suspended && this._set("suspended", false), false) : (this._set("width", t2), this._set("height", s), this.suspended && this._set("suspended", false), this.emit("resize", { oldWidth: i3, oldHeight: o, width: t2, height: s }), true);
    }
    _position() {
      const e3 = this.container, t2 = this.position, s = p(e3);
      return (!t2 || s[0] !== t2[0] || s[1] !== t2[1]) && (this._set("position", [s[0], s[1]]), true);
    }
    forceDOMReadyCycle() {
    }
  };
  return e([d({ value: null, cast: (e3) => e2(e3) })], l3.prototype, "container", null), e([d({ readOnly: true })], l3.prototype, "focused", null), e([d({ readOnly: true })], l3.prototype, "height", void 0), e([d({ type: j2 })], l3.prototype, "popup", null), e([d({ type: n2 })], l3.prototype, "overlay", void 0), e([d({ readOnly: true })], l3.prototype, "position", void 0), e([d({ readOnly: true })], l3.prototype, "resizing", void 0), e([d({ readOnly: true })], l3.prototype, "root", void 0), e([d({ value: null, readOnly: true })], l3.prototype, "size", null), e([d({ readOnly: true })], l3.prototype, "surface", void 0), e([d({ readOnly: true })], l3.prototype, "suspended", void 0), e([d()], l3.prototype, "ui", void 0), e([d({ readOnly: true })], l3.prototype, "userContent", void 0), e([d({ readOnly: true })], l3.prototype, "width", void 0), e([d()], l3.prototype, "widthBreakpoint", void 0), l3 = e([n("esri.views.DOMContainer")], l3), l3;
};
function w(e3) {
  return e3 && "focus" in e3;
}

export {
  g,
  w
};
//# sourceMappingURL=chunk-GRW2GUB3.js.map
