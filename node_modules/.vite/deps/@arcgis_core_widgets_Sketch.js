import {
  pe
} from "./chunk-QWXV2ME4.js";
import "./chunk-2NTPDKQY.js";
import "./chunk-KXA3AZ4N.js";
import {
  l as l3,
  p
} from "./chunk-D7PQAHH6.js";
import "./chunk-A2XF5TZW.js";
import "./chunk-73VW7LOZ.js";
import "./chunk-EMETVH63.js";
import "./chunk-V56SVRSV.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-X64NQ2GK.js";
import "./chunk-NVOCHKIH.js";
import "./chunk-DGELARKE.js";
import "./chunk-WN3KE5M2.js";
import {
  V,
  l as l4,
  u as u2,
  v
} from "./chunk-NJ44JOOO.js";
import {
  c,
  r as r3
} from "./chunk-NSEAWM6P.js";
import "./chunk-XKY65LLM.js";
import "./chunk-ILEVWNLM.js";
import "./chunk-3HMF3PNP.js";
import "./chunk-N5C77AAH.js";
import "./chunk-DSCM4HDL.js";
import "./chunk-UTJPTN6P.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-GRW2GUB3.js";
import "./chunk-RBVTRJPJ.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZZCCRN4U.js";
import "./chunk-TWQ374WD.js";
import "./chunk-GT2OBOXC.js";
import "./chunk-Z3S5X75I.js";
import "./chunk-YK4ZKK2Q.js";
import "./chunk-NMRWU44S.js";
import "./chunk-LBBA3SFR.js";
import "./chunk-2KZBVPWA.js";
import "./chunk-CXIMLSDF.js";
import "./chunk-ZDSMRGKC.js";
import "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RRFFPL7N.js";
import "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import "./chunk-V7M26XZ7.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-XZTXACPW.js";
import "./chunk-EHYYP2L2.js";
import "./chunk-ZUEYZA7M.js";
import "./chunk-74GUBHRJ.js";
import {
  t as t2
} from "./chunk-E447OCKN.js";
import "./chunk-LPU5TMA4.js";
import {
  O,
  e2 as e4
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n3
} from "./chunk-UHJVTABQ.js";
import {
  f as f2
} from "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-22YODLVL.js";
import "./chunk-TB42IUV7.js";
import "./chunk-ZWMYDR2G.js";
import "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-6FKG7JUE.js";
import "./chunk-PZWU5EHT.js";
import {
  h as h2
} from "./chunk-BS7TS6UC.js";
import "./chunk-37ZVELW7.js";
import "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import {
  s as s3
} from "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-4XBERLPX.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import {
  a as a2
} from "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  f,
  h,
  l as l2
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-6J6RPVFW.js";
import "./chunk-DYETG5YB.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import {
  y as y2
} from "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import {
  S,
  m
} from "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  n as n2
} from "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import {
  s as s2
} from "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  e3,
  n8 as n,
  r as r2,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  a2 as a,
  e as e2,
  l,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/support/Selector2D/selectorUtils.js
async function e5() {
  return import("./geometryEngineJSON-Y4CNF4IY.js");
}
async function n4() {
  return e5().then(({ contains: e6, intersects: n7, overlaps: t5, simplify: r4 }) => ({ contains: e6, intersects: n7, overlaps: t5, simplify: r4 }));
}
async function t3(e6) {
  const { selector: t5, candidates: r4, currentSelection: s5, options: o3, view: i } = e6;
  if (!(r4 && r4.length && s5 && i))
    return { added: [], removed: [] };
  const { overlaps: c3, intersects: a5, contains: d4 } = o3, { spatialReference: l6 } = i;
  if (!t5) {
    return { added: [], removed: s5.removeAll() };
  }
  const p4 = t5, u6 = await n4(), m4 = [], v3 = [];
  return r4.forEach((e7) => {
    const n7 = e7.geometry, t6 = c3 && !!u6.overlaps(l6, p4, n7), r5 = a5 && !!u6.intersects(l6, p4, n7), o4 = d4 && !!u6.contains(l6, p4, n7), i2 = s5.includes(e7);
    t6 || r5 || o4 ? !i2 && m4.push(e7) : i2 && v3.push(e7);
  }), s5.removeMany(v3), s5.addMany(m4), { added: m4, removed: v3 };
}

// node_modules/@arcgis/core/widgets/support/Selector2D/SelectionOperation2D.js
var d2 = class extends n2.EventedAccessor {
  constructor({ candidates: e6, options: o3, view: i }) {
    super(), this._activeOptions = null, this._dashedFillSymbol = new S({ color: [0, 0, 0, 0], outline: { style: "dash", color: [12, 207, 255], width: 2 } }), this._dashedLineSymbol = new m({ style: "dash", color: [12, 207, 255], width: 2 }), this._defaultOptions = { createTool: "rectangle", createOptions: null, selectionOptions: { overlaps: true, intersects: true, contains: false } }, this._completed = false, this._handles = new u(), this._sketchViewModel = new pe(), this._sketchGraphicsLayer = new h2({ listMode: "hide", internal: true }), this._transparentPointSymbol = new y2({ color: [0, 0, 0, 0], outline: { style: "none", width: 0 } }), this.candidates = null, this.geometry = null, this.options = null, this.selection = new j(), this.view = null, this.candidates = e6, this.options = o3, this.view = i;
    const { _dashedFillSymbol: l6, _dashedLineSymbol: c3, _sketchViewModel: d4, _sketchGraphicsLayer: m4, _transparentPointSymbol: y4 } = this;
    d4.set({ layer: m4, view: this.view, activePointSymbol: y4, activeLineSymbol: c3, activeVertexSymbol: y4, activeFillSymbol: l6, pointSymbol: y4, polygonSymbol: l6, polylineSymbol: c3, vertexSymbol: y4 }), this._handles.add([d4.on("create", (e7) => this._onSketchEvent(e7)), d4.on(["undo", "redo"], (e7) => this._onSketchEvent(e7))]);
  }
  initialize() {
    this._load();
  }
  destroy() {
    this._handles.destroy(), this._handles = null;
  }
  get state() {
    const { _completed: e6, _sketchViewModel: { state: t5 } } = this;
    return e6 ? "complete" : "active" === t5 ? "active" : "disabled";
  }
  cancel() {
    this._sketchViewModel.cancel();
  }
  async _load() {
    await this.view.whenReady();
    const { options: e6 } = this, { createTool: t5, createOptions: o3 } = this._activeOptions = { ...this._defaultOptions, ...e6 };
    this._sketchViewModel.create(t5, o3);
  }
  _onSketchEvent(e6) {
    var _a;
    const t5 = ((_a = "create" === e6.type ? e6.graphic : e6.graphics[0]) == null ? void 0 : _a.geometry) || null, o3 = "create" === e6.type && "cancel" === e6.state, s5 = "create" === e6.type && "complete" === e6.state;
    this._processSelectionGeometry(t5, s5, o3);
  }
  _processSelectionGeometry(e6, t5, o3) {
    if (this._set("geometry", e6), (t5 || o3) && (this._completed = true), o3)
      return void this._onComplete([], true);
    const { _activeOptions: s5, candidates: i, selection: l6, view: r4 } = this;
    t3({ selector: e6, candidates: i, currentSelection: l6, options: s5.selectionOptions, view: r4 }).then(({ added: e7, removed: o4 }) => {
      t5 ? this._onComplete(this.selection.toArray(), false) : (e7.length || o4.length) && this.emit("selection-change", { added: e7, removed: o4, type: "selection-change" });
    });
  }
  _onComplete(e6, t5) {
    this._handles.removeAll(), this.notifyChange("state"), this.emit("complete", { aborted: t5, selection: e6, type: "complete" });
  }
};
e([d()], d2.prototype, "_completed", void 0), e([d()], d2.prototype, "candidates", void 0), e([d({ readOnly: true })], d2.prototype, "geometry", void 0), e([d()], d2.prototype, "options", void 0), e([d({ readOnly: true })], d2.prototype, "selection", void 0), e([d({ readOnly: true })], d2.prototype, "state", null), e([d({ value: null })], d2.prototype, "view", void 0), d2 = e([n("esri.widgets.support.Selector2D.SelectionOperation2D")], d2);
var m2 = d2;

// node_modules/@arcgis/core/widgets/support/Selector2D.js
var p2 = class extends a2(y) {
  constructor(o3) {
    super(o3), this._defaultSelectionOptions = { intersects: true, overlaps: true, contains: true }, this.candidates = null, this.options = null, this.view = null;
  }
  draw(o3) {
    const { _defaultSelectionOptions: t5, candidates: e6, options: s5, view: r4 } = this, i = { ...t5, ...s5, ...o3 == null ? void 0 : o3.selectionOptions };
    return new m2({ candidates: e6, options: { ...o3, selectionOptions: i }, view: r4 });
  }
  async selectionFrom(o3, t5) {
    const { _defaultSelectionOptions: s5, candidates: r4, options: i, view: c3 } = this, p4 = new j(), a5 = { ...s5, ...i, ...t5 };
    return await t3({ selector: o3, candidates: r4, currentSelection: p4, options: a5, view: c3 }), p4.toArray();
  }
};
e([d()], p2.prototype, "candidates", void 0), e([d()], p2.prototype, "options", void 0), e([d({ value: null })], p2.prototype, "view", void 0), p2 = e([n("esri.widgets.support.Selector2D")], p2);
var a3 = p2;

// node_modules/@arcgis/core/widgets/support/SelectionToolbar/SelectionToolbarViewModel.js
var n5 = class extends n2.EventedAccessor {
  constructor(e6) {
    super(e6), this._operationHandlesGroup = null, this.activeOperation = null, this.layers = null, this.selector = new a3();
  }
  destroy() {
    this._operationHandlesGroup = a(this._operationHandlesGroup), this.selector.destroy();
  }
  get state() {
    var _a, _b;
    return this.activeOperation ? "active" : ((_a = this.view) == null ? void 0 : _a.ready) && ((_b = this.layers) == null ? void 0 : _b.length) ? "ready" : "disabled";
  }
  set view(e6) {
    this.selector.view = e6, this._set("view", e6);
  }
  cancel() {
    "active" === this.state && (this.activeOperation.cancel(), this.activeOperation = null), this.selector.candidates = null;
  }
  activate(e6) {
    const { state: t5 } = this;
    if ("disabled" === t5)
      return;
    "active" === t5 && this.cancel(), this.selector.candidates = this._getCandidates();
    const r4 = this.selector.draw(e6);
    return this._operationHandlesGroup = r2([r4.once("complete", (e7) => this._onOperationComplete(e7)), r4.on("selection-change", (e7) => this._onOperationSelectionChange(e7))]), this.activeOperation = r4, r4;
  }
  _getCandidates() {
    let e6 = [];
    return this.layers.forEach((t5) => {
      e6 = e6.concat(...t5.graphics.toArray());
    }), e6;
  }
  _onOperationSelectionChange(e6) {
    this.emit("selection-change", e6);
  }
  _onOperationComplete(e6) {
    this._operationHandlesGroup = a(this._operationHandlesGroup), this.activeOperation = null, this.emit("complete", e6);
  }
};
e([d()], n5.prototype, "activeOperation", void 0), e([d()], n5.prototype, "layers", void 0), e([d({ readOnly: true })], n5.prototype, "selector", void 0), e([d({ readOnly: true })], n5.prototype, "state", null), e([d()], n5.prototype, "view", null), n5 = e([n("esri.widgets.support.SelectionToolbar.SelectionToolbarViewModel")], n5);
var c2 = n5;

// node_modules/@arcgis/core/widgets/support/SelectionToolbar.js
var p3 = { lassoTool: true, rectangleTool: true };
var m3 = { createTool: "polygon", createOptions: { mode: "freehand" } };
var h3 = { createTool: "rectangle" };
var v2 = { base: "esri-selection-toolbar", container: "esri-selection-toolbar__container", toolButton: "esri-selection-toolbar__tool-button", disabled: "esri-disabled", esriWidget: "esri-widget", widgetIcon: "esri-icon-vertex-gps" };
var g = class extends O {
  constructor(o3, t5) {
    super(o3, t5), this._viewModelHandlesGroup = null, this.activeToolInfo = null, this.label = void 0, this.layers = [], this.messages = null, this.toolConfigs = [], this.view = null, this.viewModel = new c2(), this.visibleElements = { ...p3 }, this._viewModelHandlesGroup = r2([this.viewModel.on("selection-change", (o4) => this.emit("selection-change", o4)), this.viewModel.on("complete", (o4) => {
      this._set("activeToolInfo", null), this.emit("complete", o4);
    })]);
  }
  destroy() {
    this._viewModelHandlesGroup = a(this._viewModelHandlesGroup);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-action-YOJXRHRW.js"), import("./calcite-icon-Z3VIANP2.js")]);
  }
  castVisibleElements(o3) {
    return { ...p3, ...o3 };
  }
  activate(o3) {
    switch (this.cancel(), o3) {
      case "lasso":
        this._activateTool("lasso");
      case "rectangle":
        this._activateTool("rectangle");
      default:
        this._activateTool(o3);
    }
  }
  cancel() {
    this.viewModel.cancel(), this._set("activeToolInfo", null);
  }
  render() {
    return n3("div", { "aria-label": this.label, class: this.classes(v2.base, v2.esriWidget) }, n3("div", { class: v2.container }, this.renderDefaultTools(), this.renderCustomTools()));
  }
  renderDefaultTools() {
    var _a;
    if ("2d" === ((_a = this.view) == null ? void 0 : _a.type))
      return [this.renderRectangleTool(), this.renderLassoTool()];
  }
  renderCustomTools() {
    if (this.toolConfigs && this.toolConfigs.length)
      return this.toolConfigs.map((o3) => {
        var _a;
        return n3("calcite-action", { active: ((_a = this.activeToolInfo) == null ? void 0 : _a.toolName) === o3.toolName, bind: this, class: v2.toolButton, label: o3.toolName, onclick: () => this._onCustomToolClick(o3.toolName), scale: "s", text: o3.toolName, title: o3.toolName }, n3("calcite-icon", { scale: "s", icon: o3.icon || "selection" }));
      });
  }
  renderLassoTool() {
    const { activeToolInfo: o3, messages: e6, visibleElements: t5 } = this;
    if (t5.lassoTool)
      return n3("calcite-action", { active: "lasso" === (o3 == null ? void 0 : o3.toolName), bind: this, label: e6.selectByLasso, onclick: this._onLassoToolClick, scale: "s", text: e6.selectByLasso, title: e6.selectByLasso }, n3("calcite-icon", { scale: "s", icon: "lasso" }));
  }
  renderRectangleTool() {
    const { activeToolInfo: o3, messages: e6, visibleElements: t5 } = this;
    if (t5.rectangleTool)
      return n3("calcite-action", { active: "rectangle" === (o3 == null ? void 0 : o3.toolName), bind: this, label: e6.selectByRectangle, onclick: this._onRectangleToolClick, scale: "s", text: e6.selectByRectangle, title: e6.selectByRectangle }, n3("calcite-icon", { scale: "s", icon: "cursor-marquee" }));
  }
  _onCustomToolClick(o3) {
    this._toggleTool(o3);
  }
  _onLassoToolClick() {
    this._toggleTool("lasso");
  }
  _onRectangleToolClick() {
    this._toggleTool("rectangle");
  }
  _activateTool(o3) {
    const e6 = this._getToolOptions(o3);
    if (!e6)
      return;
    const t5 = this.viewModel.activate(e6);
    this._set("activeToolInfo", { toolName: o3, operation: t5 });
  }
  _toggleTool(o3) {
    if (this.activeToolInfo) {
      const e6 = this.activeToolInfo.toolName;
      if (this.cancel(), e6 === o3)
        return;
    }
    this._activateTool(o3);
  }
  _getToolOptions(o3) {
    if ("lasso" === o3)
      return m3;
    if ("rectangle" === o3)
      return h3;
    const e6 = this.toolConfigs.find((e7) => e7.toolName === o3);
    if (!e6)
      return;
    const { createTool: t5, createOptions: s5, selectionOptions: i } = e6;
    return { createTool: t5, createOptions: s5, selectionOptions: i };
  }
};
e([d({ readOnly: true })], g.prototype, "activeToolInfo", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], g.prototype, "label", void 0), e([o("viewModel.layers")], g.prototype, "layers", void 0), e([d(), e4("esri/widgets/support/SelectionToolbar/t9n/SelectionToolbar")], g.prototype, "messages", void 0), e([d()], g.prototype, "toolConfigs", void 0), e([o("viewModel.view")], g.prototype, "view", void 0), e([d()], g.prototype, "viewModel", void 0), e([d()], g.prototype, "visibleElements", void 0), e([s2("visibleElements")], g.prototype, "castVisibleElements", null), g = e([n("esri.widgets.support.SelectionToolbar")], g);
var u3 = g;

// node_modules/@arcgis/core/widgets/support/SnappingControls/snappingLayerListUtils.js
var t4 = (r4) => s4(r4) || o2(r4);
var s4 = (r4) => {
  if (!("type" in r4))
    return false;
  switch (r4.type) {
    case "feature":
    case "geojson":
    case "csv":
    case "graphics":
    case "wfs":
      return true;
    default:
      return false;
  }
};
var o2 = (s5) => {
  const o3 = u2(s5);
  if (s5.hasOwnProperty(o3) && r(s5[o3])) {
    for (const r4 of s5[o3])
      if (t4(r4))
        return true;
  }
  return false;
};

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingListItem.js
var n6;
var l5 = n6 = class extends V {
  constructor() {
    super(...arguments), this.children = new j(), this.featureSource = null;
  }
  get enabled() {
    return !!r(this.featureSource) && this.featureSource.enabled;
  }
  _initializeChildLayers(r4) {
    const e6 = r4.filter(t4);
    super._initializeChildLayers(e6);
  }
  _makeChildren(r4) {
    return r4.map((r5) => l4(r5) ? new n6({ layer: r5, parent: this, view: this.view }) : null).reverse();
  }
};
e([d()], l5.prototype, "children", void 0), e([d()], l5.prototype, "enabled", null), e([d()], l5.prototype, "featureSource", void 0), e([d()], l5.prototype, "parent", void 0), l5 = n6 = e([n("esri.widgets.support.SnappingControls.SnappingListItem")], l5);

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingLayerListViewModel.js
var a4 = class extends v {
  constructor() {
    super(...arguments), this.featureSnappingSources = new j();
  }
  get operationalItemsFlat() {
    return this.operationalItems.flatten((e6) => e6.children);
  }
  _compileList() {
    const e6 = this.get("view.map.layers");
    if (!e6)
      return;
    const t5 = e6.filter(t4);
    this._watchLayersListMode(t5);
    const r4 = this._getViewableLayers(t5);
    r4 && r4.length ? (this._createNewItems(r4), this._removeItems(r4), this._sortItems(r4)) : this._removeAllItems();
  }
  _createListItem(e6) {
    const { featureSnappingSources: t5, view: r4 } = this, s5 = t5.find((t6) => t6.layer === e6);
    return new l5({ layer: e6, view: r4, featureSource: s5 });
  }
};
e([d()], a4.prototype, "featureSnappingSources", void 0), e([d()], a4.prototype, "operationalItems", void 0), a4 = e([n("esri.widgets.support.SnappingControls.SnappingLayerListViewModel")], a4);

// node_modules/@arcgis/core/widgets/support/SnappingControls/SnappingControlsViewModel.js
var d3 = "esri.widgets.support.SnappingControls.SnappingControlsViewModel";
var u4 = class extends a2(y) {
  constructor(e6) {
    super(e6), this.layerListViewModel = new a4(), this.snappingOptions = null, this.view = null;
  }
  initialize() {
    this.handles.add([l2(() => ({ viewModel: this.layerListViewModel, view: this.view }), ({ viewModel: e6, view: r4 }) => {
      e6.view = r4;
    }, h), l2(() => {
      var _a;
      return { viewModel: this.layerListViewModel, sources: (_a = this.snappingOptions) == null ? void 0 : _a.featureSources };
    }, ({ viewModel: e6, sources: r4 }) => {
      e6.featureSnappingSources = r4;
    }, h)]);
  }
  get state() {
    return this.get("snappingOptions") ? "ready" : "disabled";
  }
  enableSnappingForLayer(e6) {
    (this._findSnappingSourceForLayer(e6) ?? this._makeSnappingSourceForLayer(e6)).enabled = true;
  }
  disableSnappingForLayer(e6) {
    const r4 = this._findSnappingSourceForLayer(e6);
    r4 && (r4.enabled = false);
  }
  updateEnabledFeatureSources(e6) {
    for (const r4 of this.snappingOptions.featureSources)
      l4(r4.layer) && (r4.enabled = e6.includes(r4.layer.id));
  }
  _findSnappingSourceForLayer(e6) {
    return this.snappingOptions.featureSources.find((r4) => r4.layer.id === e6);
  }
  _makeSnappingSourceForLayer(e6) {
    const { layer: r4 } = this.layerListViewModel.operationalItemsFlat.find((r5) => r5.layer.id === e6);
    if (!r4)
      throw new s("snapping-controls:layer-not-found", `cannot enable snapping for layer with id ${e6} because no such layer was found in the view`);
    const i = new p({ layer: r4 });
    this.snappingOptions.featureSources.add(i);
    const s5 = this.layerListViewModel.operationalItemsFlat.find((r5) => r5.layer.id === e6);
    return s5 && (s5.featureSource = i), i;
  }
};
e([d({ constructOnly: true })], u4.prototype, "layerListViewModel", void 0), e([d({ constructOnly: true })], u4.prototype, "snappingOptions", void 0), e([d()], u4.prototype, "state", null), e([d({ constructOnly: true })], u4.prototype, "view", void 0), u4 = e([n(d3)], u4);
var y3 = u4;

// node_modules/@arcgis/core/widgets/support/SnappingControls.js
var h4 = { header: true, enabledToggle: true, selfEnabledToggle: true, featureEnabledToggle: true, layerList: true };
var g2 = { base: "esri-snapping-controls", container: "esri-snapping-controls__container", panel: "esri-snapping-controls__panel", item: "esri-snapping-controls__item", toggleBlock: "esri-snapping-controls__toggle-block", layerListBlock: "esri-snapping-controls__layer-list-block", layerList: "esri-snapping-controls__layer-list", layerListFilter: "esri-snapping-controls__layer-list__filter", layerListItem: "esri-snapping-controls__layer-list__item", layerListItemCheckbox: "esri-snapping-controls__layer-list__item__checkbox", layerListItemLabel: "esri-snapping-controls__layer-list__item__label", nestedContainer: "esri-snapping-controls__nested-container", disabled: "esri-disabled", esriWidget: "esri-widget", widgetIcon: "esri-icon-vertex-gps" };
var b = class extends O {
  constructor(e6, t5) {
    super((() => {
      const { view: t6, viewModel: i, snappingOptions: s5, ...l6 } = e6;
      return l6;
    })(), t5), this._layerListFilter = null, this.label = void 0, this.messages = null, this.messagesCommon = null, this.snappingOptions = null, this.view = null, this.visibleElements = { ...h4 }, this._defaultViewModel = null, (e6 == null ? void 0 : e6.viewModel) ? this.viewModel = e6.viewModel : (this._defaultViewModel = new y3({ snappingOptions: e6.snappingOptions, view: e6.view }), this.viewModel = this._defaultViewModel);
  }
  destroy() {
    this._defaultViewModel = l(this._defaultViewModel);
  }
  loadDependencies() {
    return Promise.all([import("./calcite-action-YOJXRHRW.js"), import("./calcite-block-WKSWEKGW.js"), import("./calcite-icon-Z3VIANP2.js"), import("./calcite-label-7VWEMPOG.js"), import("./calcite-panel-CKH4JSDF.js"), import("./calcite-list-FDN7LZUM.js"), import("./calcite-list-item-3ELGCELC.js"), import("./calcite-list-item-group-2TAQ56UX.js"), import("./calcite-switch-WOU3NSNJ.js"), import("./calcite-checkbox-S64L55KX.js"), import("./calcite-accordion-item-4YR6JRWW.js"), import("./calcite-accordion-ENCWKQCJ.js"), import("./calcite-input-3RE5W34E.js")]);
  }
  set viewModel(e6) {
    e6 !== this._get("viewModel") && ((t(this._defaultViewModel) || this._defaultViewModel !== e6) && (this._defaultViewModel = l(this._defaultViewModel)), this._set("viewModel", e6));
  }
  castVisibleElements(e6) {
    return { ...h4, ...e6 };
  }
  render() {
    const { label: e6, visibleElements: { header: t5 } } = this;
    return n3("div", { "aria-label": e6, class: this.classes(g2.base, g2.esriWidget) }, n3("div", { class: g2.container }, t5 ? this.renderHeaderView() : this.renderContent()));
  }
  renderHeaderView() {
    return n3("calcite-panel", { heading: this.label, class: g2.panel }, this.renderContent());
  }
  renderContent() {
    return [this.renderToggles(), this.renderLayerList()];
  }
  renderToggles() {
    return n3("calcite-block", { class: g2.toggleBlock, heading: "", open: true }, this.renderEnabledToggle(), n3("div", { class: g2.nestedContainer }, this.renderSelfEnabledToggle(), this.renderFeatureEnabledToggle()));
  }
  renderEnabledToggle() {
    if (!this.visibleElements.enabledToggle)
      return;
    const { messages: { enableSnapping: e6 }, viewModel: { snappingOptions: { enabled: t5, enabledToggled: i } } } = this;
    return n3("calcite-label", { layout: "inline-space-between" }, e6, n3("calcite-switch", { checked: t5, disabled: i, bind: this, onCalciteSwitchChange: this._enableSnappingSwitchChange }));
  }
  renderSelfEnabledToggle() {
    if (!this.visibleElements.selfEnabledToggle)
      return;
    const { messages: { geometryGuides: e6 }, viewModel: { snappingOptions: { enabled: t5, selfEnabled: i, enabledToggled: s5 } } } = this;
    return n3("calcite-label", { layout: "inline-space-between" }, e6, n3("calcite-switch", { checked: i, disabled: s5 || !t5, bind: this, onCalciteSwitchChange: this._selfEnabledSwitchChange }));
  }
  renderFeatureEnabledToggle() {
    if (!this.visibleElements.featureEnabledToggle)
      return;
    const { messages: { featureToFeature: e6 }, viewModel: { snappingOptions: { enabled: t5, featureEnabled: i, enabledToggled: s5 } } } = this;
    return n3("calcite-label", { layout: "inline-space-between" }, e6, n3("calcite-switch", { checked: i, disabled: s5 || !t5, bind: this, onCalciteSwitchChange: this._featureEnabledSwitchChange }));
  }
  renderLayerList() {
    if (!this.visibleElements.layerList)
      return;
    const { messages: e6, messagesCommon: t5 } = this, i = ({ target: { value: e7 } }) => this._layerListFilter = "" === e7 ? null : new RegExp(e7, "i"), l6 = this.viewModel.layerListViewModel.operationalItems.length > 9 ? n3("calcite-input", { class: g2.layerListFilter, clearable: true, placeholder: e6 == null ? void 0 : e6.searchLayers, onCalciteInputInput: i }) : null;
    return n3("calcite-block", { "intl-collapse": t5 == null ? void 0 : t5.collapse, "intl-expand": t5 == null ? void 0 : t5.expand, heading: e6.snappingLayers, class: g2.layerListBlock, open: true, collapsible: true }, l6, n3("calcite-list", { class: g2.layerList }, this.renderLayerListItemCollection(this.viewModel.layerListViewModel.operationalItems, e2(this._layerListFilter))));
  }
  renderLayerListItemCollection(e6, t5) {
    return e6.map((e7) => {
      if (!t5 || this._itemTitleMatchesFilter(e7, t5))
        return e7.children.length > 0 ? this.renderLayerListItemGroup(e7) : this.renderLayerListItem(e7);
      const i = e7.children.filter((e8) => this._itemTitleMatchesFilter(e8, t5));
      return i.length > 0 ? this.renderLayerListItemGroup(e7, i) : null;
    }).toArray();
  }
  renderLayerListItem(e6) {
    const { messages: { untitledLayer: t5 } } = this, i = e6.title || t5, s5 = e6.enabled, l6 = n3("calcite-checkbox", { value: e6.layer.id, checked: s5, bind: this, onCalciteCheckboxChange: (e7) => this._handleLayerListItemChange(e7.target) }), n7 = () => {
      const e7 = !l6.properties.checked;
      this._handleLayerListItemChange({ checked: e7, value: l6.properties.value });
    };
    return n3("calcite-list-item", { key: `${this.id}-list-item-${e6.uid}`, onclick: n7 }, n3("calcite-label", { class: g2.layerListItem, slot: "content-start", tabIndex: -1, layout: "inline", "disable-spacing": "true" }, n3("div", { class: g2.layerListItemCheckbox }, l6), n3("div", { class: g2.layerListItemLabel }, i)));
  }
  renderLayerListItemGroup(e6, t5) {
    const i = e6.title || this.messages.untitledLayer, s5 = e6.title && "" !== e6.title ? e6.title : e3(), n7 = !!t5, a5 = t5 ?? e6.children;
    return n3("calcite-list-item", { key: s5 }, n3("calcite-accordion", { "icon-position": "start", appearance: "transparent", afterCreate: (e7) => {
      e7.append(...Array.from(e7.children).map((e8) => (e8.remove(), e8)));
    } }, n3("calcite-accordion-item", { active: n7, "item-title": i, key: e6.uid }, n3("calcite-list", null, [...this.renderLayerListItemCollection(a5)]))));
  }
  _enableSnappingSwitchChange(e6) {
    this.snappingOptions.enabled = e6.target.checked;
  }
  _featureEnabledSwitchChange(e6) {
    this.snappingOptions.featureEnabled = e6.target.checked;
  }
  _itemTitleMatchesFilter(e6, t5) {
    return t5.test(e6.title);
  }
  _selfEnabledSwitchChange(e6) {
    this.snappingOptions.selfEnabled = e6.target.checked;
  }
  async _handleLayerListItemChange(e6) {
    e6.checked ? this.viewModel.enableSnappingForLayer(e6.value) : this.viewModel.disableSnappingForLayer(e6.value);
  }
};
e([d()], b.prototype, "_layerListFilter", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], b.prototype, "label", void 0), e([d(), e4("esri/widgets/support/SnappingControls/t9n/SnappingControls")], b.prototype, "messages", void 0), e([d(), e4("esri/t9n/common")], b.prototype, "messagesCommon", void 0), e([o("viewModel.snappingOptions")], b.prototype, "snappingOptions", void 0), e([o("viewModel.view")], b.prototype, "view", void 0), e([d()], b.prototype, "viewModel", null), e([d()], b.prototype, "visibleElements", void 0), e([s2("visibleElements")], b.prototype, "castVisibleElements", null), b = e([n("esri.widgets.support.SnappingControls")], b);
var u5 = b;

// node_modules/@arcgis/core/widgets/Sketch.js
var k = { base: "esri-sketch", verticalLayout: "esri-sketch--vertical", panel: "esri-sketch__panel", infoPanel: "esri-sketch__info-panel", section: "esri-sketch__section", toolSection: "esri-sketch__tool-section", infoSection: "esri-sketch__info-section", infoCountSection: "esri-sketch__info-count-section", menuContainer: "esri-sketch__menu-container", menuHeader: "esri-sketch__menu-header", menuTitle: "esri-sketch__menu-title", featureCountBadge: "esri-sketch__feature-count-badge", featureCountText: "esri-sketch__feature-count-text", featureCountNumber: "esri-sketch__feature-count-number", actionToggle: "esri-sketch__action-toggle", actionToggleOn: "esri-sketch__action-toggle--on", actionTitle: "esri-sketch__item-action-title", actionIcon: "esri-sketch__item-action-icon", disabled: "esri-disabled", esriWidget: "esri-widget", rotating: "esri-rotating", widgetIcon: "esri-icon-edit" };
var S2 = { createTools: { point: true, polyline: true, polygon: true, rectangle: true, circle: true }, selectionTools: { "rectangle-selection": true, "lasso-selection": true }, undoRedoMenu: true, settingsMenu: true, snappingControls: true, snappingControlsElements: { header: false, enabledToggle: true, selfEnabledToggle: true, featureEnabledToggle: true, layerList: true } };
var O2 = class extends O {
  constructor(e6, o3) {
    super(e6, o3), this._activeCreateOptions = null, this._defaultViewModel = null, this._menuOpen = false, this._selectionToolbar = null, this._selectionHandlesGroup = null, this._snappingControls = null, this._viewModelHandlesGroup = null, this.availableCreateTools = ["point", "polyline", "polygon", "rectangle", "circle"], this.createGraphic = null, this.creationMode = "continuous", this.defaultCreateOptions = null, this.defaultUpdateOptions = null, this.iconClass = k.widgetIcon, this.label = void 0, this.labelOptions = new c(), this.layer = null, this.layout = "horizontal", this.messages = null, this.snappingOptions = new l3(), this.tooltipOptions = new r3(), this.updateGraphics = new j(), this.view = null, this.visibleElements = { ...S2 }, this._activateCreateTool = this._activateCreateTool.bind(this), (e6 == null ? void 0 : e6.viewModel) || (this._defaultViewModel = new pe(), this.viewModel = this._defaultViewModel);
  }
  initialize() {
    const { layer: e6, view: t5 } = this, i = new u3({ view: "2d" === (t5 == null ? void 0 : t5.type) ? t5 : null, layers: e6 ? [e6] : null });
    this._selectionHandlesGroup = r2([f(() => i.activeToolInfo, () => this.viewModel.cancel()), i.on("complete", (e7) => this._onSelectionOperationComplete(e7))]), this._selectionToolbar = i, this._setUpSnappingControls();
  }
  loadDependencies() {
    return Promise.all([import("./calcite-action-YOJXRHRW.js"), import("./calcite-icon-Z3VIANP2.js")]);
  }
  destroy() {
    this._selectionToolbar.destroy(), this._cleanupViewModel(), this._selectionHandlesGroup = a(this._selectionHandlesGroup), this._snappingControls = l(this._snappingControls);
  }
  get activeTool() {
    const e6 = this._selectionToolbar.activeToolInfo;
    if (e6)
      switch (e6.toolName) {
        case "lasso":
          return "lasso-selection";
        case "rectangle":
          return "rectangle-selection";
        case "default":
          return "custom-selection";
      }
    return this.viewModel.activeTool;
  }
  get state() {
    return this._selectionToolbar.activeToolInfo ? "active" : this.viewModel.state;
  }
  set viewModel(e6) {
    e6 !== this._get("viewModel") && ((t(this._defaultViewModel) || this._defaultViewModel !== e6) && this._cleanupViewModel(), this._set("viewModel", e6), e6 && (this._viewModelHandlesGroup = r2([e6.on("create", (e7) => {
      this.scheduleRender(), this._onCreateOperation(e7);
    }), e6.on("update", () => this.scheduleRender()), e6.on("delete", (e7) => this.emit("delete", e7)), e6.on("undo", () => this.scheduleRender()), e6.on("redo", () => this.scheduleRender()), l2(() => e6.layer, (e7) => {
      this._selectionToolbar.layers = e7 ? [e7] : null;
    }), l2(() => e6.view, (e7) => {
      this._selectionToolbar.view = "2d" === (e7 == null ? void 0 : e7.type) ? e7 : null, this._setUpSnappingControls();
    }), l2(() => e6.state, () => this.notifyChange("state"))])));
  }
  castVisibleElements(e6) {
    const t5 = { ...S2, ...e6, createTools: { ...S2.createTools, ...e6 == null ? void 0 : e6.createTools }, selectionTools: { ...S2.selectionTools, ...e6 == null ? void 0 : e6.selectionTools }, snappingControlsElements: { ...S2.snappingControlsElements, ...e6 == null ? void 0 : e6.snappingControlsElements } };
    return r(this._snappingControls) && (this._snappingControls.visibleElements = t5.snappingControlsElements), t5;
  }
  create(e6, t5) {
    this._activeCreateOptions = t5 || null, this.viewModel.create(e6, t5);
  }
  update(e6, t5) {
    return this.viewModel.update(e6, t5);
  }
  complete() {
  }
  cancel() {
    this._selectionToolbar.cancel(), this.viewModel.cancel();
  }
  undo() {
    var _a;
    this.viewModel.undo(), (_a = this.view) == null ? void 0 : _a.focus();
  }
  redo() {
    var _a;
    this.viewModel.redo(), (_a = this.view) == null ? void 0 : _a.focus();
  }
  delete() {
  }
  render() {
    const { label: e6, layout: t5, viewModel: { state: o3 } } = this;
    return n3("div", { "aria-label": e6, class: this.classes(k.base, k.esriWidget, { [k.disabled]: "disabled" === o3, [k.verticalLayout]: "vertical" === t5 }) }, n3("div", { role: "toolbar", class: k.panel }, this.renderTopPanelContents()), n3("div", { class: this.classes(k.panel, k.infoPanel) }, this.renderInfoPanelContents()));
  }
  renderTopPanelContents() {
    const e6 = this.classes(k.section, k.toolSection), { availableCreateTools: t5, visibleElements: o3 } = this;
    return [n3("div", { role: "menu", key: "selection-button-container", class: e6 }, this.renderDefaultSelectionButton(), this.renderSelectionToolbar()), t5 && t5.length ? n3("div", { role: "menu", class: e6 }, this.renderDrawButtons()) : null, o3.undoRedoMenu ? n3("div", { role: "menu", key: "undo-redo-menu-button-container", class: e6 }, this.renderUndoRedoMenuButtons()) : null, o3.settingsMenu ? n3("div", { key: "settings-menu-button-container", class: k.section }, this.renderSettingsMenuButton()) : null];
  }
  renderInfoPanelContents() {
    return this._menuOpen ? this.renderSettingsMenu() : this.updateGraphics.length ? [n3("div", { class: this.classes(k.section, k.infoSection, k.infoCountSection), key: "feature-count-container" }, this.renderFeatureCount()), n3("div", { class: this.classes(k.section, k.infoSection), key: "delete-button-container" }, this.renderDeleteButton())] : void 0;
  }
  renderSettingsMenu() {
    const { settings: e6 } = this.messages;
    return [n3("div", { role: "menu", class: k.menuContainer, key: "settings-menu-container" }, n3("header", { class: k.menuHeader, key: "settings-menu-header" }, n3("span", { class: k.menuTitle }, e6)), this.renderSnappingControls())];
  }
  renderSnappingControls() {
    const { snappingControls: e6 } = this.visibleElements;
    if (r(this._snappingControls) && e6)
      return this._snappingControls.render();
  }
  renderFeatureCount() {
    const { layout: e6, messages: t5, updateGraphics: { length: o3 } } = this, i = s3(1 === o3 ? t5.featureCount : t5.featuresCount, { count: o3 });
    return n3("div", { class: k.featureCountBadge, "aria-label": i }, n3("span", { class: k.featureCountNumber }, "vertical" === e6 ? o3 : i));
  }
  renderDeleteButton() {
    const e6 = this.messages.deleteFeature;
    return n3("calcite-action", { bind: this, label: e6, onclick: this.delete, scale: "s", text: e6, title: e6 }, n3("calcite-icon", { scale: "s", icon: "trash" }));
  }
  renderDefaultSelectionButton() {
    if (!this.viewModel.updateOnGraphicClick)
      return;
    const e6 = this.messages.selectFeature;
    return n3("calcite-action", { active: "ready" === this.state, bind: this, label: e6, onclick: this._activateDefaultSelectTool, scale: "s", text: e6, title: e6 }, n3("calcite-icon", { scale: "s", icon: "cursor" }));
  }
  renderSelectionToolbar() {
    var _a;
    if ("2d" !== ((_a = this.view) == null ? void 0 : _a.type))
      return;
    const e6 = this.visibleElements.selectionTools;
    return this._selectionToolbar.visibleElements = { lassoTool: !!e6["lasso-selection"], rectangleTool: !!e6["rectangle-selection"] }, this._selectionToolbar.render();
  }
  renderDrawButtons() {
    const e6 = this.visibleElements.createTools;
    return this.availableCreateTools.map((t5) => "point" === t5 && e6.point ? this.renderPointButton() : "polyline" === t5 && e6.polyline ? this.renderPolylineButton() : "polygon" === t5 && e6.polygon ? this.renderPolygonButton() : "rectangle" === t5 && e6.rectangle ? this.renderRectangleButton() : "circle" === t5 && e6.circle ? this.renderCircleButton() : void 0);
  }
  renderPointButton() {
    const e6 = "point", t5 = this.messages.drawPoint;
    return n3("calcite-action", { active: this.activeTool === e6, bind: this, label: t5, onclick: () => this._activateCreateTool(e6), scale: "s", text: t5, title: t5 }, n3("calcite-icon", { scale: "s", icon: "pin" }));
  }
  renderPolygonButton() {
    const e6 = "polygon", t5 = this.messages.drawPolygon;
    return n3("calcite-action", { active: this.activeTool === e6, bind: this, label: t5, onclick: () => this._activateCreateTool(e6), scale: "s", text: t5, title: t5 }, n3("calcite-icon", { scale: "s", icon: "polygon" }));
  }
  renderPolylineButton() {
    const e6 = "polyline", t5 = this.messages.drawPolyline;
    return n3("calcite-action", { active: this.activeTool === e6, bind: this, label: t5, onclick: () => this._activateCreateTool(e6), scale: "s", text: t5, title: t5 }, n3("calcite-icon", { scale: "s", icon: "line" }));
  }
  renderCircleButton() {
    const e6 = "circle", t5 = this.messages.drawCircle;
    return n3("calcite-action", { active: this.activeTool === e6, bind: this, label: t5, onclick: () => this._activateCreateTool(e6), scale: "s", text: t5, title: t5 }, n3("calcite-icon", { scale: "s", icon: "circle" }));
  }
  renderRectangleButton() {
    const e6 = "rectangle", t5 = this.messages.drawRectangle;
    return n3("calcite-action", { active: this.activeTool === e6, bind: this, label: t5, onclick: () => this._activateCreateTool(e6), scale: "s", text: t5, title: t5 }, n3("calcite-icon", { scale: "s", icon: "rectangle" }));
  }
  renderUndoRedoMenuButtons() {
    return [this.renderUndoButton(), this.renderRedoButton()];
  }
  renderUndoButton() {
    const e6 = this.messages.undo;
    return n3("calcite-action", { disabled: !this.viewModel.canUndo(), bind: this, label: e6, onclick: this.undo, scale: "s", text: e6, title: e6 }, n3("calcite-icon", { scale: "s", icon: f2(this.container) ? "redo" : "undo" }));
  }
  renderRedoButton() {
    const e6 = this.messages.redo;
    return n3("calcite-action", { disabled: !this.viewModel.canRedo(), bind: this, label: e6, onclick: this.redo, scale: "s", text: e6, title: e6 }, n3("calcite-icon", { scale: "s", icon: f2(this.container) ? "undo" : "redo" }));
  }
  renderSettingsMenuButton() {
    const e6 = this.messages.settings;
    return n3("calcite-action", { active: this._menuOpen, bind: this, label: e6, onclick: this._toggleMenu, scale: "s", text: e6, title: e6 }, n3("calcite-icon", { scale: "s", icon: "gear" }));
  }
  _activateCreateTool(e6) {
    this.activeTool !== e6 ? (this._selectionToolbar.cancel(), this.create(e6)) : this.cancel();
  }
  _onCreateOperation(e6) {
    if ("complete" !== e6.state)
      return;
    const { creationMode: t5 } = this, { type: o3 } = e6;
    if ("create" === o3) {
      const { tool: o4, graphic: i } = e6, s5 = this._activeCreateOptions;
      this._activeCreateOptions = null, "continuous" === t5 ? this.create(o4, s5) : "update" === t5 && this.update([i]);
    }
  }
  _toggleMenu() {
    this._menuOpen = !this._menuOpen, this.scheduleRender();
  }
  _onSelectionOperationComplete(e6) {
    const { viewModel: { defaultUpdateOptions: t5 } } = this, { selection: o3 } = e6;
    if (!e6.aborted && o3.length) {
      const e7 = t5.tool, i = o3.length > 1 && "reshape" === e7 ? "transform" : e7;
      this.update(o3, { ...t5, tool: i });
    }
    this.notifyChange("state");
  }
  _activateDefaultSelectTool() {
    var _a;
    this.cancel(), (_a = this.view) == null ? void 0 : _a.focus();
  }
  _cleanupViewModel() {
    this._defaultViewModel = l(this._defaultViewModel), this._viewModelHandlesGroup = a(this._viewModelHandlesGroup);
  }
  _setUpSnappingControls() {
    const { snappingOptions: e6, view: t5 } = this;
    if (this._snappingControls = l(this._snappingControls), !e6 || !t5)
      return;
    const o3 = new u5({ snappingOptions: e6, view: t5, visibleElements: this.visibleElements.snappingControlsElements });
    this._snappingControls = o3;
  }
};
e([d()], O2.prototype, "activeTool", null), e([d({ cast: (e6) => {
  if (!e6 || !e6.length)
    return null;
  const t5 = /* @__PURE__ */ new Set(["point", "polyline", "polygon", "rectangle", "circle"]);
  return e6.filter((e7) => t5.has(e7));
} })], O2.prototype, "availableCreateTools", void 0), e([o("viewModel.createGraphic")], O2.prototype, "createGraphic", void 0), e([d()], O2.prototype, "creationMode", void 0), e([o("viewModel.defaultCreateOptions")], O2.prototype, "defaultCreateOptions", void 0), e([o("viewModel.defaultUpdateOptions")], O2.prototype, "defaultUpdateOptions", void 0), e([d()], O2.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], O2.prototype, "label", void 0), e([o("viewModel.labelOptions")], O2.prototype, "labelOptions", void 0), e([o("viewModel.layer")], O2.prototype, "layer", void 0), e([d({ type: ["horizontal", "vertical"] })], O2.prototype, "layout", void 0), e([d(), e4("esri/widgets/Sketch/t9n/Sketch")], O2.prototype, "messages", void 0), e([o("viewModel.snappingOptions")], O2.prototype, "snappingOptions", void 0), e([d()], O2.prototype, "state", null), e([o("viewModel.tooltipOptions")], O2.prototype, "tooltipOptions", void 0), e([o("viewModel.updateGraphics")], O2.prototype, "updateGraphics", void 0), e([o("viewModel.view")], O2.prototype, "view", void 0), e([d(), t2(["create", "update", "undo", "redo"])], O2.prototype, "viewModel", null), e([d()], O2.prototype, "visibleElements", void 0), e([s2("visibleElements")], O2.prototype, "castVisibleElements", null), e([o("viewModel.complete")], O2.prototype, "complete", null), e([o("viewModel.delete")], O2.prototype, "delete", null), O2 = e([n("esri.widgets.Sketch")], O2);
var j2 = O2;
export {
  j2 as default
};
//# sourceMappingURL=@arcgis_core_widgets_Sketch.js.map
