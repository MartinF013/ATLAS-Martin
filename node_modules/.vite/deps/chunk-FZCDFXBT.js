import {
  u
} from "./chunk-EJ7RFMRW.js";
import {
  D,
  G,
  L,
  M,
  P,
  U,
  o
} from "./chunk-FPMD6IB4.js";
import {
  o as o2
} from "./chunk-MV2XZ5BA.js";
import {
  f
} from "./chunk-RTHP2LNT.js";

// node_modules/@arcgis/core/views/webgl/rasterUtils.js
function _(e, u2, f2 = "nearest", m = false) {
  var _a;
  const c = !(m && "u8" === u2.pixelType), _2 = c ? G.FLOAT : G.UNSIGNED_BYTE, p = null == u2.pixels || 0 === u2.pixels.length ? null : c ? u2.getAsRGBAFloat() : u2.getAsRGBA(), E2 = (_a = e.capabilities.textureFloat) == null ? void 0 : _a.textureFloatLinear, T2 = { width: u2.width, height: u2.height, target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: e.type === o2.WEBGL2 && c ? U.RGBA32F : P.RGBA, samplingMode: !E2 || "bilinear" !== f2 && "cubic" !== f2 ? L.NEAREST : L.LINEAR, dataType: _2, wrapMode: D.CLAMP_TO_EDGE, flipped: false };
  return new u(e, T2, p);
}
function E(e, u2) {
  const { spacing: f2, offsets: m, coefficients: c, size: [_2, p] } = u2, E2 = f2[0] > 1, T2 = { width: E2 ? 4 * _2 : _2, height: p, target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: e.type === o2.WEBGL2 ? U.RGBA32F : P.RGBA, dataType: G.FLOAT, samplingMode: L.NEAREST, wrapMode: D.CLAMP_TO_EDGE, flipped: false }, g2 = new Float32Array(E2 ? _2 * p * 16 : 2 * m.length);
  if (E2)
    for (let t = 0, n = 0; t < c.length; t++)
      g2[n++] = c[t], t % 3 == 2 && (g2[n++] = 1);
  else
    for (let t = 0; t < p; t++)
      for (let e2 = 0; e2 < _2; e2++) {
        const n = 4 * (t * _2 + e2), a = 2 * (e2 * p + t);
        g2[n] = m[a], g2[n + 1] = m[a + 1], g2[n + 3] = -1 === m[a] ? 0 : 1;
      }
  return new u(e, T2, g2);
}
function T(e, t) {
  const i = { width: t.length / 4, height: 1, target: M.TEXTURE_2D, pixelFormat: P.RGBA, internalFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, wrapMode: D.CLAMP_TO_EDGE, flipped: false };
  return new u(e, i, t);
}
function g(t, n, a, r = 1, i = true) {
  return { u_flipY: i, u_applyTransform: !!t, u_opacity: r, u_transformSpacing: t ? t.spacing : f, u_transformGridSize: t ? t.size : f, u_targetImageSize: n, u_srcImageSize: a };
}
function A(e, t) {
  return { u_colormapOffset: t || 0, u_colormapMaxIndex: e ? e.length / 4 - 1 : 0 };
}
function h(e, t) {
  return { u_scale: e, u_offset: t };
}
function d(e) {
  return { u_bandCount: e.bandCount, u_minOutput: e.outMin, u_maxOutput: e.outMax, u_minCutOff: e.minCutOff, u_maxCutOff: e.maxCutOff, u_factor: e.factor, u_useGamma: e.useGamma, u_gamma: e.gamma, u_gammaCorrection: e.gammaCorrection };
}
function O(e) {
  return { u_hillshadeType: e.hillshadeType, u_sinZcosAs: e.sinZcosAs, u_sinZsinAs: e.sinZsinAs, u_cosZs: e.cosZs, u_weights: e.weights, u_factor: e.factor, u_minValue: e.minValue, u_maxValue: e.maxValue };
}
function F(e, t) {
  const n = e.gl, a = t.glName, r = n.getProgramParameter(a, n.ACTIVE_UNIFORMS), i = /* @__PURE__ */ new Map();
  let o3;
  for (let s = 0; s < r; s++)
    o3 = n.getActiveUniform(a, s), o3 && i.set(o3.name, { location: n.getUniformLocation(a, o3.name), info: o3 });
  return i;
}
function R(e, t, n) {
  Object.keys(n).forEach((a) => {
    const r = t.get(a) || t.get(a + "[0]");
    r && G2(e, a, n[a], r);
  });
}
function U2(e, t, n, a) {
  n.length === a.length && (a.some((e2) => null == e2) || n.some((e2) => null == e2) || n.forEach((n2, r) => {
    t.setUniform1i(n2, r), e.bindTexture(a[r], r);
  }));
}
function G2(e, t, n, a) {
  if (null === a || null == n)
    return false;
  const { info: r } = a;
  switch (r.type) {
    case o.FLOAT:
      r.size > 1 ? e.setUniform1fv(t, n) : e.setUniform1f(t, n);
      break;
    case o.FLOAT_VEC2:
      e.setUniform2fv(t, n);
      break;
    case o.FLOAT_VEC3:
      e.setUniform3fv(t, n);
      break;
    case o.FLOAT_VEC4:
      e.setUniform4fv(t, n);
      break;
    case o.FLOAT_MAT3:
      e.setUniformMatrix3fv(t, n);
      break;
    case o.FLOAT_MAT4:
      e.setUniformMatrix4fv(t, n);
      break;
    case o.INT:
      r.size > 1 ? e.setUniform1iv(t, n) : e.setUniform1i(t, n);
      break;
    case o.BOOL:
      e.setUniform1i(t, n ? 1 : 0);
      break;
    case o.INT_VEC2:
    case o.BOOL_VEC2:
      e.setUniform2iv(t, n);
      break;
    case o.INT_VEC3:
    case o.BOOL_VEC3:
      e.setUniform3iv(t, n);
      break;
    case o.INT_VEC4:
    case o.BOOL_VEC4:
      e.setUniform4iv(t, n);
      break;
    default:
      return false;
  }
  return true;
}

export {
  _,
  E,
  T,
  g,
  A,
  h,
  d,
  O,
  F,
  R,
  U2 as U
};
//# sourceMappingURL=chunk-FZCDFXBT.js.map
