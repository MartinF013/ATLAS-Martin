import {
  r
} from "./chunk-B6K3W2TL.js";
import {
  O,
  e2
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-KVF4M6PZ.js";
import {
  S,
  j as j2
} from "./chunk-RN2KRYDN.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  j
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/Measurement/MeasurementViewModel.js
var n3 = class extends y {
  constructor(e3) {
    super(e3), this.activeTool = null, this.activeViewModel = null, this.view = null;
  }
  get areaUnit() {
    return this.defaultUnit;
  }
  set areaUnit(e3) {
    void 0 !== e3 ? this._override("areaUnit", e3) : this._clearOverride("areaUnit");
  }
  get linearUnit() {
    return this.defaultUnit;
  }
  set linearUnit(e3) {
    void 0 !== e3 ? this._override("linearUnit", e3) : this._clearOverride("linearUnit");
  }
  get state() {
    const { activeViewModel: e3 } = this;
    return e3 ? e3.state : "disabled";
  }
};
e([d({ type: ["area", "distance", "direct-line"] })], n3.prototype, "activeTool", void 0), e([d()], n3.prototype, "activeViewModel", void 0), e([d({ type: S })], n3.prototype, "areaUnit", null), e([d(r)], n3.prototype, "defaultUnit", void 0), e([d({ type: j2 })], n3.prototype, "linearUnit", null), e([d({ readOnly: true })], n3.prototype, "state", null), e([d()], n3.prototype, "view", void 0), n3 = e([n("esri.widgets.Measurement.MeasurementViewModel")], n3);
var l2 = n3;

// node_modules/@arcgis/core/widgets/Measurement.js
var c = { base: "esri-measurement", widgetIcon: "esri-icon-measure" };
function u(e3) {
  return e3 && ("esri.widgets.AreaMeasurement2D" === e3.declaredClass || "esri.widgets.AreaMeasurement3D" === e3.declaredClass);
}
var p = class extends O {
  constructor(e3, t) {
    super(e3, t), this._widgets = /* @__PURE__ */ new Map(), this.activeTool = null, this.activeWidget = null, this.areaUnit = null, this.iconClass = c.widgetIcon, this.label = void 0, this.linearUnit = null, this.messages = null, this.view = null, this.viewModel = new l2();
  }
  initialize() {
    this.activeWidget && this.viewModel.set("activeViewModel", this.activeWidget.viewModel), this.view && this.activeTool && this._getActiveWidget().then((e3) => {
      this._set("activeWidget", e3);
    }), this.own([l(() => [this.view, this.activeTool], async () => {
      this._set("activeWidget", await this._getActiveWidget());
    }), l(() => this.activeWidget, (e3, t) => {
      this.viewModel.set("activeViewModel", e3 ? e3.viewModel : null), t && (t.visible = false);
    }), l(() => [this.areaUnit, this.linearUnit, this.uiStrings], () => this._updateSubWidgetProperties())]);
  }
  destroy() {
    this._destroyWidgets();
  }
  render() {
    const { activeWidget: e3 } = this, t = e3 && !e3.destroyed ? e3.render() : null;
    return n2("div", { class: c.base }, t);
  }
  clear() {
    this.activeTool = null, this._destroyWidgets();
  }
  startMeasurement() {
    const { activeViewModel: e3 } = this.viewModel;
    e3 && j(e3.start());
  }
  async _createWidget(e3) {
    const { areaUnit: t, linearUnit: i, view: s } = this;
    switch (e3) {
      case "area": {
        const { type: i2 } = s;
        switch (i2) {
          case "2d":
            return new (0, (await import("./AreaMeasurement2D-PMMVB3SQ.js")).default)({ view: s, unit: t, uiStrings: this._createUIStringsForWidget(e3) });
          case "3d":
            return new (0, (await import("./AreaMeasurement3D-HITDN6DH.js")).default)({ view: s, unit: t, uiStrings: this._createUIStringsForWidget(e3) });
          default:
            return null;
        }
      }
      case "distance":
        return new (0, (await import("./DistanceMeasurement2D-5FB4SP4U.js")).default)({ view: s, unit: i, uiStrings: this._createUIStringsForWidget(e3) });
      case "direct-line":
        return new (0, (await import("./DirectLineMeasurement3D-2B4HELHW.js")).default)({ view: s, unit: i, uiStrings: this._createUIStringsForWidget(e3) });
      default:
        return null;
    }
  }
  _destroyWidgets() {
    this._widgets.forEach((e3) => e3.destroy()), this._widgets.clear();
  }
  async _getActiveWidget() {
    const { activeTool: e3, view: t } = this;
    if (!t || !e3)
      return null;
    let i = null;
    if (this._widgets.has(e3))
      i = this._widgets.get(e3), i.visible = true;
    else {
      if (i = await this._createWidget(e3), !i)
        return null;
      await i.viewModel.start(), this._widgets.set(e3, i);
    }
    return i;
  }
  _createUIStringsForWidget(e3) {
    if (!this.uiStrings)
      return null;
    const t = e3 + "-" + this.view.type;
    return this.uiStrings[t];
  }
  _updateSubWidgetProperties() {
    this._widgets.forEach((e3, t) => {
      const { areaUnit: i, linearUnit: s } = this;
      e3.unit = u(e3) ? i : s, e3.uiStrings = this._createUIStringsForWidget(t);
    });
  }
};
e([o("viewModel.activeTool")], p.prototype, "activeTool", void 0), e([d({ readOnly: true })], p.prototype, "activeWidget", void 0), e([o("viewModel.areaUnit")], p.prototype, "areaUnit", void 0), e([d()], p.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], p.prototype, "label", void 0), e([o("viewModel.linearUnit")], p.prototype, "linearUnit", void 0), e([d(), e2("esri/widgets/Measurement/t9n/Measurement")], p.prototype, "messages", void 0), e([d()], p.prototype, "uiStrings", void 0), e([o("viewModel.view")], p.prototype, "view", void 0), e([d({ type: l2 })], p.prototype, "viewModel", void 0), p = e([n("esri.widgets.Measurement")], p);
var g = p;
export {
  g as default
};
//# sourceMappingURL=@arcgis_core_widgets_Measurement.js.map
