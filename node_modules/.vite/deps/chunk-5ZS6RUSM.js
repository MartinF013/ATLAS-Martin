import {
  H as H2,
  i as i2,
  s2 as s4
} from "./chunk-ZEDAE7EU.js";
import {
  g,
  k,
  l,
  m
} from "./chunk-NAIF4GWX.js";
import {
  d,
  f
} from "./chunk-W2HLA6I3.js";
import {
  e as e2
} from "./chunk-YFBAFAZ2.js";
import {
  S,
  a as a2
} from "./chunk-YZNDHJDJ.js";
import {
  l as l2
} from "./chunk-ZN2MGN4S.js";
import {
  r as r5
} from "./chunk-RTHP2LNT.js";
import {
  n as n2,
  r as r4
} from "./chunk-U7B2WKBH.js";
import {
  A,
  F as F2,
  h,
  n as n3,
  o as o2,
  u
} from "./chunk-ASC3X65B.js";
import {
  i,
  x as x2
} from "./chunk-NWRK6QLX.js";
import {
  s as s3
} from "./chunk-BPZGJQOB.js";
import {
  D,
  a,
  b,
  w
} from "./chunk-ZOKX6UGH.js";
import {
  F,
  H,
  J,
  P,
  X,
  Z,
  _,
  e,
  o,
  q,
  r as r3,
  s as s2,
  x,
  z
} from "./chunk-PKZEO23A.js";
import {
  n,
  r as r2,
  t as t2
} from "./chunk-AIRC226G.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Camera.js
var J2 = s.getLogger("esri.views.3d.webgl-engine.lib.Camera");
var K = class {
  constructor(t3 = null, i3 = null, r6 = null) {
    this._viewUp = n(), this._viewForward = n(), this._viewRight = n(), this._ray = d(), this._viewport = r4(0, 0, 1, 1), this._padding = r4(0, 0, 0, 0), this._fov = 55 / 180 * Math.PI, this._nearFar = r5(1, 1e3), this._viewDirty = true, this._viewMatrix = e2(), this._projectionDirty = true, this._projectionMatrix = e2(), this._viewProjectionDirty = true, this._viewProjectionMatrix = e2(), this._viewInverseTransposeMatrixDirty = true, this._viewInverseTransposeMatrix = e2(), this._inverseProjectionDirty = true, this._inverseProjectionMatrix = null, this._frustumDirty = true, this._frustum = H2(), this._fullViewport = n2(), this._pixelRatio = 1, this.relativeElevation = 0, r(t3) && r3(this._ray.origin, t3), this._center = r(i3) ? t2(i3) : n(), this._up = r(r6) ? t2(r6) : r2(0, 0, 1);
  }
  get pixelRatio() {
    return this._pixelRatio;
  }
  set pixelRatio(t3) {
    this._pixelRatio = t3 > 0 ? t3 : 1;
  }
  get eye() {
    return this._ray.origin;
  }
  set eye(t3) {
    this._compareAndSetView(t3, this._ray.origin);
  }
  get center() {
    return this._center;
  }
  set center(t3) {
    this._compareAndSetView(t3, this._center);
  }
  get ray() {
    return e(this._ray.direction, this.center, this.eye), this._ray;
  }
  get up() {
    return this._up;
  }
  set up(t3) {
    this._compareAndSetView(t3, this._up);
  }
  get viewMatrix() {
    return this._ensureViewClean(), this._viewMatrix;
  }
  set viewMatrix(t3) {
    n3(this._viewMatrix, t3), this._viewDirty = false, this._viewInverseTransposeMatrixDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get viewForward() {
    return this._ensureViewClean(), this._viewForward;
  }
  get viewUp() {
    return this._ensureViewClean(), this._viewUp;
  }
  get viewRight() {
    return this._ensureViewClean(), this._viewRight;
  }
  get nearFar() {
    return this._nearFar;
  }
  get near() {
    return this._nearFar[0];
  }
  set near(t3) {
    this._nearFar[0] !== t3 && (this._nearFar[0] = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get far() {
    return this._nearFar[1];
  }
  set far(t3) {
    this._nearFar[1] !== t3 && (this._nearFar[1] = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get viewport() {
    return this._viewport;
  }
  set viewport(t3) {
    this.x = t3[0], this.y = t3[1], this.width = t3[2], this.height = t3[3];
  }
  get x() {
    return this._viewport[0];
  }
  set x(t3) {
    t3 += this._padding[et.LEFT], this._viewport[0] !== t3 && (this._viewport[0] = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get y() {
    return this._viewport[1];
  }
  set y(t3) {
    t3 += this._padding[et.BOTTOM], this._viewport[1] !== t3 && (this._viewport[1] = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get width() {
    return this._viewport[2];
  }
  set width(t3) {
    this._viewport[2] !== t3 && (this._viewport[2] = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get height() {
    return this._viewport[3];
  }
  set height(t3) {
    this._viewport[3] !== t3 && (this._viewport[3] = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get fullWidth() {
    return this._viewport[2] + this._padding[et.RIGHT] + this._padding[et.LEFT];
  }
  set fullWidth(t3) {
    this.width = t3 - (this._padding[et.RIGHT] + this._padding[et.LEFT]);
  }
  get fullHeight() {
    return this._viewport[3] + this._padding[et.TOP] + this._padding[et.BOTTOM];
  }
  set fullHeight(t3) {
    this.height = t3 - (this._padding[et.TOP] + this._padding[et.BOTTOM]);
  }
  get fullViewport() {
    return this._fullViewport[0] = this._viewport[0] - this._padding[et.LEFT], this._fullViewport[1] = this._viewport[1] - this._padding[et.BOTTOM], this._fullViewport[2] = this.fullWidth, this._fullViewport[3] = this.fullHeight, this._fullViewport;
  }
  get aspect() {
    return this.width / this.height;
  }
  get padding() {
    return this._padding;
  }
  set padding(t3) {
    this._padding[et.TOP] === t3[et.TOP] && this._padding[et.RIGHT] === t3[et.RIGHT] && this._padding[et.BOTTOM] === t3[et.BOTTOM] && this._padding[et.LEFT] === t3[et.LEFT] || (this._viewport[0] += t3[et.LEFT] - this._padding[et.LEFT], this._viewport[1] += t3[et.BOTTOM] - this._padding[et.BOTTOM], this._viewport[2] -= t3[et.RIGHT] + t3[et.LEFT] - (this._padding[et.RIGHT] + this._padding[et.LEFT]), this._viewport[3] -= t3[et.TOP] + t3[et.BOTTOM] - (this._padding[et.TOP] + this._padding[et.BOTTOM]), a(this._padding, t3), this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true);
  }
  get viewProjectionMatrix() {
    return this._viewProjectionDirty && (u(this._viewProjectionMatrix, this.projectionMatrix, this.viewMatrix), this._viewProjectionDirty = false), this._viewProjectionMatrix;
  }
  get projectionMatrix() {
    if (this._projectionDirty) {
      const t3 = this.width, i3 = this.height, e3 = this.near * Math.tan(this.fovY / 2), r6 = e3 * this.aspect;
      A(this._projectionMatrix, -r6 * (1 + 2 * this._padding[et.LEFT] / t3), r6 * (1 + 2 * this._padding[et.RIGHT] / t3), -e3 * (1 + 2 * this._padding[et.BOTTOM] / i3), e3 * (1 + 2 * this._padding[et.TOP] / i3), this.near, this.far), this._projectionDirty = false;
    }
    return this._projectionMatrix;
  }
  get inverseProjectionMatrix() {
    return t(this._inverseProjectionMatrix) && (this._inverseProjectionMatrix = e2()), this._inverseProjectionDirty && h(this._inverseProjectionMatrix, this.projectionMatrix), this._inverseProjectionMatrix;
  }
  set projectionMatrix(t3) {
    n3(this._projectionMatrix, t3), this._projectionDirty = false, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get fov() {
    return this._fov;
  }
  set fov(t3) {
    this._fov = t3, this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get fovX() {
    return g(this._fov, this.width, this.height);
  }
  set fovX(t3) {
    this._fov = l(t3, this.width, this.height), this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get fovY() {
    return k(this._fov, this.width, this.height);
  }
  set fovY(t3) {
    this._fov = m(t3, this.width, this.height), this._projectionDirty = true, this._inverseProjectionDirty = true, this._viewProjectionDirty = true, this._frustumDirty = true;
  }
  get distance() {
    return x(this._center, this.eye);
  }
  get frustum() {
    return this._recomputeFrustum(), this._frustum;
  }
  get viewInverseTransposeMatrix() {
    return (this._viewInverseTransposeMatrixDirty || this._viewDirty) && (h(this._viewInverseTransposeMatrix, this.viewMatrix), o2(this._viewInverseTransposeMatrix, this._viewInverseTransposeMatrix), this._viewInverseTransposeMatrixDirty = false), this._viewInverseTransposeMatrix;
  }
  depthNDCToWorld(t3) {
    const i3 = 2 * t3 - 1;
    return 2 * this.near * this.far / (this.far + this.near - i3 * (this.far - this.near));
  }
  get perRenderPixelRatio() {
    return Math.tan(this.fovX / 2) / (this.width / 2);
  }
  get perScreenPixelRatio() {
    return this.perRenderPixelRatio * this._pixelRatio;
  }
  get aboveGround() {
    return this.relativeElevation && this.relativeElevation >= 0;
  }
  copyFrom(t3) {
    r3(this._ray.origin, t3.eye), r3(this._center, t3.center), r3(this._up, t3.up), a(this._viewport, t3.viewport), a(this._padding, t3.padding), a2(this._nearFar, t3.nearFar), this._fov = t3.fov, this.relativeElevation = t3.relativeElevation;
    const i3 = t3;
    return this._viewDirty = i3._viewDirty, this._viewDirty || (n3(this._viewMatrix, t3.viewMatrix), r3(this._viewRight, t3.viewRight), r3(this._viewUp, t3.viewUp), r3(this._viewForward, t3.viewForward)), i3._projectionDirty ? this._projectionDirty = true : (n3(this._projectionMatrix, t3.projectionMatrix), this._projectionDirty = false), this._viewProjectionDirty = true, this._inverseProjectionDirty = true, this._frustumDirty = i3._frustumDirty, this._frustumDirty || (i2(this._frustum, t3.frustum), this._frustumDirty = false), i3._viewInverseTransposeMatrixDirty ? this._viewInverseTransposeMatrixDirty = true : (n3(this._viewInverseTransposeMatrix, t3.viewInverseTransposeMatrix), this._viewInverseTransposeMatrixDirty = false), a(this._fullViewport, t3.fullViewport), this._pixelRatio = t3.pixelRatio, this;
  }
  copyViewFrom(t3) {
    this.eye = t3.eye, this.center = t3.center, this.up = t3.up;
  }
  clone() {
    return new K().copyFrom(this);
  }
  equals(t3) {
    return F(this.eye, t3.eye) && F(this._center, t3.center) && F(this._up, t3.up) && D(this._viewport, t3.viewport) && D(this._padding, t3.padding) && S(this._nearFar, t3.nearFar) && this._fov === t3.fov && this._pixelRatio === t3.pixelRatio && this.relativeElevation === t3.relativeElevation;
  }
  almostEquals(t3) {
    if (this._pixelRatio !== t3.pixelRatio || Math.abs(t3.fov - this._fov) >= 1e-3)
      return false;
    const i3 = 5e-4, e3 = 1 - 1e-10;
    J($, t3.eye, t3.center), J(tt, this.eye, this._center);
    const r6 = P($, tt), s5 = Z($), h2 = Z(tt);
    return r6 * r6 >= e3 * s5 * h2 && X(t3.eye, this.eye) < Math.max(s5, h2) * i3 * i3 && b(t3.padding, this._padding) < 0.5 && b(t3.viewport, this._viewport) < 0.5;
  }
  computeRenderPixelSizeAt(t3) {
    return this.computeRenderPixelSizeAtDist(this._viewDirectionDistance(t3));
  }
  computeRenderPixelSizeAtDist(t3) {
    return t3 * this.perRenderPixelRatio;
  }
  computeScreenPixelSizeAt(t3) {
    return this.computeScreenPixelSizeAtDist(this._viewDirectionDistance(t3));
  }
  _viewDirectionDistance(t3) {
    return Math.abs(f(this.viewForward, e($, t3, this.eye)));
  }
  computeScreenPixelSizeAtDist(t3) {
    return t3 * this.perScreenPixelRatio;
  }
  computeDistanceFromRadius(t3, i3) {
    return t3 / Math.tan(Math.min(this.fovX, this.fovY) / (2 * (i3 || 1)));
  }
  getScreenCenter(t3 = i()) {
    return t3[0] = (this.padding[et.LEFT] + this.width / 2) / this._pixelRatio, t3[1] = (this.padding[et.TOP] + this.height / 2) / this._pixelRatio, t3;
  }
  getRenderCenter(t3, i3 = 0.5, e3 = 0.5) {
    return t3[0] = this.padding[et.LEFT] + this.width * i3, t3[1] = this.padding[et.BOTTOM] + this.height * e3, t3[2] = 0.5, t3;
  }
  setGLViewport(t3) {
    const i3 = this.viewport, e3 = this.padding;
    t3.setViewport(i3[0] - e3[3], i3[1] - e3[2], i3[2] + e3[1] + e3[3], i3[3] + e3[0] + e3[2]);
  }
  applyProjection(t3, e3) {
    t3 !== Q && r3(Q, t3), Q[3] = 1, w(Q, Q, this.projectionMatrix);
    const r6 = Math.abs(Q[3]);
    q(Q, Q, 1 / r6);
    const s5 = this.fullViewport;
    e3[0] = s3(0, s5[0] + s5[2], 0.5 + 0.5 * Q[0]), e3[1] = s3(0, s5[1] + s5[3], 0.5 + 0.5 * Q[1]), e3[2] = 0.5 * (Q[2] + 1), e3[3] = r6;
  }
  unapplyProjection(t3, i3) {
    const e3 = this.fullViewport;
    Q[0] = (t3[0] / (e3[0] + e3[2]) * 2 - 1) * t3[3], Q[1] = (t3[1] / (e3[1] + e3[3]) * 2 - 1) * t3[3], Q[2] = (2 * t3[2] - 1) * t3[3], Q[3] = t3[3], w(Q, Q, this.inverseProjectionMatrix), i3[0] = Q[0], i3[1] = Q[1], i3[2] = Q[2];
  }
  projectToScreen(t3, i3) {
    this.projectToRenderScreen(t3, it), this.renderToScreen(it, i3);
  }
  projectToRenderScreen(t3, e3) {
    if (Q[0] = t3[0], Q[1] = t3[1], Q[2] = t3[2], Q[3] = 1, w(Q, Q, this.viewProjectionMatrix), 0 === Q[3])
      return null;
    q(Q, Q, 1 / Math.abs(Q[3]));
    const r6 = this.fullViewport;
    return "x" in e3 ? (e3.x = s3(0, r6[0] + r6[2], 0.5 + 0.5 * Q[0]), e3.y = s3(0, r6[1] + r6[3], 0.5 + 0.5 * Q[1])) : (e3[0] = s3(0, r6[0] + r6[2], 0.5 + 0.5 * Q[0]), e3[1] = s3(0, r6[1] + r6[3], 0.5 + 0.5 * Q[1]), e3.length > 2 && (e3[2] = 0.5 * (Q[2] + 1))), e3;
  }
  unprojectFromScreen(t3, i3) {
    return this.unprojectFromRenderScreen(this.screenToRender(t3, it), i3);
  }
  unprojectFromRenderScreen(t3, i3) {
    if (u(Z2, this.projectionMatrix, this.viewMatrix), !h(Z2, Z2))
      return null;
    const e3 = this.fullViewport;
    return Q[0] = 2 * (t3[0] - e3[0]) / e3[2] - 1, Q[1] = 2 * (t3[1] - e3[1]) / e3[3] - 1, Q[2] = 2 * t3[2] - 1, Q[3] = 1, w(Q, Q, Z2), 0 === Q[3] ? null : (i3[0] = Q[0] / Q[3], i3[1] = Q[1] / Q[3], i3[2] = Q[2] / Q[3], i3);
  }
  constrainWindowSize(t3, i3, e3, r6 = e3) {
    const s5 = t3 * this._pixelRatio, h2 = i3 * this._pixelRatio, o3 = Math.max(s5 - e3 / 2, 0), n4 = Math.max(this.fullHeight - h2 - r6 / 2, 0), a3 = -Math.min(s5 - e3 / 2, 0), _2 = -Math.min(this.fullHeight - h2 - r6 / 2, 0);
    return [o3, n4, e3 - a3 - -Math.min(this.fullWidth - s5 - e3 / 2, 0), r6 - _2 - -Math.min(h2 - r6 / 2, 0)];
  }
  computeUp(t3) {
    t3 === l2.Global ? this._computeUpGlobal() : this._computeUpLocal();
  }
  screenToRender(t3, i3) {
    const e3 = t3[0] * this._pixelRatio, r6 = this.fullHeight - t3[1] * this._pixelRatio;
    return i3[0] = e3, i3[1] = r6, i3;
  }
  renderToScreen(t3, i3) {
    const e3 = t3[0] / this._pixelRatio, r6 = (this.fullHeight - t3[1]) / this._pixelRatio;
    i3[0] = e3, i3[1] = r6;
  }
  _computeUpGlobal() {
    e($, this.center, this.eye);
    const t3 = s2(this.center);
    t3 < 1 ? (o(this._up, 0, 0, 1), this._markViewDirty()) : Math.abs(P($, this.center)) > 0.9999 * s2($) * t3 || (_(this._up, $, this.center), _(this._up, this._up, $), z(this._up, this._up), this._markViewDirty());
  }
  _computeUpLocal() {
    H($, this.eye, this.center), Math.abs($[2]) <= 0.9999 && (q($, $, $[2]), o(this._up, -$[0], -$[1], 1 - $[2]), z(this._up, this._up), this._markViewDirty());
  }
  _compareAndSetView(t3, i3) {
    "number" == typeof t3[0] && isFinite(t3[0]) && "number" == typeof t3[1] && isFinite(t3[1]) && "number" == typeof t3[2] && isFinite(t3[2]) ? F(t3, i3) || (r3(i3, t3), this._markViewDirty()) : J2.warn("Camera vector contains invalid number, ignoring value");
  }
  _markViewDirty() {
    this._viewDirty = true, this._frustumDirty = true, this._viewProjectionDirty = true;
  }
  _recomputeFrustum() {
    this._frustumDirty && (s4(this.viewMatrix, this.projectionMatrix, this._frustum), this._frustumDirty = false);
  }
  _ensureViewClean() {
    this._viewDirty && (F2(this._viewMatrix, this.eye, this._center, this._up), o(this._viewForward, -this._viewMatrix[2], -this._viewMatrix[6], -this._viewMatrix[10]), o(this._viewUp, this._viewMatrix[1], this._viewMatrix[5], this._viewMatrix[9]), o(this._viewRight, this._viewMatrix[0], this._viewMatrix[4], this._viewMatrix[8]), this._viewDirty = false, this._viewInverseTransposeMatrixDirty = true);
  }
};
var Q = n2();
var Z2 = e2();
var $ = n();
var tt = n();
var it = x2();
var et;
!function(t3) {
  t3[t3.TOP = 0] = "TOP", t3[t3.RIGHT = 1] = "RIGHT", t3[t3.BOTTOM = 2] = "BOTTOM", t3[t3.LEFT = 3] = "LEFT";
}(et || (et = {}));

export {
  K,
  et
};
//# sourceMappingURL=chunk-5ZS6RUSM.js.map
