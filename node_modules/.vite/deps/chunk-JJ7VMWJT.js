import {
  $,
  H
} from "./chunk-RN2KRYDN.js";
import {
  o
} from "./chunk-DMJWTK32.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  o as o2
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  t6 as t
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  A2 as A
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/geometry/HeightModelInfo.js
var d2;
var p = o()({ orthometric: "gravity-related-height", gravity_related_height: "gravity-related-height", ellipsoidal: "ellipsoidal" });
var u = p.jsonValues.slice();
A(u, "orthometric");
var g = o()({ meter: "meters", foot: "feet", "us-foot": "us-feet", "clarke-foot": "clarke-feet", "clarke-yard": "clarke-yards", "clarke-link": "clarke-links", "sears-yard": "sears-yards", "sears-foot": "sears-feet", "sears-chain": "sears-chains", "benoit-1895-b-chain": "benoit-1895-b-chains", "indian-yard": "indian-yards", "indian-1937-yard": "indian-1937-yards", "gold-coast-foot": "gold-coast-feet", "sears-1922-truncated-chain": "sears-1922-truncated-chains", "50-kilometers": "50-kilometers", "150-kilometers": "150-kilometers" });
var m = d2 = class extends l {
  constructor(e2) {
    super(e2), this.heightModel = "gravity-related-height", this.heightUnit = "meters", this.vertCRS = null;
  }
  writeHeightModel(e2, t2, r2) {
    return p.write(e2, t2, r2);
  }
  readHeightModel(e2, t2, r2) {
    const o3 = p.read(e2);
    return o3 || (r2 && r2.messages && r2.messages.push(f(e2, { context: r2 })), null);
  }
  readHeightUnit(e2, t2, r2) {
    const o3 = g.read(e2);
    return o3 || (r2 && r2.messages && r2.messages.push(y(e2, { context: r2 })), null);
  }
  readHeightUnitService(e2, t2, r2) {
    const o3 = H(e2) || g.read(e2);
    return o3 || (r2 && r2.messages && r2.messages.push(y(e2, { context: r2 })), null);
  }
  readVertCRS(e2, t2) {
    return t2.vertCRS || t2.ellipsoid || t2.geoid;
  }
  clone() {
    return new d2({ heightModel: this.heightModel, heightUnit: this.heightUnit, vertCRS: this.vertCRS });
  }
  equals(e2) {
    return !!e2 && (this === e2 || this.heightModel === e2.heightModel && this.heightUnit === e2.heightUnit && this.vertCRS === e2.vertCRS);
  }
  static deriveUnitFromSR(e2, t2) {
    const r2 = $(t2);
    return new d2({ heightModel: e2.heightModel, heightUnit: r2, vertCRS: e2.vertCRS });
  }
  write(e2, t2) {
    return t2 = { origin: "web-scene", ...t2 }, super.write(e2, t2);
  }
  static fromJSON(e2) {
    if (!e2)
      return null;
    const t2 = new d2();
    return t2.read(e2, { origin: "web-scene" }), t2;
  }
};
function y(e2, t2) {
  return new t("height-unit:unsupported", `Height unit of value '${e2}' is not supported`, t2);
}
function f(e2, t2) {
  return new t("height-model:unsupported", `Height model of value '${e2}' is not supported`, t2);
}
e([d({ type: p.apiValues, constructOnly: true, json: { origins: { "web-scene": { type: u, default: "ellipsoidal" } } } })], m.prototype, "heightModel", void 0), e([r("web-scene", "heightModel")], m.prototype, "writeHeightModel", null), e([o2(["web-scene", "service"], "heightModel")], m.prototype, "readHeightModel", null), e([d({ type: g.apiValues, constructOnly: true, json: { origins: { "web-scene": { type: g.jsonValues, write: g.write } } } })], m.prototype, "heightUnit", void 0), e([o2("web-scene", "heightUnit")], m.prototype, "readHeightUnit", null), e([o2("service", "heightUnit")], m.prototype, "readHeightUnitService", null), e([d({ type: String, constructOnly: true, json: { origins: { "web-scene": { write: true } } } })], m.prototype, "vertCRS", void 0), e([o2("service", "vertCRS", ["vertCRS", "ellipsoid", "geoid"])], m.prototype, "readVertCRS", null), m = d2 = e([n("esri.geometry.HeightModelInfo")], m);
var v = m;

export {
  v
};
//# sourceMappingURL=chunk-JJ7VMWJT.js.map
