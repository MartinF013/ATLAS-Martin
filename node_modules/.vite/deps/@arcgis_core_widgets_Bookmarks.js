import {
  g,
  p
} from "./chunk-UKL5ZIG7.js";
import {
  y as y2
} from "./chunk-E5H77TRE.js";
import {
  sortable_esm_default
} from "./chunk-IEMNNLIH.js";
import {
  u as u2
} from "./chunk-QNKOXOOY.js";
import {
  n as n4
} from "./chunk-XZTXACPW.js";
import {
  e as e3
} from "./chunk-EHYYP2L2.js";
import {
  t as t2
} from "./chunk-E447OCKN.js";
import {
  O,
  e2
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n3
} from "./chunk-UHJVTABQ.js";
import {
  f,
  k
} from "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-TBT57L4K.js";
import {
  a as a2
} from "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  a,
  h,
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-CF56UYH2.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  n as n2
} from "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import {
  L,
  S
} from "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import {
  s as s3
} from "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  i
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/Bookmarks/BookmarksUserState.js
var s4 = class extends y {
  constructor(t3) {
    super(t3);
  }
  get editedBookmark() {
    const { bookmark: t3 } = this;
    return t3 ? this._get("editedBookmark") || t3.clone() : null;
  }
  get state() {
    return this._get("state");
  }
  set state(t3) {
    this.validationState = void 0, this.loading = void 0, this._set("state", t3);
  }
};
e([d()], s4.prototype, "bookmark", void 0), e([d({ readOnly: true })], s4.prototype, "editedBookmark", null), e([d()], s4.prototype, "state", null), e([d()], s4.prototype, "validationState", void 0), e([d()], s4.prototype, "loading", void 0), s4 = e([n("esri.widgets.Bookmarks.UserState")], s4);
var a3 = s4;

// node_modules/@arcgis/core/widgets/Bookmarks/BookmarksViewModel.js
var k2 = "esri.widgets.Bookmarks.BookmarksViewModel";
var w = s.getLogger(k2);
var d2 = j.ofType(g);
var h2 = { width: 128, height: 128, format: "png" };
var v = { takeScreenshot: true, captureViewpoint: true, captureRotation: true, captureScale: true, captureTimeExtent: true };
var b = { time: true };
var f2 = class extends e3(n2.EventedAccessor) {
  constructor(t3) {
    super(t3), this.abilities = { ...b }, this.activeBookmark = null;
  }
  destroy() {
    this.view = null, this._set("activeBookmark", null);
  }
  castAbilities(t3) {
    return { ...b, ...t3 };
  }
  set bookmarks(t3) {
    void 0 !== t3 ? this._override("bookmarks", t3) : this._clearOverride("bookmarks");
  }
  get bookmarks() {
    return this.get("view.map.bookmarks") || new d2();
  }
  set defaultCreateOptions(t3) {
    this._set("defaultCreateOptions", { ...v, ...t3 });
  }
  get defaultCreateOptions() {
    return v;
  }
  set defaultEditOptions(t3) {
    this._set("defaultEditOptions", { ...v, ...t3 });
  }
  get defaultEditOptions() {
    return v;
  }
  get state() {
    const t3 = this.get("view");
    return t3 && !t3.ready ? "loading" : "ready";
  }
  get view() {
    return this._get("view");
  }
  set view(t3) {
    t3 && "2d" !== t3.type && w.error(new s2("view:invalid-view", "SceneView is not supported", { view: t3 })), this._set("view", t3);
  }
  async createBookmark(t3) {
    const { view: e4, defaultCreateOptions: o2, abilities: r2 } = this;
    if (!e4) {
      const t4 = new s2("create-bookmark:invalid-view", "Cannot create a bookmark without a view.");
      throw w.error(t4), t4;
    }
    const { takeScreenshot: a4, screenshotSettings: n5, captureViewpoint: c3, captureRotation: p3, captureScale: m, captureTimeExtent: u3 } = { ...o2, ...t3 }, k3 = a4 ? await this._createThumbnail(n5) : void 0, d3 = r2.time && u3 && r(e4.timeExtent) ? e4.timeExtent.clone() : void 0;
    return new g({ ...k3 && { thumbnail: k3 }, ...u3 && { timeExtent: d3 }, ...c3 && { viewpoint: this._createViewpoint({ view: e4, captureScale: m, captureRotation: p3 }) } });
  }
  async editBookmark(t3, e4) {
    const { view: o2, defaultEditOptions: r2 } = this;
    if (!o2) {
      const t4 = new s2("edit-bookmark:invalid-view", "Cannot edit a bookmark without a view.");
      throw w.error(t4), t4;
    }
    const { takeScreenshot: a4, screenshotSettings: n5, captureViewpoint: c3, captureRotation: p3, captureScale: m, captureTimeExtent: l2 } = { ...r2, ...e4 }, u3 = a4 ? await this._createThumbnail(n5) : void 0;
    return u3 && (t3.thumbnail = u3), c3 && (t3.viewpoint = this._createViewpoint({ view: o2, captureScale: m, captureRotation: p3 })), l2 && r(o2.timeExtent) && (t3.timeExtent = o2.timeExtent.clone()), this.emit("bookmark-edit", { bookmark: t3 }), t3;
  }
  goTo(t3) {
    const { abilities: e4, view: o2 } = this;
    if (!o2) {
      const t4 = new s2("go-to:invalid-view", "Cannot go to a bookmark without a view");
      return w.error(t4), Promise.reject(t4);
    }
    const r2 = t3 == null ? void 0 : t3.viewpoint;
    if (!r2) {
      const e5 = new s2("go-to:invalid-bookmark", "Cannot go to a bookmark that does not contain a 'viewpoint'.", { bookmark: t3 });
      return w.error(e5), Promise.reject(e5);
    }
    this._set("activeBookmark", t3);
    const a4 = { target: r2 }, s5 = this.callGoTo(a4), n5 = t3 == null ? void 0 : t3.timeExtent;
    return e4.time && n5 && (o2.timeExtent = n5), this.emit("bookmark-select", { bookmark: t3 }), s5.catch(() => {
    }).then(() => this._set("activeBookmark", null)), s5;
  }
  async _createThumbnail(t3) {
    const e4 = await this.view.takeScreenshot({ ...h2, ...t3 });
    return new p({ url: e4.dataUrl });
  }
  _createViewpoint({ view: t3, captureRotation: o2, captureScale: i4 }) {
    var _a, _b;
    const r2 = (_a = t3.viewpoint) == null ? void 0 : _a.clone();
    return new u2({ targetGeometry: (_b = t3.extent) == null ? void 0 : _b.clone(), rotation: o2 && (r2 == null ? void 0 : r2.rotation) || 0, scale: i4 && (r2 == null ? void 0 : r2.scale) || 0 });
  }
};
e([d()], f2.prototype, "abilities", void 0), e([s3("abilities")], f2.prototype, "castAbilities", null), e([d({ readOnly: true })], f2.prototype, "activeBookmark", void 0), e([d({ type: d2 })], f2.prototype, "bookmarks", null), e([d()], f2.prototype, "defaultCreateOptions", null), e([d()], f2.prototype, "defaultEditOptions", null), e([d({ readOnly: true })], f2.prototype, "state", null), e([d({ value: null })], f2.prototype, "view", null), f2 = e([n(k2)], f2);
var g2 = f2;

// node_modules/@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuItem.js
var i2;
var p2 = i2 = class extends y {
  constructor(o2) {
    super(o2), this.autoCloseMenu = false, this.iconClass = null, this.items = null, this.label = null, this.open = false, this.selected = false, this.selectionEnabled = false, this.clickFunction = null;
  }
  castItems(o2) {
    return o2 ? o2.map((o3) => o3 instanceof i2 ? o3 : new i2(o3)) : null;
  }
};
e([d()], p2.prototype, "autoCloseMenu", void 0), e([d()], p2.prototype, "iconClass", void 0), e([d()], p2.prototype, "items", void 0), e([s3("items")], p2.prototype, "castItems", null), e([d()], p2.prototype, "label", void 0), e([d()], p2.prototype, "open", void 0), e([d()], p2.prototype, "selected", void 0), e([d()], p2.prototype, "selectionEnabled", void 0), e([d()], p2.prototype, "clickFunction", void 0), p2 = i2 = e([n("esri.widgets.FeatureTable.Grid.support.ButtonMenuItem")], p2);
var c = p2;

// node_modules/@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuViewModel.js
var c2 = class extends y {
  constructor(o2) {
    super(o2), this.items = null, this.open = false;
  }
  castItems(o2) {
    return o2 ? o2.map((o3) => o3 instanceof c ? o3 : new c(o3)) : null;
  }
};
e([d()], c2.prototype, "items", void 0), e([s3("items")], c2.prototype, "castItems", null), e([d()], c2.prototype, "open", void 0), c2 = e([n("esri.widgets.FeatureTable.Grid.support.ButtonMenuViewModel")], c2);
var i3 = c2;

// node_modules/@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenu.js
var h3 = { base: "esri-button-menu", content: "esri-button-menu__content", contentWrapper: "esri-button-menu__content-wrapper", itemWrapper: "esri-button-menu__item-wrapper", label: "esri-button-menu__label", icon: "esri-button-menu__icon", item: "esri-button-menu__item", itemLabel: "esri-button-menu__item-label", itemLabelContent: "esri-button-menu__item-label-content", selectableMenuItem: "esri-button-menu__item--selectable", selectedMenuItem: "esri-button-menu__item--selected", checkbox: "esri-button-menu__checkbox", embeddedContentWrapper: "esri-button-menu__embedded-content-wrapper", button: "esri-button-menu__button", buttonSelected: "esri-button-menu__button--selected", defaultIconClass: "esri-icon-menu", widget: "esri-widget" };
var b2 = class extends a2(O) {
  constructor(e4, t3) {
    super(e4, t3), this._menuContentNode = null, this._popover = null, this._rootNode = null, this.disabled = false, this.iconClass = null, this.items = null, this.label = null, this.open = null, this.viewModel = new i3(), this._handleOutsideClick = this._handleOutsideClick.bind(this);
  }
  postInitialize() {
    this._popover = new y2({ owner: this, open: !!this.open, placement: f(this.container) ? "bottom-start" : "bottom-end", renderContentFunction: this.renderMenuContent, anchorElement: this._rootNode }), this.handles.add(l(() => this.open, (e4) => this._popover.set("open", e4))), document.addEventListener("click", this._handleOutsideClick);
  }
  destroy() {
    var _a;
    (_a = this._popover) == null ? void 0 : _a.destroy(), this._popover = null, document.removeEventListener("click", this._handleOutsideClick);
  }
  _handleOutsideClick(e4) {
    var _a, _b;
    if (!this.open || !this._rootNode || !this._menuContentNode)
      return;
    const t3 = e4.target;
    ((_a = this._menuContentNode) == null ? void 0 : _a.contains(t3)) || ((_b = this._rootNode) == null ? void 0 : _b.contains(t3)) || (this.open = false);
  }
  render() {
    return n3("div", { afterCreate: this._afterRootNodeCreate, bind: this, "data-node-ref": "_rootNode", class: this.classes(h3.base, h3.widget), key: "menu" }, this.renderMenuButton());
  }
  renderMenuButton() {
    const { iconClass: e4, id: t3, label: n5, open: o2 } = this, s5 = this.classes([h3.button, e4 || h3.defaultIconClass, o2 ? h3.buttonSelected : null]);
    return n3("button", { "aria-pressed": o2.toString(), "aria-controls": `${t3}-menu`, "aria-expanded": o2.toString(), "aria-haspopup": "true", "aria-label": n5, bind: this, class: s5, disabled: this.disabled, id: `${t3}-button`, title: n5, selected: o2, onclick: this._toggleOpen, tabindex: this.disabled ? -1 : 0, type: "button" });
  }
  renderMenuContent() {
    var _a;
    const { id: e4, open: t3 } = this;
    return n3("div", { afterCreate: this._afterMenuContentNodeCreate, bind: this, class: h3.content, "data-node-ref": "_menuContentNode", key: "esri-button-menu-content", hidden: !t3 }, n3("ul", { "aria-labelledby": `${e4}-button`, bind: this, class: h3.itemWrapper, id: `${e4}-menu`, role: "menu" }, ((_a = this.items) == null ? void 0 : _a.length) && this.renderItems()));
  }
  renderItems() {
    var _a;
    return (_a = this.items) == null ? void 0 : _a.map((e4, t3) => this.renderItem(e4, t3));
  }
  renderItem(e4, t3, n5) {
    var _a;
    const s5 = r(n5) ? `${this.id}-menu-item-${t3}-${n5}` : `${this.id}-menu-item-${t3}`, i4 = `${s5}-label`, r2 = this.classes(h3.item, e4.selectionEnabled ? h3.selectableMenuItem : null, e4.selectionEnabled && e4.selected ? h3.selectedMenuItem : null);
    return n3("li", { afterCreate: this._afterMenuItemCreate, bind: this, class: r2, "data-item-index": t3, "data-item-subIndex": n5, for: s5, key: s5, onkeydown: (t4) => this._handleMenuItemKeydown(t4, e4), onclick: (t4) => this._handleMenuItemInteraction(t4, e4), role: "menuitem", tabindex: this.disabled ? -1 : 0 }, n3("input", { disabled: true, checked: e4.selected, class: h3.checkbox, id: s5, name: s5, tabindex: "-1", type: "checkbox" }), n3("label", { bind: this, class: this.classes(h3.button, h3.itemLabel), for: s5, id: i4 }, n3("span", { class: this.classes(h3.icon, e4.iconClass), "aria-hidden": "true" }), n3("span", { class: h3.itemLabelContent }, e4.label)), n3("ul", { "aria-labelledby": i4, class: h3.embeddedContentWrapper, id: `${this.id}-submenu`, role: "menu" }, (_a = e4 == null ? void 0 : e4.items) == null ? void 0 : _a.map((e5, n6) => this.renderItem(e5, t3, n6))));
  }
  _afterRootNodeCreate(e4) {
    var _a;
    this._rootNode = e4, (_a = this._popover) == null ? void 0 : _a.set("anchorElement", () => e4);
  }
  _handleMenuItemInteraction(e4, t3) {
    t3.selected = !t3.selected, t3.open = !(!t3.selected || !t3.items), t3.autoCloseMenu && this.set("open", false), t3.clickFunction && t3.clickFunction({ event: e4, item: t3 }), e4.stopPropagation();
  }
  _handleMenuItemKeydown(e4, n5) {
    const o2 = i(e4);
    k(o2) && this._handleMenuItemInteraction(e4, n5), "Escape" === o2 && (this.open = false, e4.preventDefault(), e4.stopPropagation());
  }
  _afterMenuContentNodeCreate(e4) {
    this._menuContentNode = e4, e4.focus();
  }
  _toggleOpen() {
    this.open = !this.open;
  }
  _afterMenuItemCreate(e4) {
    0 === e4["data-item-index"] && e4.focus();
  }
};
e([d()], b2.prototype, "disabled", void 0), e([d()], b2.prototype, "iconClass", void 0), e([o("viewModel.items")], b2.prototype, "items", void 0), e([d()], b2.prototype, "label", void 0), e([o("viewModel.open")], b2.prototype, "open", void 0), e([d()], b2.prototype, "viewModel", void 0), b2 = e([n("esri.widgets.FeatureTable.Grid.support.ButtonMenu")], b2);
var _ = b2;

// node_modules/@arcgis/core/widgets/Bookmarks.js
function S2(t3, e4, o2) {
  t3.splice(o2, 0, t3.splice(e4, 1)[0]);
}
var x = "bookmarks";
var A = "data-bookmark-uid";
var T = { base: "esri-bookmarks esri-widget--panel", loaderContainer: "esri-bookmarks__loader-container", loader: "esri-bookmarks__loader", fadeIn: "esri-bookmarks--fade-in", bookmarkList: "esri-bookmarks__list", bookmarkListSortable: "esri-bookmarks__list--sortable", bookmark: "esri-bookmarks__bookmark", bookmarkButton: "esri-bookmarks__bookmark-button", bookmarkImageContainer: "esri-bookmarks__bookmark-image-container", bookmarkEditButtonContainer: "esri-bookmarks__bookmark-edit-button-container", bookmarkEditButton: "esri-bookmarks__bookmark-edit-button", bookmarkDragHandle: "esri-bookmarks_bookmark-drag-handle", bookmarkDragHandleIcon: "esri-bookmarks_bookmark-drag-handle-icon", bookmarkIcon: "esri-bookmarks__bookmark-icon", bookmarkImage: "esri-bookmarks__image", bookmarkLabel: "esri-bookmarks__bookmark-label", bookmarkName: "esri-bookmarks__bookmark-name", bookmarkTimeExtent: "esri-bookmarks__bookmark-time-extent", bookmarkActive: "esri-bookmarks__bookmark--active", noBookmarksContainer: "esri-widget__content--empty", noBookmarksHeader: "esri-bookmarks__no-bookmarks-heading", noBookmarksIcon: "esri-widget__no-bookmark-icon", noBookmarksDescription: "esri-bookmarks__no-bookmarks-description", addingBookmark: "esri-bookmarks__adding-bookmark", addBookmark: "esri-bookmarks__add-bookmark", addBookmarkButton: "esri-bookmarks__add-bookmark-button", addBookmarkIcon: "esri-bookmarks__add-bookmark-icon", authoringCard: "esri-bookmarks__authoring-card", authoringContainer: "esri-bookmarks__authoring-container", authoringForm: "esri-bookmarks__authoring-form", authoringLabel: "esri-bookmarks__authoring-label", authoringActions: "esri-bookmarks__authoring-actions", authoringInputInvalid: "esri-bookmarks__authoring-input--invalid", authoringDeleteButton: "esri-bookmarks__authoring-delete-button", authoringCancelButton: "esri-bookmarks__authoring-cancel-button", timeExtentContainer: "esri-bookmarks__time-extent-container", timeExtent: "esri-bookmarks__time-extent", timeExtentGroup: "esri-bookmarks__time-extent-group", timeExtentDate: "esri-bookmarks__time-extent-date", timeExtentTime: "esri-bookmarks__time-extent-time", esriWidget: "esri-widget", esriWidgetDisabled: "esri-widget--disabled", esriButton: "esri-button", esriButtonTertiary: "esri-button--tertiary", esriInput: "esri-input", iconHandle: "esri-icon-handle-vertical", iconPlus: "esri-icon-plus", iconEdit: "esri-icon-edit", iconHandleHorizontal: "esri-icon-handle-horizontal", iconRefresh: "esri-icon-refresh", iconLink: "esri-icon-link", iconRemove: "esri-icon-erase", widgetIcon: "esri-icon-bookmark", header: "esri-widget__heading", loading: "esri-icon-loading-indicator", rotating: "esri-rotating" };
var C = { addBookmark: true, thumbnail: true, time: true };
var U = /^https:\/\/.*/i;
var M = "esri.widgets.Bookmarks";
var N = class extends O {
  constructor(t3, e4) {
    super(t3, e4), this._handles = new u(), this._addInputNode = null, this._editInputNode = null, this._urlEditInputNode = null, this._addBookmarkButtonNode = null, this._focusAddBookmarkButton = false, this._focusEditInputBox = false, this._focusAddInputBox = false, this._focusUrlEditInputBox = false, this._sortable = null, this._sortableNode = null, this._focusSortUid = null, this._selectedSortUid = null, this._sortableSavedItems = null, this._editIncludeTimeExtent = null, this._userState = null, this.defaultCreateOptions = null, this.defaultEditOptions = null, this.bookmarks = null, this.disabled = false, this.editingEnabled = false, this.headingLevel = 2, this.goToOverride = null, this.iconClass = T.widgetIcon, this.label = void 0, this.messages = null, this.messagesCommon = null, this.messagesUnits = null, this.view = null, this.viewModel = new g2(), this.visibleElements = { ...C };
  }
  initialize() {
    this.own([l(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.bookmarks;
    }, () => this._bookmarksInitialized(), h), l(() => this.editingEnabled, () => this._toggleSorting(), h)]);
  }
  destroy() {
    this._destroySortable(), this._handles.destroy(), this._handles = null, this._editMenu.destroy();
  }
  loadDependencies() {
    return Promise.all([import("./calcite-label-7VWEMPOG.js"), import("./calcite-switch-WOU3NSNJ.js")]);
  }
  get _editMenuItems() {
    var _a, _b;
    const { messages: t3, _userState: e4 } = this, o2 = (_b = (_a = e4 == null ? void 0 : e4.editedBookmark) == null ? void 0 : _a.thumbnail) == null ? void 0 : _b.url;
    return [new c({ label: t3 == null ? void 0 : t3.menu.refreshThumbnail, iconClass: T.iconRefresh, clickFunction: () => this._refreshThumbnail() }), new c({ label: U.test(o2) ? t3 == null ? void 0 : t3.menu.editImageUrl : t3 == null ? void 0 : t3.menu.useImageUrl, iconClass: T.iconLink, clickFunction: () => this._startUseImageUrl() }), o2 ? new c({ label: t3 == null ? void 0 : t3.menu.removeThumbnail, iconClass: T.iconRemove, clickFunction: () => this._removeThumbnail() }) : null].filter(Boolean);
  }
  get _editMenu() {
    const { _editMenuItems: t3, messages: e4, disabled: o2 } = this, i4 = this._get("_editMenu");
    i4 && i4.destroy();
    const s5 = new _({ disabled: o2, iconClass: T.iconHandleHorizontal, label: e4 == null ? void 0 : e4.menu.label });
    return s5.items = t3, s5;
  }
  castVisibleElements(t3) {
    return { ...C, ...t3 };
  }
  endAddBookmark() {
    this._userState = null;
  }
  goTo(t3) {
    return this.viewModel.goTo(t3);
  }
  render() {
    const { state: t3 } = this.viewModel, e4 = "loading" === t3 ? this.renderLoading() : this.renderBookmarks();
    return n3("div", { class: this.classes(T.base, T.esriWidget, { [T.esriWidgetDisabled]: this.disabled }) }, e4);
  }
  startAddBookmark() {
    this._userState = new a3({ state: "add" }), this._focusAddInputBox = true, this.scheduleRender();
  }
  renderLoading() {
    return n3("div", { class: T.loaderContainer, key: "loader", tabIndex: this.disabled ? -1 : null }, n3("div", { class: T.loader }));
  }
  renderNoBookmarksContainer() {
    const { messages: t3, disabled: e4 } = this;
    return n3("div", { class: T.noBookmarksContainer, key: "no-bookmarks", tabIndex: e4 ? -1 : null }, n3("span", { "aria-hidden": "true", class: this.classes(T.noBookmarksIcon, T.widgetIcon) }), n3(n4, { level: this.headingLevel, class: this.classes(T.header, T.noBookmarksHeader) }, t3 == null ? void 0 : t3.noBookmarksHeading), n3("p", { class: T.noBookmarksDescription }, t3 == null ? void 0 : t3.noBookmarksDescription));
  }
  renderAddBookmarkLoading() {
    var _a;
    return n3("div", { key: "adding-bookmark", class: T.addingBookmark }, n3("span", { "aria-hidden": "true", class: this.classes(T.loading, T.rotating) }), (_a = this.messages) == null ? void 0 : _a.addingBookmark);
  }
  renderBookmarkItems(t3) {
    if (!t3)
      return null;
    const { _userState: e4, editingEnabled: o2 } = this;
    return t3.map((t4) => o2 && t4 && e4 && ("edit" === e4.state || "edit-thumbnail" === e4.state) && e4.bookmark === t4 ? "edit-thumbnail" === e4.state ? this.renderEditingBookmarkUrl(e4.editedBookmark) : this.renderEditingBookmark(e4.editedBookmark) : this.renderBookmark(t4)).toArray();
  }
  renderBookmarksContainer(t3) {
    var _a;
    const { _userState: e4, editingEnabled: o2, disabled: i4 } = this, s5 = "add" === (e4 == null ? void 0 : e4.state), r2 = o2 && !s5 ? this.renderAddBookmarkButton() : null, a4 = o2 ? s5 && e4.loading ? this.renderAddBookmarkLoading() : "add" === (e4 == null ? void 0 : e4.state) ? this.renderAddingBookmark() : null : null;
    return [n3("ul", { key: "bookmark-list", "aria-label": (_a = this.messages) == null ? void 0 : _a.widgetLabel, class: this.classes(T.bookmarkList, { [T.bookmarkListSortable]: this.editingEnabled }), afterCreate: this._sortNodeCreated, afterRemoved: this._destroySortable, "data-node-ref": "_sortableNode", bind: this, tabIndex: i4 ? -1 : null }, this.renderBookmarkItems(t3)), r2, a4];
  }
  renderAddBookmarkButton() {
    var _a;
    return this.visibleElements.addBookmark ? n3("div", { key: "add-bookmark-item", class: T.addBookmark }, n3("button", { class: this.classes(T.esriButton, T.esriButtonTertiary, T.addBookmarkButton), disabled: this.disabled, onclick: this.startAddBookmark, afterCreate: this._storeAddBookmarkButton, afterUpdate: this._storeAddBookmarkButton, "data-node-ref": "_addBookmarkButtonNode", bind: this, type: "button" }, n3("span", { "aria-hidden": "true", class: this.classes(T.addBookmarkIcon, T.iconPlus) }), (_a = this.messages) == null ? void 0 : _a.addBookmark)) : null;
  }
  renderBookmarks() {
    const { bookmarks: t3 } = this.viewModel, e4 = t3 && t3.filter(Boolean), o2 = e4 && e4.length, i4 = o2 || this.editingEnabled ? this.renderBookmarksContainer(e4) : null;
    return [o2 ? null : this.renderNoBookmarksContainer(), i4];
  }
  renderEditContainer(t3) {
    const { messagesCommon: e4, disabled: o2 } = this;
    return n3("div", { class: T.bookmarkEditButtonContainer, key: "edit-container" }, n3("button", { disabled: o2, title: e4 == null ? void 0 : e4.edit, "aria-label": e4 == null ? void 0 : e4.edit, "data-bookmark": t3, onclick: this._showEditBookmarkForm, bind: this, class: T.bookmarkEditButton, type: "button" }, n3("span", { "aria-hidden": "true", class: T.iconEdit })));
  }
  renderDragHandle(t3) {
    const { messagesCommon: e4, disabled: o2 } = this, i4 = { [A]: t3.uid };
    return n3("div", { role: "button", tabIndex: o2 ? -1 : 0, key: "drag-handle", bind: this, class: T.bookmarkDragHandle, onkeydown: this._dragHandleKeydown, afterCreate: this._focusDragHandle, afterUpdate: this._focusDragHandle, onblur: this._dragHandleBlur, "aria-pressed": this._selectedSortUid === t3.uid ? "true" : "false", "aria-label": e4 == null ? void 0 : e4.dragHandleLabel, title: e4 == null ? void 0 : e4.dragHandleTitle, ...i4 }, n3("span", { "aria-hidden": "true", class: this.classes(T.bookmarkDragHandleIcon, T.iconHandle) }));
  }
  renderBookmarkImageIcon() {
    return n3("span", { "aria-hidden": "true", class: this.classes(T.bookmarkIcon, T.widgetIcon) });
  }
  renderBookmarkImage(t3) {
    const { visibleElements: e4 } = this, { thumbnail: o2 } = t3, i4 = o2 && o2.url || "";
    return e4.thumbnail && i4 ? n3("img", { src: i4, alt: "", class: T.bookmarkImage }) : null;
  }
  renderBookmarkTimeSwitch(t3) {
    const { messages: e4, disabled: o2 } = this, { timeExtent: i4 } = t3, { view: s5 } = this.viewModel;
    return s5.timeExtent || i4 ? n3("calcite-label", { layout: "inline-space-between", "disable-spacing": "true" }, e4.includeTimeExtent, n3("calcite-switch", { scale: "s", disabled: o2, checked: !!i4, onCalciteSwitchChange: (t4) => this._editIncludeTimeExtent = !!t4.detail.switched })) : null;
  }
  renderBookmarkTimeExtent(t3) {
    const { visibleElements: e4 } = this, { timeExtent: o2 } = t3;
    return o2 ? n3("span", { class: T.timeExtent }, [r(o2.start) && n3("span", { key: "start-date-group", class: T.timeExtentGroup }, n3("span", { key: "start-date", class: T.timeExtentDate }, this._formatDate(o2.start)), e4.time && n3("span", { key: "start-time", class: T.timeExtentTime }, this._formatTime(o2.start))), r(o2.end) && (t(o2.start) || o2.start.getTime() !== o2.end.getTime()) && n3("span", { key: "end-date-group", class: T.timeExtentGroup }, n3("span", { key: "end-date", class: T.timeExtentDate }, this._formatDate(o2.end)), e4.time && n3("span", { key: "end-time", class: T.timeExtentTime }, this._formatTime(o2.end)))]) : null;
  }
  renderBookmarkButton(t3) {
    const { messagesCommon: e4, disabled: o2 } = this, { name: i4, timeExtent: s5 } = t3, { abilities: r2 } = this.viewModel, a4 = i4 || (e4 == null ? void 0 : e4.untitled), n5 = n3("div", { class: T.bookmarkImageContainer }, this.renderBookmarkImage(t3) || this.renderBookmarkImageIcon()), d3 = r2.time && s5 ? n3("span", { key: "time-extent", class: T.bookmarkTimeExtent }, this.renderBookmarkTimeExtent(t3)) : null;
    return n3("button", { disabled: o2, key: "bookmark-button", class: T.bookmarkButton, bind: this, "data-bookmark": t3, onclick: this._goToBookmark, type: "button" }, n5, n3("div", { class: T.bookmarkLabel }, n3("span", { key: "bookmark-title", class: T.bookmarkName }, a4), d3));
  }
  renderBookmark(t3) {
    const { activeBookmark: e4 } = this.viewModel, o2 = { [T.bookmarkActive]: e4 === t3 }, i4 = this.editingEnabled ? this.renderEditContainer(t3) : null, s5 = { [A]: t3.uid }, r2 = this.editingEnabled ? this.renderDragHandle(t3) : null;
    return n3("li", { key: t3, class: this.classes(T.bookmark, o2), ...s5 }, r2, this.renderBookmarkButton(t3), i4);
  }
  renderEditingBookmarkName(t3) {
    const { messages: e4, _userState: o2, disabled: i4 } = this, s5 = "name-required" === o2.validationState;
    return n3("label", { class: T.authoringLabel }, e4 == null ? void 0 : e4.title, s5 ? n3("strong", null, e4 == null ? void 0 : e4.invalidTitle) : null, n3("input", { required: true, disabled: i4, bind: this, class: this.classes(T.esriInput, s5 ? T.authoringInputInvalid : null), type: "text", value: t3.name, afterCreate: this._storeEditInput, afterUpdate: this._focusEditInput, "data-bookmark": t3, "data-node-ref": "_editInputNode", placeholder: e4 == null ? void 0 : e4.titlePlaceholder }));
  }
  renderEditingBookmarkUrlActions() {
    const { messagesCommon: t3, disabled: e4 } = this;
    return n3("div", { class: T.authoringActions }, n3("input", { type: "button", disabled: e4, value: t3 == null ? void 0 : t3.back, class: this.classes(T.esriButton, T.esriButtonTertiary), onclick: this._closeUrlEditBookmarkForm, bind: this }), n3("input", { class: T.esriButton, disabled: e4, type: "submit", value: t3 == null ? void 0 : t3.add }));
  }
  renderEditingBookmarkActions() {
    const { messagesCommon: t3, disabled: e4 } = this, { bookmark: o2 } = this._userState;
    return n3("div", { class: T.authoringActions }, n3("input", { type: "button", disabled: e4, value: t3 == null ? void 0 : t3.delete, class: this.classes(T.esriButton, T.esriButtonTertiary, T.authoringDeleteButton), "data-bookmark": o2, onclick: this._deleteBookmark, bind: this }), n3("input", { disabled: e4, type: "button", value: t3 == null ? void 0 : t3.cancel, class: this.classes(T.esriButton, T.esriButtonTertiary), onclick: this._closeEditBookmarkForm, bind: this }), n3("input", { class: T.esriButton, disabled: e4, type: "submit", value: t3 == null ? void 0 : t3.save }));
  }
  renderEditingBookmarkUrlInput(t3) {
    var _a;
    const { messages: e4, _userState: o2, disabled: i4 } = this, s5 = (_a = t3.thumbnail) == null ? void 0 : _a.url, r2 = U.test(s5) ? s5 : null, a4 = "absolute-url-required" === o2.validationState;
    return n3("label", { class: T.authoringLabel }, a4 ? n3("strong", null, e4 == null ? void 0 : e4.invalidImageUrl) : null, n3("input", { required: true, disabled: i4, bind: this, class: this.classes(T.esriInput, a4 ? T.authoringInputInvalid : null), type: "text", value: r2, afterCreate: this._storeUrlEditInput, afterUpdate: this._focusUrlEditInput, "data-bookmark": t3, "data-node-ref": "_urlEditInputNode", title: e4 == null ? void 0 : e4.imageUrlTooltip, placeholder: e4 && `https://<${e4.imageUrlPlaceholder}>` }));
  }
  renderEditingBookmarkUrl(t3) {
    const e4 = { [A]: t3.uid };
    return n3("li", { key: "edit-bookmark-url-form", class: T.authoringCard, ...e4 }, n3("form", { class: T.authoringForm, disabled: this.disabled, onsubmit: this._editBookmarkUrlSubmit, bind: this }, this.renderEditingBookmarkUrlInput(t3), this.renderEditingBookmarkUrlActions()));
  }
  renderEditingBookmark(t3) {
    const e4 = { [A]: t3.uid }, { abilities: o2 } = this.viewModel, i4 = o2.time ? n3("div", { key: "edit-bookmark-time-container", class: T.timeExtentContainer }, this.renderBookmarkTimeSwitch(t3), this._editIncludeTimeExtent && this.renderBookmarkTimeExtent(t3)) : null;
    return n3("li", { key: "edit-bookmark-form", class: T.authoringCard, ...e4 }, n3("form", { class: T.authoringForm, disabled: this.disabled, onsubmit: this._editBookmarkSubmit, bind: this }, n3("div", { class: T.authoringContainer }, n3("div", { class: T.bookmarkImageContainer }, this.renderBookmarkImage(t3), this._editMenu.render()), this.renderEditingBookmarkName(t3)), i4, this.renderEditingBookmarkActions()));
  }
  renderAddingBookmarkName() {
    const { _userState: t3, messages: e4, disabled: o2 } = this, i4 = "name-required" === t3.validationState;
    return n3("label", { class: T.authoringLabel }, e4 == null ? void 0 : e4.title, i4 ? n3("strong", null, e4 == null ? void 0 : e4.invalidTitle) : null, n3("input", { required: true, disabled: o2, bind: this, class: this.classes(T.esriInput, i4 ? T.authoringInputInvalid : null), type: "text", afterCreate: this._storeAddInput, afterUpdate: this._focusAddInput, "data-node-ref": "_addInputNode", value: "", placeholder: e4 == null ? void 0 : e4.titlePlaceholder }));
  }
  renderAddingBookmarkActions() {
    const { messagesCommon: t3, disabled: e4 } = this;
    return n3("div", { class: this.classes(T.authoringActions) }, n3("input", { type: "button", disabled: e4, value: t3 == null ? void 0 : t3.cancel, class: this.classes(T.esriButton, T.esriButtonTertiary, T.authoringCancelButton), onclick: this._endAddBookmark.bind(this), bind: this }), n3("input", { class: T.esriButton, disabled: e4, type: "submit", value: t3 == null ? void 0 : t3.add }));
  }
  renderAddingBookmark() {
    return n3("div", { key: "add-bookmark-form", class: T.authoringCard }, n3("form", { class: T.authoringForm, onsubmit: this._addBookmarkSubmit, bind: this }, this.renderAddingBookmarkName(), this.renderAddingBookmarkActions()));
  }
  _formatDate(t3) {
    return t3 ? L(t3, S("short-date")) : null;
  }
  _formatTime(t3) {
    return t3 ? L(t3, S("long-time")) : null;
  }
  _dragHandleBlur() {
    this._selectedSortUid = null, this.scheduleRender();
  }
  _dragHandleKeydown(t3) {
    const { _sortableSavedItems: o2 } = this, i4 = ["ArrowDown", "ArrowUp", "Escape", "Tab", " ", "Enter"], s5 = i(t3);
    if (!i4.includes(s5))
      return;
    const { _sortable: r2, _selectedSortUid: a4 } = this, n5 = r2.toArray(), d3 = t3.target.getAttribute(A), l2 = n5.indexOf(d3);
    if (k(s5)) {
      const t4 = a4 && a4 === d3;
      return this._selectedSortUid = t4 ? null : d3, this._sortableSavedItems = t4 ? null : this._sortable.toArray(), void this.scheduleRender();
    }
    if ("Tab" === s5)
      return this._selectedSortUid = null, void this.scheduleRender();
    if ("Escape" === s5 && o2)
      return t3.stopPropagation(), this._selectedSortUid = null, this._updateSortItems(o2, r2, d3), void this.scheduleRender();
    if (-1 === l2 || !a4)
      return;
    const k3 = "ArrowUp" === s5 ? l2 - 1 : l2 + 1;
    k3 >= n5.length || k3 <= -1 || (S2(n5, l2, k3), this._updateSortItems(n5, r2, d3));
  }
  _updateSortItems(t3, e4, o2) {
    e4.sort(t3), this._sortBookmarks(e4), this._focusSortUid = o2, this._selectedSortUid = o2;
  }
  _focusDragHandle(t3) {
    const { _focusSortUid: e4 } = this;
    if (!t3 || !e4)
      return;
    t3.getAttribute(A) === e4 && (t3.focus(), this._focusSortUid = null);
  }
  _toggleSorting() {
    const { _sortable: t3, _sortableNode: e4, editingEnabled: o2, disabled: i4 } = this;
    if (e4)
      if (t3)
        t3.option("disabled", i4 || !o2);
      else {
        const t4 = sortable_esm_default.create(e4, { dataIdAttr: A, handle: `.${T.bookmarkDragHandle}`, group: x, disabled: i4 || !o2, onSort: () => this._sortBookmarks(t4) });
        this._sortable = t4;
      }
  }
  _sortNodeCreated(t3) {
    this._sortableNode = t3, this._toggleSorting();
  }
  _sortBookmarks(t3) {
    const { bookmarks: e4 } = this.viewModel;
    if (!e4)
      return;
    const o2 = t3.toArray();
    e4.sort((t4, e5) => {
      const i4 = o2.indexOf(t4.uid), s5 = o2.indexOf(e5.uid);
      return i4 > s5 ? 1 : i4 < s5 ? -1 : 0;
    });
  }
  _destroySortable() {
    const { _sortable: t3 } = this;
    t3 && t3.destroy(), this._sortable = null;
  }
  _endAddBookmark() {
    this._focusAddBookmarkButton = true, this.endAddBookmark();
  }
  _bookmarksInitialized() {
    const t3 = "bookmarks-init", { _handles: e4 } = this;
    e4.remove(t3), e4.add(a(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.bookmarks;
    }, "change", () => this._bookmarksChanged()), t3);
  }
  _bookmarksChanged() {
    const t3 = "bookmarks-change", { bookmarks: e4 } = this.viewModel, { _handles: o2 } = this;
    o2.remove(t3);
    const i4 = e4.map((t4) => l(() => {
      var _a;
      return [t4 == null ? void 0 : t4.name, (_a = t4 == null ? void 0 : t4.thumbnail) == null ? void 0 : _a.url];
    }, () => this.scheduleRender()));
    o2.add(i4, t3), this.scheduleRender();
  }
  _showEditBookmarkForm(t3) {
    const e4 = t3.currentTarget["data-bookmark"];
    this._editIncludeTimeExtent = !!e4.timeExtent, this._focusEditInputBox = true, this._userState = new a3({ bookmark: e4, state: "edit" }), this.viewModel.goTo(e4), this.scheduleRender();
  }
  _closeUrlEditBookmarkForm() {
    this._focusEditInputBox = true, this._userState.state = "edit";
  }
  _closeEditBookmarkForm() {
    this._userState = null;
  }
  _addBookmarkSubmit(t3) {
    t3.preventDefault();
    const { _addInputNode: e4, _userState: o2 } = this, i4 = e4 && e4.value.trim();
    i4 ? (o2.loading = true, this.viewModel.createBookmark().then((t4) => {
      t4.name = i4, this.viewModel.bookmarks.add(t4), this._endAddBookmark();
    })) : o2.validationState = "name-required";
  }
  async _editBookmarkAndClose(t3, e4) {
    const { viewModel: o2 } = this;
    await o2.editBookmark(t3, { ...o2.defaultEditOptions, ...e4 }), this._closeEditBookmarkForm();
  }
  _editBookmarkSubmit(t3) {
    t3.preventDefault();
    const { _editInputNode: e4, _userState: o2, _editIncludeTimeExtent: i4 } = this, s5 = e4 && e4.value.trim();
    s5 ? (o2.bookmark.name = s5, o2.bookmark.thumbnail = o2.editedBookmark.thumbnail, i4 || (o2.bookmark.timeExtent = null), this._editBookmarkAndClose(o2.bookmark, { takeScreenshot: false, captureTimeExtent: i4 })) : o2.validationState = "name-required";
  }
  _storeAddBookmarkButton(t3) {
    this._addBookmarkButtonNode = t3, this._focusAddBookmark();
  }
  _storeEditInput(t3) {
    this._editInputNode = t3, this._focusEditInput();
  }
  _storeAddInput(t3) {
    this._addInputNode = t3, this._focusAddInput();
  }
  _storeUrlEditInput(t3) {
    this._urlEditInputNode = t3, this._focusUrlEditInput();
  }
  _focusUrlEditInput() {
    this._urlEditInputNode && this._focusUrlEditInputBox && (this._focusUrlEditInputBox = false, this._urlEditInputNode.focus());
  }
  _focusAddInput() {
    this._addInputNode && this._focusAddInputBox && (this._focusAddInputBox = false, this._addInputNode.focus());
  }
  _focusAddBookmark() {
    this._addBookmarkButtonNode && this._focusAddBookmarkButton && (this._focusAddBookmarkButton = false, this._addBookmarkButtonNode.focus());
  }
  _focusEditInput() {
    this._editInputNode && this._focusEditInputBox && (this._focusEditInputBox = false, this._editInputNode.focus());
  }
  _deleteBookmark(t3) {
    const e4 = t3.currentTarget["data-bookmark"];
    this.viewModel.bookmarks.remove(e4);
  }
  _goToBookmark(t3) {
    const e4 = t3.currentTarget["data-bookmark"];
    this.endAddBookmark(), this._closeEditBookmarkForm(), this.viewModel.goTo(e4);
  }
  async _refreshThumbnail() {
    const { _userState: t3, _editMenu: e4, viewModel: o2 } = this;
    t3.validationState = void 0, await o2.editBookmark(this._userState.editedBookmark, { takeScreenshot: true, captureViewpoint: false, captureRotation: false, captureScale: false, captureTimeExtent: false }), e4.open = false, this._focusEditInputBox = true, this.scheduleRender();
  }
  _removeThumbnail() {
    const { _userState: t3, _editMenu: e4 } = this;
    t3.editedBookmark.thumbnail = null, t3.validationState = void 0, e4.open = false, this._focusEditInputBox = true, this.scheduleRender();
  }
  _startUseImageUrl() {
    this._userState.state = "edit-thumbnail", this._editMenu.open = false, this._focusUrlEditInputBox = true, this.scheduleRender();
  }
  _editBookmarkUrlSubmit(t3) {
    t3.preventDefault();
    const { _urlEditInputNode: e4, _userState: o2 } = this, i4 = e4.value;
    U.test(i4) ? (i4 && (o2.editedBookmark.thumbnail = new p({ url: i4 })), this._closeUrlEditBookmarkForm()) : o2.validationState = "absolute-url-required";
  }
};
e([d()], N.prototype, "_editIncludeTimeExtent", void 0), e([d({ type: a3 })], N.prototype, "_userState", void 0), e([d({ readOnly: true })], N.prototype, "_editMenuItems", null), e([d({ readOnly: true })], N.prototype, "_editMenu", null), e([o("viewModel.defaultCreateOptions")], N.prototype, "defaultCreateOptions", void 0), e([o("viewModel.defaultEditOptions")], N.prototype, "defaultEditOptions", void 0), e([o("viewModel.bookmarks")], N.prototype, "bookmarks", void 0), e([d()], N.prototype, "disabled", void 0), e([d()], N.prototype, "editingEnabled", void 0), e([d()], N.prototype, "headingLevel", void 0), e([o("viewModel.goToOverride")], N.prototype, "goToOverride", void 0), e([d()], N.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], N.prototype, "label", void 0), e([d(), e2("esri/widgets/Bookmarks/t9n/Bookmarks")], N.prototype, "messages", void 0), e([d(), e2("esri/t9n/common")], N.prototype, "messagesCommon", void 0), e([d(), e2("esri/core/t9n/Units")], N.prototype, "messagesUnits", void 0), e([d()], N.prototype, "uiStrings", void 0), e([o("viewModel.view")], N.prototype, "view", void 0), e([d({ type: g2 }), t2(["select-bookmark", "bookmark-edit", "bookmark-select"])], N.prototype, "viewModel", void 0), e([d()], N.prototype, "visibleElements", void 0), e([s3("visibleElements")], N.prototype, "castVisibleElements", null), e([d()], N.prototype, "endAddBookmark", null), e([d()], N.prototype, "startAddBookmark", null), N = e([n(M)], N);
var D = N;
export {
  D as default
};
//# sourceMappingURL=@arcgis_core_widgets_Bookmarks.js.map
