import {
  c,
  s
} from "./chunk-ZYIEYKCD.js";
import {
  o
} from "./chunk-BPZGJQOB.js";
import {
  P,
  e,
  p,
  q,
  r,
  u,
  v
} from "./chunk-PKZEO23A.js";
import {
  n,
  t
} from "./chunk-AIRC226G.js";

// node_modules/@arcgis/core/geometry/support/lineSegment.js
function v2(t2) {
  return t2 ? { origin: t(t2.origin), vector: t(t2.vector) } : { origin: n(), vector: n() };
}
function p2(t2, r2) {
  const n2 = x.get();
  return n2.origin = t2, n2.vector = r2, n2;
}
function h(t2, r2 = v2()) {
  return m(t2.origin, t2.vector, r2);
}
function m(t2, r2, o2 = v2()) {
  return r(o2.origin, t2), r(o2.vector, r2), o2;
}
function l(t2, r2, i = v2()) {
  return r(i.origin, t2), e(i.vector, r2, t2), i;
}
function b(r2, n2) {
  const c2 = e(c.get(), n2, r2.origin), u2 = P(r2.vector, c2), s2 = P(r2.vector, r2.vector), a = o(u2 / s2, 0, 1), g = e(c.get(), q(c.get(), r2.vector, a), c2);
  return P(g, g);
}
function d(t2, r2, n2) {
  return A(t2, r2, 0, 1, n2);
}
function j(t2, r2, n2) {
  return u(n2, t2.origin, q(n2, t2.vector, r2));
}
function A(r2, n2, s2, a, g) {
  const { vector: v3, origin: p3 } = r2, h2 = e(c.get(), n2, p3), m2 = P(v3, h2) / v(v3);
  return q(g, v3, o(m2, s2, a)), u(g, g, r2.origin);
}
function B(t2, r2) {
  if (q2(t2, p2(r2.origin, r2.direction), false, w)) {
    const { tA: r3, pB: n2, distance2: o2 } = w;
    if (r3 >= 0 && r3 <= 1)
      return o2;
    if (r3 < 0)
      return p(t2.origin, n2);
    if (r3 > 1)
      return p(u(c.get(), t2.origin, t2.vector), n2);
  }
  return null;
}
function k(t2, r2, o2) {
  return !!q2(t2, r2, true, w) && (r(o2, w.pA), true);
}
function q2(r2, n2, o2, i) {
  const e2 = 1e-6, u2 = r2.origin, a = u(c.get(), u2, r2.vector), g = n2.origin, v3 = u(c.get(), g, n2.vector), p3 = c.get(), h2 = c.get();
  if (p3[0] = u2[0] - g[0], p3[1] = u2[1] - g[1], p3[2] = u2[2] - g[2], h2[0] = v3[0] - g[0], h2[1] = v3[1] - g[1], h2[2] = v3[2] - g[2], Math.abs(h2[0]) < e2 && Math.abs(h2[1]) < e2 && Math.abs(h2[2]) < e2)
    return false;
  const m2 = c.get();
  if (m2[0] = a[0] - u2[0], m2[1] = a[1] - u2[1], m2[2] = a[2] - u2[2], Math.abs(m2[0]) < e2 && Math.abs(m2[1]) < e2 && Math.abs(m2[2]) < e2)
    return false;
  const l2 = p3[0] * h2[0] + p3[1] * h2[1] + p3[2] * h2[2], b2 = h2[0] * m2[0] + h2[1] * m2[1] + h2[2] * m2[2], M = p3[0] * m2[0] + p3[1] * m2[1] + p3[2] * m2[2], d2 = h2[0] * h2[0] + h2[1] * h2[1] + h2[2] * h2[2], j2 = (m2[0] * m2[0] + m2[1] * m2[1] + m2[2] * m2[2]) * d2 - b2 * b2;
  if (Math.abs(j2) < e2)
    return false;
  let A2 = (l2 * b2 - M * d2) / j2, B2 = (l2 + b2 * A2) / d2;
  o2 && (A2 = o(A2, 0, 1), B2 = o(B2, 0, 1));
  const k2 = c.get(), S = c.get();
  return k2[0] = u2[0] + A2 * m2[0], k2[1] = u2[1] + A2 * m2[1], k2[2] = u2[2] + A2 * m2[2], S[0] = g[0] + B2 * h2[0], S[1] = g[1] + B2 * h2[1], S[2] = g[2] + B2 * h2[2], i.tA = A2, i.tB = B2, i.pA = k2, i.pB = S, i.distance2 = p(k2, S), true;
}
var w = { tA: 0, tB: 0, pA: n(), pB: n(), distance2: 0 };
var x = new s(() => ({ origin: null, vector: null }));

export {
  v2 as v,
  h,
  m,
  l,
  b,
  d,
  j,
  A,
  B,
  k
};
//# sourceMappingURL=chunk-Q6AASANP.js.map
