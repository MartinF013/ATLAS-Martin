import {
  c
} from "./chunk-QZCFKQOH.js";
import {
  e as e3
} from "./chunk-AALA53RH.js";
import {
  e as e2
} from "./chunk-46N7XS5M.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  e
} from "./chunk-YFBAFAZ2.js";
import {
  n,
  u
} from "./chunk-ASC3X65B.js";

// node_modules/@arcgis/core/chunks/Stars.glsl.js
function c2() {
  const e4 = new i();
  return e4.attributes.add(O.POSITION, "vec3"), e4.attributes.add(O.COLOR, "vec4"), e4.attributes.add(O.SIZE, "float"), e4.varyings.add("vcolor", "vec4"), e4.varyings.add("vsize", "float"), e4.vertex.uniforms.add([new e2("transform", (e5, o2) => m(e5, o2)), new e3("viewport", (e5, o2) => o2.camera.fullViewport), new o("pixelRatio", (e5, o2) => o2.camera.pixelRatio)]), e4.include(c), e4.vertex.code.add(n2`void main(void) {
vec4 posProj = transform * vec4(position, 0);
gl_Position = alignToPixelCenter(posProj, viewport.zw);
vcolor = color / 1.2;
vsize = size * 5.0 * pixelRatio;
gl_PointSize = vsize;
}`), e4.fragment.code.add(n2`void main() {
float cap = 0.7;
float scale = 1.0 / cap;
float helper = clamp(length(abs(gl_PointCoord - vec2(0.5))), 0.0, cap);
float alpha = clamp((cap - helper) * scale, 0.0, 1.0);
float intensity = alpha * alpha * alpha;
if (vsize < 3.0) {
intensity *= 0.5;
}
gl_FragColor = vec4(vcolor.xyz, intensity);
}`), e4;
}
function m(r, i2) {
  const a = 24e-8;
  return n(p, i2.camera.projectionMatrix), p[10] = a - 1, p[11] = -1, p[14] = (a - 2) * i2.camera.near, u(p, p, i2.camera.viewMatrix), u(p, p, r.modelMatrix);
}
var p = e();
var v = Object.freeze(Object.defineProperty({ __proto__: null, build: c2 }, Symbol.toStringTag, { value: "Module" }));

export {
  c2 as c,
  v
};
//# sourceMappingURL=chunk-SXIKZQTG.js.map
