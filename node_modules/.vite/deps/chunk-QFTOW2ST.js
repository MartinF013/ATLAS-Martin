import {
  d as d2,
  j as j2
} from "./chunk-I4USSDLI.js";
import {
  a as a2
} from "./chunk-VI3TTBSC.js";
import {
  m as m3
} from "./chunk-TVXPO7T5.js";
import {
  m as m2,
  p
} from "./chunk-Z6EP2GTZ.js";
import {
  M,
  S2,
  h2 as h,
  j3 as j
} from "./chunk-TADZYUVR.js";
import {
  a
} from "./chunk-PZG7CR4Y.js";
import {
  n as n2,
  r as r2
} from "./chunk-ACJD5XFJ.js";
import {
  F,
  b
} from "./chunk-5Z5455ZY.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import {
  s as s5
} from "./chunk-XRL56EGK.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  s5 as s4,
  t6 as t,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s2 as s3
} from "./chunk-HFTNOKM2.js";
import {
  S
} from "./chunk-23NWA6WL.js";
import {
  s as s2
} from "./chunk-CVWDM4C7.js";
import {
  m
} from "./chunk-G5JBUC5N.js";

// node_modules/@arcgis/core/renderers/support/AuthoringInfoClassBreakInfo.js
var t2;
var p2 = t2 = class extends l {
  constructor(r3) {
    super(r3), this.minValue = 0, this.maxValue = 0;
  }
  clone() {
    return new t2({ minValue: this.minValue, maxValue: this.maxValue });
  }
};
e([d({ type: Number, json: { write: true } })], p2.prototype, "minValue", void 0), e([d({ type: Number, json: { write: true } })], p2.prototype, "maxValue", void 0), p2 = t2 = e([n("esri.renderer.support.AuthoringInfoClassBreakInfo")], p2);

// node_modules/@arcgis/core/renderers/support/AuthoringInfoFieldInfo.js
var n3;
var p3 = n3 = class extends l {
  constructor(o2) {
    super(o2), this.field = "", this.normalizationField = "", this.label = "", this.classBreakInfos = [];
  }
  clone() {
    return new n3({ field: this.field, normalizationField: this.normalizationField, label: this.label, classBreakInfos: m(this.classBreakInfos) });
  }
};
e([d({ type: String, json: { write: true } })], p3.prototype, "field", void 0), e([d({ type: String, json: { write: true } })], p3.prototype, "normalizationField", void 0), e([d({ type: String, json: { write: true } })], p3.prototype, "label", void 0), e([d({ type: [p2], json: { write: true } })], p3.prototype, "classBreakInfos", void 0), p3 = n3 = e([n("esri.renderers.support.AuthoringInfoFieldInfo")], p3);

// node_modules/@arcgis/core/renderers/support/AuthoringInfoVisualVariable.js
var n4;
var l2 = new s({ percentTotal: "percent-of-total", ratio: "ratio", percent: "percent" });
var p4 = new s({ sizeInfo: "size", colorInfo: "color", transparencyInfo: "opacity", rotationInfo: "rotation" });
var a3 = { key: (e2) => "number" == typeof e2 ? "number" : "string", typeMap: { number: Number, string: String }, base: null };
var u = ["high-to-low", "above-and-below", "centered-on", "extremes"];
var m4 = [.../* @__PURE__ */ new Set([...["high-to-low", "above-and-below", "centered-on", "extremes", "90-10", "above", "below"], ...["high-to-low", "above-and-below", "90-10", "above", "below"]])];
var y2 = ["seconds", "minutes", "hours", "days", "months", "years"];
var c = n4 = class extends l {
  constructor(e2) {
    super(e2), this.endTime = null, this.field = null, this.maxSliderValue = null, this.minSliderValue = null, this.startTime = null, this.type = null, this.units = null;
  }
  castEndTime(e2) {
    return "string" == typeof e2 || "number" == typeof e2 ? e2 : null;
  }
  castStartTime(e2) {
    return "string" == typeof e2 || "number" == typeof e2 ? e2 : null;
  }
  get style() {
    return "color" === this.type ? this._get("style") : null;
  }
  set style(e2) {
    this._set("style", e2);
  }
  get theme() {
    return "color" === this.type || "size" === this.type ? this._get("theme") || "high-to-low" : null;
  }
  set theme(e2) {
    this._set("theme", e2);
  }
  clone() {
    return new n4({ endTime: this.endTime, field: this.field, maxSliderValue: this.maxSliderValue, minSliderValue: this.minSliderValue, startTime: this.startTime, style: this.style, theme: this.theme, type: this.type, units: this.units });
  }
};
e([d({ types: a3, json: { write: true } })], c.prototype, "endTime", void 0), e([s5("endTime")], c.prototype, "castEndTime", null), e([d({ type: String, json: { write: true } })], c.prototype, "field", void 0), e([d({ type: Number, json: { write: true } })], c.prototype, "maxSliderValue", void 0), e([d({ type: Number, json: { write: true } })], c.prototype, "minSliderValue", void 0), e([d({ types: a3, json: { write: true } })], c.prototype, "startTime", void 0), e([s5("startTime")], c.prototype, "castStartTime", null), e([d({ type: l2.apiValues, value: null, json: { type: l2.jsonValues, read: l2.read, write: l2.write } })], c.prototype, "style", null), e([d({ type: m4, value: null, json: { type: m4, origins: { "web-scene": { type: u, write: { writer: (e2, t3) => {
  u.includes(e2) && (t3.theme = e2);
} } } }, write: true } })], c.prototype, "theme", null), e([d({ type: p4.apiValues, json: { type: p4.jsonValues, read: p4.read, write: p4.write } })], c.prototype, "type", void 0), e([d({ type: y2, json: { type: y2, write: true } })], c.prototype, "units", void 0), c = n4 = e([n("esri.renderers.support.AuthoringInfoVisualVariable")], c);
var d3 = c;

// node_modules/@arcgis/core/renderers/support/AuthoringInfo.js
var d4;
var h2 = new s({ esriClassifyDefinedInterval: "defined-interval", esriClassifyEqualInterval: "equal-interval", esriClassifyManual: "manual", esriClassifyNaturalBreaks: "natural-breaks", esriClassifyQuantile: "quantile", esriClassifyStandardDeviation: "standard-deviation" });
var m5 = new s({ pieChart: "pie-chart", classedSize: "class-breaks-size", classedColor: "class-breaks-color", univariateColorSize: "univariate-color-size", relationship: "relationship", predominance: "predominance", dotDensity: "dot-density", flow: "flow" });
var y3 = new s({ classedSize: "class-breaks-size", classedColor: "class-breaks-color", univariateColorSize: "univariate-color-size", relationship: "relationship", predominance: "predominance", dotDensity: "dot-density" });
var f = ["inches", "feet", "yards", "miles", "nautical-miles", "millimeters", "centimeters", "decimeters", "meters", "kilometers", "decimal-degrees"];
var v = ["high-to-low", "above-and-below", "above", "below", "90-10"];
var w = ["flow-line", "wave-front"];
var b2 = ["caret", "circle-caret", "arrow", "circle-arrow", "plus-minus", "circle-plus-minus", "square", "circle", "triangle", "happy-sad", "thumb", "custom"];
var g = d4 = class extends l {
  constructor(e2) {
    super(e2), this.colorRamp = null, this.lengthUnit = null, this.maxSliderValue = null, this.minSliderValue = null, this.visualVariables = null;
  }
  get classificationMethod() {
    const e2 = this._get("classificationMethod"), t3 = this.type;
    return t3 && "relationship" !== t3 ? "class-breaks-size" === t3 || "class-breaks-color" === t3 ? e2 || "manual" : null : e2;
  }
  set classificationMethod(e2) {
    this._set("classificationMethod", e2);
  }
  readColorRamp(e2) {
    if (e2)
      return p(e2);
  }
  get fields() {
    return this.type && "predominance" !== this.type ? null : this._get("fields");
  }
  set fields(e2) {
    this._set("fields", e2);
  }
  get field1() {
    return this.type && "relationship" !== this.type ? null : this._get("field1");
  }
  set field1(e2) {
    this._set("field1", e2);
  }
  get field2() {
    return this.type && "relationship" !== this.type ? null : this._get("field2");
  }
  set field2(e2) {
    this._set("field2", e2);
  }
  get flowTheme() {
    return "flow" === this.type ? this._get("flowTheme") : null;
  }
  set flowTheme(e2) {
    this._set("flowTheme", e2);
  }
  get focus() {
    return this.type && "relationship" !== this.type ? null : this._get("focus");
  }
  set focus(e2) {
    this._set("focus", e2);
  }
  get numClasses() {
    return this.type && "relationship" !== this.type ? null : this._get("numClasses");
  }
  set numClasses(e2) {
    this._set("numClasses", e2);
  }
  get statistics() {
    return "univariate-color-size" === this.type && "above-and-below" === this.univariateTheme ? this._get("statistics") : null;
  }
  set statistics(e2) {
    this._set("statistics", e2);
  }
  get standardDeviationInterval() {
    const e2 = this.type;
    return e2 && "relationship" !== e2 && "class-breaks-size" !== e2 && "class-breaks-color" !== e2 || this.classificationMethod && "standard-deviation" !== this.classificationMethod ? null : this._get("standardDeviationInterval");
  }
  set standardDeviationInterval(e2) {
    this._set("standardDeviationInterval", e2);
  }
  get type() {
    return this._get("type");
  }
  set type(e2) {
    let t3 = e2;
    "classed-size" === e2 ? t3 = "class-breaks-size" : "classed-color" === e2 && (t3 = "class-breaks-color"), this._set("type", t3);
  }
  get univariateSymbolStyle() {
    return "univariate-color-size" === this.type && "above-and-below" === this.univariateTheme ? this._get("univariateSymbolStyle") : null;
  }
  set univariateSymbolStyle(e2) {
    this._set("univariateSymbolStyle", e2);
  }
  get univariateTheme() {
    return "univariate-color-size" === this.type ? this._get("univariateTheme") : null;
  }
  set univariateTheme(e2) {
    this._set("univariateTheme", e2);
  }
  clone() {
    return new d4({ classificationMethod: this.classificationMethod, colorRamp: m(this.colorRamp), fields: this.fields && this.fields.slice(0), field1: m(this.field1), field2: m(this.field2), focus: this.focus, numClasses: this.numClasses, maxSliderValue: this.maxSliderValue, minSliderValue: this.minSliderValue, lengthUnit: this.lengthUnit, statistics: this.statistics, standardDeviationInterval: this.standardDeviationInterval, type: this.type, visualVariables: this.visualVariables && this.visualVariables.map((e2) => e2.clone()), univariateSymbolStyle: this.univariateSymbolStyle, univariateTheme: this.univariateTheme, flowTheme: this.flowTheme });
  }
};
e([d({ type: h2.apiValues, value: null, json: { type: h2.jsonValues, read: h2.read, write: h2.write, origins: { "web-document": { default: "manual", type: h2.jsonValues, read: h2.read, write: h2.write } } } })], g.prototype, "classificationMethod", null), e([d({ types: m2, json: { write: true } })], g.prototype, "colorRamp", void 0), e([o("colorRamp")], g.prototype, "readColorRamp", null), e([d({ type: [String], value: null, json: { write: true } })], g.prototype, "fields", null), e([d({ type: p3, value: null, json: { write: true } })], g.prototype, "field1", null), e([d({ type: p3, value: null, json: { write: true } })], g.prototype, "field2", null), e([d({ type: w, value: null, json: { write: true, origins: { "web-scene": { write: false } } } })], g.prototype, "flowTheme", null), e([d({ type: ["HH", "HL", "LH", "LL"], value: null, json: { write: true } })], g.prototype, "focus", null), e([d({ type: Number, value: null, json: { type: S, write: true } })], g.prototype, "numClasses", null), e([d({ type: f, json: { type: f, read: false, write: false, origins: { "web-scene": { read: true, write: true } } } })], g.prototype, "lengthUnit", void 0), e([d({ type: Number, json: { write: true, origins: { "web-scene": { write: false, read: false } } } })], g.prototype, "maxSliderValue", void 0), e([d({ type: Number, json: { write: true, origins: { "web-scene": { write: false, read: false } } } })], g.prototype, "minSliderValue", void 0), e([d({ type: Object, value: null, json: { write: true, origins: { "web-scene": { write: false, read: false } } } })], g.prototype, "statistics", null), e([d({ type: [0.25, 0.33, 0.5, 1], value: null, json: { type: [0.25, 0.33, 0.5, 1], write: true } })], g.prototype, "standardDeviationInterval", null), e([d({ type: m5.apiValues, value: null, json: { type: m5.jsonValues, read: m5.read, write: m5.write, origins: { "web-scene": { type: y3.jsonValues, write: { writer: y3.write, overridePolicy: (e2) => ({ enabled: "flow" !== e2 }) } } } } })], g.prototype, "type", null), e([d({ type: [d3], json: { write: true } })], g.prototype, "visualVariables", void 0), e([d({ type: b2, value: null, json: { write: true, origins: { "web-scene": { write: false } } } })], g.prototype, "univariateSymbolStyle", null), e([d({ type: v, value: null, json: { write: true, origins: { "web-scene": { write: false } } } })], g.prototype, "univariateTheme", null), g = d4 = e([n("esri.renderers.support.AuthoringInfo")], g);
var j3 = g;

// node_modules/@arcgis/core/renderers/Renderer.js
var n5 = new s({ simple: "simple", uniqueValue: "unique-value", classBreaks: "class-breaks", heatmap: "heatmap", dotDensity: "dot-density", dictionary: "dictionary", pieChart: "pie-chart" }, { ignoreUnknown: true });
var a4 = class extends l {
  constructor(r3) {
    super(r3), this.authoringInfo = null, this.type = null;
  }
  async getRequiredFields(r3) {
    if (!this.collectRequiredFields)
      return [];
    const e2 = /* @__PURE__ */ new Set();
    return await this.collectRequiredFields(e2, r3), Array.from(e2).sort();
  }
  getSymbol(r3, e2) {
  }
  async getSymbolAsync(r3, e2) {
  }
  getSymbols() {
    return [];
  }
  getAttributeHash() {
    return JSON.stringify(this);
  }
  getMeshHash() {
    return JSON.stringify(this);
  }
};
e([d({ type: j3, json: { write: true } })], a4.prototype, "authoringInfo", void 0), e([d({ type: n5.apiValues, readOnly: true, json: { type: n5.jsonValues, read: false, write: { writer: n5.write, ignoreOrigin: true } } })], a4.prototype, "type", void 0), a4 = e([n("esri.renderers.Renderer")], a4);
var p5 = a4;

// node_modules/@arcgis/core/renderers/visualVariables/ColorVariable.js
var i;
var p6 = i = class extends d2 {
  constructor(t3) {
    super(t3), this.type = "color", this.normalizationField = null;
  }
  get cache() {
    return { ipData: this._interpolateData(), hasExpression: !!this.valueExpression, compiledFunc: null };
  }
  set stops(t3) {
    t3 && Array.isArray(t3) && (t3 = t3.filter((t4) => !!t4)).sort((t4, s6) => t4.value - s6.value), this._set("stops", t3);
  }
  clone() {
    return new i({ field: this.field, normalizationField: this.normalizationField, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle, stops: this.stops && this.stops.map((t3) => t3.clone()), legendOptions: this.legendOptions && this.legendOptions.clone() });
  }
  getAttributeHash() {
    return `${super.getAttributeHash()}-${this.normalizationField}`;
  }
  _interpolateData() {
    return this.stops && this.stops.map((t3) => t3.value || 0);
  }
};
e([d({ readOnly: true })], p6.prototype, "cache", null), e([d({ type: ["color"], json: { type: ["colorInfo"] } })], p6.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], p6.prototype, "normalizationField", void 0), e([d({ type: [a2], json: { write: true } })], p6.prototype, "stops", null), p6 = i = e([n("esri.renderers.visualVariables.ColorVariable")], p6);
var a5 = p6;

// node_modules/@arcgis/core/renderers/visualVariables/support/OpacityStop.js
var l3;
var u2 = l3 = class extends l {
  constructor(r3) {
    super(r3), this.label = null, this.opacity = null, this.value = null;
  }
  readOpacity(r3, t3) {
    return r2(t3.transparency);
  }
  writeOpacity(r3, t3, o2) {
    t3[o2] = n2(r3);
  }
  clone() {
    return new l3({ label: this.label, opacity: this.opacity, value: this.value });
  }
};
e([d({ type: String, json: { write: true } })], u2.prototype, "label", void 0), e([d({ type: Number, json: { type: S, write: { target: "transparency" } } })], u2.prototype, "opacity", void 0), e([o("opacity", ["transparency"])], u2.prototype, "readOpacity", null), e([r("opacity")], u2.prototype, "writeOpacity", null), e([d({ type: Number, json: { write: true } })], u2.prototype, "value", void 0), u2 = l3 = e([n("esri.renderers.visualVariables.support.OpacityStop")], u2);
var y4 = u2;

// node_modules/@arcgis/core/renderers/visualVariables/OpacityVariable.js
var i2;
var p7 = i2 = class extends d2 {
  constructor(t3) {
    super(t3), this.type = "opacity", this.normalizationField = null;
  }
  get cache() {
    return { ipData: this._interpolateData(), hasExpression: !!this.valueExpression, compiledFunc: null };
  }
  set stops(t3) {
    t3 && Array.isArray(t3) && (t3 = t3.filter((t4) => !!t4)).sort((t4, s6) => t4.value - s6.value), this._set("stops", t3);
  }
  clone() {
    return new i2({ field: this.field, normalizationField: this.normalizationField, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle, stops: this.stops && this.stops.map((t3) => t3.clone()), legendOptions: this.legendOptions && this.legendOptions.clone() });
  }
  getAttributeHash() {
    return `${super.getAttributeHash()}-${this.normalizationField}`;
  }
  _interpolateData() {
    return this.stops && this.stops.map((t3) => t3.value || 0);
  }
};
e([d({ readOnly: true })], p7.prototype, "cache", null), e([d({ type: ["opacity"], json: { type: ["transparencyInfo"] } })], p7.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], p7.prototype, "normalizationField", void 0), e([d({ type: [y4], json: { write: true } })], p7.prototype, "stops", null), p7 = i2 = e([n("esri.renderers.visualVariables.OpacityVariable")], p7);
var a6 = p7;

// node_modules/@arcgis/core/renderers/visualVariables/RotationVariable.js
var p8;
var a7 = p8 = class extends d2 {
  constructor(e2) {
    super(e2), this.axis = null, this.type = "rotation", this.rotationType = "geographic", this.valueExpressionTitle = null;
  }
  get cache() {
    return { hasExpression: !!this.valueExpression, compiledFunc: null };
  }
  writeValueExpressionTitleWebScene(e2, s6, o2, r3) {
    if (r3 && r3.messages) {
      const e3 = `visualVariables[${this.index}]`;
      r3.messages.push(new s3("property:unsupported", this.type + "VisualVariable.valueExpressionTitle is not supported in Web Scene. Please remove this property to save the Web Scene.", { instance: this, propertyName: e3 + ".valueExpressionTitle", context: r3 }));
    }
  }
  clone() {
    return new p8({ axis: this.axis, rotationType: this.rotationType, field: this.field, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle, legendOptions: this.legendOptions && this.legendOptions.clone() });
  }
};
e([d({ readOnly: true })], a7.prototype, "cache", null), e([d({ type: ["heading", "tilt", "roll"], json: { origins: { "web-scene": { default: "heading", write: true } } } })], a7.prototype, "axis", void 0), e([d({ type: ["rotation"], json: { type: ["rotationInfo"] } })], a7.prototype, "type", void 0), e([d({ type: ["geographic", "arithmetic"], json: { write: true, origins: { "web-document": { write: true, default: "geographic" } } } })], a7.prototype, "rotationType", void 0), e([d({ type: String, json: { write: true } })], a7.prototype, "valueExpressionTitle", void 0), e([r("web-scene", "valueExpressionTitle")], a7.prototype, "writeValueExpressionTitleWebScene", null), a7 = p8 = e([n("esri.renderers.visualVariables.RotationVariable")], a7);
var n6 = a7;

// node_modules/@arcgis/core/renderers/visualVariables/VisualVariableFactory.js
var u3 = s2.getLogger("esri.renderers.visualVariables.VisualVariableFactory");
var b3 = { color: a5, size: j2, opacity: a6, rotation: n6 };
var V = new s({ colorInfo: "color", transparencyInfo: "opacity", rotationInfo: "rotation", sizeInfo: "size" });
var h3 = /^\[([^\]]+)\]$/i;
var m6 = class extends y {
  constructor() {
    super(...arguments), this.colorVariables = null, this.opacityVariables = null, this.rotationVariables = null, this.sizeVariables = null;
  }
  set visualVariables(r3) {
    if (this._resetVariables(), (r3 = r3 && r3.filter((r4) => !!r4)) && r3.length) {
      for (const s6 of r3)
        switch (s6.type) {
          case "color":
            this.colorVariables.push(s6);
            break;
          case "opacity":
            this.opacityVariables.push(s6);
            break;
          case "rotation":
            this.rotationVariables.push(s6);
            break;
          case "size":
            this.sizeVariables.push(s6);
        }
      if (this.sizeVariables.length) {
        this.sizeVariables.some((r4) => !!r4.target) && r3.sort((r4, s6) => {
          let e2 = null;
          return e2 = r4.target === s6.target ? 0 : r4.target ? 1 : -1, e2;
        });
      }
      for (let s6 = 0; s6 < r3.length; s6++) {
        r3[s6].index = s6;
      }
      this._set("visualVariables", r3);
    } else
      this._set("visualVariables", r3);
  }
  readVariables(r3, s6, e2) {
    const { rotationExpression: a8, rotationType: t3 } = s6, i3 = a8 && a8.match(h3), l5 = i3 && i3[1];
    if (l5 && (r3 || (r3 = []), r3.push({ type: "rotationInfo", rotationType: t3, field: l5 })), r3)
      return r3.map((r4) => {
        const s7 = V.read(r4.type), a9 = b3[s7];
        a9 || (u3.warn(`Unknown variable type: ${s7}`), e2 && e2.messages && e2.messages.push(new t("visual-variable:unsupported", `visualVariable of type '${s7}' is not supported`, { definition: r4, context: e2 })));
        const t4 = new a9();
        return t4.read(r4, e2), t4;
      });
  }
  writeVariables(r3, s6) {
    const e2 = [];
    for (const a8 of r3) {
      const r4 = a8.toJSON(s6);
      r4 && e2.push(r4);
    }
    return e2;
  }
  _resetVariables() {
    this.colorVariables = [], this.opacityVariables = [], this.rotationVariables = [], this.sizeVariables = [];
  }
};
e([d()], m6.prototype, "visualVariables", null), m6 = e([n("esri.renderers.visualVariables.VisualVariableFactory")], m6);
var f2 = m6;

// node_modules/@arcgis/core/renderers/mixins/VisualVariablesMixin.js
var b4 = { base: d2, key: "type", typeMap: { opacity: a6, color: a5, rotation: n6, size: j2 } };
var v2 = (l5) => {
  let u4 = class extends l5 {
    constructor() {
      super(...arguments), this._vvFactory = new f2();
    }
    set visualVariables(r3) {
      this._vvFactory.visualVariables = r3, this._set("visualVariables", this._vvFactory.visualVariables);
    }
    readVisualVariables(r3, a8, s6) {
      return this._vvFactory.readVariables(r3, a8, s6);
    }
    writeVisualVariables(r3, a8, s6, i3) {
      a8[s6] = this._vvFactory.writeVariables(r3, i3);
    }
    get arcadeRequiredForVisualVariables() {
      if (!this.visualVariables)
        return false;
      for (const r3 of this.visualVariables)
        if (r3.arcadeRequired)
          return true;
      return false;
    }
    hasVisualVariables(r3, a8) {
      return r3 ? this.getVisualVariablesForType(r3, a8).length > 0 : this.getVisualVariablesForType("size", a8).length > 0 || this.getVisualVariablesForType("color", a8).length > 0 || this.getVisualVariablesForType("opacity", a8).length > 0 || this.getVisualVariablesForType("rotation", a8).length > 0;
    }
    getVisualVariablesForType(r3, a8) {
      const s6 = this.visualVariables;
      return s6 ? s6.filter((s7) => s7.type === r3 && ("string" == typeof a8 ? s7.target === a8 : false !== a8 || !s7.target)) : [];
    }
    async collectVVRequiredFields(r3, a8) {
      let s6 = [];
      this.visualVariables && (s6 = s6.concat(this.visualVariables));
      for (const i3 of s6)
        i3 && (i3.field && F(r3, a8, i3.field), i3.normalizationField && F(r3, a8, i3.normalizationField), i3.valueExpression && await b(r3, a8, i3.valueExpression));
    }
  };
  return e([d({ types: [b4], value: null, json: { write: true } })], u4.prototype, "visualVariables", null), e([o("visualVariables", ["visualVariables", "rotationType", "rotationExpression"])], u4.prototype, "readVisualVariables", null), e([r("visualVariables")], u4.prototype, "writeVisualVariables", null), u4 = e([n("esri.renderers.mixins.VisualVariablesMixin")], u4), u4;
};

// node_modules/@arcgis/core/renderers/support/commonProperties.js
var l4 = { types: M, json: { write: { writer: m3 }, origins: { "web-scene": { types: h, write: { writer: m3 }, read: { reader: s4({ types: h }) } } } } };
var y5 = { types: { base: a, key: "type", typeMap: { "simple-fill": j.typeMap["simple-fill"], "picture-fill": j.typeMap["picture-fill"], "polygon-3d": j.typeMap["polygon-3d"] } }, json: { write: { writer: m3 }, origins: { "web-scene": { type: S2, write: { writer: m3 } } } } };

export {
  j3 as j,
  p5 as p,
  n6 as n,
  v2 as v,
  l4 as l,
  y5 as y
};
//# sourceMappingURL=chunk-QFTOW2ST.js.map
