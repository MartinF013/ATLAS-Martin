import {
  d
} from "./chunk-YAQGRU5B.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";

// node_modules/@arcgis/core/chunks/HeatmapDensity.glsl.js
function a(a2) {
  const s2 = new i();
  d(s2, a2);
  const { isAttributeDriven: d2 } = a2;
  return s2.attributes.add(O.POSITION, "vec3"), s2.attributes.add(O.UV0, "vec2"), d2 && (s2.attributes.add(O.FEATUREATTRIBUTE, "float"), s2.varyings.add("attributeValue", "float")), s2.varyings.add("unitCirclePos", "vec2"), s2.vertex.uniforms.add(new o("radius", ({ resolutionForScale: e, searchRadius: i2 }, { camera: r, screenToWorldRatio: t }) => 2 * i2 * (0 === e ? 1 : e / t) * r.pixelRatio / r.fullViewport[2])), s2.vertex.code.add(n`
    void main() {
      unitCirclePos = uv0;

      vec4 posProj = proj * (view * vec4(${O.POSITION}, 1.0));
      vec4 quadOffset = vec4(unitCirclePos * radius, 0.0, 0.0);

      ${d2 ? n`attributeValue = ${O.FEATUREATTRIBUTE};` : ""}
      gl_Position = posProj + quadOffset;
    }
  `), s2.fragment.code.add(n`
    void main() {
      float radiusRatioSquared = dot(unitCirclePos, unitCirclePos);
      if (radiusRatioSquared > 1.0) {
        discard;
      }

      float oneMinusRadiusRatioSquared = 1.0 - radiusRatioSquared;
      float density = oneMinusRadiusRatioSquared * oneMinusRadiusRatioSquared ${d2 ? n` * attributeValue` : ""};
      gl_FragColor = vec4(density);
    }
  `), s2;
}
var s = Object.freeze(Object.defineProperty({ __proto__: null, build: a }, Symbol.toStringTag, { value: "Module" }));

export {
  a,
  s
};
//# sourceMappingURL=chunk-U7UHMH7X.js.map
