import {
  s
} from "./chunk-PH7BQFVK.js";
import {
  o as o4
} from "./chunk-UV5UBITC.js";
import {
  o as o2
} from "./chunk-3236UEJN.js";
import {
  o as o3
} from "./chunk-KSOWE6GO.js";
import {
  r as r3
} from "./chunk-HRAEK6P4.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  e
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2
} from "./chunk-NAB3NF54.js";
import {
  r as r2
} from "./chunk-YZNDHJDJ.js";
import {
  n
} from "./chunk-RTHP2LNT.js";
import {
  M
} from "./chunk-BPZGJQOB.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/chunks/Laserlines.glsl.js
var h = M(6);
function m(e2) {
  const i2 = new i();
  i2.extensions.add("GL_OES_standard_derivatives"), i2.include(o3), i2.include(s, e2);
  const n3 = i2.fragment;
  return e2.heightManifoldEnabled && n3.uniforms.add(new o2("heightPlane")), e2.pointDistanceEnabled && n3.uniforms.add(new o2("pointDistanceSphere")), e2.lineVerticalPlaneEnabled && (n3.uniforms.add(new o2("lineVerticalPlane")), n3.uniforms.add(new o4("lineVerticalStart")), n3.uniforms.add(new o4("lineVerticalEnd"))), (e2.heightManifoldEnabled || e2.pointDistanceEnabled || e2.lineVerticalPlaneEnabled) && n3.uniforms.add(new r3("maxPixelDistance")), (e2.lineVerticalPlaneEnabled || e2.heightManifoldEnabled) && n3.code.add(n2`float planeDistancePixels(vec4 plane, vec3 pos) {
float dist = dot(plane.xyz, pos) + plane.w;
float width = fwidth(dist);
dist /= min(width, maxPixelDistance);
return abs(dist);
}`), e2.pointDistanceEnabled && n3.code.add(n2`float sphereDistancePixels(vec4 sphere, vec3 pos) {
float dist = distance(sphere.xyz, pos) - sphere.w;
float width = fwidth(dist);
dist /= min(width, maxPixelDistance);
return abs(dist);
}`), e2.intersectsLineEnabled && (n3.uniforms.add(new o4("intersectsLineStart")), n3.uniforms.add(new o4("intersectsLineEnd")), n3.uniforms.add(new o4("intersectsLineDirection")), n3.uniforms.add(new r3("intersectsLineRadius")), n3.uniforms.add(new o("perScreenPixelRatio", (e3, i3) => i3.camera.perScreenPixelRatio)), n3.code.add(n2`float lineDistancePixels(vec3 start, vec3 dir, float radius, vec3 pos) {
float dist = length(cross(dir, pos - start)) / (length(pos) * perScreenPixelRatio);
return abs(dist) - radius;
}`)), (e2.lineVerticalPlaneEnabled || e2.intersectsLineEnabled) && n3.code.add(n2`bool pointIsWithinLine(vec3 pos, vec3 start, vec3 end) {
vec3 dir = end - start;
float t2 = dot(dir, pos - start);
float l2 = dot(dir, dir);
return t2 >= 0.0 && t2 <= l2;
}`), n3.code.add(n2`void main() {
vec3 pos;
vec3 normal;
float depthDiscontinuityAlpha;
if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {
discard;
}
vec4 color = vec4(0, 0, 0, 0);`), e2.heightManifoldEnabled && (n3.uniforms.add(new e("angleCutoff", (e3) => u(e3))), n3.code.add(n2`{
float heightManifoldAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, heightPlane.xyz)));
vec4 heightManifoldColor = laserlineProfile(planeDistancePixels(heightPlane, pos));
color = max(color, heightManifoldColor * heightManifoldAlpha);
}`)), e2.pointDistanceEnabled && (n3.uniforms.add(new e("angleCutoff", (e3) => u(e3))), n3.code.add(n2`{
float pointDistanceSphereDistance = sphereDistancePixels(pointDistanceSphere, pos);
vec4 pointDistanceSphereColor = laserlineProfile(pointDistanceSphereDistance);
float pointDistanceSphereAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, normalize(pos - pointDistanceSphere.xyz))));
color = max(color, pointDistanceSphereColor * pointDistanceSphereAlpha);
}`)), e2.lineVerticalPlaneEnabled && (n3.uniforms.add(new e("angleCutoff", (e3) => u(e3))), n3.code.add(n2`{
if (pointIsWithinLine(pos, lineVerticalStart, lineVerticalEnd)) {
float lineVerticalDistance = planeDistancePixels(lineVerticalPlane, pos);
vec4 lineVerticalColor = laserlineProfile(lineVerticalDistance);
float lineVerticalAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, abs(dot(normal, lineVerticalPlane.xyz)));
color = max(color, lineVerticalColor * lineVerticalAlpha);
}
}`)), e2.intersectsLineEnabled && (n3.uniforms.add(new e("angleCutoff", (e3) => u(e3))), n3.code.add(n2`{
if (pointIsWithinLine(pos, intersectsLineStart, intersectsLineEnd)) {
float intersectsLineDistance = lineDistancePixels(intersectsLineStart, intersectsLineDirection, intersectsLineRadius, pos);
vec4 intersectsLineColor = laserlineProfile(intersectsLineDistance);
float intersectsLineAlpha = 1.0 - smoothstep(angleCutoff.x, angleCutoff.y, 1.0 - abs(dot(normal, intersectsLineDirection)));
color = max(color, intersectsLineColor * intersectsLineAlpha);
}
}`)), n3.code.add(n2`gl_FragColor = laserlineOutput(color * depthDiscontinuityAlpha);
}`), i2;
}
function u(t) {
  const a = r(t.angleCutoff) ? t.angleCutoff : h;
  return r2(g, Math.cos(a), Math.cos(Math.max(0, a - M(2))));
}
var g = n();
var w = Object.freeze(Object.defineProperty({ __proto__: null, defaultAngleCutoff: h, build: m }, Symbol.toStringTag, { value: "Module" }));

export {
  h,
  m,
  w
};
//# sourceMappingURL=chunk-A5WV4QY7.js.map
