import {
  p
} from "./chunk-B42HXLDM.js";
import {
  v
} from "./chunk-2EZYA7VW.js";
import {
  a,
  e as e2,
  i,
  t
} from "./chunk-OEQ3EDRD.js";
import {
  o as o2
} from "./chunk-NWRK6QLX.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import {
  s as s4
} from "./chunk-XRL56EGK.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s2 as s3
} from "./chunk-HFTNOKM2.js";
import {
  u
} from "./chunk-23NWA6WL.js";
import {
  s as s2
} from "./chunk-CVWDM4C7.js";

// node_modules/@arcgis/core/renderers/visualVariables/support/VisualVariableLegendOptions.js
var t2;
var p2 = t2 = class extends p {
  constructor() {
    super(...arguments), this.showLegend = null;
  }
  clone() {
    return new t2({ title: this.title, showLegend: this.showLegend });
  }
};
e([d({ type: Boolean, json: { write: true } })], p2.prototype, "showLegend", void 0), p2 = t2 = e([n("esri.renderers.visualVariables.support.VisualVariableLegendOptions")], p2);
var i2 = p2;

// node_modules/@arcgis/core/renderers/visualVariables/VisualVariable.js
var a2 = s2.getLogger("esri.renderers.visualVariables.VisualVariable");
var u2 = new s({ colorInfo: "color", transparencyInfo: "opacity", rotationInfo: "rotation", sizeInfo: "size" });
var c = class extends l {
  constructor(e3) {
    super(e3), this.index = null, this.type = null, this.field = null, this.valueExpression = null, this.valueExpressionTitle = null, this.legendOptions = null;
  }
  castField(e3) {
    return null == e3 ? e3 : "function" == typeof e3 ? (a2.error(".field: field must be a string value"), null) : u(e3);
  }
  get arcadeRequired() {
    return !!this.valueExpression;
  }
  clone() {
  }
  getAttributeHash() {
    return `${this.type}-${this.field}-${this.valueExpression}`;
  }
};
e([d()], c.prototype, "index", void 0), e([d({ type: u2.apiValues, readOnly: true, json: { read: u2.read, write: u2.write } })], c.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], c.prototype, "field", void 0), e([s4("field")], c.prototype, "castField", null), e([d({ type: String, json: { write: true } })], c.prototype, "valueExpression", void 0), e([d({ type: String, json: { write: true } })], c.prototype, "valueExpressionTitle", void 0), e([d({ readOnly: true })], c.prototype, "arcadeRequired", null), e([d({ type: i2, json: { write: true } })], c.prototype, "legendOptions", void 0), c = e([n("esri.renderers.visualVariables.VisualVariable")], c);
var d2 = c;

// node_modules/@arcgis/core/renderers/visualVariables/support/SizeStop.js
var p3;
var i3 = p3 = class extends l {
  constructor(r2) {
    super(r2), this.label = null, this.size = null, this.value = null;
  }
  clone() {
    return new p3({ label: this.label, size: this.size, value: this.value });
  }
};
e([d({ type: String, json: { write: true } })], i3.prototype, "label", void 0), e([d({ type: Number, cast: o2, json: { write: true } })], i3.prototype, "size", void 0), e([d({ type: Number, json: { write: true } })], i3.prototype, "value", void 0), i3 = p3 = e([n("esri.renderers.visualVariables.support.SizeStop")], i3);
var l2 = i3;

// node_modules/@arcgis/core/renderers/visualVariables/support/SizeVariableLegendOptions.js
var t3;
var i4 = t3 = class extends i2 {
  constructor() {
    super(...arguments), this.customValues = null;
  }
  clone() {
    return new t3({ title: this.title, showLegend: this.showLegend, customValues: this.customValues && this.customValues.slice(0) });
  }
};
e([d({ type: [Number], json: { write: true } })], i4.prototype, "customValues", void 0), i4 = t3 = e([n("esri.renderers.visualVariables.support.SizeVariableLegendOptions")], i4);
var a3 = i4;

// node_modules/@arcgis/core/renderers/visualVariables/SizeVariable.js
var z;
var v2 = s2.getLogger("esri.renderers.visualVariables.SizeVariable");
var w = new s({ width: "width", depth: "depth", height: "height", widthAndDepth: "width-and-depth", all: "all" });
var V = new s({ unknown: "unknown", inch: "inches", foot: "feet", yard: "yards", mile: "miles", "nautical-mile": "nautical-miles", millimeter: "millimeters", centimeter: "centimeters", decimeter: "decimeters", meter: "meters", kilometer: "kilometers", "decimal-degree": "decimal-degrees" });
function f(e3) {
  if (null != e3)
    return "string" == typeof e3 || "number" == typeof e3 ? o2(e3) : "size" === e3.type ? e2(e3) ? e3 : (delete (e3 = { ...e3 }).type, new b(e3)) : void 0;
}
function g(e3, t4, i5) {
  if ("object" != typeof e3)
    return e3;
  const s5 = new b();
  return s5.read(e3, i5), s5;
}
var b = z = class extends d2 {
  constructor(e3) {
    super(e3), this.axis = null, this.legendOptions = null, this.normalizationField = null, this.scaleBy = null, this.target = null, this.type = "size", this.useSymbolValue = null, this.valueExpression = null, this.valueRepresentation = null, this.valueUnit = null;
  }
  get cache() {
    return { ipData: this._interpolateData(), hasExpression: !!this.valueExpression, compiledFunc: null, isScaleDriven: v.test(this.valueExpression) };
  }
  set expression(e3) {
    v2.warn("'expression' is deprecated since version 4.2. Use 'valueExpression' instead. The only supported expression is 'view.scale'."), "view.scale" === e3 ? (this.valueExpression = "$view.scale", this._set("expression", e3)) : this._set("expression", null);
  }
  set index(e3) {
    e2(this.maxSize) && (this.maxSize.index = `visualVariables[${e3}].maxSize`), e2(this.minSize) && (this.minSize.index = `visualVariables[${e3}].minSize`), this._set("index", e3);
  }
  get inputValueType() {
    return t(this);
  }
  set maxDataValue(e3) {
    e3 && this.stops && (v2.warn("cannot set maxDataValue when stops is not null."), e3 = null), this._set("maxDataValue", e3);
  }
  set maxSize(e3) {
    e3 && this.stops && (v2.warn("cannot set maxSize when stops is not null."), e3 = null), this._set("maxSize", e3);
  }
  castMaxSize(e3) {
    return f(e3);
  }
  readMaxSize(e3, t4, i5) {
    return g(e3, t4, i5);
  }
  set minDataValue(e3) {
    e3 && this.stops && (v2.warn("cannot set minDataValue when stops is not null."), e3 = null), this._set("minDataValue", e3);
  }
  set minSize(e3) {
    e3 && this.stops && (v2.warn("cannot set minSize when stops is not null."), e3 = null), this._set("minSize", e3);
  }
  castMinSize(e3) {
    return f(e3);
  }
  readMinSize(e3, t4, i5) {
    return g(e3, t4, i5);
  }
  get arcadeRequired() {
    return !!this.valueExpression || (this.minSize && "object" == typeof this.minSize && this.minSize.arcadeRequired || this.maxSize && "object" == typeof this.maxSize && this.maxSize.arcadeRequired);
  }
  set stops(e3) {
    null == this.minDataValue && null == this.maxDataValue && null == this.minSize && null == this.maxSize ? e3 && Array.isArray(e3) && (e3 = e3.filter((e4) => !!e4)).sort((e4, t4) => e4.value - t4.value) : e3 && (v2.warn("cannot set stops when one of minDataValue, maxDataValue, minSize or maxSize is not null."), e3 = null), this._set("stops", e3);
  }
  get transformationType() {
    return a(this, this.inputValueType);
  }
  readValueExpression(e3, t4) {
    return e3 || t4.expression && "$view.scale";
  }
  writeValueExpressionWebScene(e3, i5, s5, r2) {
    if ("$view.scale" === e3) {
      if (r2 && r2.messages) {
        const e4 = this.index, i6 = "string" == typeof e4 ? e4 : `visualVariables[${e4}]`;
        r2.messages.push(new s3("property:unsupported", this.type + "VisualVariable.valueExpression = '$view.scale' is not supported in Web Scene. Please remove this property to save the Web Scene.", { instance: this, propertyName: i6 + ".valueExpression", context: r2 }));
      }
    } else
      i5[s5] = e3;
  }
  readValueUnit(e3) {
    return e3 ? V.read(e3) : null;
  }
  clone() {
    return new z({ axis: this.axis, field: this.field, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle, maxDataValue: this.maxDataValue, maxSize: e2(this.maxSize) ? this.maxSize.clone() : this.maxSize, minDataValue: this.minDataValue, minSize: e2(this.minSize) ? this.minSize.clone() : this.minSize, normalizationField: this.normalizationField, stops: this.stops && this.stops.map((e3) => e3.clone()), target: this.target, useSymbolValue: this.useSymbolValue, valueRepresentation: this.valueRepresentation, valueUnit: this.valueUnit, legendOptions: this.legendOptions && this.legendOptions.clone() });
  }
  flipSizes() {
    if (this.transformationType === i.ClampedLinear) {
      const { minSize: e3, maxSize: t4 } = this;
      return this.minSize = t4, this.maxSize = e3, this;
    }
    if (this.transformationType === i.Stops) {
      const e3 = this.stops, t4 = e3.map((e4) => e4.size).reverse(), i5 = e3.length;
      for (let s5 = 0; s5 < i5; s5++)
        e3[s5].size = t4[s5];
      return this;
    }
    return this;
  }
  getAttributeHash() {
    return `${super.getAttributeHash()}-${this.target}-${this.normalizationField}`;
  }
  _interpolateData() {
    return this.stops && this.stops.map((e3) => e3.value || 0);
  }
};
e([d({ readOnly: true })], b.prototype, "cache", null), e([d({ type: w.apiValues, json: { type: w.jsonValues, origins: { "web-map": { read: false } }, read: w.read, write: w.write } })], b.prototype, "axis", void 0), e([d({ type: String, value: null, json: { read: false } })], b.prototype, "expression", null), e([d()], b.prototype, "index", null), e([d({ type: String, readOnly: true })], b.prototype, "inputValueType", null), e([d({ type: a3, json: { write: true } })], b.prototype, "legendOptions", void 0), e([d({ type: Number, value: null, json: { write: true } })], b.prototype, "maxDataValue", null), e([d({ type: Number, value: null, json: { write: true } })], b.prototype, "maxSize", null), e([s4("maxSize")], b.prototype, "castMaxSize", null), e([o("maxSize")], b.prototype, "readMaxSize", null), e([d({ type: Number, value: null, json: { write: true } })], b.prototype, "minDataValue", null), e([d({ type: Number, value: null, json: { write: true } })], b.prototype, "minSize", null), e([s4("minSize")], b.prototype, "castMinSize", null), e([o("minSize")], b.prototype, "readMinSize", null), e([d({ type: String, json: { write: true } })], b.prototype, "normalizationField", void 0), e([d({ readOnly: true })], b.prototype, "arcadeRequired", null), e([d({ type: String })], b.prototype, "scaleBy", void 0), e([d({ type: [l2], value: null, json: { write: true } })], b.prototype, "stops", null), e([d({ type: ["outline"], json: { write: true } })], b.prototype, "target", void 0), e([d({ type: String, readOnly: true })], b.prototype, "transformationType", null), e([d({ type: ["size"], json: { type: ["sizeInfo"] } })], b.prototype, "type", void 0), e([d({ type: Boolean, json: { write: true, origins: { "web-map": { read: false } } } })], b.prototype, "useSymbolValue", void 0), e([d({ type: String, json: { write: true } })], b.prototype, "valueExpression", void 0), e([o("valueExpression", ["valueExpression", "expression"])], b.prototype, "readValueExpression", null), e([r("web-scene", "valueExpression")], b.prototype, "writeValueExpressionWebScene", null), e([d({ type: ["radius", "diameter", "area", "width", "distance"], json: { write: true } })], b.prototype, "valueRepresentation", void 0), e([d({ type: V.apiValues, json: { write: V.write, origins: { "web-map": { read: false }, "web-scene": { write: true } } } })], b.prototype, "valueUnit", void 0), e([o("valueUnit")], b.prototype, "readValueUnit", null), b = z = e([n("esri.renderers.visualVariables.SizeVariable")], b);
var j = b;

export {
  d2 as d,
  l2 as l,
  a3 as a,
  j
};
//# sourceMappingURL=chunk-I4USSDLI.js.map
