import {
  D,
  w
} from "./chunk-JT3LXQ47.js";
import {
  V
} from "./chunk-5N3FSR63.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  d as d2,
  g
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";

// node_modules/@arcgis/core/layers/mixins/operationalLayers.js
var e2 = { "web-scene/operational-layers": { ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISMapServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISTiledElevationServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BuildingSceneLayer: true, GroupLayer: true, IntegratedMeshLayer: true, OGCFeatureLayer: true, PointCloudLayer: true, WebTiledLayer: true, CSV: true, GeoJSON: true, VectorTileLayer: true, WFS: true, WMS: true, KML: true, RasterDataLayer: true, Voxel: true, LineOfSightLayer: true }, "web-scene/basemap": { ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, WebTiledLayer: true, OpenStreetMap: true, VectorTileLayer: true, ArcGISImageServiceLayer: true, WMS: true, ArcGISMapServiceLayer: true }, "web-scene/ground": { ArcGISTiledElevationServiceLayer: true, RasterDataElevationLayer: true }, "web-map/operational-layers": { ArcGISAnnotationLayer: true, ArcGISDimensionLayer: true, ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISImageServiceVectorLayer: true, ArcGISMapServiceLayer: true, ArcGISStreamLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BingMapsAerial: true, BingMapsHybrid: true, BingMapsRoad: true, CSV: true, GeoRSS: true, GeoJSON: true, GroupLayer: true, KML: true, OGCFeatureLayer: true, SubtypeGroupLayer: true, VectorTileLayer: true, WFS: true, WMS: true, WebTiledLayer: true }, "web-map/basemap": { ArcGISImageServiceLayer: true, ArcGISImageServiceVectorLayer: true, ArcGISMapServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, OpenStreetMap: true, VectorTileLayer: true, WMS: true, WebTiledLayer: true, BingMapsAerial: true, BingMapsRoad: true, BingMapsHybrid: true }, "web-map/tables": { ArcGISFeatureLayer: true }, "portal-item/operational-layers": { ArcGISFeatureLayer: true, ArcGISSceneServiceLayer: true, PointCloudLayer: true, BuildingSceneLayer: true, IntegratedMeshLayer: true } };

// node_modules/@arcgis/core/layers/mixins/OperationalLayer.js
var c = (c2) => {
  let u = class extends c2 {
    constructor() {
      super(...arguments), this.title = null;
    }
    writeListMode(e3, r2, t, o) {
      (o && "ground" === o.layerContainerType || e3 && g(this, t, {}, o)) && (r2[t] = e3);
    }
    writeOperationalLayerType(e3, r2, t, o) {
      !e3 || o && "tables" === o.layerContainerType || (r2.layerType = e3);
    }
    writeTitle(e3, r2) {
      r2.title = e3 || "Layer";
    }
    read(e3, r2) {
      r2 && (r2.layer = this), d2(this, e3, (r3) => super.read(e3, r3), r2);
    }
    write(e3, o) {
      var _a, _b;
      if (o == null ? void 0 : o.origin) {
        const e4 = `${o.origin}/${o.layerContainerType || "operational-layers"}`, t = e2[e4];
        let i2 = t && t[this.operationalLayerType];
        if ("ArcGISTiledElevationServiceLayer" === this.operationalLayerType && "web-scene/operational-layers" === e4 && (i2 = false), !i2)
          return (_a = o.messages) == null ? void 0 : _a.push(new s("layer:unsupported", `Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e4}'`, { layer: this })), null;
      }
      const i = super.write(e3, { ...o, layer: this }), s2 = !!o && !!o.messages && !!o.messages.filter((e4) => e4 instanceof s && "web-document-write:property-required" === e4.name).length;
      return V(i == null ? void 0 : i.url) ? ((_b = o == null ? void 0 : o.messages) == null ? void 0 : _b.push(new s("layer:invalid-url", `Layer (${this.title}, ${this.id}) of type '${this.declaredClass}' using a Blob URL cannot be written to web scenes and web maps`, { layer: this })), null) : !this.url && s2 ? null : i;
    }
    beforeSave() {
    }
  };
  return e([d({ type: String, json: { write: { ignoreOrigin: true }, origins: { "web-scene": { write: { isRequired: true, ignoreOrigin: true } }, "portal-item": { write: false } } } })], u.prototype, "id", void 0), e([d(D)], u.prototype, "listMode", void 0), e([r("listMode")], u.prototype, "writeListMode", null), e([d({ type: String, readOnly: true, json: { read: false, write: { target: "layerType", ignoreOrigin: true }, origins: { "portal-item": { write: false } } } })], u.prototype, "operationalLayerType", void 0), e([r("operationalLayerType")], u.prototype, "writeOperationalLayerType", null), e([d(w)], u.prototype, "opacity", void 0), e([d({ type: String, json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true }, origins: { "web-scene": { write: { isRequired: true, ignoreOrigin: true, writerEnsuresNonNull: true } }, "portal-item": { write: false } } }, value: "Layer" })], u.prototype, "title", void 0), e([r([void 0, "web-scene"], "title")], u.prototype, "writeTitle", null), e([d({ type: Boolean, json: { name: "visibility" } })], u.prototype, "visible", void 0), u = e([n("esri.layers.mixins.OperationalLayer")], u), u;
};

export {
  c
};
//# sourceMappingURL=chunk-X5Z3DJQ4.js.map
