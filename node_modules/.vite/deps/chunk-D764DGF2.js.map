{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/RealisticTree.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as m}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as p}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{PhysicallyBasedRendering as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as u,PBRMode as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as f,ReadShadowMapDraw as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as C}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as L}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{MixExternalColor as M}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as j,addCameraPosition as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as A}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as P}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as S}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4Uniform as E}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4Uniform.js\";import{ShaderBuilder as _}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as $}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as T}from\"../views/3d/webgl-engine/lib/basicInterfaces.js\";import{VertexAttribute as N}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ambientBoost as D}from\"../views/3d/webgl-engine/lighting/SceneLighting.js\";function B(B){const V=new _,I=V.vertex.code,R=V.fragment.code,z=j(V,B);return V.include(s),V.varyings.add(\"vpos\",\"vec3\"),V.include(y,B),V.include(t,B),V.include(g,B),B.output!==r.Color&&B.output!==r.Alpha||(O(V.vertex,B),V.include(l,B),V.include(a),B.offsetBackfaces&&V.include(o),B.instancedColor&&V.attributes.add(N.INSTANCECOLOR,\"vec4\"),V.varyings.add(\"vNormalWorld\",\"vec3\"),V.varyings.add(\"localvpos\",\"vec3\"),B.hasMultipassTerrain&&V.varyings.add(\"depth\",\"float\"),V.include(d,B),V.include(e,B),V.include(n,B),V.include(c,B),V.vertex.uniforms.add(new P(\"externalColor\",(e=>e.externalColor))),V.varyings.add(\"vcolorExt\",\"vec4\"),I.add(S`\n        void main(void) {\n          forwardNormalizedVertexColor();\n          vcolorExt = externalColor;\n          ${B.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n          vcolorExt *= vvColor();\n          vcolorExt *= getSymbolColor();\n          forwardColorMixMode();\n\n          if (vcolorExt.a < ${S.float(C)}) {\n            gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n          } else {\n            vpos = calculateVPos();\n            localvpos = vpos - view[3].xyz;\n            vpos = subtractOrigin(vpos);\n            vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\n            vpos = addVerticalOffset(vpos, localOrigin);\n            gl_Position = transformPosition(proj, view, vpos);\n            ${B.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n          }\n          ${B.hasMultipassTerrain?S`depth = (view * vec4(vpos, 1.0)).z;`:\"\"}\n          forwardLinearDepth();\n          forwardTextureCoordinates();\n        }\n      `)),B.output===r.Alpha&&(V.include(i,B),V.include(L,B),V.include(b,B),V.fragment.uniforms.add([new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity)),new E(\"view\")]),B.hasColorTexture&&V.fragment.uniforms.add(new $(\"tex\",(e=>e.texture))),V.fragment.include(M),R.add(S`\n      void main() {\n        discardBySlice(vpos);\n        ${B.hasMultipassTerrain?S`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${B.hasColorTexture?S`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${B.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:S`vec4 texColor = vec4(1.0);`}\n        ${B.hasVertexColors?S`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:S`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),B.output===r.Color&&(V.include(i,B),V.include(p,B),V.include(v,B),V.include(L,B),V.include(B.instancedDoublePrecision?f:x,B),V.include(b,B),O(V.fragment,B),V.fragment.uniforms.add([z,new A(\"ambient\",(e=>e.ambient)),new A(\"diffuse\",(e=>e.diffuse)),new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity)),new E(\"view\"),new F(\"lightingGlobalFactor\",((e,o)=>o.lighting.globalFactor)),new A(\"lightingMainIntensity\",((e,o)=>o.lighting.mainLight.intensity))]),V.fragment.constants.add(\"ambientBoostFactor\",\"float\",D),B.hasColorTexture&&V.fragment.uniforms.add(new $(\"tex\",(e=>e.texture))),V.include(u,B),V.include(h,B),V.fragment.include(M),V.extensions.add(\"GL_OES_standard_derivatives\"),R.add(S`\n      void main() {\n        discardBySlice(vpos);\n        ${B.hasMultipassTerrain?S`terrainDepthTest(gl_FragCoord, depth);`:\"\"}\n        ${B.hasColorTexture?S`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${B.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:S`vec4 texColor = vec4(1.0);`}\n        vec3 viewDirection = normalize(vpos - cameraPosition);\n        ${B.pbrMode===w.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n        ${B.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":B.spherical?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${B.hasVertexColors?S`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:S`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${B.snowCover?S`albedo = mix(albedo, vec3(1), 0.9);`:S``}\n        ${S`\n            vec3 shadingNormal = normalize(vNormalWorld);\n            albedo *= 1.2;\n            vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\n            float alignmentLightView = clamp(dot(viewForward, -lightingMainDirection), 0.0, 1.0);\n            float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\n            float treeRadialFalloff = vColor.r;\n            float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\n            additionalLight += backLightFactor * lightingMainIntensity;`}\n        ${B.pbrMode===w.Normal||B.pbrMode===w.Schematic?B.spherical?S`vec3 normalGround = normalize(vpos + localOrigin);`:S`vec3 normalGround = vec3(0.0, 0.0, 1.0);`:S``}\n        ${B.pbrMode===w.Normal||B.pbrMode===w.Schematic?S`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n                ${B.snowCover?S`\n                        mrr = vec3(0.0, 1.0, 0.04);\n                        emission = vec3(0.0);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:S`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${B.transparencyPassType===T.Color?S`gl_FragColor = premultiplyAlpha(gl_FragColor);`:S``}\n      }\n    `)),V.include(m,B),V}const V=Object.freeze(Object.defineProperty({__proto__:null,build:B},Symbol.toStringTag,{value:\"Module\"}));export{V as R,B as b};\n"],
  "mappings": "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",
  "names": ["B", "V", "i", "d", "o", "c", "e", "t", "s", "n", "m", "a", "O"]
}
