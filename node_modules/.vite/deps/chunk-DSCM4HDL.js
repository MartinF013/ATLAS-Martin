import {
  r as r2
} from "./chunk-WKRVG5MO.js";
import {
  c,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/support/elevationInfoUtils.js
function r3(t2, n) {
  return t(n) || !n.mode ? t2 ? "absolute-height" : "on-the-ground" : n.mode;
}
function s(e, n) {
  return r3(!!r(e) && e.hasZ, n);
}
function i(e) {
  const t2 = l(e);
  return s(e.geometry, t2);
}
function u(e) {
  const r4 = l(e), i2 = s(e.geometry, r4);
  return { mode: i2, offset: r(r4) && "on-the-ground" !== i2 ? c(r4.offset, 0) * r2(c(r4.unit, "meters")) : 0 };
}
function a(e) {
  if ("on-the-ground" === i(e))
    return false;
  const n = l(e), o = r(n) && n.featureExpressionInfo ? n.featureExpressionInfo.expression : null;
  return !(!o || "0" === o);
}
function l(e) {
  return e.layer && "elevationInfo" in e.layer ? e.layer.elevationInfo : null;
}
function c2(o, r4, s2) {
  if (t(s2) || !s2.mode)
    return;
  const i2 = o.hasZ ? o.z : 0, u2 = r(s2.offset) ? s2.offset : 0;
  switch (s2.mode) {
    case "absolute-height":
      return i2 - u2;
    case "on-the-ground":
      return 0;
    case "relative-to-ground":
      return i2 - (c(r4.elevationProvider.getElevation(o.x, o.y, o.z, o.spatialReference, "ground"), 0) + u2);
    case "relative-to-scene":
      return i2 - (c(r4.elevationProvider.getElevation(o.x, o.y, o.z, o.spatialReference, "scene"), 0) + u2);
  }
}
function f(e, t2, n, o = null) {
  return g(e, t2.x, t2.y, t2.hasZ ? t2.z : 0, t2.spatialReference, n, o);
}
function v(e, t2, n, o, r4 = null) {
  return g(e, t2[0], t2[1], t2.length > 2 ? t2[2] : 0, n, o, r4);
}
function g(n, o, r4, s2, i2, u2, a2 = null) {
  if (t(u2))
    return;
  const l2 = r(a2) ? a2.mode : "absolute-height";
  if ("on-the-ground" === l2)
    return 0;
  const { absoluteZ: c3 } = d(o, r4, s2, i2, n, u2);
  return h(c3, o, r4, s2, i2, n, a2, l2);
}
function d(e, o, r4, s2, i2, u2) {
  const a2 = r(u2.offset) ? u2.offset : 0;
  switch (u2.mode) {
    case "absolute-height":
      return { absoluteZ: r4 + a2, elevation: 0 };
    case "on-the-ground": {
      const t2 = c(i2.elevationProvider.getElevation(e, o, 0, s2, "ground"), 0);
      return { absoluteZ: t2, elevation: t2 };
    }
    case "relative-to-ground": {
      const t2 = c(i2.elevationProvider.getElevation(e, o, r4, s2, "ground"), 0);
      return { absoluteZ: r4 + t2 + a2, elevation: t2 };
    }
    case "relative-to-scene": {
      const t2 = c(i2.elevationProvider.getElevation(e, o, r4, s2, "scene"), 0);
      return { absoluteZ: r4 + t2 + a2, elevation: t2 };
    }
  }
}
function h(e, o, r4, s2, i2, u2, a2, l2) {
  const c3 = r(a2) && r(a2.offset) ? a2.offset : 0;
  switch (l2) {
    case "absolute-height":
      return e - c3;
    case "relative-to-ground":
      return e - (c(u2.elevationProvider.getElevation(o, r4, s2, i2, "ground"), 0) + c3);
    case "relative-to-scene":
      return e - (c(u2.elevationProvider.getElevation(o, r4, s2, i2, "scene"), 0) + c3);
  }
}
var m = { mode: "absolute-height", offset: 0 };

export {
  r3 as r,
  s,
  i,
  u,
  a,
  c2 as c,
  f,
  v,
  d,
  m
};
//# sourceMappingURL=chunk-DSCM4HDL.js.map
