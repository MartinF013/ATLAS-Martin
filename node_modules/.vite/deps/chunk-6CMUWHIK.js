import {
  d
} from "./chunk-53KI6WDE.js";
import {
  Hn,
  jn,
  yn
} from "./chunk-PZWU5EHT.js";
import {
  z
} from "./chunk-DYETG5YB.js";
import {
  q as q2
} from "./chunk-AWWWJUTQ.js";
import {
  P,
  _,
  o,
  p,
  q,
  r,
  u,
  x,
  z as z2
} from "./chunk-PKZEO23A.js";
import {
  n
} from "./chunk-AIRC226G.js";
import {
  v2 as v
} from "./chunk-VLCG72SW.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";

// node_modules/@arcgis/core/views/3d/analysis/support/measurementUtils.js
function y(o2, s) {
  const i = s.center;
  o(i, 0, 0, 0);
  for (let t = 0; t < o2.length; ++t)
    u(i, i, o2[t]);
  q(i, i, 1 / o2.length);
  let f = 0;
  for (let t = 0; t < o2.length; ++t)
    f = Math.max(f, p(i, o2[t]));
  s.radius = Math.sqrt(f);
}
function M(t, e) {
  if (t.length < 3)
    throw new Error("need at least 3 points to fit a plane");
  d(t[0], t[1], t[2], e);
}
function b(t, e) {
  return P(t, e) + t[3];
}
function P2(t, e, n2) {
  return Hn(t, R, n2) && Hn(e, S, n2) ? x(R, S) : 0;
}
function w(t, e) {
  if (!jn(t, R) || !jn(e, S))
    return 0;
  const n2 = { distance: null };
  return z(n2, [R[0], R[1]], [S[0], S[1]]), n2.distance;
}
function k2(t, e, n2) {
  const r2 = { distance: null };
  return z(r2, [t[0], t[1]], [e[0], e[1]], n2), r2.distance;
}
function q3(t, e, n2, r2) {
  const o2 = G;
  return yn(t, r2, R) && yn(e, r2, S) && yn(n2, r2, U) ? (o2.setPoint(0, 0, R), o2.setPoint(0, 1, S), o2.setPoint(0, 2, U), Math.abs(q2(o2, "square-meters"))) : 0;
}
function x2(n2, r2 = null, s = true) {
  const a = 1e-6, c = (t, e) => {
    if (0 === e[0] && 0 === e[1] && 0 === e[2])
      return false;
    for (let n3 = 0; n3 < t.length; ++n3)
      if (P(e, t[n3]) < -a)
        return false;
    return true;
  };
  if (0 === n2.length)
    return false;
  if (1 === n2.length)
    return r2 && r(r2, n2[0]), true;
  o(T, 0, 0, 0);
  for (let t = 0; t < n2.length; ++t)
    u(T, T, n2[t]);
  if (z2(T, T), c(n2, T))
    return r2 && r(r2, T), true;
  if (!s)
    return false;
  for (let t = 0; t < n2.length; ++t)
    for (let e = 0; e < n2.length; ++e)
      if (t !== e && (_(T, n2[t], n2[e]), z2(T, T), c(n2, T)))
        return r2 && r(r2, T), true;
  return false;
}
function E(t) {
  return "mouse" !== t.pointerType || 0 === t.button;
}
var R = n();
var S = n();
var U = n();
var G = new v({ rings: [[R, S, U]], spatialReference: k.WGS84 });
var T = n();

export {
  y,
  M,
  b,
  P2 as P,
  w,
  k2 as k,
  q3 as q,
  x2 as x,
  E
};
//# sourceMappingURL=chunk-6CMUWHIK.js.map
