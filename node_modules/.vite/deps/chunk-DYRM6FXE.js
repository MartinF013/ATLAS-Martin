import {
  w
} from "./chunk-7Y6VVOP3.js";
import {
  An,
  Wn
} from "./chunk-PZWU5EHT.js";
import {
  v2 as v
} from "./chunk-VLCG72SW.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  t6 as t
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  m
} from "./chunk-G5JBUC5N.js";

// node_modules/@arcgis/core/layers/support/SceneModification.js
var m2;
var y = m2 = class extends l {
  constructor(e2) {
    super(e2), this.geometry = null, this.type = "clip";
  }
  writeGeometry(e2, r2, o, s) {
    if (s.layer && s.layer.spatialReference && !s.layer.spatialReference.equals(this.geometry.spatialReference)) {
      if (!An(e2.spatialReference, s.layer.spatialReference))
        return void (s && s.messages && s.messages.push(new t("scenemodification:unsupported", "Scene modifications with incompatible spatial references are not supported", { modification: this, spatialReference: s.layer.spatialReference, context: s })));
      const p = new v();
      Wn(e2, p, s.layer.spatialReference), r2[o] = p.toJSON(s);
    } else
      r2[o] = e2.toJSON(s);
    delete r2[o].spatialReference;
  }
  clone() {
    return new m2({ geometry: m(this.geometry), type: this.type });
  }
};
e([d({ type: v }), w()], y.prototype, "geometry", void 0), e([r(["web-scene", "portal-item"], "geometry")], y.prototype, "writeGeometry", null), e([d({ type: ["clip", "mask", "replace"], nonNullable: true }), w()], y.prototype, "type", void 0), y = m2 = e([n("esri.layers.support.SceneModification")], y);
var f = y;

export {
  f
};
//# sourceMappingURL=chunk-DYRM6FXE.js.map
