import {
  d as d4,
  h as h3,
  j as j3
} from "./chunk-OPQ375VL.js";
import {
  F,
  S as S3,
  U,
  k as k3,
  q as q3,
  x as x2,
  z as z3
} from "./chunk-VOFRIPQR.js";
import {
  Z,
  d as d3,
  f as f3,
  h as h2,
  h2 as h4,
  x as x3,
  y as y3
} from "./chunk-7TCJ26U5.js";
import {
  e as e6
} from "./chunk-T6BL6FYR.js";
import {
  S as S2,
  g as g2,
  p,
  x
} from "./chunk-GVCSP4OP.js";
import {
  a,
  o as o3
} from "./chunk-7LOTF6IL.js";
import {
  p as p2
} from "./chunk-22MSECLU.js";
import {
  c as c4,
  r as r5
} from "./chunk-NSEAWM6P.js";
import {
  c as c3,
  f as f2
} from "./chunk-DSCM4HDL.js";
import {
  r as r3,
  v
} from "./chunk-SOZCO2CU.js";
import {
  n as n5
} from "./chunk-W2HLA6I3.js";
import {
  O as O2,
  Q
} from "./chunk-DLM6NKXW.js";
import {
  e as e5
} from "./chunk-TQLSOIYV.js";
import {
  e as e7,
  r as r6
} from "./chunk-AMGAY4O5.js";
import {
  r as r4
} from "./chunk-ZUDEVIXR.js";
import {
  l as l3
} from "./chunk-ZN2MGN4S.js";
import {
  O,
  e2 as e4
} from "./chunk-25QHXOZB.js";
import {
  n as n4
} from "./chunk-UHJVTABQ.js";
import {
  f
} from "./chunk-W66LN57L.js";
import {
  Gn,
  hn,
  yn
} from "./chunk-PZWU5EHT.js";
import {
  d as d2
} from "./chunk-JJRJ6TV3.js";
import {
  h,
  l as l2,
  w as w3
} from "./chunk-T7BEWVV3.js";
import {
  M,
  w as w2,
  y as y2,
  z
} from "./chunk-DYETG5YB.js";
import {
  W,
  ce
} from "./chunk-RN2KRYDN.js";
import {
  C,
  q as q2
} from "./chunk-AWWWJUTQ.js";
import {
  n as n3
} from "./chunk-OIPX3EDD.js";
import {
  c as c2,
  i
} from "./chunk-NWRK6QLX.js";
import {
  m as m2
} from "./chunk-OOZMA7DN.js";
import {
  P,
  S,
  _,
  e as e3,
  q,
  z as z2
} from "./chunk-PKZEO23A.js";
import {
  n as n2,
  r as r2
} from "./chunk-AIRC226G.js";
import {
  j2
} from "./chunk-YPZEGNLG.js";
import {
  E,
  k,
  k2,
  o as o2
} from "./chunk-3NMRL5CR.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  j
} from "./chunk-U3PSONS6.js";
import {
  m
} from "./chunk-G5JBUC5N.js";
import {
  c,
  e as e2,
  g,
  l,
  o,
  r,
  t,
  w
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/draw/DrawingMode.js
var c5 = ["freehand", "hybrid", "click"];
var e8 = "click";

// node_modules/@arcgis/core/views/interactive/tooltip/css.js
var t2 = "esri-tooltip";
var o4 = `${t2}-content`;

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContent.js
var g3 = class extends O {
  constructor() {
    super(...arguments), this._messagesUnits = null, this._messagesTooltip = null;
  }
  get _units() {
    const t3 = ce(this.tooltip.view);
    return { length: t3, verticalLength: t3, area: t3 };
  }
  _formatScale(t3) {
    return m2(t3, { style: "percent", maximumFractionDigits: 0 });
  }
  _formatRelativeOrientation(t3) {
    return m2(t3, { maximumFractionDigits: 2, minimumFractionDigits: 2, signDisplay: "exceptZero" });
  }
  _formatLength(t3, r9, i4) {
    return x2(this._messagesUnits, t3, c(r9, this._units.length), i4);
  }
  _formatRelativeLength(t3) {
    return F(this._messagesUnits, t3, this._units.length);
  }
  _formatVerticalLength(t3) {
    return S3(this._messagesUnits, t3, this._units.verticalLength);
  }
  _formatRelativeVerticalLength(t3) {
    return k3(this._messagesUnits, t3, this._units.verticalLength);
  }
  _formatTotalLength(t3) {
    return x2(this._messagesUnits, t3, this._units.length);
  }
  _formatArea(t3) {
    return z3(this._messagesUnits, t3, this._units.area);
  }
  _formatPercentage(t3) {
    return m2(t3.value, { style: "percent" });
  }
};
e([d()], g3.prototype, "info", void 0), e([d()], g3.prototype, "tooltip", void 0), e([d()], g3.prototype, "_units", null), e([e4("esri/core/t9n/Units"), d()], g3.prototype, "_messagesUnits", void 0), e([e4("esri/views/interactive/tooltip/t9n/Tooltip"), d()], g3.prototype, "_messagesTooltip", void 0), g3 = e([n("esri.views.interactive.tooltip.content.TooltipContent")], g3);

// node_modules/@arcgis/core/views/interactive/tooltip/support/TooltipField.js
var p3 = `${t2}-field`;
var a2 = { base: p3, title: `${p3}__title`, value: `${p3}__value` };
var c6 = class extends O {
  render() {
    return n4("div", { class: a2.base }, n4("div", { class: a2.title }, this.title), n4("div", { class: a2.value }, this.value));
  }
};
e([d()], c6.prototype, "title", void 0), e([d()], c6.prototype, "value", void 0), c6 = e([n("esri.views.interactive.tooltip.support.TooltipField")], c6);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentDrawPoint.js
var p4 = { base: `${o4} ${`${o4}--draw-point`}` };
var c7 = class extends g3 {
  render() {
    var _a;
    const { elevation: t3 } = this.info, o5 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p4.base }, n4(c6, { title: o5 == null ? void 0 : o5.elevation, value: this._formatVerticalLength(t3) }));
  }
};
c7 = e([n("esri.views.interactive.tooltip.content.TooltipContentDrawPoint")], c7);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentDrawPolygon.js
var p5 = { base: `${o4} ${`${o4}--draw-polygon`}` };
var a3 = class extends g3 {
  render() {
    var _a;
    const { area: o5, elevation: t3 } = this.info, s2 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p5.base }, n4(c6, { title: s2 == null ? void 0 : s2.elevation, value: this._formatVerticalLength(t3) }), n4(c6, { title: s2 == null ? void 0 : s2.area, value: this._formatArea(o5) }));
  }
};
a3 = e([n("esri.views.interactive.tooltip.content.TooltipContentDrawPolygon")], a3);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentDrawPolyline.js
var p6 = { base: `${o4} ${`${o4}--draw-polyline`}` };
var a4 = class extends g3 {
  render() {
    var _a;
    const { elevation: t3, totalLength: o5 } = this.info, s2 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p6.base }, n4(c6, { title: s2 == null ? void 0 : s2.elevation, value: this._formatVerticalLength(t3) }), n4(c6, { title: s2 == null ? void 0 : s2.totalLength, value: this._formatLength(o5) }));
  }
};
a4 = e([n("esri.views.interactive.tooltip.content.TooltipContentDrawPolyline")], a4);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentExtentRotate.js
var p7 = { base: `${o4} ${`${o4}--extent-rotate`}` };
var a5 = class extends g3 {
  render() {
    var _a;
    const { angle: t3 } = this.info, o5 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p7.base }, n4(c6, { title: o5 == null ? void 0 : o5.rotation, value: this._formatRelativeOrientation(t3) }));
  }
};
a5 = e([n("esri.views.interactive.tooltip.content.TooltipContentExtentRotate")], a5);

// node_modules/@arcgis/core/views/interactive/tooltip/support/ValueByValue.js
var p8 = { base: `${t2}-value-by-value` };
var a6 = class extends O {
  constructor() {
    super(...arguments), this.divider = "Ã—";
  }
  render() {
    return n4("div", { class: p8.base }, n4("span", null, this.left), n4("span", null, this.divider), n4("span", null, this.right));
  }
};
e([d()], a6.prototype, "left", void 0), e([d()], a6.prototype, "divider", void 0), e([d()], a6.prototype, "right", void 0), a6 = e([n("esri.views.interactive.tooltip.support.ValueByValue")], a6);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentExtentScale.js
var a7 = { base: `${o4} ${`${o4}--extent-scale`}` };
var c8 = class extends g3 {
  render() {
    var _a;
    const { xScale: t3, yScale: s2, xSize: e11, ySize: o5 } = this.info, c17 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: a7.base }, n4(c6, { title: c17 == null ? void 0 : c17.size, value: n4(a6, { left: this._formatLength(e11), right: this._formatLength(o5) }) }), n4(c6, { title: c17 == null ? void 0 : c17.scale, value: n4(a6, { left: this._formatScale(t3), right: this._formatScale(s2) }) }));
  }
};
c8 = e([n("esri.views.interactive.tooltip.content.TooltipContentExtentScale")], c8);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentReshapeEdgeOffset.js
var p9 = { base: `${o4} ${`${o4}--reshape-edge-offset`}` };
var c9 = class extends g3 {
  render() {
    var _a;
    const { distance: s2 } = this.info, t3 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p9.base }, n4(c6, { title: t3 == null ? void 0 : t3.distance, value: this._formatRelativeLength(s2) }));
  }
};
c9 = e([n("esri.views.interactive.tooltip.content.TooltipContentReshapeEdgeOffset")], c9);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentReshapeMoveGraphic.js
var p10 = { base: `${o4} ${`${o4}--reshape-move-graphic`}` };
var c10 = class extends g3 {
  render() {
    var _a;
    const { distance: s2 } = this.info, o5 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p10.base }, n4(c6, { title: o5 == null ? void 0 : o5.distance, value: this._formatLength(s2) }));
  }
};
c10 = e([n("esri.views.interactive.tooltip.content.TooltipContentReshapeMoveGraphic")], c10);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentTransformAbsolute.js
var p11 = { base: `${o4} ${`${o4}--transform-absolute`}` };
var a8 = class extends g3 {
  render() {
    var _a;
    const { orientation: t3, orientationEnabled: s2, orientationPrecision: r9, rotationType: e11, size: a13, sizeEnabled: c17, sizeUnit: m9, sizePrecision: l6 } = this.info, u3 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p11.base }, s2 && n4(c6, { title: u3 == null ? void 0 : u3.orientation, value: U(t3, e11, r9) }), c17 && n4(c6, { title: u3 == null ? void 0 : u3.size, value: this._formatLength(a13, m9, l6) }));
  }
};
a8 = e([n("esri.views.interactive.tooltip.content.TooltipContentTransformAbsolute")], a8);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentTransformRotate.js
var n6 = { base: `${o4} ${`${o4}--transform-rotate`}` };
var c11 = class extends g3 {
  render() {
    var _a;
    const { rotation: o5, rotationPrecision: s2, orientation: e11, orientationPrecision: i4, rotationType: c17 } = this.info, m9 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: n6.base }, n4(c6, { title: m9 == null ? void 0 : m9.rotation, value: q3(o5, c17, s2) }), n4(c6, { title: m9 == null ? void 0 : m9.orientation, value: U(e11, c17, i4) }));
  }
};
c11 = e([n("esri.views.interactive.tooltip.content.TooltipContentTransformRotate")], c11);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentTransformScale.js
var p12 = { base: `${o4} ${`${o4}--transform-scale`}` };
var c12 = class extends g3 {
  render() {
    var _a;
    const { scale: s2, size: t3, sizePrecision: o5, sizeUnit: e11 } = this.info, c17 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p12.base }, n4(c6, { title: c17 == null ? void 0 : c17.scale, value: this._formatPercentage(s2) }), n4(c6, { title: c17 == null ? void 0 : c17.size, value: this._formatLength(t3, e11, o5) }));
  }
};
c12 = e([n("esri.views.interactive.tooltip.content.TooltipContentTransformScale")], c12);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentTranslateVertex.js
var p13 = { base: `${o4} ${`${o4}--translate-vertex`}` };
var c13 = class extends g3 {
  render() {
    var _a;
    const { area: t3, distance: o5, elevation: s2, totalLength: r9 } = this.info, c17 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p13.base }, n4(c6, { title: c17 == null ? void 0 : c17.distance, value: this._formatLength(o5) }), r(s2) && n4(c6, { title: c17 == null ? void 0 : c17.elevation, value: this._formatVerticalLength(s2) }), r(t3) && n4(c6, { title: c17 == null ? void 0 : c17.area, value: this._formatArea(t3) }), r(r9) && n4(c6, { title: c17 == null ? void 0 : c17.totalLength, value: this._formatLength(r9) }));
  }
};
c13 = e([n("esri.views.interactive.tooltip.content.TooltipContentTranslateVertex")], c13);

// node_modules/@arcgis/core/views/interactive/tooltip/content/TooltipContentTranslateZ.js
var p14 = { base: `${o4} ${`${o4}--extent-move-z`}` };
var c14 = class extends g3 {
  render() {
    var _a;
    const { distance: t3 } = this.info, s2 = (_a = this._messagesTooltip) == null ? void 0 : _a.sketch;
    return n4("div", { class: p14.base }, n4(c6, { title: s2 == null ? void 0 : s2.distance, value: this._formatRelativeVerticalLength(t3) }));
  }
};
c14 = e([n("esri.views.interactive.tooltip.content.TooltipContentTranslateZ")], c14);

// node_modules/@arcgis/core/views/interactive/tooltip/content/tooltipContentFactory.js
function w4(w5, u3) {
  if (t(u3))
    return null;
  const T = document.createElement("div");
  switch (u3.type) {
    case "draw-point":
      return new c7({ tooltip: w5, info: u3, container: T });
    case "draw-polygon":
      return new a3({ tooltip: w5, info: u3, container: T });
    case "draw-polyline":
      return new a4({ tooltip: w5, info: u3, container: T });
    case "extent-rotate":
      return new a5({ tooltip: w5, info: u3, container: T });
    case "extent-scale":
      return new c8({ tooltip: w5, info: u3, container: T });
    case "reshape-edge-offset":
      return new c9({ tooltip: w5, info: u3, container: T });
    case "transform-absolute":
      return new a8({ tooltip: w5, info: u3, container: T });
    case "transform-rotate":
      return new c11({ tooltip: w5, info: u3, container: T });
    case "transform-scale":
      return new c12({ tooltip: w5, info: u3, container: T });
    case "translate-graphic":
      return new c10({ tooltip: w5, info: u3, container: T });
    case "translate-vertex":
      return new c13({ tooltip: w5, info: u3, container: T });
    case "translate-z":
      return new c14({ tooltip: w5, info: u3, container: T });
  }
}

// node_modules/@arcgis/core/views/interactive/tooltip/Tooltip.js
var h5 = { base: `${t2}` };
var m3 = class extends y {
  constructor(t3) {
    super(t3), this.info = null, this._contentContainer = (() => {
      const t4 = document.createElement("div");
      return t4.classList.add(h5.base), t4;
    })(), this._contentWidget = null;
  }
  initialize() {
    const t3 = this._contentContainer;
    this.own([l2(() => {
      var _a;
      return (_a = this.view.overlay) == null ? void 0 : _a.surface;
    }, (o5) => {
      t3.remove(), o(o5, (o6) => o6.appendChild(t3));
    }, w3), l2(() => this.info, (o5, s2) => {
      r(this._contentWidget) && r(o5) && r(s2) && o5.type === s2.type ? this._contentWidget.info = o5 : (this._contentWidget = l(this._contentWidget), o(w4(this, o5), (o6) => {
        this._contentWidget = o6, t3.appendChild(o6.container);
      }));
    }, w3), l2(() => {
      var _a;
      return { container: this._contentContainer, contentWidget: this._contentWidget, screenPoint: (_a = this.view.inputManager) == null ? void 0 : _a.latestPointerLocation };
    }, u, w3)]);
  }
  destroy() {
    this._contentWidget = l(this._contentWidget), this._contentContainer.remove();
  }
  clear() {
    this.info = null;
  }
  get test() {
    return { contentContainer: this._contentContainer };
  }
};
function u({ container: t3, contentWidget: o5, screenPoint: e11 }) {
  const { style: i4 } = t3;
  if (r(e11) && r(o5)) {
    i4.display = "block";
    const o6 = f(t3), n8 = `translate(${Math.round(e11.x) + f4[0] * (o6 ? -1 : 1)}px, ${Math.round(e11.y) + f4[1]}px)`;
    i4.transform = o6 ? `translate(-100%, 0) ${n8}` : n8;
  } else
    i4.display = "none";
}
e([d({ nonNullable: true })], m3.prototype, "view", void 0), e([d()], m3.prototype, "info", void 0), e([d()], m3.prototype, "_contentContainer", void 0), e([d()], m3.prototype, "_contentWidget", void 0), m3 = e([n("esri.views.interactive.tooltip.Tooltip")], m3);
var f4 = [20, 20];

// node_modules/@arcgis/core/views/support/geodesicMeasurementUtils.js
function r7(r9, t3, i4, s2, ...l6) {
  return o2(r9) && M(r9) ? t3.apply(void 0, l6) : k(r9) ? i4.apply(void 0, l6) : s2.apply(void 0, l6);
}

// node_modules/@arcgis/core/views/support/geodesicLengthMeasurementUtils.js
function f5(e11) {
  const { spatialReference: t3 } = e11;
  return r7(t3, y4, j4, d5, e11);
}
function m4(e11, t3) {
  if (!E(e11.spatialReference, t3.spatialReference))
    return null;
  const { spatialReference: r9 } = e11;
  return U2[0] = e11.x, U2[1] = e11.y, U2[2] = e11.hasZ ? e11.z : 0, x4[0] = t3.x, x4[1] = t3.y, x4[2] = t3.hasZ ? t3.z : 0, l4(U2, x4, r9);
}
function l4(e11, t3, r9) {
  return r7(r9, a9, p15, g4, e11, t3, r9);
}
function a9(t3, r9, n8) {
  return o3(z(R, t3, r9, n8).distance, "meters");
}
function p15(t3, n8, o5) {
  return o3(C(h6(t3, n8, o5), "meters"), "meters");
}
function g4(t3, r9, o5) {
  return yn(t3, o5, z4) && yn(r9, o5, Z2) ? o3(z(R, z4, Z2).distance, "meters") : null;
}
function y4(t3) {
  return o3(y2([t3], "meters")[0], "meters");
}
function j4(t3) {
  return o3(C(t3, "meters"), "meters");
}
function d5(t3) {
  const r9 = [];
  if (!Gn(t3, r9))
    return null;
  let n8 = 0;
  for (const e11 of r9) {
    let t4 = 0;
    for (let r10 = 1; r10 < e11.length; ++r10)
      t4 += z(R, e11[r10 - 1], e11[r10]).distance;
    n8 += t4;
  }
  return o3(n8, "meters");
}
function h6(e11, t3, r9) {
  return { type: "polyline", spatialReference: r9, paths: [[[...e11], [...t3]]] };
}
var R = { distance: null };
var U2 = n2();
var x4 = n2();
var z4 = n2();
var Z2 = n2();

// node_modules/@arcgis/core/views/support/automaticLengthMeasurementUtils.js
function m5(n8, e11) {
  return g5(f3, f5, h4, e11, n8);
}
function a10(n8, r9, t3, e11) {
  return g5(x3, l4, Z, e11, n8, r9, t3);
}
function d6(n8, r9, t3) {
  return g5(y3, m4, y3, t3, n8, r9);
}
function l5(n8, r9, t3, e11) {
  return g5(Z, l4, Z, e11, n8, r9, t3);
}
function g5(r9, t3, e11, o5, ...i4) {
  if ("on-the-ground" === o5) {
    const r10 = t3.apply(void 0, i4);
    return r(r10) ? r10 : e11.apply(void 0, i4);
  }
  return r9.apply(void 0, i4);
}

// node_modules/@arcgis/core/views/draw/DrawManipulator.js
var e9 = class {
  constructor({ grabbableForEvent: e11 }) {
    this.events = new n3(), this.interactive = true, this.selectable = false, this.cursor = null, this.grabbable = true, this.grabbableForEvent = e11;
  }
  intersectionDistance(t3, e11) {
    return 0;
  }
  attach() {
  }
  detach() {
  }
};

// node_modules/@arcgis/core/views/interactive/tooltip/SketchTooltipInfo.js
var e10 = class extends y {
  constructor(o5) {
    super(o5);
  }
};
e([d()], e10.prototype, "tooltipOptions", void 0), e10 = e([n("esri.views.interactive.tooltip.SketchTooltipInfo")], e10);

// node_modules/@arcgis/core/views/interactive/tooltip/DrawTooltipInfos.js
var p16 = class extends e10 {
  constructor(o5) {
    super(o5), this.type = "draw-point";
  }
};
e([d()], p16.prototype, "type", void 0), e([d()], p16.prototype, "elevation", void 0), p16 = e([n("esri.views.interactive.tooltip.DrawPointTooltipInfo")], p16);
var i2 = class extends e10 {
  constructor(o5) {
    super(o5), this.type = "draw-polyline";
  }
};
e([d()], i2.prototype, "type", void 0), e([d()], i2.prototype, "elevation", void 0), e([d()], i2.prototype, "totalLength", void 0), i2 = e([n("esri.views.interactive.tooltip.DrawPolylineTooltipInfo")], i2);
var s = class extends e10 {
  constructor(o5) {
    super(o5), this.type = "draw-polygon";
  }
};
e([d()], s.prototype, "type", void 0), e([d()], s.prototype, "elevation", void 0), e([d()], s.prototype, "area", void 0), s = e([n("esri.views.interactive.tooltip.DrawPolygonTooltipInfo")], s);

// node_modules/@arcgis/core/views/support/geodesicAreaMeasurementUtils.js
function m6(e11) {
  const { spatialReference: r9 } = e11;
  return r7(r9, i3, a11, u2, e11);
}
function i3(r9) {
  return a(Math.abs(w2([r9], "square-meters")[0]), "square-meters");
}
function a11(t3) {
  try {
    return a(Math.abs(q2(t3, "square-meters")), "square-meters");
  } catch (s2) {
    return null;
  }
}
function u2(r9) {
  const o5 = [];
  return hn(r9, o5) ? a(Math.abs(w2([{ type: "polygon", rings: o5, spatialReference: k2.WGS84 }], "square-meters")[0]), "square-meters") : null;
}

// node_modules/@arcgis/core/views/support/automaticAreaMeasurementUtils.js
function m7(m9, s2, n8 = d4()) {
  if (s2) {
    const t3 = m6(m9);
    return r(t3) ? t3 : j3(m9, n8);
  }
  return h3(m9, n8);
}

// node_modules/@arcgis/core/views/interactive/tooltip/support/measurements.js
function a12(n8, s2) {
  var _a, _b;
  const i4 = (t3) => m5(t3, s2), a13 = (t3, r9, e11) => a10(t3, r9, e11, s2), m9 = i4(n8), p17 = ((_b = n8.paths[0]) == null ? void 0 : _b[((_a = n8.paths[0]) == null ? void 0 : _a.length) - 1]) ?? null, { hasZ: l6, spatialReference: f6 } = n8, h7 = p17 ? r2(p17[0], p17[1], l6 ? p17[2] : 0) : null;
  return (e11) => {
    if (t(e11) || t(m9) || t(h7))
      return m9;
    c15[0] = e11.x, c15[1] = e11.y, c15[2] = l6 ? e11.z : 0;
    const n9 = a13(h7, c15, f6);
    return t(n9) ? m9 : o3(m9.value + n9.value, m9.unit);
  };
}
function m8(r9, e11) {
  const n8 = d4(), o5 = (t3) => m7(t3, e11, n8);
  return (e12) => {
    if (t(e12) || r9.rings.length < 1 || r9.rings[0].length < 2)
      return o5(r9);
    const n9 = r9.clone();
    return n9.rings[0].push([e12.x, e12.y]), o5(n9);
  };
}
var c15 = n2();

// node_modules/@arcgis/core/views/draw/DrawOperation.js
var F2 = class extends n3.EventedMixin(d2) {
  constructor(t3) {
    super(t3), this._createOperationCompleted = false, this._pointerDownStates = /* @__PURE__ */ new Set(), this._snappingPipeline = new d3(), this._tooltip = null, this._tooltipContext = { calculateElevation: null, calculateTotalLength: null, calculateArea: null }, this.isDraped = true, this.labelOptions = new c4(), this.tooltipOptions = new r5(), this.snapToSceneEnabled = null, t(t3.elevationInfo) && (this.elevationInfo = { mode: t3.hasZ ? "absolute-height" : "on-the-ground", offset: 0 });
  }
  initialize() {
    const { geometryType: t3, view: e11 } = this, { spatialReference: i4 } = e11, o5 = "viewingMode" in e11.state ? e11.state.viewingMode : l3.Local, p17 = "segment" === t3 || "multipoint" === t3 ? "polyline" : t3;
    this.coordinateHelper = x(this.hasZ, this.hasM, i4), this._editGeometryOperations = new S2(new g2(p17, this.coordinateHelper)), this._snappingOperation = new h2({ view: e11 }), this.handles.add(l2(() => this.stagedVertex, (t4, e12) => {
      r(this._tooltip) && (r(e12) !== r(t4) ? this._tooltip.info = this._getTooltipInfo() : this._updateTooltipInfo()), t(t4) || this.emit("cursor-update", { updated: null, vertices: [{ componentIndex: 0, vertexIndex: this._activeComponent.vertices.length, coordinates: this.coordinateHelper.pointToArray(t4) }], operation: "apply", type: "vertex-update" });
    }, { sync: true, equals: (t4, e12) => w(t4, e12, r3) })), this._activeComponent = new p(i4, o5), this._editGeometryOperations.data.components.push(this._activeComponent);
    const l6 = this.segmentLabels;
    r(l6) && (l6.context = { view: e11, editGeometryOperations: this._editGeometryOperations, elevationInfo: this.elevationInfo, labelOptions: this.labelOptions }, this.handles.add([l2(() => this.labelOptions.enabled, (t4) => {
      l6.visible = t4;
    }, w3), this.on("cursor-update", () => {
      const t4 = this.stagedVertex;
      l6.stagedVertex = r(t4) ? this.coordinateHelper.pointToVector(t4) : null;
    })])), this.handles.add(this._editGeometryOperations.on(["vertex-add", "vertex-update", "vertex-remove"], (t4) => {
      const e12 = t4.vertices.map((t5) => ({ componentIndex: 0, vertexIndex: t5.index, coordinates: this.coordinateHelper.vectorToArray(t5.pos) })), i5 = e12.map((t5) => t5.coordinates);
      switch (t4.type) {
        case "vertex-add":
          this.emit(t4.type, { ...t4, added: i5, vertices: e12 });
          break;
        case "vertex-update":
          this.emit(t4.type, { ...t4, updated: i5, vertices: e12 });
          break;
        case "vertex-remove":
          this.emit(t4.type, { ...t4, removed: i5, vertices: e12 });
      }
    })), this._manipulator = new e9({ grabbableForEvent: (t4) => "click" !== this.drawingMode || "touch" === t4.pointerType && this._snappingEnabled && 1 === this._pointerDownStates.size }), this.manipulators.add(this._manipulator), this._manipulator.grabbable = "point" !== t3, this.handles.add([this._createManipulatorDragPipeline(this._manipulator), this._manipulator.events.on("immediate-click", (t4) => this._onImmediateClick(t4)), this._manipulator.events.on("immediate-double-click", (t4) => this._onImmediateDoubleClick(t4)), l2(() => this.tooltipOptions.enabled, (t4) => {
      this._tooltip = t4 ? new m3({ view: e11, info: this._getTooltipInfo() }) : l(this._tooltip);
    }, h), this._editGeometryOperations.on(["vertex-add", "vertex-update", "vertex-remove"], () => o(this._tooltip, (t4) => {
      t4.info = this._getTooltipInfo();
    }))]);
  }
  destroy() {
    l(this.segmentLabels), l(this._snappingOperation), this._tooltip = l(this._tooltip), this._editGeometryOperations = l(this._editGeometryOperations);
  }
  get _snappingEnabled() {
    return r(this.snappingManager) && this.snappingManager.options.effectiveEnabled;
  }
  get _defaultElevation() {
    return o3(this.defaultZ, "meters");
  }
  get canRedo() {
    return this._editGeometryOperations.canRedo;
  }
  get canUndo() {
    return this._editGeometryOperations.canUndo;
  }
  get committedVertices() {
    return this._activeComponent.vertices.map((t3) => this.coordinateHelper.vectorToArray(t3.pos));
  }
  set drawingMode(t3) {
    this._set("drawingMode", t3 ?? e8);
  }
  get interactive() {
    return this._manipulator.interactive;
  }
  set interactive(t3) {
    this._manipulator.interactive = t3;
  }
  get isCompleted() {
    return this._createOperationCompleted;
  }
  get numCommittedVertices() {
    return this._activeComponent.vertices.length;
  }
  get numVertices() {
    return r(this.stagedVertex) ? this._activeComponent.vertices.length + 1 : this._activeComponent.vertices.length;
  }
  get stagedVertex() {
    return this._snappingOperation.stagedPoint;
  }
  set stagedVertex(t3) {
    this._snappingOperation.stagedPoint = m(t3);
  }
  get updating() {
    return this.updatingHandles.updating;
  }
  get vertices() {
    const t3 = this.committedVertices;
    return r(this.stagedVertex) && t3.push(this.coordinateHelper.pointToArray(this.stagedVertex)), t3;
  }
  get stagedOrLastVertex() {
    if (r(this.stagedVertex))
      return this.stagedVertex;
    const t3 = this._activeComponent.getLastVertex();
    return t(t3) ? null : this._editGeometryOperations.data.coordinateHelper.vectorToDehydratedPoint(t3.pos);
  }
  cancel() {
    this.complete({ aborted: true });
  }
  commitStagedVertex() {
    if (this._snappingOperation.abort(), r(this.stagedVertex)) {
      const { stagedVertex: t3 } = this;
      this.stagedVertex = null, this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(t3));
    }
  }
  complete(t3) {
    const e11 = t3 && t3.aborted || false;
    this._snappingOperation.abort(), r(this.snappingManager) && this.snappingManager.doneSnapping(), "segment" === this.geometryType || "point" === this.geometryType ? this.commitStagedVertex() : this.stagedVertex = null;
    const i4 = "multipoint" === this.geometryType && 0 === this.numVertices || "polyline" === this.geometryType && this.numVertices < 2 || "polygon" === this.geometryType && this.numVertices < 3;
    this._createOperationCompleted = !i4, (this.isCompleted || e11) && this.emit("complete", { vertices: this.vertices.map((t4, e12) => ({ componentIndex: 0, vertexIndex: e12, coordinates: t4 })), aborted: e11, type: "complete" });
  }
  onInputEvent(t3) {
    switch (t3.type) {
      case "pointer-down":
        this._pointerDownStates.add(t3.pointerId);
        break;
      case "pointer-up":
        this._pointerDownStates.delete(t3.pointerId);
    }
    switch (t3.type) {
      case "pointer-move":
        return this._onPointerMove(t3);
      case "hold":
        return this._onHold(t3);
    }
  }
  redo() {
    this._editGeometryOperations.redo();
  }
  undo() {
    r(this.snappingManager) && this.snappingManager.doneSnapping(), this._editGeometryOperations.undo();
  }
  _closeOnClickVertexIndex(t3) {
    const e11 = this._activeComponent;
    if ("polygon" === this.geometryType && e11.vertices.length > 2) {
      if (this._vertexWithinPointerDistance(e11.vertices[0].pos, t3))
        return 0;
      if (this._vertexWithinPointerDistance(e11.vertices[e11.vertices.length - 1].pos, t3))
        return e11.vertices.length - 1;
    }
    return null;
  }
  _createManipulatorDragPipeline(t3) {
    switch (e2(this.drawingMode)) {
      case "click":
        return this._createManipulatorDragPipelineClick(t3);
      case "freehand":
        return this._createManipulatorDragPipelineFreehand(t3);
      case "hybrid":
        return this._createManipulatorDragPipelineHybrid(t3);
    }
  }
  _createManipulatorDragPipelineClick(t3) {
    return p2(t3, (t4, e11, i4, o5) => {
      const n8 = "touch" === o5 && this._snappingEnabled;
      !this.isCompleted && n8 && (e11.next(this._screenToMapDragEventStep()).next((t5) => ("start" === t5.action && (this.stagedVertex = t5.mapStart, ("segment" === this.geometryType || n8 && 0 === this.numVertices) && this.commitStagedVertex()), t5)).next(this._snappingPipeline.createSnapDragEventPipelineStep({ predicate: () => n8, cancel: i4, snappingManager: this.snappingManager, snappingContext: new e6({ editGeometryOperations: this._editGeometryOperations, elevationInfo: this.elevationInfo, pointer: o5, visualizer: this.snappingVisualizer }), updatingHandles: this.updatingHandles }), this._snappingPipeline.next).next((t5) => (n8 && (this.stagedVertex = t5.mapEnd, "end" === t5.action && this.commitStagedVertex()), t5)).next((t5) => ("end" === t5.action && ("segment" !== this.geometryType && "point" !== this.geometryType || this.complete()), t5)), i4.next(() => {
        n8 && r(this.snappingManager) && this.snappingManager.doneSnapping();
      }));
    });
  }
  _createManipulatorDragPipelineFreehand(t3) {
    return p2(t3, (t4, e11) => {
      this.isCompleted || e11.next(this._screenToMapDragEventStep()).next((t5) => ("start" === t5.action && (t(this.stagedVertex) && (this.stagedVertex = t5.mapStart), "segment" === this.geometryType && this.commitStagedVertex()), t5)).next((t5) => {
        switch (t5.action) {
          case "start":
          case "update":
            this.stagedVertex = t5.mapEnd, "polygon" !== this.geometryType && "polyline" !== this.geometryType || this.commitStagedVertex();
            break;
          case "end":
            this.complete();
        }
        return t5;
      });
    });
  }
  _createManipulatorDragPipelineHybrid(t3) {
    return p2(t3, (t4, e11) => {
      this.isCompleted || e11.next(this._screenToMapDragEventStep()).next((t5) => ("start" === t5.action && (t(this.stagedVertex) && (this.stagedVertex = t5.mapStart), this.commitStagedVertex()), t5)).next((t5) => {
        switch (t5.action) {
          case "start":
          case "update":
            this.stagedVertex = t5.mapEnd, "polygon" !== this.geometryType && "polyline" !== this.geometryType || this.commitStagedVertex();
            break;
          case "end":
            "segment" !== this.geometryType && "point" !== this.geometryType || this.complete();
        }
        return t5;
      });
    });
  }
  _getDrawSurface() {
    if (t(this.elevationDrawSurface))
      return this.drawSurface;
    if (!this.coordinateHelper.hasZ)
      return this.elevationDrawSurface.defaultZ = null, this.elevationDrawSurface;
    let t3 = this.defaultZ, e11 = false;
    r(this.elevationInfo) && "absolute-height" === this.elevationInfo.mode && (e11 = true), r(this.snapToSceneEnabled) && (e11 = this.snapToSceneEnabled), r(this.elevationInfo) && "on-the-ground" === this.elevationInfo.mode && (e11 = false);
    const i4 = this._activeComponent.vertices.length;
    return ("segment" === this.geometryType || "polygon" === this.geometryType) && i4 > 0 && (t3 = this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos), e11 = false), e11 ? this.drawSurface : (this.elevationDrawSurface.defaultZ = t3, this.elevationDrawSurface);
  }
  _mapToScreen(t3) {
    return this._getDrawSurface().mapToScreen(t3);
  }
  _onHold(t3) {
    this._snappingOperation.abort(), "click" === this.drawingMode && "touch" === t3.pointerType && this._snappingEnabled && (this.stagedVertex = t3.mapPoint), t3.stopPropagation();
  }
  _onImmediateClick(t3) {
    if ("mouse" === t3.pointerType && 2 === t3.button || this._manipulator.dragging)
      return;
    const e11 = this._activeComponent, i4 = this._closeOnClickVertexIndex(t3.screenPoint);
    if (r(i4))
      return t3.stopPropagation(), void this.complete();
    const o5 = this._screenToMap(t3.screenPoint);
    if (r(o5))
      switch (this.drawingMode) {
        case "freehand":
          "point" === this.geometryType && (r(this.stagedVertex) ? this.commitStagedVertex() : this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(o5)), this.complete());
          break;
        case "click":
        case "hybrid":
          this._snappingOperation.abort(), r(this.stagedVertex) ? this.commitStagedVertex() : this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(o5)), ("point" === this.geometryType || "segment" === this.geometryType && 2 === e11.vertices.length || "segment" === this.geometryType && "hybrid" === this.drawingMode && 1 === e11.vertices.length) && this.complete();
      }
    t3.stopPropagation();
  }
  _onImmediateDoubleClick(t3) {
    this._manipulator.dragging || "point" === this.geometryType || (this.complete(), t3.stopPropagation());
  }
  _onPointerMove(t3) {
    const e11 = c2(t3.x, t3.y);
    if (this._manipulator.dragging || this._pointerDownStates.has(t3.pointerId) || this._manipulator.grabbing || !this._manipulator.interactive)
      return void this._snappingOperation.abort();
    t3.stopPropagation();
    const i4 = this._closeOnClickVertexIndex(e11);
    if (r(i4))
      return this._closeOnVertex(i4), void this._snappingOperation.abort();
    const o5 = this._screenToMap(e11);
    if (this._manipulator.cursor = r(o5) ? "crosshair" : null, t(o5))
      return void this._snappingOperation.abort();
    if (t(this.snappingManager))
      return this.stagedVertex = o5, void this._snappingOperation.abort();
    const s2 = this.snappingManager, a13 = new e6({ editGeometryOperations: this._editGeometryOperations, elevationInfo: this.elevationInfo, pointer: t3.pointerType, visualizer: this.snappingVisualizer });
    this.updatingHandles.addPromise(j(this._snappingOperation.snap(o5, s2, a13)));
  }
  _closeOnVertex(t3) {
    this.stagedVertex = null;
    const e11 = { componentIndex: 0, vertexIndex: t3, coordinates: this.coordinateHelper.vectorToArray(this._activeComponent.vertices[t3].pos) };
    this.emit("cursor-update", { updated: null, vertices: [e11], operation: "apply", type: "vertex-update" });
  }
  _screenToMap(t3) {
    return this._getDrawSurface().screenToMap(t3);
  }
  _screenToMapDragEventStep() {
    let t3 = null;
    return (e11) => {
      if ("start" === e11.action && (t3 = this._screenToMap(e11.screenStart)), t(t3))
        return null;
      const i4 = this._screenToMap(e11.screenEnd);
      return r(i4) ? { ...e11, mapStart: t3, mapEnd: i4 } : null;
    };
  }
  _vertexWithinPointerDistance(t3, e11) {
    const i4 = 25, o5 = this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(t3));
    return !!r(o5) && R2(o5, e11, i4);
  }
  _calculateVertexTooltipElevation(t3) {
    const { tooltipOptions: e11, view: i4 } = this;
    if (t(t3) || "2d" === i4.type)
      return this._defaultElevation;
    const o5 = this.elevationInfo, r9 = e11.elevation.mode, { spatialReference: s2 } = t3, a13 = W(s2), p17 = f2(i4, t3, o5, { mode: r9, offset: 0 });
    return o3(p17 * a13, "meters");
  }
  _getTooltipInfo() {
    const { tooltipOptions: t3, stagedOrLastVertex: e11 } = this;
    if (t(e11))
      return null;
    this._tooltipContext.calculateElevation = (t4) => this._calculateVertexTooltipElevation(t4);
    const i4 = this._elevationTooltipDetail(e11);
    switch (this.geometryType) {
      case "point":
        return new p16({ tooltipOptions: t3, elevation: i4 });
      case "polyline":
        return this._tooltipContext.calculateTotalLength = a12(this._editGeometryOperations.data.geometry, this.isDraped ? "on-the-ground" : "absolute-height"), new i2({ tooltipOptions: t3, elevation: i4, totalLength: this._totalLengthTooltipDetail(e11) });
      case "polygon":
        return this._tooltipContext.calculateArea = m8(this._editGeometryOperations.data.geometry, this.isDraped), new s({ tooltipOptions: t3, elevation: i4, area: this._areaTooltipDetail(e11) });
      default:
        return null;
    }
  }
  _elevationTooltipDetail(t3) {
    return { mode: this.elevationInfo.mode, ...e2(this._tooltipContext.calculateElevation)(t3) };
  }
  _totalLengthTooltipDetail(t3) {
    return { ...c(e2(this._tooltipContext.calculateTotalLength)(t3), o3(0, "meters")) };
  }
  _areaTooltipDetail(t3) {
    return { ...c(e2(this._tooltipContext.calculateArea)(t3), a(0, "square-meters")) };
  }
  _updateTooltipInfo() {
    const t3 = this._tooltip;
    if (t(t3))
      return;
    const { stagedOrLastVertex: e11 } = this, i4 = this._elevationTooltipDetail(e11);
    switch (this.geometryType) {
      case "point":
        t3.info.elevation = i4;
        break;
      case "polyline": {
        const o5 = t3.info;
        o5.elevation = i4, o5.totalLength = this._totalLengthTooltipDetail(e11);
        break;
      }
      case "polygon": {
        const o5 = t3.info;
        o5.elevation = i4, o5.area = this._areaTooltipDetail(e11);
        break;
      }
    }
  }
  get test() {
    return { tooltip: this._tooltip };
  }
};
function R2(t3, e11, i4) {
  const o5 = t3.x - e11.x, n8 = t3.y - e11.y;
  return o5 * o5 + n8 * n8 <= i4;
}
e([d()], F2.prototype, "_defaultElevation", null), e([d()], F2.prototype, "defaultZ", void 0), e([d()], F2.prototype, "isDraped", void 0), e([d({ value: e8 })], F2.prototype, "drawingMode", null), e([d({ constructOnly: true })], F2.prototype, "elevationDrawSurface", void 0), e([d({ constructOnly: true })], F2.prototype, "elevationInfo", void 0), e([d({ constructOnly: true, type: c4 })], F2.prototype, "labelOptions", void 0), e([d({ constructOnly: true, type: r5 })], F2.prototype, "tooltipOptions", void 0), e([d({ constructOnly: true })], F2.prototype, "geometryType", void 0), e([d({ constructOnly: true })], F2.prototype, "hasM", void 0), e([d({ constructOnly: true })], F2.prototype, "hasZ", void 0), e([d({ constructOnly: true })], F2.prototype, "manipulators", void 0), e([d({ constructOnly: true })], F2.prototype, "drawSurface", void 0), e([d({ constructOnly: true })], F2.prototype, "segmentLabels", void 0), e([d({ constructOnly: true })], F2.prototype, "snappingManager", void 0), e([d({ constructOnly: true })], F2.prototype, "snappingVisualizer", void 0), e([d()], F2.prototype, "snapToSceneEnabled", void 0), e([d()], F2.prototype, "_snappingOperation", void 0), e([d()], F2.prototype, "stagedVertex", null), e([d()], F2.prototype, "updating", null), e([d({ constructOnly: true })], F2.prototype, "view", void 0), F2 = e([n("esri.views.draw.DrawOperation")], F2);

// node_modules/@arcgis/core/views/draw/drawSurfaces.js
var r8 = class {
  constructor(e11, t3, i4, s2 = null) {
    this.elevationInfo = e11, this.defaultZ = t3, this.view = i4, this.excludeGraphics = s2;
  }
  screenToMap(i4) {
    if (r(this.defaultZ))
      return this.view.sceneIntersectionHelper.intersectElevationFromScreen(i(i4.x, i4.y), this.elevationInfo, this.defaultZ, this.excludeGraphics);
    const s2 = this.view.sceneIntersectionHelper.intersectElevationFromScreen(i(i4.x, i4.y), this.elevationInfo, 0, this.excludeGraphics);
    return r(s2) && (s2.z = void 0), s2;
  }
  mapToScreen(e11) {
    const t3 = v(e11.x, e11.y, f2(this.view, e11, this.elevationInfo), e11.spatialReference);
    return this.view.toScreen(t3);
  }
};
var n7 = class {
  constructor(e11, t3, i4 = []) {
    this.view = e11, this.elevationInfo = t3, this.exclude = i4;
  }
  screenToMap(t3) {
    const i4 = this.view.toMap(t3, { exclude: this.exclude });
    return r(i4) && (i4.z = c3(i4, this.view, this.elevationInfo)), i4;
  }
  mapToScreen(t3) {
    let o5 = t3;
    return r(this.elevationInfo) && (o5 = v(t3.x, t3.y, f2(this.view, t3, this.elevationInfo), t3.spatialReference)), this.view.toScreen(o5);
  }
};
var c16 = class {
  constructor(e11) {
    this.view = e11, this.screenToMap = (t3) => e11.toMap(t3), this.mapToScreen = (t3) => e11.toScreen(t3);
  }
};

// node_modules/@arcgis/core/views/draw/support/surfaceCoordinateSystems.js
function g6(r9, e11, s2 = null) {
  return r(s2) ? [r9, e11, s2] : [r9, e11];
}
function R3(r9, e11, s2 = null) {
  return r(s2) ? { x: r9, y: e11, z: s2 } : { x: r9, y: e11 };
}
var W2 = class {
  constructor(t3) {
    this.spatialReference = t3;
  }
  mapToLocalMultiple(t3) {
    return g(t3.map((t4) => this.mapToLocal(t4)));
  }
  get doUnnormalization() {
    return false;
  }
};
var v2 = class extends W2 {
  constructor(t3, r9, o5 = null) {
    super(r9), this.defaultZ = o5, this.transform = e7(), this.transformInv = e7(), this.transform = r6(t3), r4(this.transformInv, this.transform);
  }
  makeMapPoint(t3, r9) {
    return g6(t3, r9, this.defaultZ);
  }
  mapToLocal(t3) {
    return R3(this.transform[0] * t3[0] + this.transform[2] * t3[1] + this.transform[4], this.transform[1] * t3[0] + this.transform[3] * t3[1] + this.transform[5]);
  }
  localToMap(t3) {
    return g6(this.transformInv[0] * t3.x + this.transformInv[2] * t3.y + this.transformInv[4], this.transformInv[1] * t3.x + this.transformInv[3] * t3.y + this.transformInv[5], this.defaultZ);
  }
};
var F3 = class extends W2 {
  constructor(t3, r9) {
    super(t3.spatialReference), this.view = t3, this.defaultZ = null, this.pWS = n2(), this.tangentFrameUpWS = n2(), this.tangentFrameRightWS = n2(), this.tangentFrameForwardWS = n2(), this.localFrameRightWS = n2(), this.localFrameUpWS = n2(), this.worldToLocalTransform = e5(), this.localToWorldTransform = e5(), this.scale = 1, this.scale = t3.resolution, this.referenceMapPoint = r9, this.defaultZ = r9.hasZ ? r9.z : null;
    const e11 = t3.state.camera.viewRight;
    this.view.renderCoordsHelper.toRenderCoords(this.referenceMapPoint, this.pWS), this.view.renderCoordsHelper.worldBasisAtPosition(this.pWS, n5.X, this.tangentFrameRightWS), this.view.renderCoordsHelper.worldBasisAtPosition(this.pWS, n5.Y, this.tangentFrameUpWS), this.view.renderCoordsHelper.worldBasisAtPosition(this.pWS, n5.Z, this.tangentFrameForwardWS);
    const s2 = n2();
    q(s2, this.tangentFrameForwardWS, P(e11, this.tangentFrameForwardWS)), e3(this.localFrameRightWS, e11, s2), z2(this.localFrameRightWS, this.localFrameRightWS), _(this.localFrameUpWS, this.tangentFrameForwardWS, this.localFrameRightWS), Q(this.worldToLocalTransform, this.localFrameRightWS, this.tangentFrameRightWS), O2(this.localToWorldTransform, this.worldToLocalTransform);
  }
  get doUnnormalization() {
    return "global" === this.view.viewingMode;
  }
  makeMapPoint(t3, r9) {
    return g6(t3, r9, this.defaultZ);
  }
  mapToLocal(r9) {
    const e11 = n2();
    this.view.renderCoordsHelper.toRenderCoords(new j2({ x: r9[0], y: r9[1], spatialReference: this.spatialReference }), e11), S(e11, e11, this.worldToLocalTransform);
    const s2 = this.view.renderCoordsHelper.fromRenderCoords(e11, this.view.spatialReference);
    return r(s2) ? R3(s2.x / this.scale, s2.y / this.scale) : null;
  }
  localToMap(r9) {
    const e11 = n2();
    this.view.renderCoordsHelper.toRenderCoords(new j2({ x: r9.x * this.scale, y: r9.y * this.scale, spatialReference: this.spatialReference }), e11), S(e11, e11, this.localToWorldTransform);
    const s2 = this.view.renderCoordsHelper.fromRenderCoords(e11, this.view.spatialReference);
    return r(s2) ? g6(s2.x, s2.y, this.defaultZ) : null;
  }
};
function S4(t3, r9) {
  if ("2d" === t3.type)
    return new v2(t3.state.transform, t3.spatialReference, r9.length > 2 ? r9[2] : null);
  if ("3d" === t3.type) {
    const e11 = r9.length > 2 ? new j2({ x: r9[0], y: r9[1], z: r9[2], spatialReference: t3.spatialReference }) : new j2({ x: r9[0], y: r9[1], spatialReference: t3.spatialReference });
    return new F3(t3, e11);
  }
  return null;
}

export {
  c5 as c,
  e8 as e,
  e10 as e2,
  m3 as m,
  m7 as m2,
  l4 as l,
  m5 as m3,
  a10 as a,
  d6 as d,
  l5 as l2,
  F2 as F,
  r8 as r,
  n7 as n,
  c16 as c2,
  R3 as R,
  S4 as S
};
//# sourceMappingURL=chunk-IEHZGLM3.js.map
