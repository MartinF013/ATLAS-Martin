import {
  e
} from "./chunk-AALA53RH.js";
import {
  c
} from "./chunk-DMGVDNFD.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  n
} from "./chunk-U7B2WKBH.js";
import {
  r
} from "./chunk-ZOKX6UGH.js";

// node_modules/@arcgis/core/chunks/HighlightApply.glsl.js
var a = 8.6;
var s = 0.4;
function u() {
  const o = new i(), { vertex: u2, fragment: c3 } = o, f = u2.code, g = c3.code;
  return o.attributes.add(O.POSITION, "vec2"), o.varyings.add("uv", "vec2"), o.attributes.add(O.UV0, "vec2"), u2.uniforms.add(new c("coverageTex", (e2) => e2.coverageTexture)), f.add(n2`void main() {
vec4 cov = texture2D(coverageTex, uv0);
if (cov.r == 0.0) {
gl_Position = vec4(0.0);
return;
}
gl_Position = vec4(position, 0.0, 1.0);
uv = position.xy * 0.5 + vec2(0.5);
}`), c3.uniforms.add(new c("tex", (e2) => e2.blurColorTexture)), c3.uniforms.add(new c("origin", (e2) => e2.highlightColorTexture)), c3.uniforms.add(new e("uColor", (e2) => e2.color)), c3.uniforms.add(new e("haloColor", (e2) => e2.haloColor)), c3.uniforms.add(new e("opacities", (o2) => r(d, o2.haloOpacity, o2.haloOpacityOccluded, o2.fillOpacity, o2.fillOpacityOccluded))), c3.constants.add("outlineSize", "float", a), c3.constants.add("blurSize", "float", s), g.add(n2`void main() {
vec4 blurredHighlightValue = texture2D(tex, uv);
float highlightIntensity = blurredHighlightValue.a;
if (highlightIntensity == 0.0) {
discard;
}
vec4 origin_color = texture2D(origin, uv);
float outlineIntensity;
float fillIntensity;
if (blurredHighlightValue.g > blurredHighlightValue.b) {
outlineIntensity = haloColor.w * opacities[1];
fillIntensity = uColor.w * opacities[3];
}
else {
outlineIntensity = haloColor.w * opacities[0];
fillIntensity = uColor.w * opacities[2];
}
float inner = 1.0 - outlineSize / 9.0;
float outer = 1.0 - (outlineSize + blurSize) / 9.0;
float outlineFactor = smoothstep(outer, inner, highlightIntensity);
float fillFactor = any(notEqual(origin_color, vec4(0.0, 0.0, 0.0, 0.0))) ? 1.0 : 0.0;
float intensity = outlineIntensity * outlineFactor * (1.0 - fillFactor) + fillIntensity * fillFactor;
gl_FragColor = vec4(mix(haloColor.rgb, uColor.rgb, fillFactor), intensity);
}`), o;
}
var d = n();
var c2 = Object.freeze(Object.defineProperty({ __proto__: null, build: u }, Symbol.toStringTag, { value: "Module" }));

export {
  u,
  c2 as c
};
//# sourceMappingURL=chunk-2KOBJHQT.js.map
