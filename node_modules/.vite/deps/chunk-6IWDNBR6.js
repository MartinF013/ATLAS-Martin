import {
  u
} from "./chunk-GR7E5OAR.js";
import {
  n as n2
} from "./chunk-GKYJJGE3.js";
import {
  o as o2
} from "./chunk-KSOWE6GO.js";
import {
  e as e3,
  t
} from "./chunk-SV4VP57N.js";
import {
  e as e2
} from "./chunk-AALA53RH.js";
import {
  a as a2
} from "./chunk-BOVIIQLB.js";
import {
  c
} from "./chunk-DMGVDNFD.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  a
} from "./chunk-OYAHQ564.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  e
} from "./chunk-IVBXK6OP.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ShadowCastVisualizeTechniqueConfiguration.js
var t2;
!function(o3) {
  o3[o3.Gradient = 0] = "Gradient", o3[o3.Threshold = 1] = "Threshold", o3[o3.COUNT = 2] = "COUNT";
}(t2 || (t2 = {}));
var r = class extends t {
  constructor() {
    super(...arguments), this.visualization = t2.Gradient, this.bandsEnabled = false;
  }
};
e([e3({ count: t2.COUNT })], r.prototype, "visualization", void 0), e([e3()], r.prototype, "bandsEnabled", void 0);

// node_modules/@arcgis/core/chunks/ShadowCastVisualize.glsl.js
function m(m2) {
  const g2 = new i(), u2 = g2.fragment;
  u2.include(a), u2.include(a2), g2.include(n2), g2.include(o2);
  const { visualization: p, bandsEnabled: w } = m2;
  u2.constants.add("inverseSampleValue", "float", u), u2.uniforms.add([new c("shadowCastMap", (e4) => e4.shadowCastMap), new o("sampleScale", (e4) => e4.sampleScale), new o("opacityFromElevation", (e4) => e4.opacityFromElevation), new e2("uColor", (e4) => e4.color)]);
  const h = p === t2.Gradient, f = p === t2.Threshold;
  return h && w ? u2.uniforms.add(new o("bandSize", (e4) => e4.bandSize)) : f && u2.uniforms.add(new o("threshold", (e4) => e4.threshold)), u2.code.add(n`
      void main(void) {
        vec4 record = texture2D(shadowCastMap, uv);
        float pixelSamples = record.r * inverseSampleValue;
        if (pixelSamples < 1.0) {
          discard;
        }

        float strength = pixelSamples * sampleScale;

        ${f ? n`
            if (strength <= threshold) {
              discard;
            }` : ""}

        ${h && w ? n`strength = ceil(strength / bandSize) * bandSize;` : ""}

        gl_FragColor = vec4(uColor.xyz, uColor.a * opacityFromElevation ${h ? n`* strength` : ""});
      }
    `), g2;
}
var g = Object.freeze(Object.defineProperty({ __proto__: null, build: m }, Symbol.toStringTag, { value: "Module" }));

export {
  t2 as t,
  r,
  m,
  g
};
//# sourceMappingURL=chunk-6IWDNBR6.js.map
