import {
  r as r2
} from "./chunk-4GGQTXXY.js";
import {
  u
} from "./chunk-EYJ2F5XB.js";
import {
  c as c2,
  f
} from "./chunk-Y55TYMBP.js";
import {
  u as u2
} from "./chunk-MDCKEJ7B.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  l
} from "./chunk-53KI6WDE.js";
import {
  e as e2,
  o
} from "./chunk-YFBAFAZ2.js";
import {
  n
} from "./chunk-U7B2WKBH.js";
import {
  n as n2
} from "./chunk-ASC3X65B.js";
import {
  L
} from "./chunk-PKZEO23A.js";
import {
  e3 as e
} from "./chunk-2QOWZFCU.js";
import {
  c,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/InstanceParameters.js
var s = class {
  constructor() {
    this.visible = true;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderGeometry.js
var T = class {
  constructor(r3, i, a = {}) {
    this.data = r3, this.material = i, this.boundingSphere = n(), this.instanceParameters = new s(), this._transformation = e2(), this._shaderTransformationDirty = true, this.layerUid = c(a.layerUid, null), this.graphicUid = c(a.graphicUid, null), this.id = a.id ? a.id : e(), this.boundingInfo = c(a.boundingInfo, null), this.calculateShaderTransformation = c(a.calculateShaderTransformation, null), this.castShadow = !!a.castShadow && a.castShadow;
  }
  get transformation() {
    return this._transformation;
  }
  updateTransformation(t2) {
    t2(this._transformation), this._shaderTransformationDirty = true, this.computeBoundingSphere(this._transformation, this.boundingSphere);
  }
  shaderTransformationChanged() {
    this._shaderTransformationDirty = true;
  }
  computeBoundingSphere(t2, i, s2 = l(t2)) {
    t(this.boundingInfo) || (L(i, this.boundingInfo.getCenter(), t2), i[3] = this.boundingInfo.getBSRadius() * s2);
  }
  get hasShaderTransformation() {
    return r(this.calculateShaderTransformation);
  }
  get primitiveType() {
    return this.data.primitiveType;
  }
  getShaderTransformation() {
    return t(this.calculateShaderTransformation) ? c(this.transformation, o) : (this._shaderTransformationDirty && (this._shaderTransformation || (this._shaderTransformation = e2()), n2(this._shaderTransformation, this.calculateShaderTransformation(c(this.transformation, o))), this._shaderTransformationDirty = false), this._shaderTransformation);
  }
  computeAttachmentOrigin(t2) {
    if (this.material.computeAttachmentOrigin)
      return !!this.material.computeAttachmentOrigin(this, t2) && (r(this._transformation) && L(t2, t2, this._transformation), true);
    const r3 = this.indices.get(O.POSITION), s2 = this.vertexAttributes.get(O.POSITION);
    return !!u(s2, r3, t2) && (r(this._transformation) && L(t2, t2, this._transformation), true);
  }
  get indices() {
    return this.data.indices;
  }
  get vertexAttributes() {
    return this.data.vertexAttributes;
  }
  addHighlight() {
    const t2 = new r2(u2.Highlight), r3 = this.instanceParameters;
    return r3.highlights = c2(r3.highlights, t2), t2;
  }
  removeHighlight(t2) {
    const r3 = this.instanceParameters;
    r3.highlights = f(r3.highlights, t2);
  }
};

export {
  T
};
//# sourceMappingURL=chunk-MHEQOIKQ.js.map
