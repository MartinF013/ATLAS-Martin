import {
  B
} from "./chunk-SO2UREOW.js";
import "./chunk-43ZVVGJH.js";
import "./chunk-7S6G3GM7.js";
import "./chunk-WKUIJCRG.js";
import {
  e as e2
} from "./chunk-XQ337NY7.js";
import "./chunk-UMSO3HI4.js";
import "./chunk-VKEKAYXP.js";
import "./chunk-6UGZAJSY.js";
import "./chunk-WL7KJZAL.js";
import "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-Z34NAJDO.js";
import "./chunk-HHJIVHSH.js";
import "./chunk-BYHUWBKS.js";
import "./chunk-IEPHENP2.js";
import "./chunk-436X6OVY.js";
import "./chunk-RB2H3SKO.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-FMIFCFD7.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import "./chunk-6FQZDXGD.js";
import "./chunk-SF7Z6XNR.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-QJN4GT4E.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-TCBD6DES.js";
import "./chunk-G2GJVIQC.js";
import "./chunk-RVR2DEVB.js";
import "./chunk-ZEIWFXXO.js";
import "./chunk-YXFNNKMT.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-S5PZEGLP.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-6EODZIDR.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-PQO66WZ2.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  x
} from "./chunk-4XBERLPX.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-TBT57L4K.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-I4USSDLI.js";
import "./chunk-B42HXLDM.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
function l2(e3, t2) {
  if (t(e3) && t(t2))
    return null;
  const i = {};
  return r(t2) && (i.geometry = t2.toJSON()), r(e3) && (i.where = e3), i;
}
var d2 = class extends B {
  constructor() {
    super(...arguments), this._enabledDataReceived = false, this.errorString = null, this.connectionStatus = "disconnected";
  }
  initialize() {
    this.handles.add([l(() => {
      var _a;
      return (_a = this.layer) == null ? void 0 : _a.purgeOptions;
    }, () => this._update()), l(() => this.suspended, (e3) => {
      e3 ? this._proxy.pauseStream() : this._proxy.resumeStream();
    })]);
  }
  get connectionError() {
    if (this.errorString)
      return new s("stream-controller", this.errorString);
  }
  on(e3, t2) {
    "data-received" === e3 && (this._enabledDataReceived = true, this._proxy.enableEvent("data-received", true));
    const r2 = super.on(e3, t2), s2 = this;
    return { remove() {
      r2.remove(), "data-received" === e3 && (s2._proxy.closed || s2.hasEventListener("data-received") || s2._proxy.enableEvent("data-received", false));
    } };
  }
  queryLatestObservations(e3, r2) {
    if (!(this.layer.timeInfo.endField || this.layer.timeInfo.startField))
      throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    return this._proxy.queryLatestObservations(this._cleanUpQuery(e3), r2).then((e4) => {
      const t2 = x.fromJSON(e4);
      return t2.features.forEach((e5) => {
        e5.layer = this.layer, e5.sourceLayer = this.layer;
      }), t2;
    });
  }
  detach() {
    super.detach(), this.connectionStatus = "disconnected";
  }
  _createClientOptions() {
    return { ...super._createClientOptions(), setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
  _createTileRendererHash(e3) {
    const t2 = `${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(l2(this.layer.definitionExpression, this.layer.geometryDefinition))})`;
    return super._createTileRendererHash(e3) + t2;
  }
  async _createServiceOptions() {
    const e3 = this.layer, { objectIdField: t2 } = e3, r2 = e3.fields.map((e4) => e4.toJSON()), s2 = e2(e3.geometryType), i = e3.timeInfo && e3.timeInfo.toJSON() || null, o = e3.spatialReference ? e3.spatialReference.toJSON() : null;
    return { type: "stream", fields: r2, geometryType: s2, objectIdField: t2, timeInfo: i, source: this.layer.parsedUrl, serviceFilter: l2(this.layer.definitionExpression, this.layer.geometryDefinition), purgeOptions: this.layer.purgeOptions.toJSON(), enableDataReceived: this._enabledDataReceived, spatialReference: o, maxReconnectionAttempts: this.layer.maxReconnectionAttempts, maxReconnectionInterval: this.layer.maxReconnectionInterval, updateInterval: this.layer.updateInterval, customParameters: e3.customParameters };
  }
};
e([d()], d2.prototype, "errorString", void 0), e([d({ readOnly: true })], d2.prototype, "connectionError", null), e([d()], d2.prototype, "connectionStatus", void 0), d2 = e([n("esri.views.2d.layers.StreamLayerView2D")], d2);
var u = d2;
export {
  u as default
};
//# sourceMappingURL=StreamLayerView2D-4G4MFQKR.js.map
