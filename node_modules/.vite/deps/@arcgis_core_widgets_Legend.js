import {
  o as o3
} from "./chunk-DJFBTMGM.js";
import {
  h as h2
} from "./chunk-OA3NMCNZ.js";
import {
  T as T2
} from "./chunk-RPF2BJ2H.js";
import {
  c as c2
} from "./chunk-GTBTSR4X.js";
import "./chunk-QJN4GT4E.js";
import "./chunk-DWV3HMZB.js";
import "./chunk-S5PZEGLP.js";
import {
  S as S2,
  a as a3,
  b as b2,
  e as e5,
  g,
  i as i4,
  i2 as i5,
  i3 as i6,
  l as l5,
  m as m3,
  n as n4,
  o as o2,
  r as r4,
  r2 as r5,
  s as s6,
  u as u3,
  u2 as u4,
  u3 as u5
} from "./chunk-CXIMLSDF.js";
import {
  $,
  A,
  D,
  E as E2,
  M,
  T,
  V,
  l as l6,
  v
} from "./chunk-ZDSMRGKC.js";
import {
  t as t3
} from "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import {
  b,
  d as d2,
  j as j4,
  q,
  w2 as w
} from "./chunk-RRFFPL7N.js";
import {
  p as p2
} from "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import {
  l as l4,
  n as n3
} from "./chunk-XZTXACPW.js";
import {
  r as r3
} from "./chunk-74GUBHRJ.js";
import {
  t
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2 as e3
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import {
  f as f2,
  i,
  p
} from "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import {
  s as s5
} from "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-X57S4DWT.js";
import "./chunk-ODX6X222.js";
import {
  t as t2
} from "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import {
  i as i3
} from "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  a,
  f,
  h,
  j as j2,
  l as l3
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import {
  a as a2,
  j as j3
} from "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import {
  c2 as c,
  y as y2
} from "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import {
  S,
  m as m2
} from "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import {
  K
} from "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import {
  e as e4,
  u as u2
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import {
  m
} from "./chunk-OOZMA7DN.js";
import {
  s as s4
} from "./chunk-Y7FSCP47.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import {
  i as i2
} from "./chunk-GVELBHGI.js";
import {
  Bt
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import {
  l as l2
} from "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import {
  s as s3
} from "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  r2,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  E,
  x
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s as s2
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  e as e2,
  l,
  r
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/Legend/support/clusterUtils.js
var l7 = (e6, l10) => {
  const a6 = e6.featuresTilingScheme.getClosestInfoForScale(e6.scale).level;
  return (l10 == null ? void 0 : l10.levels) ? l10.levels[a6] : null;
};
function a4(a6, i9) {
  if (!a6 || !("visualVariables" in a6) || !a6.visualVariables)
    return null;
  const s10 = a6.visualVariables.find((e6) => "size" === e6.type), n8 = l7(i9, s10);
  return n8 ? new j3({ field: s10.field, minSize: n8[2].size, minDataValue: n8[2].value, maxSize: n8[3].size, maxDataValue: n8[3].value }) : null;
}

// node_modules/@arcgis/core/widgets/Legend/support/relationshipRampUtils.js
var s7 = { HH: 315, HL: 45, LL: 135, LH: 225 };
var l8 = { 2: [["HL", "HH"], ["LL", "LH"]], 3: [["HL", "HM", "HH"], ["ML", "MM", "MH"], ["LL", "LM", "LH"]], 4: [["HL", "HM1", "HM2", "HH"], ["M2L", "M2M1", "M2M2", "M2H"], ["M1L", "M1M1", "M1M2", "M1H"], ["LL", "LM1", "LM2", "LH"]] };
function n5(t6) {
  if (!t6)
    return;
  const { type: s10 } = t6;
  if (s10.includes("3d"))
    return T2(t6.symbolLayers.getItemAt(0));
  if ("simple-line" === s10) {
    const o5 = j4(t6);
    return o5 && o5.color;
  }
  if ("simple-marker" === t6.type && ("x" === t6.style || "cross" === t6.style)) {
    const o5 = j4(t6);
    return o5 && o5.color;
  }
  return b(t6);
}
function H(t6, e6) {
  const o5 = e6.HH.label, r8 = e6.LL.label, s10 = e6.HL.label, l10 = e6.LH.label;
  switch (t6) {
    case "HH":
    default:
      return { top: o5, bottom: r8, left: s10, right: l10 };
    case "HL":
      return { top: s10, bottom: l10, left: r8, right: o5 };
    case "LL":
      return { top: r8, bottom: o5, left: l10, right: s10 };
    case "LH":
      return { top: l10, bottom: s10, left: o5, right: r8 };
  }
}
function i7(t6) {
  const { focus: e6, infos: o5, numClasses: r8 } = t6, s10 = l8[r8], L6 = {};
  o5.forEach((t7) => {
    L6[t7.value] = { label: t7.label, fill: n5(t7.symbol) };
  });
  const i9 = [];
  for (let l10 = 0; l10 < r8; l10++) {
    const t7 = [];
    for (let e7 = 0; e7 < r8; e7++) {
      const o6 = L6[s10[l10][e7]];
      t7.push(o6.fill);
    }
    i9.push(t7);
  }
  return { type: "relationship-ramp", numClasses: r8, focus: e6, colors: i9, labels: H(e6, L6), rotation: u6(e6) };
}
function u6(t6) {
  let e6 = s7[t6];
  return t6 && null == e6 && (e6 = s7.HH), e6 || 0;
}

// node_modules/@arcgis/core/widgets/Legend/support/sizeRampUtils.js
var p3 = 30;
var y3 = 12;
var b3 = [255, 255, 255];
var h3 = [200, 200, 200];
var d3 = [128, 128, 128];
var w2 = 20;
var g2 = 5;
function S3(e6) {
  return "esri.symbols.SimpleMarkerSymbol" === e6.declaredClass;
}
function v2(e6) {
  return "esri.symbols.PictureMarkerSymbol" === e6.declaredClass;
}
function z(e6) {
  return "esri.symbols.SimpleLineSymbol" === e6.declaredClass;
}
function j5(e6) {
  return "esri.symbols.TextSymbol" === e6.declaredClass;
}
function V2(e6, l10) {
  const t6 = e6.length - 1;
  return e6.map((e7, o5) => o2(e7, o5, t6, l10));
}
async function k(e6, l10, o5, s10, n8, a6) {
  const u11 = l10.legendOptions, c6 = u11 && u11.customValues, m7 = await U2(e6, o5), f6 = !!m7, p7 = !!c6, y6 = null != l10.minSize && null != l10.maxSize, b6 = l10.stops && l10.stops.length > 1, h7 = !!l10.target;
  if (!f6 || !p7 && !(y6 || b6 && !h7))
    return;
  const d5 = d2(m7);
  let w4 = null, g4 = null, S4 = null;
  g4 = d5 && !b6 ? u3([l10.minDataValue, l10.maxDataValue]) : c6 || await D2(l10, m7, s10, n8);
  const v5 = e6 == null ? void 0 : e6.authoringInfo, z3 = "univariate-color-size" === (v5 == null ? void 0 : v5.type), j7 = z3 && "above-and-below" === (v5 == null ? void 0 : v5.univariateTheme);
  if (!g4 && b6 && (g4 = l10.stops.map((e7) => e7.value), w4 = l10.stops.some((e7) => !!e7.label), "flow" === e6.type && (g4 = u3(g4)), w4 && (S4 = l10.stops.map((e7) => e7.label))), d5 && (g4 == null ? void 0 : g4.length) > 2 && !j7 && (g4 = [g4[0], g4[g4.length - 1]]), !g4)
    return null;
  z3 && 5 !== (g4 == null ? void 0 : g4.length) && (g4 = E3({ minSize: g4[0], maxSize: g4[g4.length - 1] }));
  const k3 = d5 ? x2(e6, g4) : null, C3 = w(m7), I4 = w4 ? null : V2(g4, a6);
  return (await Promise.all(g4.map(async (t6, o6) => {
    const i9 = d5 ? k3[o6] : await B(l10, m7, t6, s10, n8);
    return { value: t6, symbol: P(j7 && "class-breaks" === e6.type ? L(e6, o6) : m7, i9), label: w4 ? S4[o6] : I4[o6], size: i9, outlineSize: C3 };
  }))).reverse();
}
function x2(e6, l10) {
  const t6 = e6 == null ? void 0 : e6.authoringInfo, o5 = "univariate-color-size" === (t6 == null ? void 0 : t6.type);
  let s10 = [y3, p3];
  if (o5) {
    const e7 = l10[0], t7 = l10[l10.length - 1], o6 = y3, n8 = p3;
    s10 = l10.map((l11) => o6 + (l11 - e7) / (t7 - e7) * (n8 - o6));
  }
  return o5 && "below" === (t6 == null ? void 0 : t6.univariateTheme) && s10.reverse(), s10;
}
function L(e6, l10) {
  const t6 = e6.classBreakInfos, o5 = t6.length, s10 = o5 < 2 || !(l10 >= 2) ? t6[0].symbol.clone() : t6[o5 - 1].symbol.clone();
  return e6.visualVariables.some((e7) => "color" === e7.type) && (s10.type.includes("3d") ? I(s10) : M2(s10)), s10;
}
async function U2(e6, l10) {
  var _a;
  if ("flow" === e6.type)
    return u4(e6, l10);
  if ("pie-chart" === e6.type)
    return new y2({ color: null, outline: ((_a = e6.outline) == null ? void 0 : _a.width) ? e6.outline : new m2() });
  let t6 = null, o5 = null;
  if ("simple" === e6.type)
    t6 = e6.symbol;
  else if ("class-breaks" === e6.type) {
    const l11 = e6.classBreakInfos;
    t6 = l11 && l11[0] && l11[0].symbol, o5 = l11.length > 1;
  } else if ("unique-value" === e6.type) {
    const l11 = e6.uniqueValueInfos;
    t6 = l11 && l11[0] && l11[0].symbol, o5 = l11.length > 1;
  }
  return !t6 || C(t6) ? null : (t6 = t6.clone(), (l10 || o5) && (t6.type.includes("3d") ? I(t6) : M2(t6)), t6);
}
function C(e6) {
  if (e6) {
    if (c(e6)) {
      return !!e6.symbolLayers && e6.symbolLayers.some((e7) => e7 && "fill" === e7.type);
    }
    return e6.type.includes("fill");
  }
  return false;
}
function I(e6) {
  "line-3d" === e6.type ? e6.symbolLayers.forEach((e7) => {
    e7.material = { color: d3 };
  }) : e6.symbolLayers.forEach((e7) => {
    "icon" !== e7.type || e7.resource && e7.resource.href ? e7.material = { color: h3 } : (e7.material = { color: b3 }, e7.outline = { color: d3, size: 1.5 });
  });
}
function M2(l10) {
  var _a, _b;
  const t6 = r3();
  if ("cim" === l10.type)
    p2(l10, new l2(h3));
  else if (l10.type.includes("line"))
    l10.color = d3;
  else if (l10.color = t6 ? d3 : b3, "simple-marker" === l10.type)
    if (l10.outline) {
      const e6 = (_b = (_a = l10.outline) == null ? void 0 : _a.color) == null ? void 0 : _b.toHex();
      "#ffffff" === e6 && (l10.outline.color = d3);
    } else
      l10.outline = { color: d3, width: 1.5 };
}
async function D2(e6, l10, o5, s10) {
  const n8 = (await import("./visualVariableUtils-UDLADD73.js")).getSizeRangeAtScale(e6, o5, s10), i9 = n8 && E3(n8);
  if (!n8 && !i9)
    return;
  let r8 = i9.map((l11) => T3(l11, e6, n8));
  r8 = u3(r8);
  for (let t6 = 1; t6 < r8.length - 1; t6++) {
    const n9 = await q2(e6, l10, r8[t6], r8[t6 - 1], o5, s10);
    n9 && (r8[t6] = n9[0], i9[t6] = n9[1]);
  }
  return r8;
}
function E3(e6) {
  const l10 = e6.minSize, t6 = e6.maxSize, o5 = g2, s10 = (t6 - l10) / (o5 - 1), n8 = [];
  for (let i9 = 0; i9 < o5; i9++)
    n8.push(l10 + s10 * i9);
  return n8;
}
function T3(e6, l10, t6) {
  const o5 = t6.minSize, s10 = t6.maxSize, n8 = l10.minDataValue, i9 = l10.maxDataValue;
  let r8 = null;
  if (e6 <= o5)
    r8 = n8;
  else if (e6 >= s10)
    r8 = i9;
  else {
    r8 = (e6 - o5) / (s10 - o5) * (i9 - n8) + n8;
  }
  return r8;
}
async function q2(e6, l10, n8, i9, r8, a6) {
  const u11 = await B(e6, l10, n8, r8, a6), c6 = await B(e6, l10, i9, r8, a6), m7 = i4(n8), f6 = m7.fractional, p7 = w2;
  let y6 = m7.integer, b6 = null, h7 = null;
  n8 > 0 && n8 < 1 && (b6 = 10 ** f6, y6 = i4(n8 *= b6).integer);
  for (let o5 = y6 - 1; o5 >= 0; o5--) {
    const i10 = 10 ** o5;
    let m8 = Math.floor(n8 / i10) * i10, f7 = Math.ceil(n8 / i10) * i10;
    null != b6 && (m8 /= b6, f7 /= b6);
    let y7 = (m8 + f7) / 2;
    [, y7] = u3([m8, y7, f7], { indexes: [1] });
    const d5 = await B(e6, l10, m8, r8, a6), w4 = await B(e6, l10, f7, r8, a6), g4 = await B(e6, l10, y7, r8, a6), S4 = l5(u11, d5, c6, null), v5 = l5(u11, w4, c6, null), z3 = l5(u11, g4, c6, null);
    let j7 = S4.previous <= p7, V3 = v5.previous <= p7;
    if (j7 && V3 && (S4.previous <= v5.previous ? (j7 = true, V3 = false) : (V3 = true, j7 = false)), j7 ? h7 = [m8, d5] : V3 ? h7 = [f7, w4] : z3.previous <= p7 && (h7 = [y7, g4]), h7)
      break;
  }
  return h7;
}
async function B(e6, l10, t6, o5, s10) {
  const { getSize: n8 } = await import("./visualVariableUtils-UDLADD73.js");
  return n8(e6, t6, { scale: o5, view: s10, shape: "simple-marker" === l10.type ? l10.style : null });
}
function P(e6, t6) {
  const o5 = e6.clone();
  if (c(o5))
    d2(o5) || o5.symbolLayers.forEach((e7) => {
      "fill" !== e7.type && (e7.size = t6);
    });
  else if (S3(o5))
    o5.size = t6;
  else if (v2(o5)) {
    const e7 = o5.width, l10 = o5.height;
    o5.height = t6, o5.width = t6 * (e7 / l10);
  } else
    z(o5) ? o5.width = t6 : j5(o5) && o5.font && (o5.font.size = t6);
  return o5;
}

// node_modules/@arcgis/core/widgets/smartMapping/support/utils.js
function s8(t6) {
  const n8 = 2, i9 = Math.floor(Math.log10(Math.abs(t6))) + 1, e6 = i9 < 4 || i9 > 6 ? 4 : i9, r8 = 1e6, a6 = Math.abs(t6) >= r8 ? "compact" : "standard";
  return m(t6, { notation: a6, minimumSignificantDigits: n8, maximumSignificantDigits: e6 });
}

// node_modules/@arcgis/core/widgets/Legend/support/ActiveLayerInfo.js
var se = s2.getLogger("esri.widgets.Legend.support.ActiveLayerInfo");
var le = "https://utility.arcgis.com/sharing/tools/legend";
var re = "esri.layers.ImageryLayer";
var ie = "esri.layers.ImageryTileLayer";
var ne = "esri.layers.WCSLayer";
var ae = /^\s*(return\s+)?\$view\.scale\s*(;)?\s*$/i;
var oe = new s({ esriGeometryPoint: "point", esriGeometryMultipoint: "multipoint", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryMultiPatch: "multipatch" });
var ce = { u1: [0, 1], u2: [0, 3], u4: [0, 15], u8: [0, 255], s8: [-128, 127], u16: [0, 65535], s16: [-32768, 32767], u32: [0, 4294967295], s32: [-2147483648, 2147483647], f32: [-34e38, 34e38], f64: [-Number.MAX_VALUE, Number.MAX_VALUE] };
var ue = new y2({ size: 6, outline: { color: [128, 128, 128, 0.5], width: 0.5 } });
var de = new S({ style: "solid" });
function ye(e6) {
  return "flow" === e6.type;
}
function he(e6) {
  return "vector-field" === e6.type;
}
function me(e6) {
  return "raster-colormap" === e6.type;
}
function fe(e6) {
  return "raster-stretch" === e6.type;
}
function pe(e6) {
  return "raster-shaded-relief" === e6.type;
}
function ge(e6) {
  return "esri.renderers.SimpleRenderer" === e6.declaredClass;
}
function be(e6) {
  return "esri.renderers.ClassBreaksRenderer" === e6.declaredClass;
}
function Se(e6) {
  return "esri.renderers.UniqueValueRenderer" === e6.declaredClass;
}
function _e(e6) {
  return "esri.renderers.HeatmapRenderer" === e6.declaredClass;
}
function we(e6) {
  return ve(e6) || Ee(e6) || Ce(e6) || Le(e6);
}
function Le(e6) {
  return "esri.renderers.PointCloudRGBRenderer" === e6.declaredClass;
}
function ve(e6) {
  return "esri.renderers.PointCloudClassBreaksRenderer" === e6.declaredClass;
}
function Ee(e6) {
  return "esri.renderers.PointCloudStretchRenderer" === e6.declaredClass;
}
function Ce(e6) {
  return "esri.renderers.PointCloudUniqueValueRenderer" === e6.declaredClass;
}
function Ie(e6) {
  return "esri.renderers.DotDensityRenderer" === e6.declaredClass;
}
function Re(e6) {
  return "esri.renderers.PieChartRenderer" === e6.declaredClass;
}
function Ve(e6, t6) {
  return ge(e6) || be(e6) || Se(e6) || _e(e6) || Ie(e6) || Re(e6) ? "2d" === t6.type || o3(e6) : fe(e6) || me(e6) || pe(e6) || ve(e6) || Ee(e6) || Ce(e6) || he(e6) || ye(e6);
}
function Fe(e6) {
  return "esri.layers.BuildingSceneLayer" === e6.declaredClass;
}
function Te(e6) {
  return "esri.layers.VoxelLayer" === e6.declaredClass;
}
function ze(e6) {
  return "esri.layers.WMSLayer" === e6.declaredClass;
}
function xe(e6) {
  return "esri.layers.WMTSLayer" === e6.declaredClass;
}
function je(e6) {
  return "esri.layers.MapImageLayer" === e6.declaredClass;
}
function Oe(e6) {
  return "esri.layers.TileLayer" === e6.declaredClass;
}
function De(e6) {
  return "esri.layers.FeatureLayer" === e6.declaredClass;
}
function Pe(e6) {
  return e6.declaredClass === re;
}
function Me(e6) {
  return e6.declaredClass === ie;
}
function Ae(e6) {
  return e6.declaredClass === ne;
}
function Be(e6) {
  return "stretch-ramp" === e6.type;
}
function Ue(e6) {
  var _a;
  return "univariate-color-size" === ((_a = "authoringInfo" in e6 && (e6 == null ? void 0 : e6.authoringInfo)) == null ? void 0 : _a.type);
}
function ke(e6) {
  const t6 = "authoringInfo" in e6 && (e6 == null ? void 0 : e6.authoringInfo);
  return "univariate-color-size" === (t6 == null ? void 0 : t6.type) && "above-and-below" === (t6 == null ? void 0 : t6.univariateTheme);
}
var Ne = new y2({ style: "path", path: "M10,5 L5,0 0,5 M5,0 L5,15", size: 15, outline: { width: 1, color: [85, 85, 85, 1] } });
var qe = {};
var We = class extends y {
  constructor(e6) {
    super(e6), this._handles = new u(), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._webStyleSymbolCache = /* @__PURE__ */ new Map(), this._dotDensityUrlCache = /* @__PURE__ */ new Map(), this._scaleDrivenSizeVariable = null, this._hasClusterSizeVariable = false, this.children = new j(), this.layerView = null, this.layer = null, this.legendElements = [], this.parent = null, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.sublayerIds = [], this.title = null, this.view = null;
  }
  initialize() {
    const e6 = () => this.notifyChange("ready");
    this._handles.add([a(() => this.children, "change", (t6) => {
      const { added: s10, removed: l10 } = t6, r8 = this._handles;
      s10.forEach((t7) => {
        const s11 = `activeLayerInfo-ready-watcher-${t7.layer.uid}`;
        r8.add(l3(() => t7.ready, e6, h), s11);
      }), l10.forEach((e7) => r8.remove(e7.layer.uid)), e6();
    })]), this.keepCacheOnDestroy || (qe = {});
  }
  destroy() {
    this._handles.destroy(), this._handles = null, this._webStyleSymbolCache = null, this._dotDensityUrlCache = null, this._scaleDrivenSizeVariable = null, this.keepCacheOnDestroy || (qe = null);
  }
  get effectList() {
    const e6 = this.layer;
    let t6 = null;
    return "effect" in e6 && e6.effect && (t6 = new h2(), t6.effect = e6.effect, t6.end(), t6.scale = this.scale), t6;
  }
  get opacity() {
    var _a;
    const e6 = this.layer.opacity, t6 = (_a = this.parent) == null ? void 0 : _a.opacity, s10 = this.layer.parent, l10 = s10 && "uid" in s10 ? this._getParentLayerOpacity(s10) : null;
    return null != t6 ? t6 * e6 : null != l10 ? l10 * e6 : e6;
  }
  get ready() {
    return null === this.layer || (this.children.length > 0 ? this._isGroupActive() : this.legendElements.length > 0);
  }
  get scale() {
    return this.view && this.view.scale;
  }
  get isScaleDriven() {
    const e6 = this.layer;
    if (null === e6)
      return false;
    if ("effect" in e6 && e6.effect && Array.isArray(e6.effect))
      return true;
    if ("featureReduction" in e6 && e6.featureReduction && "cluster" === e6.featureReduction.type)
      return true;
    if ("renderer" in e6 && e6.renderer) {
      if ("dot-density" === e6.renderer.type)
        return true;
      const t6 = e6.get("renderer.valueExpression");
      if (ae.test(t6))
        return true;
      const s10 = e6.get("renderer.visualVariables");
      if (s10)
        return s10.some((e7) => this._isScaleDrivenSizeVariable(e7));
    }
    return this._isLayerScaleDriven(this.layer);
  }
  get version() {
    return this._get("version") + 1;
  }
  async buildLegendElementsForFeatureCollections(e6) {
    if (!(!this.hideLayersNotInCurrentView || await this._isLayerInCurrentView()))
      return this.legendElements = [], void this.notifyChange("ready");
    const t6 = Array.from(e6, (e7) => {
      if (De(e7))
        return this._getRendererLegendElements(e7.renderer, { title: e7.title });
      if (e7.featureSet && e7.featureSet.features.length) {
        const t7 = e7.layerDefinition, s10 = t7 && t7.drawingInfo, l10 = s10 && t2(s10.renderer), r8 = oe.read(t7.geometryType);
        return l10 ? this._getRendererLegendElements(l10, { title: e7.name, geometryType: r8 }) : (se.warn("drawingInfo not available!"), null);
      }
      return null;
    });
    try {
      const e7 = [];
      await E(t6).then((t7) => {
        t7.forEach(({ value: t8 }) => t8 && e7.push(...t8));
      }), this.legendElements = e7, this.notifyChange("ready");
    } catch (s10) {
      se.warn("error while building legend for layer!", s10);
    }
  }
  async buildLegendElementsForRenderer(e6) {
    try {
      const t6 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t6 ? await this._getRendererLegendElements(e6) : [], this.notifyChange("ready");
    } catch (t6) {
      se.warn("error while building legend for layer!", t6);
    }
  }
  async buildLegendElementsForTools() {
    var _a, _b;
    const e6 = this.layer;
    if (Te(e6))
      this._constructLegendElementsForVoxellayer();
    else if (xe(e6))
      this._constructLegendElementsForWMTSlayer();
    else if (ze(e6))
      await this._constructLegendElementsForWMSSublayers();
    else if (Fe(e6))
      await this._constructLegendElementsForBuildingSceneLayer();
    else if (je(e6) || Oe(e6) || Fe(e6))
      await this._constructLegendElementsForSublayers();
    else {
      this._handles.remove("imageryLayers-watcher");
      let t6 = "default";
      if (Pe(e6)) {
        t6 = (((_a = e6 == null ? void 0 : e6.renderingRule) == null ? void 0 : _a.functionName) || "default") + "_" + (((_b = e6.bandIds) == null ? void 0 : _b.length) ? e6.bandIds.join("") : "###");
      }
      await this._getLegendLayers(`${e6.uid}-${t6}`).then(async (t7) => {
        this.legendElements = [], this.notifyChange("ready");
        const s10 = t7.map(async (t8) => {
          if (Pe(e6) || Me(e6)) {
            const t9 = l3(() => ["renderingRule" in e6 && e6.renderingRule, e6.bandIds], () => x(async () => {
              qe.default = null, e6.renderer ? await this.buildLegendElementsForRenderer(e6.renderer) : await this.buildLegendElementsForTools();
            })());
            this._handles.add(t9, "imageryLayers-watcher");
          }
          const s11 = this._generateSymbolTableElementForLegendLayer(t8);
          s11 && s11.infos.length && (Pe(e6) && (s11.title = e6.title), this.legendElements.push(s11)), this.notifyChange("ready");
        });
        await E(s10);
      }).catch((e7) => {
        se.warn("Request to server for legend has failed!", e7);
      });
    }
  }
  async _isLayerInCurrentView() {
    const e6 = this.layer, t6 = this.layerView, s10 = t6 && "createQuery" in t6 && "queryFeatureCount" in t6;
    if (!s10 && !(t6 && "createQuery" in e6 && "queryFeatureCount" in e6))
      return true;
    await j2(() => !t6.updating);
    const l10 = s10 ? "createQuery" in t6 && t6.createQuery() : "createQuery" in e6 && e6.createQuery();
    l10.geometry = this.view.extent;
    return 0 !== (s10 ? "queryFeatureCount" in t6 && await t6.queryFeatureCount(l10) : "queryFeatureCount" in e6 && await e6.queryFeatureCount(l10));
  }
  _getParentLayerOpacity(e6) {
    let t6 = 1;
    const s10 = e6.parent;
    return s10 && "uid" in s10 && (t6 = this._getParentLayerOpacity(s10)), e6.opacity * t6;
  }
  _isGroupActive() {
    const e6 = this.children;
    return !!e6.length && e6.some((e7) => e7.ready);
  }
  _isScaleDrivenSizeVariable(e6) {
    if (e6 && "size" !== e6.type)
      return false;
    const t6 = e6, s10 = t6.minSize, l10 = t6.maxSize;
    return "object" == typeof s10 && s10 ? this._isScaleDrivenSizeVariable(s10) : "object" == typeof l10 && l10 ? this._isScaleDrivenSizeVariable(l10) : !!t6.expression || ae.test(t6.valueExpression);
  }
  _isLayerScaleDriven(e6) {
    if ("minScale" in e6 && e6.minScale > 0 || "maxScale" in e6 && e6.maxScale > 0)
      return true;
    if ("sublayers" in e6 && e6.sublayers)
      return e6.sublayers.some((e7) => this._isLayerScaleDriven(e7));
    const t6 = e6.parent;
    if (false === e6.loaded && t6 && je(t6) && "source" in e6 && e6.source && "map-layer" === e6.source.type) {
      for (const s10 of t6.sourceJSON.layers)
        if (s10.id === e6.source.mapLayerId && (s10.minScale > 0 || s10.maxScale > 0))
          return true;
    }
    return false;
  }
  async _constructLegendElementsForVoxellayer() {
    var _a;
    this.legendElements = [], this._handles.remove("voxel-style-watcher");
    const e6 = this.layer;
    this._handles.add(l3(() => e6.currentVariableId, () => this._constructLegendElementsForVoxellayer()), "voxel-style-watcher");
    const t6 = e2(e6.getVariableStyle(null)), s10 = [];
    if (t6) {
      if ((_a = t6.uniqueValues) == null ? void 0 : _a.length) {
        const e7 = [];
        t6.uniqueValues.forEach((t7) => {
          t7.enabled && e7.push({ label: t7.label || `${t7.value}`, value: t7.value, symbol: new S({ color: t7.color, outline: null }) });
        }), e7.length && s10.push({ type: "symbol-table", title: t6.label, infos: e7 });
      } else if (t6.transferFunction) {
        const { colorStops: e7, stretchRange: l11 } = t6.transferFunction, r9 = e7.toArray().reverse(), i9 = l11.map((e8, t7) => `${0 === t7 ? s6 : i5} ${s8(e8)}`).reverse(), n8 = r9.map((e8) => ({ color: e8.color, value: null, label: null }));
        n8[0].label = i9[0], n8[n8.length - 1].label = i9[1], s10.push({ type: "color-ramp", title: t6.label, infos: n8, preview: g(r9.map((e8) => e8.color)) });
      }
    }
    const l10 = e6.opacity, r8 = s10.reduce((e7, t7) => e7.concat(this._getAllInfos(t7)), []).filter((e7) => !!(e7 == null ? void 0 : e7.symbol)).map((e7) => this._getSymbolPreview(e7, l10));
    await E(r8), this.legendElements = s10, this.notifyChange("ready");
  }
  _constructLegendElementsForWMTSlayer() {
    this.legendElements = [], this._handles.remove("wmts-activeLayer-watcher");
    const e6 = this.layer.activeLayer;
    if (this._handles.add(l3(() => {
      const { layer: e7 } = this;
      return e7 && "activeLayer" in e7 && e7.activeLayer;
    }, () => this._constructLegendElementsForWMTSlayer()), "wmts-activeLayer-watcher"), e6.styleId && e6.styles) {
      let t6 = null;
      e6.styles.some((s10) => e6.styleId === s10.id && (t6 = s10.legendUrl, true)), t6 && (this.legendElements = [{ type: "symbol-table", title: e6.title, infos: [{ src: t6, opacity: this.opacity }] }]);
    }
    this.notifyChange("ready");
  }
  async _constructLegendElementsForWMSSublayers() {
    this.legendElements = [], this._handles.remove("wms-sublayers-watcher");
    const e6 = this.layer;
    let t6 = null;
    (e6.customParameters || e6.customLayerParameters) && (t6 = { ...e6.customParameters, ...e6.customLayerParameters }), this._handles.add(l3(() => {
      const { layer: e7 } = this;
      return e7 && "sublayers" in e7 && e7.sublayers;
    }, () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher"), this.legendElements = await this._generateLegendElementsForWMSSublayers(e6.sublayers, t6), this.notifyChange("ready");
  }
  async _generateLegendElementsForWMSSublayers(e6, t6) {
    const s10 = [];
    this._handles.add(e6.on("change", () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher");
    const l10 = e6.toArray();
    for (const r8 of l10) {
      const e7 = l3(() => [r8.title, r8.visible, r8.legendEnabled], () => this._constructLegendElementsForWMSSublayers());
      if (this._handles.add(e7, "wms-sublayers-watcher"), !this.respectLayerVisibility || r8.visible && r8.legendEnabled) {
        const e8 = await this._generateSymbolTableElementForWMSSublayer(r8, t6);
        e8 && e8.infos.length && s10.unshift(e8);
      }
    }
    return s10;
  }
  async _generateSymbolTableElementForWMSSublayer(e6, t6) {
    if (!e6.legendUrl && e6.sublayers) {
      const s10 = (await this._generateLegendElementsForWMSSublayers(e6.sublayers, t6)).filter((e7) => e7);
      return { type: "symbol-table", title: e6.title, infos: s10 };
    }
    return this._generateSymbolTableElementForLegendUrl(e6, t6);
  }
  async _generateSymbolTableElementForLegendUrl(e6, t6) {
    var _a;
    let s10 = e6.legendUrl;
    if (!s10)
      return;
    const r8 = { type: "symbol-table", title: e6.title || e6.name || e6.id && e6.id + "", infos: [] };
    t6 && (s10 = Bt(s10, t6));
    let i9 = null;
    const n8 = (_a = e6.layer) == null ? void 0 : _a.opacity;
    try {
      i9 = (await U(s10, { responseType: "image" })).data, i9 && (i9.style.opacity = n8);
    } catch {
    }
    return r8.infos.push({ src: s10, preview: i9, opacity: n8 }), r8;
  }
  _getLegendLayers(e6, t6) {
    const s10 = qe && qe[e6];
    return s10 ? Promise.resolve(s10) : this._legendRequest(t6).then((t7) => {
      const s11 = t7.layers;
      return qe[e6] = s11, s11;
    });
  }
  _legendRequest(e6) {
    const t6 = this.layer;
    let s10 = { f: "json", dynamicLayers: e6 };
    if (Pe(t6)) {
      const e7 = t6.exportImageServiceParameters.renderingRule;
      if (e7 && (s10.renderingRule = JSON.stringify(e7.rasterFunctionDefinition || e7.toJSON())), t6.bandIds && (s10.bandIds = t6.bandIds.join()), t6.raster || t6.viewId || t6.customParameters) {
        const { raster: e8, viewId: l10, customParameters: r9 } = t6;
        s10 = { raster: e8, viewId: l10, ...s10, ...r9 };
      }
    }
    let r8 = t6.url.replace(/(\/)+$/, "");
    if ("version" in t6 && t6.version >= 10.01) {
      const e7 = r8.indexOf("?");
      e7 > -1 ? r8 = r8.substring(0, e7) + "/legend" + r8.substring(e7) : r8 += "/legend";
    } else {
      const e7 = r8.toLowerCase().indexOf("/rest/"), t7 = r8.substring(0, e7) + r8.substring(e7 + 5, r8.length);
      r8 = le + "?soapUrl=" + encodeURI(t7) + "&returnbytes=true";
    }
    return U(r8, { query: s10 }).then((e7) => e7.data);
  }
  async _constructLegendElementsForBuildingSceneLayer() {
    this.legendElements = [], this._handles.remove("sublayers-watcher");
    const e6 = this.layer;
    this._handles.add(l3(() => e6.sublayers, () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForBuildingSublayers(e6.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t6) {
      se.warn("Request to server for legend has failed!", t6);
    }
  }
  async _generateLegendElementsForBuildingSublayers(e6, t6) {
    let s10 = [];
    this._handles.add(e6.on("change", () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    const l10 = e6.toArray();
    for (const r8 of l10) {
      const e7 = l3(() => ["renderer" in r8 && r8.renderer, r8.opacity, r8.title, r8.visible], () => this._constructLegendElementsForBuildingSceneLayer());
      if (this._handles.add(e7, "sublayers-watcher"), !this.respectLayerVisibility || r8.visible) {
        const e8 = r8 && null != r8.opacity ? r8.opacity : null, l11 = null != e8 ? e8 * t6 : t6;
        if ("building-group" === r8.type) {
          const e9 = { type: "symbol-table", title: r8.title, infos: [] }, t7 = await this._generateLegendElementsForBuildingSublayers(r8.sublayers, l11);
          e9.infos.push(...t7), s10 = [e9, ...s10];
        } else if (r8.renderer) {
          s10 = [...await this._getRendererLegendElements(r8.renderer, { title: r8.title, opacity: l11, sublayer: r8 }), ...s10];
        }
      }
    }
    return s10.filter((e7) => !!e7 && (!("infos" in e7) || e7.infos.length > 0));
  }
  async _constructLegendElementsForSublayers() {
    this.legendElements = [], this._handles.remove("sublayers-watcher");
    const e6 = this.layer;
    this._handles.add(l3(() => e6.sublayers, () => this._constructLegendElementsForSublayers), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForSublayers(e6.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t6) {
      se.warn("Request to server for legend has failed!", t6);
    }
  }
  async _generateLegendElementsForSublayers(e6, t6, s10) {
    const l10 = this.layer;
    let r8 = [];
    this._handles.add(e6.on("change", () => this._constructLegendElementsForSublayers()), "sublayers-watcher");
    let i9 = e6.toArray();
    !s10 && this.sublayerIds && this.sublayerIds.length && (i9 = this.sublayerIds.map((e7) => l10.findSublayerById(e7)).filter(Boolean));
    for (const n8 of i9) {
      const e7 = l3(() => [n8.renderer, n8.opacity, n8.title, n8.visible, n8.legendEnabled], () => this._constructLegendElementsForSublayers());
      if (this._handles.add(e7, "sublayers-watcher"), !this.respectLayerVisibility || n8.visible && n8.legendEnabled && this._isSublayerInScale(n8)) {
        const e8 = n8 && null != n8.opacity ? n8.opacity : null, l11 = null != e8 ? e8 * t6 : t6;
        if (n8.renderer && !n8.sublayers && n8.originIdOf("renderer") > r2.SERVICE) {
          await n8.load();
          r8 = [...await this._getRendererLegendElements(n8.renderer, { title: n8.title, opacity: l11, sublayer: n8 }), ...r8];
        } else {
          const e9 = await this._generateSymbolTableElementForSublayer(n8, l11, s10);
          e9 && r8.unshift(e9);
        }
      }
    }
    return r8.filter((e7) => !!e7 && (!("infos" in e7) || e7.infos.length > 0));
  }
  async _generateSymbolTableElementForSublayer(e6, t6, s10) {
    if (!s10) {
      s10 = /* @__PURE__ */ new Map();
      const t7 = this.layer, l11 = e6.source;
      let r8 = null;
      if (!(!l11 || "map-layer" === l11.type && l11.mapLayerId === e6.id && (!l11.gdbVersion || l11.gdbVersion === ("gdbVersion" in t7 && t7.gdbVersion))) || e6.originIdOf("renderer") > r2.SERVICE || e6.originIdOf("labelingInfo") > r2.SERVICE || e6.originIdOf("labelsVisible") > r2.SERVICE) {
        const e7 = new c2({ layer: this.layer });
        r8 = e7.hasDynamicLayers ? e7.dynamicLayers : null, e7.destroy();
      }
      const i9 = r8 || `${t7.uid}-default`;
      (await this._getLegendLayers(i9, r8)).forEach((e7) => s10.set(e7.layerId, e7));
    }
    const l10 = s10.get(e6.id);
    if ((!l10 || (l10 == null ? void 0 : l10.subLayerIds) && l10.defaultVisibility) && e6.sublayers) {
      const l11 = await this._generateLegendElementsForSublayers(e6.sublayers, t6, s10);
      return { type: "symbol-table", title: e6.title, infos: l11 };
    }
    return this._generateSymbolTableElementForLegendLayer(l10, e6, t6);
  }
  _generateSymbolTableElementForLegendLayer(e6, t6, s10) {
    var _a;
    if (!e6 || !e6.legend || this.respectLayerVisibility && !this._isLegendLayerInScale(e6, t6))
      return null;
    const l10 = t6 == null ? void 0 : t6.renderer;
    let r8 = (t6 == null ? void 0 : t6.title) || e6.layerName;
    if (l10 && (!t6 || (t6 == null ? void 0 : t6.originIdOf("renderer")) > r2.SERVICE)) {
      const e7 = (t6 == null ? void 0 : t6.title) || this._getRendererTitle(l10, t6);
      e7 && (r8 && "string" != typeof e7 && "title" in e7 && (e7.title = r8), r8 = e7);
    }
    const i9 = { type: "symbol-table", title: r8, legendType: e6.legendType ? e6.legendType : null, infos: [] }, n8 = t6 ? this._sanitizeLegendForSublayer(e6.legend.slice(), t6) : e6.legend;
    return ((_a = e6.legendGroups) == null ? void 0 : _a.length) > 0 ? e6.legendGroups.forEach((t7) => {
      var _a2;
      const l11 = { type: "symbol-table", title: t7.heading, legendType: e6.legendType ? e6.legendType : null, infos: this._generateSymbolTableElementInfosForLegendLayer(n8.filter((e7) => e7.groupId === t7.id), e6.layerId, s10) };
      ((_a2 = l11.infos) == null ? void 0 : _a2.length) > 0 && i9.infos.push(l11);
    }) : i9.infos = this._generateSymbolTableElementInfosForLegendLayer(n8, e6.layerId, s10), i9.infos.length > 0 ? i9 : null;
  }
  _generateSymbolTableElementInfosForLegendLayer(e6, t6, l10) {
    return e6.map((e7) => {
      let r8 = e7.url;
      if (e7.imageData && e7.imageData.length > 0)
        r8 = `data:image/png;base64,${e7.imageData}`;
      else {
        if (0 === r8.indexOf("http"))
          return null;
        r8 = i2(`${this.layer.url}/${t6}/images/${r8}`);
      }
      return { label: e7.label, src: r8, opacity: null == l10 ? this.opacity : l10, width: e7.width, height: e7.height };
    }).filter((e7) => !!e7);
  }
  _isSublayerInScale(e6) {
    const t6 = e6.minScale || 0, s10 = e6.maxScale || 0;
    return !(t6 > 0 && t6 < this.scale || s10 > this.scale);
  }
  _isLegendLayerInScale(e6, t6) {
    const s10 = t6 || this.layer;
    let l10 = null, r8 = null, i9 = true;
    return !s10.minScale && 0 !== s10.minScale || !s10.maxScale && 0 !== s10.maxScale ? (0 === e6.minScale && s10.tileInfo && (l10 = s10.tileInfo.lods[0].scale), 0 === e6.maxScale && s10.tileInfo && (r8 = s10.tileInfo.lods[s10.tileInfo.lods.length - 1].scale)) : (l10 = Math.min(s10.minScale, e6.minScale) || s10.minScale || e6.minScale, r8 = Math.max(s10.maxScale, e6.maxScale)), (l10 > 0 && l10 < this.scale || r8 > this.scale) && (i9 = false), i9;
  }
  _sanitizeLegendForSublayer(e6, t6) {
    if ("version" in this.layer && this.layer.version < 10.1 || 0 === e6.length)
      return e6;
    const s10 = t6.renderer, l10 = e6.some((e7) => e7.values);
    let r8 = null, i9 = null;
    return l10 && e6.some((e7, t7) => (e7.values || (r8 = t7, i9 = e7, i9.label || (i9.label = "others")), null != i9)), s10 ? "unique-value" === s10.type ? i9 && (e6.splice(r8, 1), e6.push(i9)) : "class-breaks" === s10.type && (i9 && e6.splice(r8, 1), e6.reverse(), i9 && e6.push(i9)) : i9 && (e6.splice(r8, 1), e6.push(i9)), e6;
  }
  async _getRendererLegendElements(e6, t6 = {}) {
    return Ve(e6, this.view) ? we(e6) ? this._constructPointCloudRendererLegendElements(e6, t6) : Ie(e6) ? this._constructDotDensityRendererLegendElements(e6) : Re(e6) ? this._constructPieChartRendererLegendElements(e6) : this._constructRendererLegendElements(e6, t6) : (se.warn(`Renderer of type '${e6.type}' not supported!`), []);
  }
  _getPointCloudRendererTitle(e6) {
    return e6.legendOptions && e6.legendOptions.title || e6.field;
  }
  _constructPointCloudRendererLegendElements(e6, t6 = {}) {
    const s10 = t6.title, l10 = [];
    let r8 = null, i9 = null;
    if (ve(e6))
      r8 = { type: "symbol-table", title: s10 || this._getPointCloudRendererTitle(e6), infos: [] }, e6.colorClassBreakInfos.forEach((e7) => {
        r8.infos.unshift({ label: e7.label || e7.minValue + " - " + e7.maxValue, value: [e7.minValue, e7.maxValue], symbol: this._getAppliedCloneSymbol(ue, e7.color) });
      });
    else if (Ee(e6)) {
      const t7 = e6.stops;
      let l11 = null;
      if (t7.length && (1 === t7.length && (l11 = t7[0].color), !l11)) {
        const e7 = t7[0].value, s11 = t7[t7.length - 1].value;
        if (null != e7 && null != s11) {
          l11 = u5(e7 + (s11 - e7) / 2, t7);
        }
      }
      r8 = { type: "symbol-table", title: null, infos: [{ label: null, value: null, symbol: this._getAppliedCloneSymbol(ue, l11 || ue.color) }] };
      const n9 = a3(e6.stops);
      i9 = { type: "color-ramp", title: s10 || this._getPointCloudRendererTitle(e6), infos: n9, preview: g(n9.map((e7) => e7.color)) };
    } else
      Ce(e6) && (r8 = { type: "symbol-table", title: s10 || this._getPointCloudRendererTitle(e6), infos: [] }, e6.colorUniqueValueInfos.forEach((e7) => {
        r8.infos.push({ label: e7.label || e7.values.join(", "), value: e7.values.join(", "), symbol: this._getAppliedCloneSymbol(ue, e7.color) });
      }));
    r8 && r8.infos.length && l10.push(r8), i9 && i9.infos.length && l10.push(i9);
    const n8 = l10.reduce((e7, t7) => e7.concat(t7.infos), []).filter((e7) => !!e7.symbol).map((t7) => this._getSymbolPreview(t7, this.opacity, { symbolConfig: { applyColorModulation: !!e6.colorModulation } }));
    return E(n8).then(() => l10);
  }
  _getElementInfoForDotDensity(e6, t6) {
    var _a;
    const { backgroundColor: s10, outline: l10, dotSize: r8 } = e6, i9 = (_a = this.effectList) == null ? void 0 : _a.effects.map((e7) => e7.toJSON()), n8 = i3(i9), a6 = r8 + "-" + t6 + "-" + s10 + "-" + (l10 && JSON.stringify(l10.toJSON())) + "-" + n8, o5 = this._dotDensityUrlCache, c6 = o5.has(a6) ? o5.get(a6) : m3(e6, t6);
    o5.set(a6, c6);
    const u11 = { shape: { type: "image", x: 0, y: 0, width: c6.width, height: c6.height, src: c6.src }, fill: null, stroke: null, offset: [0, 0] }, d5 = l6([[u11]], [c6.width, c6.height], { effectView: this.effectList });
    return { opacity: 1, src: c6.src, preview: d5, width: c6.width, height: c6.height };
  }
  _constructDotDensityRendererLegendElements(e6) {
    const t6 = e6.calculateDotValue(this.view.scale), s10 = e6.legendOptions && e6.legendOptions.unit, l10 = { type: "symbol-table", title: { value: t6 && Math.round(t6), unit: s10 || "" }, infos: [] };
    return e6.attributes.forEach((t7) => {
      const s11 = this._getElementInfoForDotDensity(e6, t7.color);
      s11.label = t7.label || t7.valueExpressionTitle || t7.field, l10.infos.push(s11);
    }), Promise.resolve([l10]);
  }
  async _constructPieChartRendererLegendElements(e6) {
    var _a, _b, _c, _d;
    const t6 = this.layer.opacity, s10 = [], l10 = "Others", r8 = e6.outline;
    e6.attributes.forEach((e7) => {
      const t7 = new y2({ color: e7.color, outline: r8 }), l11 = e7.label || e7.valueExpressionTitle || e7.field;
      s10.push({ label: l11, symbol: t7 });
    });
    const i9 = s10.length ? [...s10] : [];
    if (((_a = e6.othersCategory) == null ? void 0 : _a.color) && 0 !== ((_b = e6.othersCategory) == null ? void 0 : _b.threshold)) {
      const t7 = new y2({ color: e6.othersCategory.color, outline: r8 });
      s10.push({ label: e6.othersCategory.label || l10, symbol: t7 });
    }
    if ((_c = e6.defaultColor) == null ? void 0 : _c.a) {
      const t7 = new y2({ color: e6.defaultColor, outline: r8 });
      s10.push({ label: e6.defaultLabel, symbol: t7 });
    }
    const n8 = await this._getVisualVariableLegendElements(e6, this.layer) || [];
    if (s10.length) {
      n8.unshift({ type: "symbol-table", title: null, infos: s10 });
      const t7 = i9.filter((e7) => e7.label !== l10).map((e7) => e7.symbol.color).filter(Boolean), a7 = b2(t7, { holePercentage: e6.holePercentage, backgroundColor: (_d = e6.backgroundFillSymbol) == null ? void 0 : _d.color, effectList: this.effectList, outline: r8 });
      n8.unshift({ type: "pie-chart-ramp", title: this._getRendererTitle(e6, this.layer), infos: s10, preview: a7 });
    }
    const a6 = n8.reduce((e7, t7) => e7.concat(this._getAllInfos(t7)), []).filter((e7) => !!(e7 == null ? void 0 : e7.symbol) && !(e7 == null ? void 0 : e7.preview)).map((e7) => this._getSymbolPreview(e7, t6, { effectList: this.effectList }));
    return await E(a6), n8;
  }
  async _constructRendererLegendElements(e6, t6 = {}) {
    var _a;
    const { title: s10, sublayer: l10 } = t6, r8 = l10 || this.layer;
    let i9 = await this._loadRenderer(e6);
    this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._scaleDrivenSizeVariable = null;
    const n8 = await this._getVisualVariableLegendElements(i9, r8) || [], a6 = { type: "symbol-table", title: s10 || this._getRendererTitle(i9, r8), infos: [] };
    let o5 = null, u11 = false;
    const y6 = /* @__PURE__ */ new Set();
    if (ye(i9) && !this._hasSizeRamp) {
      const e7 = await u4(i9);
      a6.infos.push({ label: null, symbol: e7 });
    } else if (Ue(i9)) {
      let e7 = s10;
      const t7 = ke(i9) ? "univariate-above-and-below-ramp" : "univariate-color-size-ramp", l11 = n8.findIndex((e8) => "color-ramp" === e8.type), r9 = -1 !== l11 ? n8.splice(l11, 1)[0] : null, a7 = n8.findIndex((e8) => "size-ramp" === e8.type), o6 = -1 !== a7 ? n8.splice(a7, 1)[0] : null, c6 = [];
      r9 && (e7 = r9.title, c6.push(r9)), o6 && (e7 = o6.title, c6.push(o6)), c6.length > 0 && n8.push({ type: t7, title: e7, infos: c6 });
    } else if (_e(i9)) {
      const e7 = r5(i9);
      n8.push({ type: "heatmap-ramp", title: s10 || ((_a = i9.legendOptions) == null ? void 0 : _a.title), infos: e7, preview: g(e7.map((e8) => e8.color), { effectList: this.effectList }) });
    } else if (Se(i9)) {
      const e7 = i9 && i9.authoringInfo;
      if (e7 && "relationship" === e7.type) {
        const { focus: t7, numClasses: s11, field1: l11, field2: o6 } = e7;
        if (s11 && l11 && o6) {
          const e8 = [l11, o6];
          let c6 = u6(t7) || 0;
          for (const t8 of e8) {
            const { field: e9, normalizationField: s12, label: l12 } = t8, i10 = l12 || { field: this._getFieldAlias(e9, r8), normField: s12 && this._getFieldAlias(s12, r8) }, n9 = Ne.clone();
            n9.angle = c6, a6.infos.push({ label: i10, symbol: n9 }), y6.add(n9), c6 += 90;
          }
          const u12 = i7({ focus: t7, numClasses: s11, infos: i9.uniqueValueInfos });
          n8.unshift(u12);
        }
      } else {
        const e8 = i9.field;
        i9.uniqueValueInfos.forEach((t7) => {
          t7.symbol && a6.infos.push({ label: t7.label || this._getDomainName(e8, t7.value, r8) || t7.value, value: t7.value, symbol: t7.symbol });
        });
      }
      i9.defaultSymbol && (a6.infos.push({ label: i9.defaultLabel || "others", symbol: i9.defaultSymbol }), u11 = true);
    } else if (be(i9)) {
      o5 = this._isUnclassedRenderer(i9);
      (!o5 || !this._hasSizeRamp) && (i9.classBreakInfos.forEach((e7) => {
        e7.symbol && a6.infos.unshift({ label: e7.label || (o5 ? null : e7.minValue + " - " + e7.maxValue), value: [e7.minValue, e7.maxValue], symbol: e7.symbol });
      }), o5 && (a6.title = null), this._updateInfosforClassedSizeRenderer(i9, a6.infos)), i9.defaultSymbol && !o5 && (a6.infos.push({ label: i9.defaultLabel || "others", symbol: i9.defaultSymbol }), u11 = true);
    } else if (fe(i9))
      if (Me(this.layer) || Ae(this.layer)) {
        const e7 = this._constructTileImageryStretchRendererElements(i9);
        Be(e7) ? n8.push(e7) : a6.infos = e7;
      } else {
        const e7 = this.layer;
        let t7, s11;
        i9.statistics && i9.statistics.length && (t7 = null != i9.statistics[0].min ? i9.statistics[0].min : i9.statistics[0][0], s11 = null != i9.statistics[0].max ? i9.statistics[0].max : i9.statistics[0][1]);
        let l11 = [];
        const r9 = e2(e7.renderingRule ? await e7.generateRasterInfo(e7.renderingRule) : e7.serviceRasterInfo), o6 = r9.keyProperties.BandProperties, u12 = ce[e7.rasterInfo.pixelType.toLowerCase()];
        1 === r9.bandCount || e7.bandIds && 1 === e7.bandIds.length ? (t7 = null != t7 ? t7 : r9.statistics ? r9.statistics[e7.bandIds[0]].min : u12[0], s11 = null != s11 ? s11 : r9.statistics ? r9.statistics[e7.bandIds[0]].max : u12[1], t7 || s11 ? n8.push(this._getStretchLegendElements(i9, { min: t7, max: s11 })) : this._getServerSideLegend()) : r9.bandCount >= 3 ? o6 && o6.length >= r9.bandCount ? e7.bandIds && 3 === e7.bandIds.length ? (l11 = e7.bandIds.map((e8) => o6[e8].BandName), a6.infos = this._createSymbolTableElementMultiBand(l11)) : "lerc" === e7.format ? (l11 = [0, 1, 2].map((e8) => o6[e8].BandName), a6.infos = this._createSymbolTableElementMultiBand(l11)) : this._getServerSideLegend() : "lerc" === e7.format ? (l11 = ["band1", "band2", "band3"], a6.infos = this._createSymbolTableElementMultiBand(l11)) : this._getServerSideLegend() : this._getServerSideLegend();
      }
    else if (me(i9))
      i9.colormapInfos.forEach((e7) => {
        a6.infos.push({ label: e7.label, value: e7.value, symbol: this._getAppliedCloneSymbol(de, e7.color) });
      });
    else if (ge(i9)) {
      let e7 = i9.symbol;
      switch (t6.geometryType) {
        case "point":
          e7 = "pointSymbol" in r8 && r8.pointSymbol;
          break;
        case "polyline":
          e7 = "lineSymbol" in r8 && r8.lineSymbol;
          break;
        case "polygon":
          e7 = "polygonSymbol" in r8 && r8.polygonSymbol;
      }
      i9.symbol && !this._hasSizeRamp && a6.infos.push({ label: i9.label, symbol: e7 });
    } else if (he(i9)) {
      i9.outputUnit && (this.title = "(" + i9.toJSON().outputUnit + ")"), a6.title = i9.attributeField;
      const e7 = i9.getClassBreakInfos();
      (e7 == null ? void 0 : e7.length) ? e7.forEach((e8) => {
        a6.infos.push({ label: e8.minValue + " - " + e8.maxValue, symbol: e8.symbol });
      }) : a6.infos.push({ label: i9.attributeField, symbol: i9.getDefaultSymbol() });
    } else
      pe(i9) && n8.push(this._getStretchLegendElements(i9, { min: 0, max: 255 }));
    const h7 = i9.defaultSymbol;
    !h7 || u11 || ge(i9) || o5 && !this._hasColorRamp && !this._hasSizeRamp && !this._hasOpacityRamp || n8.push({ type: "symbol-table", infos: [{ label: i9.defaultLabel || "others", symbol: h7 }] }), a6.infos.length && n8.unshift(a6);
    const m7 = null == t6.opacity ? this.opacity : t6.opacity, f6 = this._isTallSymbol("visualVariables" in i9 && i9.visualVariables), p7 = Pe(this.layer) || Me(this.layer), g4 = n8.reduce((e7, t7) => e7.concat(this._getAllInfos(t7)), []).filter((e7) => !!(e7 == null ? void 0 : e7.symbol)).map((e7) => this._getSymbolPreview(e7, m7, { isDefault: e7.symbol === h7, applyScaleDrivenSize: !y6.has(e7.symbol), symbolConfig: { isTall: f6, isSquareFill: p7 }, effectList: y6.has(e7.symbol) ? null : this.effectList }));
    return i9 = null, await E(g4), n8;
  }
  _getServerSideLegend() {
    setTimeout(() => this.buildLegendElementsForTools(), 0);
  }
  _getAllInfos(e6) {
    const t6 = e6 == null ? void 0 : e6.infos;
    return t6 ? t6.reduce((e7, t7) => e7.concat(this._getAllInfos(t7)), []) : [e6];
  }
  _constructTileImageryStretchRendererElements(e6) {
    var _a, _b;
    const t6 = this.layer, s10 = t6.rasterInfo, l10 = s10.bandCount || e6.statistics.length;
    let r8, i9, n8 = [];
    const a6 = s10.keyProperties && s10.keyProperties.BandProperties, o5 = ((_a = e6 == null ? void 0 : e6.statistics) == null ? void 0 : _a.length) ? e6.statistics : s10 == null ? void 0 : s10.statistics;
    if (o5)
      r8 = void 0 !== o5[0].min ? o5[0].min : o5[0][0], i9 = o5[0].max || o5[0][1];
    else {
      const e7 = ce[t6.rasterInfo.pixelType.toLowerCase()];
      r8 = e7[0], i9 = e7[1];
    }
    if (t6.hasStandardTime() && (r8 = t6.getStandardTimeValue(r8), i9 = t6.getStandardTimeValue(i9)), 1 === s10.bandCount || 1 === ((_b = t6.bandIds) == null ? void 0 : _b.length))
      return this._getStretchLegendElements(e6, { min: r8, max: i9 });
    function c6(e7) {
      var _a2;
      const l11 = (((_a2 = t6 == null ? void 0 : t6.bandIds) == null ? void 0 : _a2.length) ? t6.bandIds : Array.from(Array(Math.min(s10.bandCount, 3)).keys())).map((t7) => e7 && e7[t7] && e7[t7].BandName || "band" + (t7 + 1));
      return l11.length < 3 ? l11.push(l11[1]) : l11.length > 3 && l11.splice(3), l11;
    }
    return n8 = a6 && a6.length >= l10 ? c6(a6) : c6(), this._createSymbolTableElementMultiBand(n8);
  }
  _getStretchLegendElements(e6, t6) {
    const s10 = e6.colorRamp, l10 = i6(s10, t6);
    return { type: "stretch-ramp", title: "", infos: l10, preview: g(l10.map((e7) => e7.color)) };
  }
  async _getSizeLegendElement(e6, t6, s10, l10) {
    return { type: "size-ramp", title: this._hasClusterSizeVariable ? this._getClusterTitle(t6) : e6, infos: await k(s10, t6, await n4(s10), this.scale, this.view.type, l10) };
  }
  _createSymbolTableElementMultiBand(e6) {
    const t6 = [], s10 = ["red", "green", "blue"];
    return e6.forEach((e7, l10) => {
      t6.push({ label: { colorName: s10[l10], bandName: e7 }, src: e5[l10], opacity: this.opacity ?? 1 });
    }), t6;
  }
  _updateInfosforClassedSizeRenderer(e6, t6) {
    const s10 = e6.authoringInfo && "class-breaks-size" === e6.authoringInfo.type, l10 = e6.classBreakInfos.some((e7) => d2(e7.symbol));
    if (s10 && l10) {
      const s11 = p3, l11 = y3, r8 = e6.classBreakInfos.length, i9 = (s11 - l11) / (r8 > 1 ? r8 - 1 : r8);
      t6.forEach((e7, t7) => {
        e7.size = s11 - i9 * t7;
      });
    }
  }
  _isTallSymbol(e6) {
    let t6 = false, s10 = false;
    if (e6)
      for (let l10 = 0; l10 < e6.length && (!t6 || !s10); l10++) {
        const r8 = e6[l10];
        "size" === r8.type && ("height" === r8.axis && (t6 = true), "width-and-depth" === r8.axis && (s10 = true));
      }
    return t6 && s10;
  }
  async _getSymbolPreview(e6, t6, s10) {
    let l10 = !(s10 == null ? void 0 : s10.isDefault) && null == e6.size && this._hasSizeRamp ? e4(t3.size) : e6.size;
    if (this._scaleDrivenSizeVariable && (s10 == null ? void 0 : s10.applyScaleDrivenSize)) {
      const { getSize: t7 } = await import("./visualVariableUtils-UDLADD73.js");
      l10 = t7(this._scaleDrivenSizeVariable, null, { view: this.view.type, scale: this.scale, shape: "simple-marker" === e6.symbol.type ? e6.symbol.style : null });
    }
    return S2(e6.symbol, { size: l10, opacity: t6, scale: false, symbolConfig: s10 == null ? void 0 : s10.symbolConfig, effectView: s10 == null ? void 0 : s10.effectList }).then((t7) => (e6.preview = t7, e6)).catch(() => (e6.preview = null, e6));
  }
  async _loadRenderer(e6) {
    var _a, _b;
    const t6 = [], s10 = this.layer;
    e6 = e6.clone(), this._hasClusterSizeVariable = false;
    const l10 = "visualVariables" in e6 && ((_a = e6.visualVariables) == null ? void 0 : _a.some((e7) => "size" === e7.type && "outline" !== e7.target && !ae.test(e7.valueExpression)));
    if (e6 && "visualVariables" in e6 && !l10 && "featureReduction" in s10 && "cluster" === ((_b = s10.featureReduction) == null ? void 0 : _b.type)) {
      const t7 = this.layerView._effectiveRenderer, l11 = e2(a4(t7, this.view));
      if (l11) {
        const t8 = s10.featureReduction;
        if ("clusterMinSize" in t8 && "clusterMaxSize" in t8) {
          const { clusterMinSize: e7, clusterMaxSize: s11 } = t8;
          l11.legendOptions = new a2({ showLegend: e7 !== s11 });
        }
        const r9 = e6.visualVariables || [];
        e6.visualVariables = r9.concat([l11]), this._hasClusterSizeVariable = true;
      }
    }
    const r8 = await n4(e6);
    if (be(e6) || Se(e6)) {
      const s11 = (e6.classBreakInfos || e6.uniqueValueInfos).map((e7) => this._fetchSymbol(e7.symbol, r8).then((t7) => {
        e7.symbol = t7;
      }).catch(() => {
        e7.symbol = null;
      }));
      Array.prototype.push.apply(t6, s11);
    }
    return t6.push(this._fetchSymbol(e6.symbol || e6.defaultSymbol, e6.defaultSymbol ? null : r8).then((t7) => {
      this._applySymbolToRenderer(e6, t7, ge(e6));
    }).catch(() => {
      this._applySymbolToRenderer(e6, null, ge(e6));
    })), E(t6).then(() => e6);
  }
  _applySymbolToRenderer(e6, t6, s10) {
    s10 ? e6.symbol = t6 : e6.defaultSymbol = t6;
  }
  async _fetchSymbol(e6, t6) {
    if (!e6)
      throw new Error();
    if ("web-style" === e6.type) {
      const s10 = this._webStyleSymbolCache;
      try {
        const l10 = await ("2d" === this.view.type ? e6.fetchCIMSymbol({ cache: s10 }) : e6.fetchSymbol({ cache: s10 }));
        return this._getAppliedCloneSymbol(l10, t6);
      } catch {
        throw se.warn("Fetching web-style failed!"), new Error();
      }
    }
    return this._getAppliedCloneSymbol(e6, t6);
  }
  _getAppliedCloneSymbol(e6, s10) {
    if (!e6 || !s10)
      return e6;
    const l10 = e6.clone(), r8 = s10 && s10.toRgba();
    return l10.type.includes("3d") ? this._applyColorTo3dSymbol(l10, r8) : "cim" === l10.type ? p2(l10, s10) : l10.color && (l10.color = new l2(r8 || l10.color)), l10;
  }
  _applyColorTo3dSymbol(e6, s10) {
    s10 && e6.symbolLayers.forEach((e7) => {
      e7 && (e7.material || (e7.material = {}), e7.material.color = new l2(s10));
    });
  }
  async _getVisualVariableLegendElements(e6, t6) {
    if (!("visualVariables" in e6) || !e6.visualVariables || "vector-field" === e6.type)
      return null;
    const s10 = e6.visualVariables, l10 = [], r8 = [], i9 = [];
    for (const u11 of s10)
      "color" === u11.type ? l10.push(u11) : "size" === u11.type ? r8.push(u11) : "opacity" === u11.type && i9.push(u11);
    const n8 = [...l10, ...r8, ...i9];
    let a6, o5;
    if (0 === l10.length && be(e6) && e6.classBreakInfos && 1 === e6.classBreakInfos.length) {
      const t7 = e6.classBreakInfos[0];
      a6 = t7 && t7.symbol;
    }
    if (0 === l10.length && ge(e6) && (a6 = e6.symbol), a6)
      if (a6.type.includes("3d")) {
        const e7 = a6.symbolLayers.getItemAt(0);
        "water" === e7.type ? r(e7.color) && (o5 = e7.color) : r(e7.material) && r(e7.material.color) && (o5 = e7.material.color);
      } else
        a6.url || (o5 = a6.color);
    const c6 = this.effectList;
    return (await Promise.all(n8.map(async (s11) => {
      if (!s11.legendOptions || false !== s11.legendOptions.showLegend) {
        const l11 = ye(e6) ? s11.field : this._getRampTitle(s11, t6);
        let r9 = null;
        const i10 = "getField" in t6 && t6.getField && t6.getField(s11.field), n9 = i10 && K(i10);
        if ("color" === s11.type) {
          const e7 = await r4(s11, null, n9);
          r9 = { type: "color-ramp", title: l11, infos: e7, preview: g(e7.map((e8) => e8.color), { effectList: c6 }) }, this._hasColorRamp || (this._hasColorRamp = !(null == r9.infos || !r9.infos.length));
        } else if ("size" === s11.type && "outline" !== s11.target)
          ae.test(s11.valueExpression) ? this._hasClusterSizeVariable || (this._scaleDrivenSizeVariable = s11) : (r9 = await this._getSizeLegendElement(l11, s11, e6, n9), this._hasSizeRamp || (this._hasSizeRamp = !(null == r9.infos || !r9.infos.length)));
        else if ("opacity" === s11.type) {
          const e7 = await r4(s11, o5, n9);
          r9 = { type: "opacity-ramp", title: l11, infos: e7, preview: g(e7.map((e8) => e8.color), { effectList: c6 }) }, this._hasOpacityRamp || (this._hasOpacityRamp = !(null == r9.infos || !r9.infos.length));
        }
        return r9 && r9.infos ? r9 : null;
      }
    }))).filter((e7) => !!e7);
  }
  _getDomainName(e6, t6, s10) {
    if (e6 && "function" != typeof e6) {
      const l10 = "getField" in s10 && s10.getField && s10.getField(e6), r8 = l10 && "getFieldDomain" in s10 && s10.getFieldDomain ? s10.getFieldDomain(l10.name) : null;
      return r8 && "coded-value" === r8.type ? r8.getName(t6) : null;
    }
    return null;
  }
  _getClusterTitle(e6) {
    const t6 = this.layer, s10 = e6.field;
    if ("featureReduction" in t6 && t6.featureReduction && "cluster" === t6.featureReduction.type) {
      const e7 = t6.featureReduction, l10 = "popupTemplate" in e7 && e7.popupTemplate, r8 = l10 && l10.fieldInfos;
      if (r8) {
        for (const t7 of r8)
          if (t7.fieldName === s10)
            return "cluster_count" === s10 ? t7.label || { showCount: true } : t7.label;
      }
    }
    return { showCount: true };
  }
  _getRampTitle(e6, t6) {
    let s10 = e6.field, l10 = e6.normalizationField, r8 = false, i9 = false, n8 = false, a6 = null;
    s10 = "function" == typeof s10 ? null : s10, l10 = "function" == typeof l10 ? null : l10;
    const o5 = e6.legendOptions && e6.legendOptions.title;
    if (null != o5)
      a6 = o5;
    else if (e6.valueExpressionTitle)
      a6 = e6.valueExpressionTitle;
    else {
      if ("renderer" in t6 && t6.renderer && "authoringInfo" in t6.renderer && t6.renderer.authoringInfo && t6.renderer.authoringInfo.visualVariables) {
        const e7 = t6.renderer.authoringInfo.visualVariables;
        for (let t7 = 0; t7 < e7.length; t7++) {
          const s11 = e7[t7];
          if ("color" === s11.type) {
            if ("ratio" === s11.style) {
              r8 = true;
              break;
            }
            if ("percent" === s11.style) {
              i9 = true;
              break;
            }
            if ("percent-of-total" === s11.style) {
              n8 = true;
              break;
            }
          }
        }
      }
      a6 = { field: s10 && this._getFieldAlias(s10, t6), normField: l10 && this._getFieldAlias(l10, t6), ratio: r8, ratioPercent: i9, ratioPercentTotal: n8 };
    }
    return a6;
  }
  _getRendererTitle(e6, t6) {
    const s10 = e6;
    if (s10.legendOptions && s10.legendOptions.title)
      return s10.legendOptions.title;
    if (s10.valueExpressionTitle)
      return s10.valueExpressionTitle;
    let l10 = s10.field, r8 = null, i9 = null;
    be(s10) && (r8 = s10.normalizationField, i9 = "percent-of-total" === s10.normalizationType), l10 = "function" == typeof l10 ? null : l10, r8 = "function" == typeof r8 ? null : r8;
    let n8 = null;
    return (l10 || r8) && (n8 = { field: l10 && this._getFieldAlias(l10, t6), normField: r8 && this._getFieldAlias(r8, t6), normByPct: i9 }), n8;
  }
  _getFieldAlias(e6, t6) {
    const s10 = "popupTemplate" in t6 && t6.popupTemplate, l10 = s10 && s10.fieldInfos;
    let r8 = null;
    l10 && l10.some((t7) => e6 === t7.fieldName && (r8 = t7, true));
    let i9 = null;
    "getField" in t6 && t6.getField ? i9 = t6.getField(e6) : "fieldsIndex" in t6 && t6.fieldsIndex && (i9 = t6.fieldsIndex.get(e6));
    const n8 = r8 || i9;
    let a6 = null;
    return n8 && (a6 = r8 && r8.label || i9 && i9.alias || "name" in n8 && n8.name || "fieldName" in n8 && n8.fieldName), a6;
  }
  _isUnclassedRenderer(e6) {
    const t6 = e6.visualVariables;
    let s10 = false;
    return be(e6) && e6.classBreakInfos && 1 === e6.classBreakInfos.length && t6 && (s10 = e6.field ? t6.some((t7) => !(!t7 || e6.field !== t7.field || (e6.normalizationField || t7.normalizationField) && e6.normalizationField !== t7.normalizationField)) : !!t6.length), s10;
  }
};
e([d()], We.prototype, "children", void 0), e([d({ readOnly: true })], We.prototype, "effectList", null), e([d()], We.prototype, "layerView", void 0), e([d()], We.prototype, "layer", void 0), e([d()], We.prototype, "legendElements", void 0), e([d({ readOnly: true })], We.prototype, "opacity", null), e([d()], We.prototype, "parent", void 0), e([d({ readOnly: true, dependsOn: [] })], We.prototype, "ready", null), e([d()], We.prototype, "hideLayersNotInCurrentView", void 0), e([d()], We.prototype, "keepCacheOnDestroy", void 0), e([d()], We.prototype, "respectLayerVisibility", void 0), e([d({ readOnly: true })], We.prototype, "scale", null), e([d()], We.prototype, "sublayerIds", void 0), e([d({ readOnly: true })], We.prototype, "isScaleDriven", null), e([d()], We.prototype, "title", void 0), e([d({ readOnly: true, dependsOn: ["ready"], value: 0 })], We.prototype, "version", null), e([d()], We.prototype, "view", void 0), We = e([n("esri.widgets.Legend.support.ActiveLayerInfo")], We);
var $e = We;

// node_modules/@arcgis/core/widgets/Legend/LegendViewModel.js
var h4 = { state: "state", view: "view", allLayerViews: "all-layer-views", legendProperties: "legend-properties" };
var c3 = j.ofType($e);
var L3 = ["esri.layers.BuildingSceneLayer", "esri.layers.CSVLayer", "esri.layers.FeatureLayer", "esri.layers.GeoJSONLayer", "esri.layers.GeoRSSLayer", "esri.layers.GroupLayer", "esri.layers.HeatmapLayer", "esri.layers.ImageryLayer", "esri.layers.ImageryTileLayer", "esri.layers.MapImageLayer", "esri.layers.OGCFeatureLayer", "esri.layers.PointCloudLayer", "esri.layers.StreamLayer", "esri.layers.SceneLayer", "esri.layers.TileLayer", "esri.layers.VoxelLayer", "esri.layers.WFSLayer", "esri.layers.WMSLayer", "esri.layers.WMTSLayer", "esri.layers.WCSLayer"];
var _ = "view.basemapView.baseLayerViews";
var f3 = "view.groundView.layerViews";
var u7 = "view.basemapView.referenceLayerViews";
var p4 = [_, f3, "view.layerViews", u7];
var v3 = class extends y {
  constructor(e6) {
    super(e6), this._handles = new u(), this._layerViewByLayerId = {}, this._layerInfosByLayerViewId = {}, this._activeLayerInfosByLayerViewId = {}, this._activeLayerInfosWithNoParent = new j(), this.activeLayerInfos = new c3(), this.basemapLegendVisible = false, this.groundLegendVisible = false, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.layerInfos = [], this.view = null;
  }
  initialize() {
    this._handles.add(l3(() => this.view, () => this._viewHandles(), h), h4.view), this._handles.add(s4(() => this._refresh()));
  }
  destroy() {
    this._destroyViewActiveLayerInfos(), this._handles.destroy(), this._handles = null, this.view = null;
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  _viewHandles() {
    this._handles.remove(h4.state), this.view && this._handles.add(l3(() => this.state, () => this._stateHandles(), h), h4.state);
  }
  _stateHandles() {
    this._resetAll(), "ready" === this.state && this._watchPropertiesAndAllLayerViews();
  }
  _resetAll() {
    this._handles.remove([h4.allLayerViews, h4.legendProperties]), this._destroyViewActiveLayerInfos(), this.activeLayerInfos.removeAll();
  }
  _destroyViewActiveLayerInfos() {
    Object.keys(this._activeLayerInfosByLayerViewId).forEach(this._destroyViewActiveLayerInfo, this);
  }
  _destroyViewActiveLayerInfo(e6) {
    this._handles.remove(e6);
    const i9 = this._activeLayerInfosByLayerViewId[e6];
    delete this._activeLayerInfosByLayerViewId[e6], i9 && i9.parent && i9.parent.children.remove(i9);
  }
  _watchPropertiesAndAllLayerViews() {
    const { allLayerViews: e6 } = this.view;
    e6.length && this._refresh(), this._handles.add(e6.on("change", (e7) => this._allLayerViewsChangeHandle(e7)), h4.allLayerViews), this._handles.add(l3(() => [this.layerInfos, this.basemapLegendVisible, this.groundLegendVisible], () => this._propertiesChangeHandle()), h4.legendProperties);
  }
  _allLayerViewsChangeHandle(e6) {
    e6.removed.forEach((e7) => this._destroyViewActiveLayerInfo(e7.uid)), this._refresh();
  }
  _propertiesChangeHandle() {
    this._destroyViewActiveLayerInfos(), this._refresh();
  }
  _refresh() {
    this._layerInfosByLayerViewId = {}, this.activeLayerInfos.removeAll(), this._generateLayerViews().filter(this._filterLayerViewsByLayerInfos, this).filter(this._isLayerViewSupported, this).forEach(this._generateActiveLayerInfo, this), this._sortActiveLayerInfos(this.activeLayerInfos);
  }
  _sortActiveLayerInfos(e6) {
    if (e6.length < 2)
      return;
    const i9 = [];
    e6.forEach((r9) => {
      if (!r9.parent) {
        const t6 = r9.layer.parent, s10 = t6 && "uid" in t6 && this._layerViewByLayerId[t6.uid], a6 = s10 && this._activeLayerInfosByLayerViewId[s10.uid];
        a6 && e6.includes(a6) && (i9.push(r9), r9.parent = a6, a6.children.add(r9), this._sortActiveLayerInfos(a6.children));
      }
    }), e6.removeMany(i9);
    const r8 = {};
    this.view.allLayerViews.forEach((e7, i10) => r8[e7.layer.uid] = i10), e6.sort((e7, i10) => {
      const t6 = r8[e7.layer.uid] || 0;
      return (r8[i10.layer.uid] || 0) - t6;
    });
  }
  _generateLayerViews() {
    const e6 = [];
    return p4.filter(this._filterLayerViews, this).map(this.get, this).filter((e7) => null != e7).forEach(this._collectLayerViews("layerViews", e6)), e6;
  }
  _filterLayerViews(e6) {
    const i9 = !this.basemapLegendVisible && (e6 === _ || e6 === u7), r8 = !this.groundLegendVisible && e6 === f3;
    return !i9 && !r8;
  }
  _collectLayerViews(e6, i9) {
    const r8 = (t6) => (t6 && t6.forEach((t7) => {
      i9.push(t7), r8(t7[e6]);
    }), i9);
    return r8;
  }
  _filterLayerViewsByLayerInfos(e6) {
    const i9 = this.layerInfos;
    return !i9 || !i9.length || i9.some((i10) => this._hasLayerInfo(i10, e6));
  }
  _hasLayerInfo(e6, i9) {
    const r8 = this._isLayerUIDMatching(e6.layer, i9.layer.uid);
    return r8 && (this._layerInfosByLayerViewId[i9.uid] = e6), r8;
  }
  _isLayerUIDMatching(e6, i9) {
    return e6 && (e6.uid === i9 || this._hasLayerUID(e6.layers, i9));
  }
  _hasLayerUID(e6, i9) {
    return e6 && e6.some((e7) => this._isLayerUIDMatching(e7, i9));
  }
  _isLayerViewSupported(e6) {
    return !!L3.includes(e6.layer.declaredClass) && (this._layerViewByLayerId[e6.layer.uid] = e6, true);
  }
  _generateActiveLayerInfo(e6) {
    this._isLayerActive(e6) ? this._buildActiveLayerInfo(e6) : (this._handles.remove(e6.uid), this._handles.add(l3(() => [e6.legendEnabled, e6.layer.legendEnabled], () => this._layerActiveHandle(e6)), e6.uid));
  }
  _layerActiveHandle(e6) {
    this._isLayerActive(e6) && (this._handles.remove(e6.uid), this._buildActiveLayerInfo(e6));
  }
  _isLayerActive(e6) {
    return !this.respectLayerVisibility || e6.legendEnabled && e6.get("layer.legendEnabled");
  }
  _buildActiveLayerInfo(e6) {
    var _a;
    const i9 = e6.layer, r8 = e6.uid, t6 = this._layerInfosByLayerViewId[r8];
    let o5 = this._activeLayerInfosByLayerViewId[r8];
    if (!o5) {
      const s10 = t6 && void 0 !== t6.title && t6.layer.uid === i9.uid;
      o5 = new $e({ layer: i9, layerView: e6, title: s10 ? t6.title : i9.title, view: this.view, respectLayerVisibility: this.respectLayerVisibility, hideLayersNotInCurrentView: this.hideLayersNotInCurrentView, keepCacheOnDestroy: this.keepCacheOnDestroy, sublayerIds: t6 && t6.sublayerIds || [] }), this._activeLayerInfosByLayerViewId[r8] = o5;
    }
    const l10 = i9.parent && "uid" in i9.parent && this._layerViewByLayerId[(_a = i9.parent) == null ? void 0 : _a.uid];
    if (o5.parent = this._activeLayerInfosByLayerViewId[l10 == null ? void 0 : l10.uid], !this._handles.has(r8)) {
      const t7 = [l3(() => i9.title, (e7) => this._titleHandle(e7, o5)), l3(() => [i9.opacity, "renderer" in i9 && i9.renderer, "pointSymbol" in i9 && i9.pointSymbol, "lineSymbol" in i9 && i9.lineSymbol, "polygonSymbol" in i9 && i9.polygonSymbol], () => this._constructLegendElements(o5)), f(() => {
        var _a2;
        return true === ((_a2 = this.view) == null ? void 0 : _a2.stationary);
      }, () => this._scaleHandle(o5), h), l3(() => e6._effectiveRenderer, () => this._constructLegendElements(o5)), l3(() => "effect" in i9 && i9.effect, () => this._constructLegendElements(o5))];
      if (this.respectLayerVisibility) {
        const r9 = l3(() => e6.legendEnabled, (e7) => this._legendEnabledHandle(e7, o5)), a6 = l3(() => i9.legendEnabled, (e7) => this._legendEnabledHandle(e7, o5));
        t7.push(r9, a6);
      }
      this._handles.add(t7, r8);
    }
    o5.isScaleDriven || this._constructLegendElements(o5), this._addActiveLayerInfo(o5);
  }
  _titleHandle(e6, i9) {
    i9.title = e6, this._constructLegendElements(i9);
  }
  _legendEnabledHandle(e6, i9) {
    e6 ? this._addActiveLayerInfo(i9) : this._removeActiveLayerInfo(i9);
  }
  _scaleHandle(e6) {
    (e6.isScaleDriven || e6.hideLayersNotInCurrentView) && this._constructLegendElements(e6);
  }
  _addActiveLayerInfo(e6) {
    var _a;
    const { layerView: i9, layer: r8 } = e6;
    if (this._isLayerActive(i9) && !this.activeLayerInfos.includes(e6)) {
      const i10 = e6.parent;
      if (i10)
        i10.children.includes(e6) || i10.children.push(e6), this._sortActiveLayerInfos(i10.children);
      else {
        const i11 = (_a = this.layerInfos) == null ? void 0 : _a.some((e7) => e7.layer.uid === r8.uid);
        r8.parent && "uid" in r8.parent && !i11 ? this._activeLayerInfosWithNoParent.add(e6) : (this.activeLayerInfos.add(e6), this._sortActiveLayerInfos(this.activeLayerInfos));
      }
      if (this._activeLayerInfosWithNoParent.length) {
        const e7 = [];
        this._activeLayerInfosWithNoParent.forEach((i11) => {
          const r9 = i11.layer.parent, t6 = r9 && "uid" in r9 && this._layerViewByLayerId[r9 == null ? void 0 : r9.uid], s10 = this._activeLayerInfosByLayerViewId[t6 == null ? void 0 : t6.uid];
          s10 && (e7.push(i11), i11.parent = s10);
        }), e7.length && (this._activeLayerInfosWithNoParent.removeMany(e7), e7.forEach((e8) => this._addActiveLayerInfo(e8)));
      }
    }
  }
  _removeActiveLayerInfo(e6) {
    const i9 = e6.parent;
    i9 ? i9.children.remove(e6) : this.activeLayerInfos.remove(e6);
  }
  _constructLegendElements(e6) {
    var _a;
    const i9 = e6.layer;
    "featureCollections" in i9 && i9.featureCollections ? e6.buildLegendElementsForFeatureCollections(i9.featureCollections) : "featureReduction" in i9 && "binning" === ((_a = i9.featureReduction) == null ? void 0 : _a.type) && "renderer" in i9.featureReduction ? e6.buildLegendElementsForRenderer(i9.featureReduction.renderer) : "renderer" in i9 && i9.renderer ? e6.buildLegendElementsForRenderer(i9.renderer) : "url" in i9 && i9.url ? e6.buildLegendElementsForTools() : e6.children.forEach((e7) => this._constructLegendElements(e7));
  }
};
e([d({ type: c3 })], v3.prototype, "activeLayerInfos", void 0), e([d()], v3.prototype, "basemapLegendVisible", void 0), e([d()], v3.prototype, "groundLegendVisible", void 0), e([d()], v3.prototype, "hideLayersNotInCurrentView", void 0), e([d()], v3.prototype, "keepCacheOnDestroy", void 0), e([d()], v3.prototype, "respectLayerVisibility", void 0), e([d()], v3.prototype, "layerInfos", void 0), e([d({ readOnly: true })], v3.prototype, "state", null), e([d()], v3.prototype, "view", void 0), v3 = e([n("esri.widgets.Legend.LegendViewModel")], v3);
var I2 = v3;

// node_modules/@arcgis/core/widgets/Legend/styles/support/relationshipUtils.js
var u8 = "http://www.w3.org/2000/svg";
var b4 = { diamondContainer: "esri-relationship-ramp--diamond__container", diamondLeftCol: "esri-relationship-ramp--diamond__left-column", diamondRightCol: "esri-relationship-ramp--diamond__right-column", diamondMidCol: "esri-relationship-ramp--diamond__middle-column", diamondMidColLabel: "esri-relationship-ramp--diamond__middle-column--label", diamondMidColRamp: "esri-relationship-ramp--diamond__middle-column--ramp", squareTable: "esri-relationship-ramp--square__table", squareTableRow: "esri-relationship-ramp--square__table-row", squareTableCell: "esri-relationship-ramp--square__table-cell", squareTableLabel: "esri-relationship-ramp--square__table-label", squareTableLabelLeftBottom: "esri-relationship-ramp--square__table-label--left-bottom", squareTableLabelRightBottom: "esri-relationship-ramp--square__table-label--right-bottom", squareTableLabelLeftTop: "esri-relationship-ramp--square__table-label--left-top", squareTableLabelRightTop: "esri-relationship-ramp--square__table-label--right-top" };
function p5(e6, a6, r8, l10) {
  const { focus: t6, labels: s10 } = e6, i9 = !!t6, o5 = c4(e6, a6, r8, l10), u11 = { justifyContent: "center" }, p7 = f2();
  return i9 ? n2("div", { class: b4.diamondContainer, styles: u11 }, n2("div", { class: b4.diamondLeftCol }, p7 ? s10.right : s10.left), n2("div", { class: b4.diamondMidCol }, n2("div", { class: b4.diamondMidColLabel }, s10.top), o5, n2("div", { class: b4.diamondMidColLabel }, s10.bottom)), n2("div", { class: b4.diamondRightCol }, p7 ? s10.left : s10.right)) : n2("div", { class: b4.squareTable }, n2("div", { class: b4.squareTableRow }, n2("div", { class: p(b4.squareTableCell, b4.squareTableLabel, b4.squareTableLabelRightBottom) }, p7 ? s10.top : s10.left), n2("div", { class: b4.squareTableCell }), n2("div", { class: p(b4.squareTableCell, b4.squareTableLabel, b4.squareTableLabelLeftBottom) }, p7 ? s10.left : s10.top)), n2("div", { class: b4.squareTableRow }, n2("div", { class: b4.squareTableCell }), o5, n2("div", { class: b4.squareTableCell })), n2("div", { class: b4.squareTableRow }, n2("div", { class: p(b4.squareTableCell, b4.squareTableLabel, b4.squareTableLabelRightTop) }, p7 ? s10.right : s10.bottom), n2("div", { class: b4.squareTableCell }), n2("div", { class: p(b4.squareTableCell, b4.squareTableLabel, b4.squareTableLabelLeftTop) }, p7 ? s10.bottom : s10.right)));
}
function h5(e6, a6, r8) {
  const l10 = `${r8}_arrowStart`, t6 = `${r8}_arrowEnd`, s10 = "left" === e6, i9 = { markerStart: null, markerEnd: null };
  switch (a6) {
    case "HL":
      s10 ? i9.markerStart = `url(#${t6})` : i9.markerEnd = `url(#${l10})`;
      break;
    case "LL":
      i9.markerStart = `url(#${t6})`;
      break;
    case "LH":
      s10 ? i9.markerEnd = `url(#${l10})` : i9.markerStart = `url(#${t6})`;
      break;
    default:
      i9.markerEnd = `url(#${l10})`;
  }
  return i9;
}
function c4(n8, d5, p7, c6, f6 = 60) {
  const { focus: q3, numClasses: k3, colors: T5, rotation: _3 } = n8, g4 = !!q3, L6 = Math.sqrt(f6 ** 2 + f6 ** 2) + (g4 ? 0 : 5), C3 = [], v5 = [], w4 = [], y6 = (f6 || 75) / k3;
  for (let s10 = 0; s10 < k3; s10++) {
    const i9 = s10 * y6;
    for (let o5 = 0; o5 < k3; o5++) {
      const n9 = o5 * y6, d6 = M(T5[s10][o5]), m7 = A(null), u11 = { type: "rect", x: n9, y: i9, width: y6, height: y6 };
      C3.push($(d6)), v5.push(v(u11, d6.fill, m7, null)), w4.push(T(u11));
    }
  }
  const x3 = 10, R3 = 15, $3 = 15, E5 = 10;
  let M3 = null;
  g4 || (M3 = "margin: -15px -15px -18px -15px");
  const S4 = h5("left", q3, d5), j7 = h5("right", q3, d5), B3 = E2(w4), H2 = V(B3, L6, L6, 0, false, _3, false), U3 = V(B3, L6, L6, 0, false, g4 ? -45 : null, false), W = { filter: q(c6), opacity: null == p7 ? null : `${p7}` };
  return n2("div", { styles: W, class: g4 ? b4.diamondMidColRamp : b4.squareTableCell }, n2("svg", { xmlns: u8, width: L6, height: L6, style: M3 }, n2("defs", null, n2("marker", { id: `${d5}_arrowStart`, markerWidth: "10", markerHeight: "10", refX: "5", refY: "5", markerUnits: "strokeWidth", orient: "auto" }, n2("polyline", { points: "0,0 5,5 0,10", fill: "none", stroke: "#555555", "stroke-width": "1" })), n2("marker", { id: `${d5}_arrowEnd`, markerWidth: "10", markerHeight: "10", refX: "0", refY: "5", markerUnits: "strokeWidth", orient: "auto" }, n2("polyline", { points: "5,0 0,5 5,10", fill: "none", stroke: "#555555", "stroke-width": "1" })), C3), n2("g", { transform: H2 }, v5), n2("g", { transform: U3 }, n2("line", { fill: "none", stroke: "#555555", "stroke-width": "1", "marker-start": S4.markerStart, "marker-end": S4.markerEnd, x1: -x3, y1: f6 - R3, x2: -x3, y2: R3 }), n2("line", { fill: "none", stroke: "#555555", "stroke-width": "1", "marker-start": j7.markerStart, "marker-end": j7.markerEnd, x1: $3, y1: f6 + E5, x2: f6 - $3, y2: f6 + E5 }))));
}

// node_modules/@arcgis/core/widgets/Legend/styles/support/univariateUtils.js
var n6 = i();
var l9 = 10;
var r6 = 20;
var s9 = 10;
var a5 = 20;
var c5 = { univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", colorRamp: "esri-legend__color-ramp" };
function f4(e6 = "vertical") {
  const t6 = "stroke:rgb(200, 200, 200);stroke-width:1";
  return "vertical" === e6 ? n2("svg", { height: "4", width: "10" }, n2("line", { x1: "0", y1: "2", x2: "10", y2: "2", style: t6 })) : n2("svg", { height: "10", width: "10" }, n2("line", { x1: "5", y1: "0", x2: "5", y2: "10", style: t6 }));
}
function p6(e6, t6 = "vertical") {
  const o5 = document.createElement("div");
  return o5.style.height = `${r6}px`, o5.className = c5.univariateAboveAndBelowSymbol, null != e6 && (o5.style.opacity = e6.toString()), n6.append(o5, f4.bind(null, t6)), o5;
}
function m5(t6, o5, i9 = "vertical", n8) {
  t6.infos.forEach((t7, l10) => {
    if (n8 && 2 === l10)
      t7.preview = p6(o5, i9);
    else {
      const o6 = u2(t7.size) + ("horizontal" === i9 ? a5 : s9), n9 = "div" === t7.preview.tagName.toLowerCase(), l11 = n9 ? t7.preview : document.createElement("div");
      l11.className = c5.univariateAboveAndBelowSymbol, "horizontal" === i9 ? l11.style.width = `${o6}px` : l11.style.height = `${o6}px`, n9 || l11.appendChild(t7.preview), t7.preview = l11;
    }
  });
}
function u9(t6, o5 = "classic") {
  const i9 = t6.infos;
  return "classic" === o5 ? (u2(i9[0].size) + s9) / 2 : (u2(i9[0].size) - u2(i9[i9.length - 1].size)) / 2;
}
function v4(e6, t6) {
  if (!e6)
    return null;
  const i9 = e6.infos.map((e7) => e7.color), n8 = g("full" === t6.type ? i9 : "above" === t6.type ? i9.slice(0, 3) : i9.slice(2, 5), { width: t6.width, height: t6.height, align: t6.rampAlignment, effectList: t6.effectList });
  return n8.className = c5.colorRamp, null != t6.opacity && (n8.style.opacity = t6.opacity.toString()), n8;
}
function h6(t6, o5, i9, n8 = "vertical") {
  let c6 = 0;
  const f6 = t6.infos, p7 = Math.floor(f6.length / 2), m7 = "full" === o5 || "above" === o5 ? 0 : p7, u11 = "full" === o5 || "below" === o5 ? f6.length - 1 : p7;
  for (let v5 = m7; v5 <= u11; v5++)
    if (i9 && v5 === p7)
      c6 += "horizontal" === n8 ? l9 : r6;
    else {
      c6 += u2(f6[v5].size) + ("horizontal" === n8 ? a5 : s9);
    }
  return Math.round(c6);
}
function y5(t6, o5, i9, n8 = "vertical") {
  const c6 = h6(t6, o5, i9, n8), f6 = t6.infos, p7 = Math.floor(f6.length / 2), m7 = "full" === o5 || "above" === o5 ? 0 : p7, u11 = "full" === o5 || "below" === o5 ? f6.length - 1 : p7, v5 = "full" === o5 ? f6[m7].size + f6[u11].size : "above" === o5 ? f6[m7].size : f6[u11].size, y6 = i9 ? "vertical" === n8 ? r6 : l9 : 0, d5 = "vertical" === n8 ? s9 * ("full" === o5 ? 2 : 1) : a5 * ("full" === o5 ? 2 : 1);
  return Math.round(c6 - (u2(v5) / 2 + y6 / 2 + d5 / 2));
}
function d4(e6, t6, o5 = "vertical") {
  const i9 = e6.infos;
  let n8 = i9.find(({ type: e7 }) => "size-ramp" === e7), l10 = i9.find(({ type: e7 }) => "color-ramp" === e7);
  return n8 && (n8 = { ...n8 }, n8.infos = [...n8.infos], m5(n8, t6, o5, true)), l10 && (l10 = { ...l10 }, l10.infos = [...l10.infos]), "horizontal" === o5 && (n8 == null ? void 0 : n8.infos.reverse(), l10 == null ? void 0 : l10.infos.reverse()), { sizeRampElement: n8, colorRampElement: l10 };
}
function b5(e6, t6 = "vertical") {
  const o5 = e6.infos;
  let i9 = o5.find(({ type: e7 }) => "size-ramp" === e7), n8 = o5.find(({ type: e7 }) => "color-ramp" === e7);
  return i9 && (i9 = { ...i9 }, i9.infos = [...i9.infos], m5(i9, null, t6, false)), n8 && (n8 = { ...n8 }, n8.infos = [...n8.infos]), "horizontal" === t6 && (i9 == null ? void 0 : i9.infos.reverse(), n8 == null ? void 0 : n8.infos.reverse()), { sizeRampElement: i9, colorRampElement: n8 };
}

// node_modules/@arcgis/core/widgets/Legend/support/styleUtils.js
function n7(e6, n8) {
  return n8;
}
function t5(e6) {
  const n8 = this;
  e6.appendChild(n8);
}
function r7(t6, r8, i9) {
  if (!r8)
    return;
  if ("string" == typeof r8 || "number" == typeof r8)
    return r8;
  if ("value" in r8 || "unit" in r8)
    return s5(t6.dotValue, r8);
  if ("colorName" in r8 || "bandName" in r8)
    return t6[r8.colorName] + ": " + (t6[r8.bandName] || r8.bandName);
  if ("showCount" in r8)
    return r8.showCount ? t6.clusterCountTitle : null;
  let l10 = null;
  return n7(r8, i9) ? l10 = r8.ratioPercentTotal ? "showRatioPercentTotal" : r8.ratioPercent ? "showRatioPercent" : r8.ratio ? "showRatio" : r8.normField ? "showNormField" : r8.field ? "showField" : null : o4(r8, i9) && (l10 = r8.normField ? "showNormField" : r8.normByPct ? "showNormPct" : r8.field ? "showField" : null), l10 ? s5("showField" === l10 ? "{field}" : t6[l10], { field: r8.field, normField: r8.normField }) : null;
}
function o4(e6, n8) {
  return !n8;
}
function i8(e6, n8) {
  return !!(n8 && "Stretched" === n8 && e6.version >= 10.3 && "esri.layers.ImageryLayer" === e6.declaredClass);
}

// node_modules/@arcgis/core/widgets/Legend/styles/Card.js
var R = { activated: "esri-legend--card__carousel-indicator--activated", base: "esri-legend--card", stacked: "esri-legend--stacked", carouselTitle: "esri-legend--card__carousel-title", indicator: "esri-legend--card__carousel-indicator", intervalSeparator: "esri-legend--card__interval-separator", imageryLayerStretchedImage: "esri-legend--card__imagery-layer-image--stretched", imageLabel: "esri-legend--card__image-label", layerCaption: "esri-legend--card__layer-caption", labelElement: "esri-legend--card__label-element", layerRow: "esri-legend--card__layer-row", labelCell: "esri-legend--card__label-cell", message: "esri-legend--card__message", rampLabel: "esri-legend--card__ramp-label", section: "esri-legend--card__section", relationshipSection: "esri-legend--card__relationship-section", serviceCaptionText: "esri-legend--card__service-caption-text", serviceContent: "esri-legend--card__service-content", service: "esri-legend--card__service", groupLayer: "esri-legend--card__group-layer", groupLayerChild: "esri-legend--card__group-layer-child", symbol: "esri-legend--card__symbol", sizeRampRow: "esri-legend--card__size-ramp-row", symbolRow: "esri-legend--card__symbol-row", symbolCell: "esri-legend--card__symbol-cell", indicatorContainer: "esri-legend--card__carousel-indicator-container", intervalSeparatorsContainer: "esri-legend--card__interval-separators-container", relationshipLabelContainer: "esri-legend--card__relationship-label-container", labelContainer: "esri-legend--card__label-container", serviceCaptionContainer: "esri-legend--card__service-caption-container", symbolContainer: "esri-legend--card__symbol-container", sizeRampContainer: "esri-legend--card__size-ramp-container", sizeRampPreview: "esri-legend--card__size-ramp-preview", pieChartRampPreview: "esri-legend--card__pie-chart-ramp-preview", rampContainer: "esri-legend__ramps", sizeRampHorizontal: "esri-legend__size-ramp--horizontal", rampLabelsContainer: "esri-legend__ramp-labels", layerInfo: "esri-legend__layer-cell esri-legend__layer-cell--info", univariateAboveAndBelowColorRamp: "esri-univariate-above-and-below-ramp__color--card", hidden: "esri-hidden" };
var z2 = 25;
var $2 = 25;
var I3 = 768;
var k2 = 100;
var A2;
!function(e6) {
  e6.Auto = "auto", e6.Stack = "stack", e6.SideBySide = "side-by-side";
}(A2 || (A2 = {}));
var N = "#ddd";
var j6 = window.devicePixelRatio;
function E4(e6) {
  if (e6) {
    if (e6.type.includes("3d")) {
      const t6 = e6.symbolLayers && e6.symbolLayers.length;
      if (!t6)
        return;
      const s10 = e6.symbolLayers.getItemAt(t6 - 1), i9 = s10.resource && s10.resource.primitive;
      return "circle" === i9 || "cross" === i9 || "kite" === i9 || "sphere" === i9 || "cube" === i9 || "diamond" === i9;
    }
    {
      const t6 = e6.style;
      return "circle" === t6 || "diamond" === t6 || "cross" === t6;
    }
  }
}
function F(e6) {
  if (e6) {
    if (e6.type.includes("3d")) {
      const t6 = e6.symbolLayers && e6.symbolLayers.length;
      if (!t6)
        return;
      const s10 = e6.symbolLayers.getItemAt(t6 - 1).get("resource.primitive");
      return "triangle" === s10 || "cone" === s10 || "tetrahedron" === s10;
    }
    return "triangle" === e6.style;
  }
}
var T4 = class extends O {
  constructor(e6, s10) {
    super(e6, s10), this._handles = new u(), this._hasIndicators = false, this._selectedSectionName = null, this._sectionNames = [], this._sectionMap = /* @__PURE__ */ new Map(), this.activeLayerInfos = null, this.headingLevel = 3, this.layout = A2.Stack, this.messages = null, this.messagesCommon = null, this.type = "card", this.view = null;
  }
  initialize() {
    this.own(l3(() => this.activeLayerInfos, (e6) => {
      this._handles.removeAll(), this._watchForSectionChanges(e6);
    }));
  }
  destroy() {
    this._handles.destroy(), this._handles = null;
  }
  render() {
    this._hasIndicators = this.layout === A2.Auto && this.view.container.clientWidth <= I3 || this.layout === A2.Stack;
    const e6 = this.activeLayerInfos, t6 = e6 && e6.toArray().map((e7) => this._renderLegendForLayer(e7)).filter((e7) => !!e7);
    this._hasIndicators ? this._selectedSectionName && this._sectionNames.includes(this._selectedSectionName) || (this._selectedSectionName = this._sectionNames && this._sectionNames[0]) : this._selectedSectionName = null;
    const s10 = this._sectionNames.length, i9 = this._sectionNames.map((e7, t7) => {
      const i10 = s5(this.messagesCommon.pagination.pageText, { index: t7 + 1, total: s10 });
      return n2("div", { key: e7, role: "tab", id: e7, "aria-label": i10, "aria-controls": `${e7}-panel`, "aria-selected": (this._selectedSectionName === e7).toString(), tabIndex: this._selectedSectionName === e7 ? 0 : -1, title: i10, onclick: this._selectSection, onkeydown: this._focusSection, bind: this, class: this.classes(R.indicator, { [R.activated]: this._selectedSectionName === e7 }), "data-section-name": e7 });
    }), r8 = this._hasIndicators && s10 > 1 ? n2("div", { class: R.indicatorContainer, key: "carousel-navigation", role: "tablist" }, i9) : null, a6 = this._hasIndicators ? this._sectionMap.get(this._selectedSectionName) : t6 && t6.length ? t6 : null, o5 = { [R.stacked]: this._hasIndicators };
    return n2("div", { class: this.classes(R.base, o5) }, a6 || n2("div", { class: R.message }, this.messages.noLegend), r8);
  }
  _selectSection(e6) {
    const t6 = e6.target.getAttribute("data-section-name");
    t6 && (this._selectedSectionName = t6);
  }
  _focusSection(e6) {
    switch (e6.key) {
      case "ArrowLeft":
      case "ArrowRight":
        this._switchSectionOnArrowPress(e6);
        break;
      case "Enter":
      case " ":
        this._selectSection(e6);
    }
  }
  _switchSectionOnArrowPress(e6) {
    const t6 = e6.key, s10 = "ArrowLeft" === t6 ? -1 : 1, i9 = e6.target.getAttribute("data-section-name"), r8 = this._sectionNames.indexOf(i9), a6 = this._sectionNames;
    let o5 = null;
    -1 !== r8 && (a6[r8 + s10] ? o5 = document.getElementById(a6[r8 + s10]) : "ArrowLeft" === t6 ? o5 = document.getElementById(a6[a6.length - 1]) : "ArrowRight" === t6 && (o5 = document.getElementById(a6[0])), o5 && o5.focus());
  }
  _watchForSectionChanges(e6) {
    if (this._generateSectionNames(), e6) {
      e6.forEach((e7) => {
        const t7 = `activeLayerInfo-${e7.layer.uid}-version-change`;
        this._handles.remove(t7), this._watchForSectionChanges(e7.children), this._handles.add(l3(() => e7.version, () => this._generateSectionNames()), t7);
      });
      const t6 = "activeLayerInfos-collection-change";
      this._handles.remove(t6), this._handles.add(e6.on("change", () => this._watchForSectionChanges(e6)), t6);
    }
  }
  _generateSectionNames() {
    this._sectionNames.length = 0, this._selectedSectionName = null, this.activeLayerInfos && this.activeLayerInfos.forEach(this._generateSectionNamesForActiveLayerInfo, this);
  }
  _getSectionName(e6, t6, s10) {
    return `${this.id}${e6.uid}-type-${t6.type}-${s10}`;
  }
  _generateSectionNamesForActiveLayerInfo(e6) {
    e6.children.forEach(this._generateSectionNamesForActiveLayerInfo, this), e6.legendElements && e6.legendElements.forEach((t6, s10) => {
      this._sectionNames.push(this._getSectionName(e6.layer, t6, s10));
    });
  }
  _renderLegendForLayer(e6) {
    if (!e6.ready)
      return null;
    if (e6.children.length) {
      const t6 = e6.children.map((e7) => this._renderLegendForLayer(e7)).toArray();
      return n2("div", { key: e6.layer.uid, class: this.classes(R.service, R.groupLayer) }, n2("div", { class: R.serviceCaptionContainer }, e6.title), t6);
    }
    {
      const t6 = e6.legendElements;
      if (t6 && !t6.length)
        return null;
      const s10 = t6.some((e7) => "relationship-ramp" === e7.type), i9 = t6.map((t7, i10) => this._renderLegendForElement(t7, e6, i10, s10)).filter((e7) => !!e7);
      if (!i9.length)
        return null;
      const r8 = { [R.groupLayerChild]: !!e6.parent };
      return n2("div", { key: e6.layer.uid, class: this.classes(R.service, r8) }, n2("div", { class: R.serviceCaptionContainer }, n2("div", { class: R.serviceCaptionText }, e6.title)), n2("div", { class: R.serviceContent }, i9));
    }
  }
  _renderLegendForElement(e6, t6, s10, i9 = false) {
    const r8 = "color-ramp" === e6.type, a6 = "opacity-ramp" === e6.type, o5 = "size-ramp" === e6.type, l10 = t6.layer;
    let n8 = null;
    if ("string" == typeof e6.title)
      n8 = e6.title;
    else if (e6.title) {
      const t7 = e6.title, s11 = r7(this.messages, t7, r8 || a6);
      n8 = t7.title ? `${t7.title} (${s11})` : s11;
    }
    const d5 = this._getSectionName(l10, e6, s10), p7 = this._hasIndicators ? n2("div", null, n2(n3, { level: this.headingLevel, class: R.carouselTitle }, t6.title), n2(n3, { level: l4(this.headingLevel), class: R.layerCaption }, n8)) : n8 ? n2(n3, { level: this.headingLevel, class: R.layerCaption }, n8) : null, m7 = t6.effectList;
    let h7 = null;
    if ("symbol-table" === e6.type) {
      const s11 = e6.infos.map((s12, i10) => this._renderLegendForElementInfo(s12, t6, e6.legendType, i10)).filter((e7) => !!e7);
      if (s11.length) {
        const e7 = s11[0].properties.classes && s11[0].properties.classes[R.symbolRow], t7 = { [R.labelContainer]: !e7 && !i9, [R.relationshipLabelContainer]: i9 };
        h7 = n2("div", { class: this.classes(t7) }, s11);
      }
    } else
      "color-ramp" === e6.type || "opacity-ramp" === e6.type || "heatmap-ramp" === e6.type ? h7 = this._renderLegendForRamp(e6, l10.opacity, m7) : o5 ? h7 = this._renderSizeRamp(e6, l10.opacity) : "pie-chart-ramp" === e6.type ? h7 = this._renderPieChartRamp(e6) : "relationship-ramp" === e6.type ? h7 = p5(e6, this.id, l10.opacity, m7) : "univariate-above-and-below-ramp" === e6.type ? h7 = this._renderUnivariateAboveAndBelowRamp(e6, l10.opacity, m7) : "univariate-color-size-ramp" === e6.type && (h7 = this._renderUnivariateColorSizeRamp(e6, l10.opacity, m7));
    if (!h7)
      return null;
    const y6 = n2("div", { key: d5, class: R.section, id: `${d5}-panel`, role: "tabpanel", "aria-labelledby": d5, tabIndex: 0 }, [p7, h7]);
    return this._sectionMap.set(d5, y6), y6;
  }
  _renderPieChartRamp(e6) {
    return n2("div", { class: R.pieChartRampPreview, bind: e6.preview, afterCreate: t5 });
  }
  _renderUnivariateAboveAndBelowRamp(e6, t6, s10) {
    const { sizeRampElement: i9, colorRampElement: r8 } = d4(e6, t6, "horizontal");
    if (!i9)
      return null;
    const a6 = h6(i9, "full", true, "horizontal"), o5 = y5(i9, "above", true, "horizontal"), l10 = y5(i9, "below", true, "horizontal"), n8 = 12, c6 = v4(r8, { width: o5, height: n8, rampAlignment: "horizontal", opacity: t6, type: "above", effectList: s10 }), g4 = v4(r8, { width: l10, height: n8, rampAlignment: "horizontal", opacity: t6, type: "below", effectList: s10 }), _3 = u9(i9, "card"), u11 = i9.infos.map((e7) => e7.label), f6 = u11.length - 1, b6 = u11.map((e7, t7) => 0 === t7 || t7 === f6 ? n2("div", { key: t7 }, e7) : null), w4 = { display: "flex", flexDirection: "column" }, L6 = { display: "flex", flexDirection: "row" }, S4 = { marginTop: "3px", display: "flex" };
    f2(this.container) ? S4.marginRight = `${_3}px` : S4.marginLeft = `${_3}px`;
    const z3 = { width: `${a6}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n2("div", { class: R.layerRow, key: "size-ramp-preview", styles: w4 }, n2("div", { class: this.classes(R.symbolContainer, R.sizeRampHorizontal), styles: L6 }, i9.infos.map((e7, t7) => n2("div", { key: t7, class: R.symbol, bind: e7.preview, afterCreate: t5 }))), c6 ? n2("div", { class: R.univariateAboveAndBelowColorRamp, styles: S4, key: "color-ramp-preview" }, n2("div", { bind: c6, afterCreate: t5 }), n2("div", { bind: g4, afterCreate: t5 })) : null, n2("div", { class: R.layerInfo }, n2("div", { class: R.rampLabelsContainer, styles: z3 }, b6)));
  }
  _renderUnivariateColorSizeRamp(e6, t6, s10) {
    const { sizeRampElement: i9, colorRampElement: r8 } = b5(e6, "horizontal");
    if (!i9)
      return null;
    const a6 = h6(i9, "full", false, "horizontal"), o5 = y5(i9, "full", false, "horizontal"), l10 = v4(r8, { width: o5, height: 12, rampAlignment: "horizontal", opacity: t6, type: "full", effectList: s10 }), n8 = u9(i9, "card"), c6 = i9.infos.length - 1, d5 = i9.infos.map((e7, t7) => 0 === t7 || t7 === c6 ? n2("div", { key: t7 }, e7.label) : null), _3 = { display: "flex", flexDirection: "column" }, u11 = { display: "flex", flexDirection: "row" }, f6 = { marginTop: "3px", display: "flex" };
    f2(this.container) ? f6.marginRight = `${n8}px` : f6.marginLeft = `${n8}px`;
    const b6 = { width: `${a6}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n2("div", { class: R.layerRow, key: "size-ramp-preview", styles: _3 }, n2("div", { class: this.classes(R.symbolContainer, R.sizeRampHorizontal), styles: u11 }, i9.infos.map((e7, t7) => n2("div", { key: t7, class: R.symbol, bind: e7.preview, afterCreate: t5 }))), n2("div", { class: R.univariateAboveAndBelowColorRamp, styles: f6, key: "color-ramp-preview" }, n2("div", { bind: l10, afterCreate: t5 })), n2("div", { class: R.layerInfo }, n2("div", { class: R.rampLabelsContainer, styles: b6 }, d5)));
  }
  _renderLegendForElementInfo(e6, t6, s10, i9) {
    var _a;
    const r8 = t6.layer;
    if (e6.type)
      return this._renderLegendForElement(e6, t6, i9);
    const a6 = i8(r8, s10);
    if (e6.preview) {
      if (!e6.symbol || !e6.symbol.type.includes("simple-fill")) {
        if (!e6.label)
          return n2("div", { key: i9, bind: e6.preview, afterCreate: t5 });
        const t7 = { [R.symbolCell]: this._hasIndicators };
        return n2("div", { key: i9, class: this.classes(R.layerRow, { [R.symbolRow]: this._hasIndicators }) }, n2("div", { class: this.classes(t7), bind: e6.preview, afterCreate: t5 }), n2("div", { class: this.classes(R.imageLabel, { [R.labelCell]: this._hasIndicators }) }, r7(this.messages, e6.label, false) || ""));
      }
      let s11 = 255, a7 = 255, o5 = 255, n8 = 0, c6 = 255, d5 = 255, p7 = 255, m7 = 0;
      const h7 = e6.symbol.color && e6.symbol.color.a, y6 = e6.symbol.outline && e6.symbol.outline.color && e6.symbol.outline.color.a;
      h7 && (s11 = e6.symbol.color.r, a7 = e6.symbol.color.g, o5 = e6.symbol.color.b, n8 = e6.symbol.color.a * r8.opacity), y6 && (c6 = e6.symbol.outline.color.r, d5 = e6.symbol.outline.color.g, p7 = e6.symbol.outline.color.b, m7 = e6.symbol.outline.color.a * r8.opacity);
      const g4 = ((_a = e6.symbol.color) == null ? void 0 : _a.isBright) ?? true, u11 = g4 ? "rgba(255, 255, 255, .6)" : "rgba(0, 0, 0, .6)", f6 = { background: h7 ? `rgba(${s11}, ${a7}, ${o5}, ${n8})` : "none", color: g4 ? "black" : "white", textShadow: `-1px -1px 0 ${u11},
                                              1px -1px 0 ${u11},
                                              -1px 1px 0 ${u11},
                                              1px 1px 0 ${u11}`, border: y6 ? `1px solid rgba(${c6}, ${d5}, ${p7}, ${m7})` : "none", filter: q(t6.effectList) };
      return n2("div", { key: i9, class: R.layerRow }, n2("div", { class: R.labelElement, styles: f6 }, " ", e6.label, " "));
    }
    if (e6.src) {
      const t7 = this._renderImage(e6, r8, a6);
      return n2("div", { key: i9, class: R.layerRow }, t7, n2("div", { class: R.imageLabel }, e6.label || ""));
    }
  }
  _renderImage(e6, t6, s10) {
    const { label: i9, src: r8, opacity: a6 } = e6, o5 = { [R.imageryLayerStretchedImage]: s10, [R.symbol]: !s10 }, l10 = { opacity: `${null != a6 ? a6 : t6.opacity}` };
    return n2("img", { alt: r7(this.messages, i9, false), src: r8, border: 0, width: e6.width, height: e6.height, class: this.classes(o5), styles: l10 });
  }
  _renderSizeRampLines(e6) {
    const t6 = e6.infos, s10 = t6[0], r8 = t6[t6.length - 1], a6 = s10.symbol, o5 = this._hasIndicators, l10 = u2(s10.size + s10.outlineSize) * j6, n8 = u2(r8.size + r8.outlineSize) * j6, c6 = o5 ? l10 : l10 + 50 * j6, d5 = o5 ? l10 / 2 + 50 * j6 : l10, p7 = F(a6), m7 = E4(a6), h7 = document.createElement("canvas");
    h7.width = c6, h7.height = d5, h7.style.width = h7.width / j6 + "px", h7.style.height = h7.height / j6 + "px";
    const y6 = h7.getContext("2d");
    if (o5) {
      y6.beginPath();
      const e7 = 0, t7 = 0, s11 = c6 / 2 - n8 / 2, i9 = d5;
      y6.moveTo(e7, t7), y6.lineTo(s11, i9);
      const r9 = c6, a7 = 0, o6 = c6 / 2 + n8 / 2, l11 = d5;
      y6.moveTo(r9, a7), y6.lineTo(o6, l11);
    } else {
      y6.beginPath();
      const e7 = 0, t7 = d5 / 2 - n8 / 2, s11 = c6, i9 = 0;
      y6.moveTo(e7, t7), y6.lineTo(s11, i9);
      const r9 = 0, a7 = d5 / 2 + n8 / 2, o6 = c6, l11 = d5;
      y6.moveTo(r9, a7), y6.lineTo(o6, l11);
    }
    return y6.strokeStyle = N, y6.stroke(), n2("div", { bind: h7, afterCreate: t5, styles: o5 ? { display: "flex", marginTop: `-${p7 ? 0 : m7 ? l10 / 2 : 0}px`, marginBottom: `-${p7 ? n8 : m7 ? n8 / 2 : 0}px` } : { display: "flex", marginRight: `-${p7 ? 0 : m7 ? l10 / 2 : 0}px`, marginLeft: `-${p7 ? 0 : m7 ? n8 / 2 : 0}px` } });
  }
  _renderSizeRamp(e6, t6) {
    const s10 = e6.infos, i9 = s10[0].label, r8 = s10[s10.length - 1].label;
    let a6 = s10[0].preview, o5 = s10[s10.length - 1].preview;
    const l10 = this._hasIndicators, n8 = { "flex-direction": l10 ? "column" : "row-reverse" };
    a6 && (a6 = a6.cloneNode(true), a6.style.display = "flex"), o5 && (o5 = o5.cloneNode(true), o5.style.display = "flex");
    const c6 = { opacity: null != t6 ? `${t6}` : "" };
    return n2("div", { class: this.classes(R.layerRow, { [R.sizeRampRow]: l10 }) }, n2("div", { class: R.rampLabel }, l10 ? i9 : r8), n2("div", { class: R.sizeRampContainer, styles: n8 }, n2("div", { bind: a6, afterCreate: t5, class: R.sizeRampPreview, styles: c6 }), this._renderSizeRampLines(e6), n2("div", { bind: o5, afterCreate: t5, class: R.sizeRampContainer, styles: c6 })), n2("div", { class: R.rampLabel }, l10 ? r8 : i9));
  }
  _renderLegendForRamp(e6, t6, s10) {
    const i9 = e6.infos, r8 = "heatmap-ramp" === e6.type, a6 = i9.length - 1, n8 = $2, c6 = a6 > 2 && !r8 ? z2 * a6 : k2, d5 = c6 + 20, p7 = 10, m7 = i9.slice(0).reverse();
    m7.forEach((e7, t7) => {
      e7.offset = r8 ? e7.ratio : t7 / a6;
    });
    const h7 = m7.length - 1, y6 = m7.length % 2 != 0 && m7[m7.length / 2 | 0], g4 = y6 && n2("div", { class: R.intervalSeparatorsContainer }, n2("div", { class: R.intervalSeparator }, "|"), n2("div", { class: R.rampLabel }, y6.label)), _3 = i9[i9.length - 1].label, v5 = i9[0].label, u11 = [[{ shape: { type: "path", path: `M0 ${n8 / 2} L${p7} 0 L${p7} ${n8} Z` }, fill: m7[0].color, stroke: { width: 0 } }, { shape: { type: "rect", x: p7, y: 0, width: c6, height: n8 }, fill: { type: "linear", x1: p7, y1: 0, x2: c6 + p7, y2: 0, colors: m7 }, stroke: { width: 0 } }, { shape: { type: "path", path: `M${c6 + p7} 0 L${d5} ${n8 / 2} L${c6 + p7} ${n8} Z` }, fill: m7[h7].color, stroke: { width: 0 } }]], f6 = D(u11, d5, n8), { messages: b6 } = this, w4 = { filter: q(s10), opacity: null == t6 ? null : `${t6}` }, L6 = { justifyContent: "center" };
    return n2("div", { class: R.layerRow, styles: L6 }, n2("div", { class: R.rampLabel }, r8 ? b6[_3] : _3), n2("div", { class: R.symbolContainer }, n2("div", { styles: w4 }, f6), g4), n2("div", { class: R.rampLabel }, r8 ? b6[v5] : v5));
  }
};
e([d()], T4.prototype, "activeLayerInfos", void 0), e([d()], T4.prototype, "headingLevel", void 0), e([d()], T4.prototype, "layout", void 0), e([d(), e3("esri/widgets/Legend/t9n/Legend")], T4.prototype, "messages", void 0), e([d(), e3("esri/t9n/common")], T4.prototype, "messagesCommon", void 0), e([d({ readOnly: true })], T4.prototype, "type", void 0), e([d()], T4.prototype, "view", void 0), e([t()], T4.prototype, "_selectSection", null), T4 = e([n("esri.widgets.Legend.styles.Card")], T4);
var B2 = T4;

// node_modules/@arcgis/core/widgets/Legend/styles/Classic.js
var u10 = { service: "esri-legend__service", label: "esri-legend__service-label", layer: "esri-legend__layer", groupLayer: "esri-legend__group-layer", groupLayerChild: "esri-legend__group-layer-child", layerTable: "esri-legend__layer-table", layerTableSizeRamp: "esri-legend__layer-table--size-ramp", layerChildTable: "esri-legend__layer-child-table", layerCaption: "esri-legend__layer-caption", layerBody: "esri-legend__layer-body", layerRow: "esri-legend__layer-row", layerCell: "esri-legend__layer-cell", layerInfo: "esri-legend__layer-cell esri-legend__layer-cell--info", imageryLayerStretchedImage: "esri-legend__imagery-layer-image--stretched", imageryLayerCellStretched: "esri-legend__imagery-layer-cell--stretched", imageryLayerInfoStretched: "esri-legend__imagery-layer-info--stretched", symbolContainer: "esri-legend__layer-cell esri-legend__layer-cell--symbols", symbol: "esri-legend__symbol", rampContainer: "esri-legend__ramps", sizeRamp: "esri-legend__size-ramp", colorRamp: "esri-legend__color-ramp", opacityRamp: "esri-legend__opacity-ramp", borderlessRamp: "esri-legend__borderless-ramp", rampTick: "esri-legend__ramp-tick", rampFirstTick: "esri-legend__ramp-tick-first", rampLastTick: "esri-legend__ramp-tick-last", rampLabelsContainer: "esri-legend__ramp-labels", rampLabel: "esri-legend__ramp-label", univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", univariateAboveAndBelowLabel: "esri-univariate-above-and-below-ramp__label", message: "esri-legend__message", header: "esri-widget__heading", hidden: "esri-hidden" };
var _2 = "esri-legend__";
var f5 = 24;
var L4 = { display: "flex", alignItems: "flex-start" };
var w3 = { marginLeft: "3px" };
var C2 = { display: "table-cell", verticalAlign: "middle" };
var R2 = class extends O {
  constructor(e6, r8) {
    super(e6, r8), this.activeLayerInfos = null, this.headingLevel = 3, this.messages = null, this.type = "classic";
  }
  render() {
    const e6 = this.activeLayerInfos, r8 = e6 && e6.toArray().map((e7) => this._renderLegendForLayer(e7)).filter((e7) => !!e7);
    return n2("div", null, r8 && r8.length ? r8 : n2("div", { class: u10.message }, this.messages.noLegend));
  }
  _renderLegendForLayer(e6) {
    if (!e6.ready)
      return null;
    const r8 = !!e6.children.length, a6 = `${_2}${e6.layer.uid}-version-${e6.version}`, l10 = e6.title ? n3({ level: this.headingLevel, class: this.classes(u10.header, u10.label) }, e6.title) : null;
    if (r8) {
      const r9 = e6.children.map((e7) => this._renderLegendForLayer(e7)).toArray();
      return n2("div", { key: a6, class: this.classes(u10.service, u10.groupLayer) }, l10, r9);
    }
    {
      const r9 = e6.legendElements;
      if (r9 && !r9.length)
        return null;
      const s10 = r9.map((r10) => this._renderLegendForElement(r10, e6.layer, e6.effectList)).filter((e7) => !!e7);
      if (!s10.length)
        return null;
      const t6 = { [u10.groupLayerChild]: !!e6.parent };
      return n2("div", { key: a6, class: this.classes(u10.service, t6), tabIndex: 0 }, l10, n2("div", { class: u10.layer }, s10));
    }
  }
  _renderLegendForElement(e6, r8, a6, l10) {
    const t6 = "color-ramp" === e6.type, i9 = "opacity-ramp" === e6.type, n8 = "size-ramp" === e6.type;
    let o5 = null;
    if ("symbol-table" === e6.type || n8) {
      const l11 = e6.infos.map((l12) => this._renderLegendForElementInfo(l12, r8, a6, n8, e6.legendType)).filter((e7) => !!e7);
      l11.length && (o5 = n2("div", { class: u10.layerBody }, l11));
    } else
      "color-ramp" === e6.type || "opacity-ramp" === e6.type || "heatmap-ramp" === e6.type || "stretch-ramp" === e6.type ? o5 = this._renderLegendForRamp(e6, r8.opacity) : "relationship-ramp" === e6.type ? o5 = p5(e6, this.id, r8.opacity, a6) : "pie-chart-ramp" === e6.type ? o5 = this._renderPieChartRamp(e6) : "univariate-above-and-below-ramp" === e6.type ? o5 = this._renderUnivariateAboveAndBelowRamp(e6, r8.opacity, a6) : "univariate-color-size-ramp" === e6.type && (o5 = this._renderUnivariateColorSizeRamp(e6, r8.opacity, a6));
    if (!o5)
      return null;
    const p7 = e6.title;
    let y6 = null;
    if ("string" == typeof p7)
      y6 = p7;
    else if (p7) {
      const e7 = r7(this.messages, p7, t6 || i9);
      y6 = o4(p7, t6 || i9) && p7.title ? `${p7.title} (${e7})` : e7;
    }
    const c6 = l10 ? u10.layerChildTable : u10.layerTable, g4 = y6 ? n2("div", { class: u10.layerCaption }, y6) : null, v5 = { [u10.layerTableSizeRamp]: n8 || !l10 };
    return n2("div", { class: this.classes(c6, v5) }, g4, o5);
  }
  _renderPieChartRamp(e6) {
    return n2("div", { bind: e6.preview, afterCreate: t5 });
  }
  _renderUnivariateAboveAndBelowRamp(e6, r8, a6) {
    const { sizeRampElement: l10, colorRampElement: s10 } = d4(e6, r8);
    if (!l10)
      return null;
    const p7 = y5(l10, "above", true), d5 = y5(l10, "below", true), m7 = 12, c6 = v4(s10, { width: m7, height: p7, rampAlignment: "vertical", opacity: r8, type: "above", effectList: a6 }), g4 = v4(s10, { width: m7, height: d5, rampAlignment: "vertical", opacity: r8, type: "below", effectList: a6 }), v5 = u9(l10), b6 = l10.infos.map((e7) => e7.label), _3 = b6.map((e7, r9) => {
      const a7 = 2 === r9;
      return 0 === r9 ? n2("div", { key: r9, class: e7 ? c6 ? u10.univariateAboveAndBelowLabel : u10.rampLabel : null }, e7) : a7 ? n2("div", null) : null;
    }), f6 = b6.length - 1, R3 = Math.floor(b6.length / 2), A4 = b6.map((e7, r9) => r9 === R3 || r9 === f6 ? n2("div", { key: r9, class: e7 ? c6 ? u10.univariateAboveAndBelowLabel : u10.rampLabel : null }, e7) : null), S4 = { display: "table-cell", verticalAlign: "middle" }, I4 = { marginTop: `${v5}px` }, j7 = { height: `${p7}px` }, k3 = { height: `${d5}px` };
    return n2("div", { key: "univariate-above-and-below-ramp-preview", styles: L4 }, n2("div", { class: u10.layerBody }, l10.infos.map((e7, r9) => n2("div", { class: this.classes(u10.layerRow, u10.sizeRamp) }, n2("div", { class: u10.symbol, styles: S4, bind: e7.preview, afterCreate: t5 }), c6 || r9 % 2 != 0 ? null : n2("div", { class: u10.layerInfo }, b6[r9])))), c6 ? n2("div", { styles: I4, key: "color-ramp-preview" }, n2("div", { styles: w3 }, n2("div", { styles: C2 }, n2("div", { class: u10.rampContainer, bind: c6, afterCreate: t5 })), n2("div", { styles: C2 }, n2("div", { class: u10.rampLabelsContainer, styles: j7 }, _3))), n2("div", { styles: w3 }, n2("div", { styles: C2 }, n2("div", { class: u10.rampContainer, bind: g4, afterCreate: t5 })), n2("div", { styles: C2 }, n2("div", { class: u10.rampLabelsContainer, styles: k3 }, A4)))) : null);
  }
  _renderUnivariateColorSizeRamp(e6, r8, a6) {
    const { sizeRampElement: l10, colorRampElement: s10 } = b5(e6);
    if (!l10)
      return null;
    const t6 = u9(l10), d5 = 12, m7 = y5(l10, "full", false), c6 = v4(s10, { width: d5, height: m7, rampAlignment: "vertical", opacity: r8, type: "full", effectList: a6 }), g4 = l10.infos.length - 1, v5 = l10.infos.map((e7, r9) => 0 === r9 || r9 === g4 ? n2("div", { key: r9, class: e7.label ? s10 ? u10.univariateAboveAndBelowLabel : u10.rampLabel : null }, e7.label) : null), b6 = { display: "table-cell", verticalAlign: "middle" }, _3 = { marginTop: `${t6}px` }, f6 = { height: `${m7}px` };
    return n2("div", { key: "univariate-above-and-below-ramp-preview", styles: L4 }, n2("div", { class: u10.layerBody }, l10.infos.map((e7) => n2("div", { class: this.classes(u10.layerRow, u10.sizeRamp) }, n2("div", { class: u10.symbol, styles: b6, bind: e7.preview, afterCreate: t5 })))), n2("div", { styles: _3, key: "color-ramp-preview" }, n2("div", { styles: w3 }, n2("div", { styles: C2 }, n2("div", { class: u10.rampContainer, bind: c6, afterCreate: t5 })), n2("div", { styles: C2 }, n2("div", { class: u10.rampLabelsContainer, styles: f6 }, v5)))));
  }
  _renderLegendForRamp(e6, r8) {
    const a6 = e6.infos, l10 = "opacity-ramp" === e6.type, s10 = "heatmap-ramp" === e6.type, t6 = "stretch-ramp" === e6.type, i9 = e6.preview, n8 = l10 ? u10.opacityRamp : "";
    i9.className = `${u10.colorRamp} ${n8}`, null != r8 && (i9.style.opacity = r8.toString());
    const o5 = a6.map((e7) => n2("div", { class: e7.label ? u10.rampLabel : null }, s10 ? this.messages[e7.label] || e7.label : t6 ? this._getStretchStopLabel(e7) : e7.label)), p7 = { width: `${f5}px` }, d5 = { height: i9.style.height };
    return n2("div", { class: u10.layerRow }, n2("div", { class: u10.symbolContainer, styles: p7 }, n2("div", { class: u10.rampContainer, bind: i9, afterCreate: t5 })), n2("div", { class: u10.layerInfo }, n2("div", { class: u10.rampLabelsContainer, styles: d5 }, o5)));
  }
  _getStretchStopLabel(e6) {
    return e6.label ? this.messages[e6.label] + ": " + ("string" == typeof e6.value ? e6.value : m(e6.value, { style: "decimal", notation: e6.value.toString().includes("e") ? "scientific" : "standard" })) : "";
  }
  _renderLegendForElementInfo(e6, r8, a6, l10, s10) {
    if (e6.type)
      return this._renderLegendForElement(e6, r8, a6, true);
    let t6 = null;
    const i9 = i8(r8, s10);
    if (e6.preview ? t6 = n2("div", { class: u10.symbol, bind: e6.preview, afterCreate: t5 }) : e6.src && (t6 = this._renderImage(e6, r8, i9)), !t6)
      return null;
    const n8 = { [u10.imageryLayerInfoStretched]: i9 }, o5 = { [u10.imageryLayerInfoStretched]: i9, [u10.sizeRamp]: !i9 && l10 };
    return n2("div", { class: u10.layerRow }, n2("div", { class: this.classes(u10.symbolContainer, o5) }, t6), n2("div", { class: this.classes(u10.layerInfo, n8) }, r7(this.messages, e6.label, false) || ""));
  }
  _renderImage(e6, r8, a6) {
    const { label: l10, src: s10, opacity: t6 } = e6, i9 = { [u10.imageryLayerStretchedImage]: a6, [u10.symbol]: !a6 }, n8 = { opacity: `${null != t6 ? t6 : r8.opacity}` };
    return n2("img", { alt: r7(this.messages, l10, false), src: s10, border: 0, width: e6.width, height: e6.height, class: this.classes(i9), styles: n8 });
  }
};
e([d()], R2.prototype, "activeLayerInfos", void 0), e([d()], R2.prototype, "headingLevel", void 0), e([d(), e3("esri/widgets/Legend/t9n/Legend")], R2.prototype, "messages", void 0), e([d({ readOnly: true })], R2.prototype, "type", void 0), R2 = e([n("esri.widgets.Legend.styles.Classic")], R2);
var A3 = R2;

// node_modules/@arcgis/core/widgets/Legend.js
var g3 = { base: "esri-legend", widget: "esri-widget", panel: "esri-widget--panel", widgetIcon: "esri-icon-layer-list" };
var m6 = class extends O {
  constructor(e6, t6) {
    super(e6, t6), this._handles = new u(), this.activeLayerInfos = null, this.basemapLegendVisible = false, this.groundLegendVisible = false, this.headingLevel = 3, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerVisibility = true, this.iconClass = g3.widgetIcon, this.label = void 0, this.layerInfos = null, this.messages = null, this.style = new A3(), this.view = null, this.viewModel = new I2();
  }
  initialize() {
    this.own([a(() => this.view, "resize", () => this.scheduleRender()), a(() => this.activeLayerInfos, "change", () => this._refreshActiveLayerInfos(this.activeLayerInfos)), l3(() => this.headingLevel, (e6) => {
      const { style: s10 } = this;
      s10 && (s10.headingLevel = e6);
    }), l3(() => this.style, (e6, s10) => {
      s10 && e6 !== s10 && s10.destroy(), e6 && (e6.activeLayerInfos = this.activeLayerInfos, "card" === e6.type && (e6.view = this.view), e6.headingLevel = this.headingLevel);
    }, h)]);
  }
  destroy() {
    this._handles = l(this._handles);
  }
  castStyle(e6) {
    if (e6 instanceof B2 || e6 instanceof A3)
      return e6;
    if ("string" == typeof e6)
      return "card" === e6 ? new B2() : new A3();
    if (e6 && "string" == typeof e6.type) {
      const s10 = { ...e6 };
      delete s10.type;
      return new ("card" === e6.type ? B2 : A3)(s10);
    }
    return new A3();
  }
  render() {
    return n2("div", { class: this.classes(g3.base, g3.widget, this.style instanceof A3 ? g3.panel : null) }, this.style.render());
  }
  _refreshActiveLayerInfos(e6) {
    this._handles.removeAll(), e6.forEach((e7) => this._renderOnActiveLayerInfoChange(e7)), this.scheduleRender();
  }
  _renderOnActiveLayerInfoChange(e6) {
    const s10 = l3(() => e6.version, () => this.scheduleRender());
    this._handles.add(s10, `version_${e6.layer.uid}`);
    const t6 = a(() => e6.children, "change", () => e6.children.forEach((e7) => this._renderOnActiveLayerInfoChange(e7)), h);
    this._handles.add(t6, `children_${e6.layer.uid}`), e6.children.forEach((e7) => this._renderOnActiveLayerInfoChange(e7));
  }
};
e([o("viewModel.activeLayerInfos")], m6.prototype, "activeLayerInfos", void 0), e([o("viewModel.basemapLegendVisible")], m6.prototype, "basemapLegendVisible", void 0), e([o("viewModel.groundLegendVisible")], m6.prototype, "groundLegendVisible", void 0), e([d()], m6.prototype, "headingLevel", void 0), e([o("viewModel.hideLayersNotInCurrentView")], m6.prototype, "hideLayersNotInCurrentView", void 0), e([o("viewModel.keepCacheOnDestroy")], m6.prototype, "keepCacheOnDestroy", void 0), e([o("viewModel.respectLayerVisibility")], m6.prototype, "respectLayerVisibility", void 0), e([d()], m6.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], m6.prototype, "label", void 0), e([o("viewModel.layerInfos")], m6.prototype, "layerInfos", void 0), e([d(), e3("esri/widgets/Legend/t9n/Legend")], m6.prototype, "messages", void 0), e([d()], m6.prototype, "style", void 0), e([s3("style")], m6.prototype, "castStyle", null), e([o("viewModel.view")], m6.prototype, "view", void 0), e([d()], m6.prototype, "viewModel", void 0), m6 = e([n("esri.widgets.Legend")], m6);
var L5 = m6;
export {
  L5 as default
};
//# sourceMappingURL=@arcgis_core_widgets_Legend.js.map
