import {
  a as a6,
  c,
  e as e2,
  f as f2,
  i,
  n,
  w
} from "./chunk-UQDLDM54.js";
import {
  a as a4
} from "./chunk-KVF4M6PZ.js";
import {
  l
} from "./chunk-Y7FSCP47.js";
import {
  a as a3,
  a2 as a5,
  e,
  s as s3
} from "./chunk-GVELBHGI.js";
import {
  Q
} from "./chunk-5N3FSR63.js";
import {
  t
} from "./chunk-YAAIZ67O.js";
import {
  d,
  f,
  g,
  k
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import {
  r,
  s
} from "./chunk-CVWDM4C7.js";
import {
  a,
  a2
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/core/workers/loaderConfig.js
var a7 = {};
function e3(s5, a10) {
  for (const e4 of s5)
    if (e4.name === a10.name)
      return;
  s5.push(a10);
}
function r2(s5) {
  var _a;
  const r3 = { async: s5.async, isDebug: s5.isDebug, locale: s5.locale, baseUrl: s5.baseUrl, has: { ...s5.has }, map: { ...s5.map }, packages: s5.packages && s5.packages.concat() || [], paths: { ...s5.paths } };
  return s5.hasOwnProperty("async") || (r3.async = true), s5.hasOwnProperty("isDebug") || (r3.isDebug = false), s5.baseUrl || (r3.baseUrl = a7.baseUrl), (_a = a7.packages) == null ? void 0 : _a.forEach((s6) => {
    e3(r3.packages, s6);
  }), r3;
}

// node_modules/@arcgis/core/core/workers/WorkerFallback.js
var n2 = class {
  constructor() {
    const e4 = document.createDocumentFragment();
    ["addEventListener", "dispatchEvent", "removeEventListener"].forEach((s5) => {
      this[s5] = (...r3) => e4[s5](...r3);
    });
  }
};
var a8 = class {
  constructor() {
    this._dispatcher = new n2(), this._workerPostMessage({ type: e2.HANDSHAKE });
  }
  terminate() {
  }
  get onmessage() {
    return this._onmessageHandler;
  }
  set onmessage(e4) {
    this._onmessageHandler && this.removeEventListener("message", this._onmessageHandler), this._onmessageHandler = e4, e4 && this.addEventListener("message", e4);
  }
  get onmessageerror() {
    return this._onmessageerrorHandler;
  }
  set onmessageerror(e4) {
    this._onmessageerrorHandler && this.removeEventListener("messageerror", this._onmessageerrorHandler), this._onmessageerrorHandler = e4, e4 && this.addEventListener("messageerror", e4);
  }
  get onerror() {
    return this._onerrorHandler;
  }
  set onerror(e4) {
    this._onerrorHandler && this.removeEventListener("error", this._onerrorHandler), this._onerrorHandler = e4, e4 && this.addEventListener("error", e4);
  }
  postMessage(s5) {
    t(() => {
      this._workerMessageHandler(new MessageEvent("message", { data: s5 }));
    });
  }
  dispatchEvent(e4) {
    return this._dispatcher.dispatchEvent(e4);
  }
  addEventListener(e4, s5, r3) {
    this._dispatcher.addEventListener(e4, s5, r3);
  }
  removeEventListener(e4, s5, r3) {
    this._dispatcher.removeEventListener(e4, s5, r3);
  }
  _workerPostMessage(s5) {
    t(() => {
      this.dispatchEvent(new MessageEvent("message", { data: s5 }));
    });
  }
  async _workerMessageHandler(e4) {
    const n3 = f2(e4);
    if (n3 && n3.type === e2.OPEN) {
      const { modulePath: e5, jobId: t2 } = n3;
      let a10 = await w.loadWorker(e5);
      a10 || (a10 = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        e5
      ));
      const o = w.connect(a10);
      this._workerPostMessage({ type: e2.OPENED, jobId: t2, data: o });
    }
  }
};

// node_modules/@arcgis/core/core/workers/workerFactory.js
var m = s.getLogger("esri.core.workers");
var { HANDSHAKE: p } = e2;
var g2 = 'let globalId=0;const outgoing=new Map,configuration=JSON.parse("{CONFIGURATION}");self.esriConfig=configuration.esriConfig;const workerPath=self.esriConfig.workers.workerPath,HANDSHAKE=0,OPEN=1,OPENED=2,RESPONSE=3,INVOKE=4,ABORT=5;function createAbortError(){const e=new Error("Aborted");return e.name="AbortError",e}function receiveMessage(e){return e&&e.data?"string"==typeof e.data?JSON.parse(e.data):e.data:null}function invokeStaticMessage(e,o,r){const t=r&&r.signal,n=globalId++;return new Promise(((r,i)=>{if(t){if(t.aborted)return i(createAbortError());t.addEventListener("abort",(()=>{outgoing.get(n)&&(outgoing.delete(n),self.postMessage({type:5,jobId:n}),i(createAbortError()))}))}outgoing.set(n,{resolve:r,reject:i}),self.postMessage({type:4,jobId:n,methodName:e,abortable:null!=t,data:o})}))}let workerRevisionChecked=!1;function checkWorkerRevision(e){if(!workerRevisionChecked&&e.kernelInfo){workerRevisionChecked=!0;const{revision:o,buildDate:r,version:t}=configuration.kernelInfo,{revision:n,buildDate:i,version:s}=e.kernelInfo;o!==n&&console.warn(`[esri.core.workers] Version mismatch detected between ArcGIS API for JavaScript and assets:\\nAPI version: ${t} [Date: ${r}, Revision: ${o.slice(0,8)}]\nAssets version: ${s} [Date: ${i}, Revision: ${n.slice(0,8)}]`)}}function messageHandler(e){const o=receiveMessage(e);if(!o)return;const r=o.jobId;switch(o.type){case 1:let e;function t(o){const t=e.connect(o);self.postMessage({type:2,jobId:r,data:t},[t])}"function"==typeof define&&define.amd?require([workerPath],(r=>{e=r.default||r,checkWorkerRevision(e),e.loadWorker(o.modulePath).then((e=>e||new Promise((e=>{require([o.modulePath],e)})))).then(t)})):"System"in self&&"function"==typeof System.import?System.import(workerPath).then((r=>(e=r.default,checkWorkerRevision(e),e.loadWorker(o.modulePath)))).then((e=>e||System.import(o.modulePath))).then(t):esriConfig.workers.useDynamicImport?import(workerPath).then((r=>{e=r.default||r,checkWorkerRevision(e),e.loadWorker(o.modulePath).then((e=>e||import(o.modulePath))).then(t)})):(self.RemoteClient||importScripts(workerPath),e=self.RemoteClient.default||self.RemoteClient,checkWorkerRevision(e),e.loadWorker(o.modulePath).then(t));break;case 3:if(outgoing.has(r)){const e=outgoing.get(r);outgoing.delete(r),o.error?e.reject(JSON.parse(o.error)):e.resolve(o.data)}}}self.dojoConfig=configuration.loaderConfig,esriConfig.workers.loaderUrl&&(self.importScripts(esriConfig.workers.loaderUrl),"function"==typeof require&&"function"==typeof require.config&&require.config(configuration.loaderConfig)),self.addEventListener("message",messageHandler),self.postMessage({type:0});';
var k2;
var h;
var w2 = "Failed to create Worker. Fallback to execute module in main thread";
async function y() {
  if (!a("esri-workers") || (a("mozilla"), 0))
    return b(new a8());
  if (!k2 && !h)
    try {
      const e5 = g2.replace('"{CONFIGURATION}"', `'${v()}'`);
      k2 = URL.createObjectURL(new Blob([e5], { type: "text/javascript" }));
    } catch (r3) {
      h = r3 || {};
    }
  let e4;
  if (k2)
    try {
      e4 = new Worker(k2, { name: "esri-worker-" + P++ });
    } catch (r3) {
      m.warn(w2, h), e4 = new a8();
    }
  else
    m.warn(w2, h), e4 = new a8();
  return b(e4);
}
async function b(e4) {
  return new Promise((r3) => {
    function o(s5) {
      const i2 = f2(s5);
      i2 && i2.type === p && (e4.removeEventListener("message", o), e4.removeEventListener("error", t2), r3(e4));
    }
    function t2(r4) {
      r4.preventDefault(), e4.removeEventListener("message", o), e4.removeEventListener("error", t2), m.warn("Failed to create Worker. Fallback to execute module in main thread", r4), (e4 = new a8()).addEventListener("message", o), e4.addEventListener("error", t2);
    }
    e4.addEventListener("message", o), e4.addEventListener("error", t2);
  });
}
function v() {
  let s5;
  if (null != r.default) {
    const e4 = { ...r };
    delete e4.default, s5 = JSON.parse(JSON.stringify(e4));
  } else
    s5 = JSON.parse(JSON.stringify(r));
  s5.assetsPath = Q(s5.assetsPath), s5.request.interceptors = [], s5.log.interceptors = [], s5.locale = l(), s5.has = { "esri-csp-restrictions": a("esri-csp-restrictions"), "esri-2d-debug": false, "esri-2d-update-debug": a("esri-2d-update-debug"), "esri-2d-query-centroid-enabled": a("esri-2d-query-centroid-enabled"), "featurelayer-pbf": a("featurelayer-pbf"), "featurelayer-simplify-thresholds": a("featurelayer-simplify-thresholds"), "featurelayer-simplify-payload-size-factors": a("featurelayer-simplify-payload-size-factors"), "featurelayer-simplify-mobile-factor": a("featurelayer-simplify-mobile-factor"), "esri-atomics": a("esri-atomics"), "esri-shared-array-buffer": a("esri-shared-array-buffer"), "esri-tiles-debug": a("esri-tiles-debug"), "esri-workers-arraybuffer-transfer": a("esri-workers-arraybuffer-transfer"), "feature-polyline-generalization-factor": a("feature-polyline-generalization-factor"), "host-webworker": 1 }, s5.workers.loaderUrl && (s5.workers.loaderUrl = Q(s5.workers.loaderUrl)), s5.workers.workerPath ? s5.workers.workerPath = Q(s5.workers.workerPath) : s5.workers.workerPath = Q(a4("esri/core/workers/RemoteClient.js")), s5.workers.useDynamicImport = false;
  const a10 = r.workers.loaderConfig, l3 = r2({ baseUrl: a10 == null ? void 0 : a10.baseUrl, locale: l(), has: { "csp-restrictions": 1, "dojo-test-sniff": 0, "host-webworker": 1, ...a10 == null ? void 0 : a10.has }, map: { ...a10 == null ? void 0 : a10.map }, paths: { ...a10 == null ? void 0 : a10.paths }, packages: (a10 == null ? void 0 : a10.packages) || [] }), f5 = { version: s3, buildDate: e, revision: a3 };
  return JSON.stringify({ esriConfig: s5, loaderConfig: l3, kernelInfo: f5 });
}
var P = 0;

// node_modules/@arcgis/core/core/workers/WorkerOwner.js
var b2 = s.getLogger("esri.core.workers");
var { ABORT: m2, INVOKE: _, OPEN: g3, OPENED: u, RESPONSE: j } = e2;
var f3 = class {
  constructor(e4, t2) {
    this._outJobs = /* @__PURE__ */ new Map(), this._inJobs = /* @__PURE__ */ new Map(), this.worker = e4, this.id = t2, e4.addEventListener("message", this._onMessage.bind(this)), e4.addEventListener("error", (e5) => {
      e5.preventDefault(), b2.error(e5);
    });
  }
  static async create(e4) {
    const t2 = await y();
    return new f3(t2, e4);
  }
  terminate() {
    this.worker.terminate();
  }
  async open(e4, t2 = {}) {
    const { signal: o } = t2, s5 = n();
    return new Promise((t3, n3) => {
      const a10 = { resolve: t3, reject: n3, abortHandle: d(o, () => {
        this._outJobs.delete(s5), this._post({ type: m2, jobId: s5 });
      }) };
      this._outJobs.set(s5, a10), this._post({ type: g3, jobId: s5, modulePath: e4 });
    });
  }
  _onMessage(e4) {
    const t2 = f2(e4);
    if (t2)
      switch (t2.type) {
        case u:
          this._onOpenedMessage(t2);
          break;
        case j:
          this._onResponseMessage(t2);
          break;
        case m2:
          this._onAbortMessage(t2);
          break;
        case _:
          this._onInvokeMessage(t2);
      }
  }
  _onAbortMessage(e4) {
    const t2 = this._inJobs, o = e4.jobId, s5 = t2.get(o);
    s5 && (s5.controller && s5.controller.abort(), t2.delete(o));
  }
  _onInvokeMessage(t2) {
    const { methodName: o, jobId: s5, data: r3, abortable: i2 } = t2, l3 = i2 ? new AbortController() : null, h3 = this._inJobs, c3 = a5[o];
    let p2;
    try {
      if ("function" != typeof c3)
        throw new TypeError(`${o} is not a function`);
      p2 = c3.call(null, r3, { signal: l3 ? l3.signal : null });
    } catch (b3) {
      return void this._post({ type: j, jobId: s5, error: a6(b3) });
    }
    k(p2) ? (h3.set(s5, { controller: l3, promise: p2 }), p2.then((e4) => {
      h3.has(s5) && (h3.delete(s5), this._post({ type: j, jobId: s5 }, e4));
    }, (e4) => {
      h3.has(s5) && (h3.delete(s5), e4 || (e4 = { message: "Error encountered at method" + o }), g(e4) || this._post({ type: j, jobId: s5, error: a6(e4 || { message: `Error encountered at method ${o}` }) }));
    })) : this._post({ type: j, jobId: s5 }, p2);
  }
  _onOpenedMessage(e4) {
    const { jobId: t2, data: o } = e4, r3 = this._outJobs.get(t2);
    r3 && (this._outJobs.delete(t2), a2(r3.abortHandle), r3.resolve(o));
  }
  _onResponseMessage(e4) {
    const { jobId: o, error: r3, data: n3 } = e4, a10 = this._outJobs.get(o);
    a10 && (this._outJobs.delete(o), a2(a10.abortHandle), r3 ? a10.reject(s2.fromJSON(JSON.parse(r3))) : a10.resolve(n3));
  }
  _post(e4, t2, o) {
    return i(this.worker, e4, t2, o);
  }
};

// node_modules/@arcgis/core/core/workers/workers.js
var s4 = a("esri-workers-debug") ? 1 : a("host-browser") ? navigator.hardwareConcurrency - 1 : 0;
s4 || (s4 = a("safari") && a("mac") || a("trident") ? 7 : 2);
var a9 = 0;
var l2 = [];
function c2() {
  h2();
}
async function f4(t2, r3) {
  const e4 = new c();
  return await e4.open(t2, r3), e4;
}
async function u2(o, i2 = {}) {
  if ("string" != typeof o)
    throw new s2("workers:undefined-module", "modulePath is missing");
  let c3 = i2.strategy || "distributed";
  if (a("host-webworker") && !a("esri-workers") && (c3 = "local"), "local" === c3) {
    let t2 = await w.loadWorker(o);
    t2 || (t2 = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      o
    )), f(i2.signal);
    const r3 = i2.client || t2;
    return f4([w.connect(t2)], { ...i2, client: r3 });
  }
  if (await h2(), f(i2.signal), "dedicated" === c3) {
    const t2 = a9++ % s4;
    return f4([await l2[t2].open(o, i2)], i2);
  }
  if (i2.maxNumWorkers && i2.maxNumWorkers > 0) {
    const t2 = Math.min(i2.maxNumWorkers, s4);
    if (t2 < s4) {
      const r3 = new Array(t2);
      for (let e4 = 0; e4 < t2; ++e4) {
        const t3 = a9++ % s4;
        r3[e4] = l2[t3].open(o, i2);
      }
      return f4(r3, i2);
    }
  }
  return f4(l2.map((t2) => t2.open(o, i2)), i2);
}
var w3;
var d2 = null;
async function h2() {
  if (d2)
    return d2;
  w3 = new AbortController();
  const t2 = [];
  for (let r3 = 0; r3 < s4; r3++) {
    const e4 = f3.create(r3).then((t3) => (l2[r3] = t3, t3));
    t2.push(e4);
  }
  return d2 = Promise.all(t2), d2;
}

export {
  c2 as c,
  u2 as u
};
//# sourceMappingURL=chunk-M2WA2LMI.js.map
