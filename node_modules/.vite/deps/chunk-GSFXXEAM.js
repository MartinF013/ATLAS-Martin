import {
  a
} from "./chunk-QZTJM4HG.js";
import {
  y
} from "./chunk-WODSLTZT.js";
import {
  y as y2
} from "./chunk-TBT57L4K.js";
import {
  r as r3
} from "./chunk-2HDG7SIE.js";
import {
  i as i2
} from "./chunk-C4LU7RDX.js";
import {
  i
} from "./chunk-EPCCNF3D.js";
import {
  d as d2
} from "./chunk-4PRVTUEZ.js";
import {
  o,
  s
} from "./chunk-DMJWTK32.js";
import {
  j2 as j
} from "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import {
  s as s3
} from "./chunk-XRL56EGK.js";
import {
  r as r2
} from "./chunk-ZIHDQYKE.js";
import {
  o as o2
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  s5 as s2
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  N,
  S,
  b,
  v
} from "./chunk-23NWA6WL.js";
import {
  m
} from "./chunk-G5JBUC5N.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/layers/support/source/MapLayerSource.js
var a2;
var c = a2 = class extends l {
  constructor(r4) {
    super(r4), this.type = "map-layer";
  }
  clone() {
    const { mapLayerId: r4, gdbVersion: o3 } = this;
    return new a2({ mapLayerId: r4, gdbVersion: o3 });
  }
};
e([r3({ mapLayer: "map-layer" })], c.prototype, "type", void 0), e([d({ type: S, json: { write: true } })], c.prototype, "mapLayerId", void 0), e([d({ type: String, json: { write: true } })], c.prototype, "gdbVersion", void 0), c = a2 = e([n("esri.layers.support.source.MapLayerSource")], c);

// node_modules/@arcgis/core/layers/support/source/QueryTableDataSource.js
var c2;
var a3 = c2 = class extends l {
  constructor(e2) {
    super(e2), this.type = "query-table";
  }
  clone() {
    const { workspaceId: e2, query: r4, oidFields: o3, spatialReference: t, geometryType: p4 } = this, s4 = { workspaceId: e2, query: r4, oidFields: o3, spatialReference: (t == null ? void 0 : t.clone()) ?? void 0, geometryType: p4 };
    return new c2(s4);
  }
};
e([r3({ queryTable: "query-table" })], a3.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], a3.prototype, "workspaceId", void 0), e([d({ type: String, json: { write: true } })], a3.prototype, "query", void 0), e([d({ type: String, json: { write: true } })], a3.prototype, "oidFields", void 0), e([d({ type: k, json: { write: true } })], a3.prototype, "spatialReference", void 0), e([r3(i)], a3.prototype, "geometryType", void 0), a3 = c2 = e([n("esri.layers.support.source.QueryTableDataSource")], a3);

// node_modules/@arcgis/core/layers/support/source/RasterDataSource.js
var p;
var a4 = p = class extends l {
  constructor(r4) {
    super(r4), this.type = "raster";
  }
  clone() {
    const { workspaceId: r4, dataSourceName: o3 } = this;
    return new p({ workspaceId: r4, dataSourceName: o3 });
  }
};
e([r3({ raster: "raster" })], a4.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], a4.prototype, "dataSourceName", void 0), e([d({ type: String, json: { write: true } })], a4.prototype, "workspaceId", void 0), a4 = p = e([n("esri.layers.support.source.RasterDataSource")], a4);

// node_modules/@arcgis/core/layers/support/source/TableDataSource.js
var p2;
var a5 = p2 = class extends l {
  constructor(r4) {
    super(r4), this.type = "table";
  }
  clone() {
    const { workspaceId: r4, gdbVersion: o3, dataSourceName: e2 } = this;
    return new p2({ workspaceId: r4, gdbVersion: o3, dataSourceName: e2 });
  }
};
e([r3({ table: "table" })], a5.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], a5.prototype, "workspaceId", void 0), e([d({ type: String, json: { write: true } })], a5.prototype, "gdbVersion", void 0), e([d({ type: String, json: { write: true } })], a5.prototype, "dataSourceName", void 0), a5 = p2 = e([n("esri.layers.support.source.TableDataSource")], a5);

// node_modules/@arcgis/core/layers/support/source/DataLayerSource.js
var d3;
var m2;
var j2 = o()({ esriLeftInnerJoin: "left-inner-join", esriLeftOuterJoin: "left-outer-join" });
var T = d3 = class extends l {
  constructor(e2) {
    super(e2), this.type = "join-table";
  }
  readLeftTableSource(e2, r4, o3) {
    return g()(e2, r4, o3);
  }
  castLeftTableSource(e2) {
    return N(L(), e2);
  }
  readRightTableSource(e2, r4, o3) {
    return g()(e2, r4, o3);
  }
  castRightTableSource(e2) {
    return N(L(), e2);
  }
  clone() {
    const { leftTableKey: e2, rightTableKey: r4, leftTableSource: o3, rightTableSource: t, joinType: a6 } = this, s4 = { leftTableKey: e2, rightTableKey: r4, leftTableSource: (o3 == null ? void 0 : o3.clone()) ?? void 0, rightTableSource: (t == null ? void 0 : t.clone()) ?? void 0, joinType: a6 };
    return new d3(s4);
  }
};
e([r3({ joinTable: "join-table" })], T.prototype, "type", void 0), e([d({ type: String, json: { write: true } })], T.prototype, "leftTableKey", void 0), e([d({ type: String, json: { write: true } })], T.prototype, "rightTableKey", void 0), e([d({ json: { write: true } })], T.prototype, "leftTableSource", void 0), e([o2("leftTableSource")], T.prototype, "readLeftTableSource", null), e([s3("leftTableSource")], T.prototype, "castLeftTableSource", null), e([d({ json: { write: true } })], T.prototype, "rightTableSource", void 0), e([o2("rightTableSource")], T.prototype, "readRightTableSource", null), e([s3("rightTableSource")], T.prototype, "castRightTableSource", null), e([r3(j2)], T.prototype, "joinType", void 0), T = d3 = e([n("esri.layers.support.source.JoinTableDataSource")], T);
var h = null;
function g() {
  return h || (h = s2({ types: L() })), h;
}
var v2 = null;
function L() {
  return v2 || (v2 = { key: "type", base: null, typeMap: { "data-layer": K, "map-layer": c } }), v2;
}
var w = { key: "type", base: null, typeMap: { "join-table": T, "query-table": a3, raster: a4, table: a5 } };
var K = m2 = class extends l {
  constructor(e2) {
    super(e2), this.type = "data-layer";
  }
  clone() {
    const { fields: e2, dataSource: r4 } = this;
    return new m2({ fields: e2, dataSource: r4 });
  }
};
e([r3({ dataLayer: "data-layer" })], K.prototype, "type", void 0), e([d({ type: [y], json: { write: true } })], K.prototype, "fields", void 0), e([d({ types: w, json: { write: true } })], K.prototype, "dataSource", void 0), K = m2 = e([n("esri.layers.support.source.DataLayerSource")], K), K.from = b(K);

// node_modules/@arcgis/core/rest/support/StatisticDefinition.js
var c3;
var n2 = new s({ count: "count", sum: "sum", min: "min", max: "max", avg: "avg", stddev: "stddev", var: "var", exceedslimit: "exceedslimit", percentile_cont: "percentile-continuous", percentile_disc: "percentile-discrete", EnvelopeAggregate: "envelope-aggregate", CentroidAggregate: "centroid-aggregate", ConvexHullAggregate: "convex-hull-aggregate" });
var p3 = c3 = class extends l {
  constructor(t) {
    super(t), this.maxPointCount = void 0, this.maxRecordCount = void 0, this.maxVertexCount = void 0, this.onStatisticField = null, this.outStatisticFieldName = null, this.statisticType = null, this.statisticParameters = null;
  }
  writeStatisticParameters(t, e2) {
    "percentile-continuous" !== this.statisticType && "percentile-discrete" !== this.statisticType || (e2.statisticParameters = m(t));
  }
  clone() {
    return new c3({ maxPointCount: this.maxPointCount, maxRecordCount: this.maxRecordCount, maxVertexCount: this.maxVertexCount, onStatisticField: this.onStatisticField, outStatisticFieldName: this.outStatisticFieldName, statisticType: this.statisticType, statisticParameters: m(this.statisticParameters) });
  }
};
e([d({ type: Number, json: { write: true } })], p3.prototype, "maxPointCount", void 0), e([d({ type: Number, json: { write: true } })], p3.prototype, "maxRecordCount", void 0), e([d({ type: Number, json: { write: true } })], p3.prototype, "maxVertexCount", void 0), e([d({ type: String, json: { write: true } })], p3.prototype, "onStatisticField", void 0), e([d({ type: String, json: { write: true } })], p3.prototype, "outStatisticFieldName", void 0), e([d({ type: String, json: { read: { source: "statisticType", reader: n2.read }, write: { target: "statisticType", writer: n2.write } } })], p3.prototype, "statisticType", void 0), e([d({ type: Object })], p3.prototype, "statisticParameters", void 0), e([r2("statisticParameters")], p3.prototype, "writeStatisticParameters", null), p3 = c3 = e([n("esri.rest.support.StatisticDefinition")], p3);
var m3 = p3;

// node_modules/@arcgis/core/rest/support/Query.js
var w2;
var v3 = new s({ esriSpatialRelIntersects: "intersects", esriSpatialRelContains: "contains", esriSpatialRelCrosses: "crosses", esriSpatialRelDisjoint: "disjoint", esriSpatialRelEnvelopeIntersects: "envelope-intersects", esriSpatialRelIndexIntersects: "index-intersects", esriSpatialRelOverlaps: "overlaps", esriSpatialRelTouches: "touches", esriSpatialRelWithin: "within", esriSpatialRelRelation: "relation" });
var g2 = new s({ esriSRUnit_Meter: "meters", esriSRUnit_Kilometer: "kilometers", esriSRUnit_Foot: "feet", esriSRUnit_StatuteMile: "miles", esriSRUnit_NauticalMile: "nautical-miles", esriSRUnit_USNauticalMile: "us-nautical-miles" });
var R = w2 = class extends l {
  constructor(t) {
    super(t), this.aggregateIds = null, this.cacheHint = void 0, this.compactGeometryEnabled = false, this.datumTransformation = null, this.defaultSpatialReferenceEnabled = false, this.distance = void 0, this.dynamicDataSource = void 0, this.formatOf3DObjects = null, this.gdbVersion = null, this.geometry = null, this.geometryPrecision = void 0, this.groupByFieldsForStatistics = null, this.having = null, this.historicMoment = null, this.maxAllowableOffset = void 0, this.maxRecordCountFactor = 1, this.multipatchOption = null, this.num = void 0, this.objectIds = null, this.orderByFields = null, this.outFields = null, this.outSpatialReference = null, this.outStatistics = null, this.parameterValues = null, this.pixelSize = null, this.quantizationParameters = null, this.rangeValues = null, this.relationParameter = null, this.resultType = null, this.returnCentroid = false, this.returnDistinctValues = false, this.returnExceededLimitFeatures = true, this.returnGeometry = false, this.returnQueryGeometry = false, this.returnM = void 0, this.returnZ = void 0, this.sourceSpatialReference = null, this.spatialRelationship = "intersects", this.start = void 0, this.sqlFormat = null, this.text = null, this.timeExtent = null, this.timeReferenceUnknownClient = false, this.units = null, this.where = null;
  }
  static from(t) {
    return v(w2, t);
  }
  castDatumTransformation(t) {
    return "number" == typeof t || "object" == typeof t ? t : null;
  }
  writeHistoricMoment(t, e2) {
    e2.historicMoment = t && t.getTime();
  }
  writeParameterValues(t, e2) {
    if (t) {
      const r4 = {};
      for (const e3 in t) {
        const o3 = t[e3];
        Array.isArray(o3) ? r4[e3] = o3.map((t2) => t2 instanceof Date ? t2.getTime() : t2) : o3 instanceof Date ? r4[e3] = o3.getTime() : r4[e3] = o3;
      }
      e2.parameterValues = r4;
    }
  }
  writeStart(t, e2) {
    e2.resultOffset = this.start, e2.resultRecordCount = this.num || 10, e2.where = "1=1";
  }
  writeWhere(t, e2) {
    e2.where = t || "1=1";
  }
  clone() {
    return new w2(m({ aggregateIds: this.aggregateIds, cacheHint: this.cacheHint, compactGeometryEnabled: this.compactGeometryEnabled, datumTransformation: this.datumTransformation, defaultSpatialReferenceEnabled: this.defaultSpatialReferenceEnabled, distance: this.distance, gdbVersion: this.gdbVersion, geometry: this.geometry, geometryPrecision: this.geometryPrecision, groupByFieldsForStatistics: this.groupByFieldsForStatistics, having: this.having, historicMoment: r(this.historicMoment) ? new Date(this.historicMoment.getTime()) : null, maxAllowableOffset: this.maxAllowableOffset, maxRecordCountFactor: this.maxRecordCountFactor, multipatchOption: this.multipatchOption, num: this.num, objectIds: this.objectIds, orderByFields: this.orderByFields, outFields: this.outFields, outSpatialReference: this.outSpatialReference, outStatistics: this.outStatistics, parameterValues: this.parameterValues, pixelSize: this.pixelSize, quantizationParameters: this.quantizationParameters, rangeValues: this.rangeValues, relationParameter: this.relationParameter, resultType: this.resultType, returnDistinctValues: this.returnDistinctValues, returnGeometry: this.returnGeometry, returnCentroid: this.returnCentroid, returnExceededLimitFeatures: this.returnExceededLimitFeatures, returnQueryGeometry: this.returnQueryGeometry, returnM: this.returnM, returnZ: this.returnZ, dynamicDataSource: this.dynamicDataSource, sourceSpatialReference: this.sourceSpatialReference, spatialRelationship: this.spatialRelationship, start: this.start, sqlFormat: this.sqlFormat, text: this.text, timeExtent: this.timeExtent, timeReferenceUnknownClient: this.timeReferenceUnknownClient, units: this.units, where: this.where }));
  }
};
R.MAX_MAX_RECORD_COUNT_FACTOR = 5, e([d({ json: { write: true } })], R.prototype, "aggregateIds", void 0), e([d({ type: Boolean, json: { write: true } })], R.prototype, "cacheHint", void 0), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "compactGeometryEnabled", void 0), e([d({ json: { write: true } })], R.prototype, "datumTransformation", void 0), e([s3("datumTransformation")], R.prototype, "castDatumTransformation", null), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "defaultSpatialReferenceEnabled", void 0), e([d({ type: Number, json: { write: { overridePolicy: (t) => ({ enabled: t > 0 }) } } })], R.prototype, "distance", void 0), e([d({ type: K, json: { write: true } })], R.prototype, "dynamicDataSource", void 0), e([d({ type: String, json: { write: true } })], R.prototype, "formatOf3DObjects", void 0), e([d({ type: String, json: { write: true } })], R.prototype, "gdbVersion", void 0), e([d({ types: i2, json: { read: d2, write: true } })], R.prototype, "geometry", void 0), e([d({ type: Number, json: { write: true } })], R.prototype, "geometryPrecision", void 0), e([d({ type: [String], json: { write: true } })], R.prototype, "groupByFieldsForStatistics", void 0), e([d({ type: String, json: { write: true } })], R.prototype, "having", void 0), e([d({ type: Date })], R.prototype, "historicMoment", void 0), e([r2("historicMoment")], R.prototype, "writeHistoricMoment", null), e([d({ type: Number, json: { write: true } })], R.prototype, "maxAllowableOffset", void 0), e([d({ type: Number, cast: (t) => t < 1 ? 1 : t > w2.MAX_MAX_RECORD_COUNT_FACTOR ? w2.MAX_MAX_RECORD_COUNT_FACTOR : t, json: { write: { overridePolicy: (t) => ({ enabled: t > 1 }) } } })], R.prototype, "maxRecordCountFactor", void 0), e([d({ type: ["xyFootprint"], json: { write: true } })], R.prototype, "multipatchOption", void 0), e([d({ type: Number, json: { read: { source: "resultRecordCount" } } })], R.prototype, "num", void 0), e([d({ json: { write: true } })], R.prototype, "objectIds", void 0), e([d({ type: [String], json: { write: true } })], R.prototype, "orderByFields", void 0), e([d({ type: [String], json: { write: true } })], R.prototype, "outFields", void 0), e([d({ type: k, json: { name: "outSR", write: true } })], R.prototype, "outSpatialReference", void 0), e([d({ type: [m3], json: { write: { enabled: true, overridePolicy() {
  return { enabled: r(this.outStatistics) && this.outStatistics.length > 0 };
} } } })], R.prototype, "outStatistics", void 0), e([d({ json: { write: true } })], R.prototype, "parameterValues", void 0), e([r2("parameterValues")], R.prototype, "writeParameterValues", null), e([d({ type: j, json: { write: true } })], R.prototype, "pixelSize", void 0), e([d({ type: a, json: { write: true } })], R.prototype, "quantizationParameters", void 0), e([d({ type: [Object], json: { write: true } })], R.prototype, "rangeValues", void 0), e([d({ type: String, json: { read: { source: "relationParam" }, write: { target: "relationParam", overridePolicy() {
  return { enabled: "relation" === this.spatialRelationship };
} } } })], R.prototype, "relationParameter", void 0), e([d({ type: String, json: { write: true } })], R.prototype, "resultType", void 0), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "returnCentroid", void 0), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "returnDistinctValues", void 0), e([d({ type: Boolean, json: { default: true, write: true } })], R.prototype, "returnExceededLimitFeatures", void 0), e([d({ type: Boolean, json: { write: true } })], R.prototype, "returnGeometry", void 0), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "returnQueryGeometry", void 0), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "returnM", void 0), e([d({ type: Boolean, json: { write: { overridePolicy: (t) => ({ enabled: t }) } } })], R.prototype, "returnZ", void 0), e([d({ type: k, json: { write: true } })], R.prototype, "sourceSpatialReference", void 0), e([r3(v3, { ignoreUnknown: false, name: "spatialRel" })], R.prototype, "spatialRelationship", void 0), e([d({ type: Number, json: { read: { source: "resultOffset" } } })], R.prototype, "start", void 0), e([r2("start"), r2("num")], R.prototype, "writeStart", null), e([d({ type: String, json: { write: true } })], R.prototype, "sqlFormat", void 0), e([d({ type: String, json: { write: true } })], R.prototype, "text", void 0), e([d({ type: y2, json: { write: true } })], R.prototype, "timeExtent", void 0), e([d({ type: Boolean, json: { default: false, write: true } })], R.prototype, "timeReferenceUnknownClient", void 0), e([r3(g2, { ignoreUnknown: false }), d({ json: { write: { overridePolicy(t) {
  return { enabled: t && this.distance > 0 };
} } } })], R.prototype, "units", void 0), e([d({ type: String, json: { write: { overridePolicy(t) {
  return { enabled: null != t || this.start > 0 };
} } } })], R.prototype, "where", void 0), e([r2("where")], R.prototype, "writeWhere", null), R = w2 = e([n("esri.rest.support.Query")], R);
var b2 = R;

export {
  c,
  K,
  m3 as m,
  b2 as b
};
//# sourceMappingURL=chunk-GSFXXEAM.js.map
