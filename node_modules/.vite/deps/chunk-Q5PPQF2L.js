import {
  G,
  V
} from "./chunk-PVL2NLPX.js";
import {
  j as j2
} from "./chunk-ZIG56NBC.js";
import {
  S
} from "./chunk-7ZQJSAEA.js";
import {
  n as n2
} from "./chunk-JYMQQ22E.js";
import {
  j,
  l as l4
} from "./chunk-A2XF5TZW.js";
import {
  r as r5
} from "./chunk-T6BL6FYR.js";
import {
  e as e3,
  p
} from "./chunk-3HMF3PNP.js";
import {
  H
} from "./chunk-Y75V5CF3.js";
import {
  T
} from "./chunk-52W4YMC2.js";
import {
  r as r6
} from "./chunk-KD6KBT2L.js";
import {
  h
} from "./chunk-EEJIELE6.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  l as l3,
  o,
  r as r4,
  s,
  v
} from "./chunk-YZNDHJDJ.js";
import {
  u as u2
} from "./chunk-G4IZ2HTT.js";
import {
  l as l2
} from "./chunk-T7BEWVV3.js";
import {
  i
} from "./chunk-NWRK6QLX.js";
import {
  l
} from "./chunk-FVPTCNCX.js";
import {
  D,
  a
} from "./chunk-ZOKX6UGH.js";
import {
  A,
  F,
  e as e2,
  r as r3,
  u,
  z
} from "./chunk-PKZEO23A.js";
import {
  n,
  r as r2
} from "./chunk-AIRC226G.js";
import {
  t2
} from "./chunk-2QOWZFCU.js";
import {
  c,
  e,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/interactive/visualElements/ParallelLineVisualElement.js
var v2 = class extends n2 {
  constructor(t3) {
    super(t3), this._handles = new u2(), this._location = n(), this._direction = r2(1, 0, 0), this._width = 1, this._offset = 1, this._length = 18, this._color = r6(1, 0, 1, 1), this._renderOccluded = h.OccludeAndTransparent, this.applyProps(t3);
  }
  get location() {
    return this._location;
  }
  set location(e4) {
    F(this._location, e4) || (r3(this._location, e4), this._updateGeometry());
  }
  get direction() {
    return this._direction;
  }
  set direction(e4) {
    F(this._direction, e4) || (r3(this._direction, e4), this._updateGeometry());
  }
  setDirectionFromPoints(e4, t3) {
    z(this._direction, e2(this._direction, t3, e4)), this._updateGeometry();
  }
  get width() {
    return this._width;
  }
  set width(e4) {
    e4 !== this._width && (this._width = e4, this._updateMaterial());
  }
  get offset() {
    return this._offset;
  }
  set offset(e4) {
    e4 !== this._offset && (this._offset = e4, this._updateGeometry());
  }
  get length() {
    return this._length;
  }
  set length(e4) {
    e4 !== this._length && (this._length = e4, this._updateGeometry());
  }
  get color() {
    return this._color;
  }
  set color(e4) {
    D(e4, this._color) || (a(this._color, e4), this._updateMaterial());
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e4) {
    e4 !== this._renderOccluded && (this._renderOccluded = e4, this._updateMaterial());
  }
  createExternalResources() {
    const e4 = new H(this.materialParameters);
    this._handles.add(l2(() => this.view.state.camera, () => {
      this._updateGeometry();
    })), this._externalResources = { material: e4 };
  }
  destroyExternalResources() {
    this._handles.removeAll(), this._externalResources = null;
  }
  createGeometries(e4) {
    const r7 = T.createPolylineGeometry([n(), n()]), s2 = T.createPolylineGeometry([n(), n()]), i2 = e(this._externalResources).material;
    e4.addGeometry(r7, i2), e4.addGeometry(s2, i2), this._updateVertices(e4);
  }
  forEachExternalMaterial(e4) {
    r(this._externalResources) && e4(this._externalResources.material);
  }
  _updateMaterial() {
    if (t(this._externalResources))
      return;
    this._externalResources.material.setParameters(this.materialParameters);
  }
  get materialParameters() {
    return { width: this._width, color: this._color, renderOccluded: this._renderOccluded };
  }
  _updateGeometry() {
    const e4 = this.object;
    t(e4) || this._updateVertices(e4);
  }
  _updateVertices(e4) {
    const t3 = this.view.state.camera;
    t3.projectToScreen(this.location, V2), u(P, this.location, this.direction), t3.projectToScreen(P, A2), v(A2, o(A2, A2, V2)), this._updateVertexAttributes(t3, e4, 0, V2, A2, 1), this._updateVertexAttributes(t3, e4, 1, V2, A2, -1);
  }
  _updateVertexAttributes(e4, t3, r7, s2, i2, o2) {
    const a2 = t3.geometryRecords[r7], c2 = a2.geometry.getMutableAttribute(O.POSITION).data, d = l3(M, r4(M, i2[1] * o2, i2[0] * -o2), this.offset + this.width / 2), m = s(k, s(k, s(k, s2, l3(k, i2, this.length / 2)), d), d), u3 = s(E, m, l3(E, i2, -this.length));
    e4.unprojectFromScreen(m, P), c2[0] = P[0], c2[1] = P[1], c2[2] = P[2], e4.unprojectFromScreen(u3, P), c2[3] = P[0], c2[4] = P[1], c2[5] = P[2], t3.geometryVertexAttrsUpdated(a2);
  }
};
var P = n();
var V2 = i();
var A2 = i();
var M = i();
var k = i();
var E = i();

// node_modules/@arcgis/core/views/3d/interactive/SnappingVisualizer3D.js
var g = class extends r5 {
  visualizeIntersectionPoint(i2, o2) {
    const { coordinateHelper: r7, view: a2 } = o2;
    return t2(new S({ view: a2, primitive: "circle", geometry: r7.vectorToPoint(i2.intersectionPoint), elevationInfo: c(i2.elevationInfo, o2.elevationInfo), size: 20, outlineSize: 2, color: [0, 0, 0, 0], outlineColor: l.toUnitRGBA(p.orange), pixelSnappingEnabled: false }));
  }
  visualizePoint(i2, o2) {
    const { coordinateHelper: r7, view: a2 } = o2;
    return t2(new S({ view: a2, primitive: "circle", geometry: r7.vectorToPoint(i2.point), elevationInfo: c(i2.elevationInfo, o2.elevationInfo), size: 20, outlineSize: 2, color: [0, 0, 0, 0], outlineColor: l.toUnitRGBA(p.orange), pixelSnappingEnabled: false }));
  }
  visualizeLine(e4, i2) {
    const { coordinateHelper: o2, view: r7 } = i2;
    return t2(this._createLineSegmentHintFromMap(e4.type, e4.lineStart, e4.lineEnd, o2, c(e4.elevationInfo, i2.elevationInfo), r7, e4.fadeLeft, e4.fadeRight));
  }
  visualizeParallelSign(o2, r7) {
    const { coordinateHelper: a2, view: s2 } = r7, c2 = c(o2.elevationInfo, r7.elevationInfo), m = l4(o2.lineStart, a2, c2, r7.view), v3 = l4(o2.lineEnd, a2, c2, r7.view), f = A(v3, m, v3, 0.5), g2 = new v2({ view: s2, attached: false, offset: p.parallelLineHintOffset, length: p.parallelLineHintLength, width: p.parallelLineHintWidth, color: l.toUnitRGBA(p.orange), location: f, renderOccluded: h.Opaque });
    return g2.setDirectionFromPoints(m, f), g2.attached = true, t2(g2);
  }
  visualizeRightAngleQuad(i2, o2) {
    const { coordinateHelper: r7, view: a2 } = o2, l5 = c(i2.elevationInfo, o2.elevationInfo);
    return t2(new j2({ view: a2, attached: true, color: l.toUnitRGBA(p.orange), renderOccluded: h.Transparent, outlineRenderOccluded: h.Opaque, outlineColor: l.toUnitRGBA(p.orange), outlineSize: p.rightAngleHintOutlineSize, size: p.rightAngleHintSize, geometry: { previous: l4(i2.previousVertex, r7, l5, a2), center: l4(i2.centerVertex, r7, l5, a2), next: l4(i2.nextVertex, r7, l5, a2) } }));
  }
  _createLineSegmentHintFromMap(e4, n3, t3, i2, r7, a2, l5 = true, s2 = true) {
    const c2 = n(), d = n();
    return j(n3, t3, i2, r7, a2, c2, d), this._createLineSegmentHint(e4, a2, c2, d, l5, s2);
  }
  _createLineSegmentHint(n3, t3, i2, o2, l5 = true, s2 = true) {
    const c2 = new G({ view: t3, extensionType: V.FADED, start: i2, end: o2, color: l.toUnitRGBA(p.orange), renderOccluded: h.Opaque });
    switch (n3) {
      case e3.TARGET:
        c2.width = p.lineHintWidthTarget, c2.fadedExtensions = { start: 0, end: p.lineHintFadedExtensions };
        break;
      case e3.REFERENCE_EXTENSION:
        c2.width = p.lineHintWidthReference, c2.fadedExtensions = { start: 0, end: 0 };
        break;
      case e3.REFERENCE:
        c2.width = p.lineHintWidthReference, c2.fadedExtensions = { start: l5 ? p.lineHintFadedExtensions : 0, end: s2 ? p.lineHintFadedExtensions : 0 };
    }
    return c2.attached = true, c2;
  }
};

export {
  g
};
//# sourceMappingURL=chunk-Q5PPQF2L.js.map
