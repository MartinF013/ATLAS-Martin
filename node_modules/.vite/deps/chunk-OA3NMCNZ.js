import {
  d as d2,
  e as e2,
  n as n2
} from "./chunk-JGSSQ5FR.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  m
} from "./chunk-G5JBUC5N.js";
import {
  a
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/layers/effects/EffectView.js
var a2 = -1;
var h = class extends y {
  constructor(t) {
    super(t), this._from = null, this._to = null, this._final = null, this._current = [], this._time = 0, this.duration = a("mapview-transitions-duration"), this.effects = [];
  }
  set effect(t) {
    if (this._get("effect") !== (t = t || "")) {
      this._set("effect", t);
      try {
        this._transitionTo(u(t));
      } catch (e3) {
        this._transitionTo([]), s.getLogger(this.declaredClass).warn("Invalid Effect", { effect: t, error: e3 });
      }
    }
  }
  get hasEffects() {
    return this.transitioning || !!this.effects.length;
  }
  set scale(t) {
    this._updateForScale(t);
  }
  get transitioning() {
    return null !== this._to;
  }
  canTransitionTo(t) {
    try {
      return this.scale > 0 && _(this._current, u(t), this.scale);
    } catch {
      return false;
    }
  }
  transitionStep(t, e3) {
    this._applyTimeTransition(t), this._updateForScale(e3);
  }
  end() {
    this._applyTimeTransition(this.duration);
  }
  _transitionTo(t) {
    this.scale > 0 && _(this._current, t, this.scale) ? (this._final = t, this._to = m(t), p(this._current, this._to, this.scale), this._from = m(this._current), this._time = 0) : (this._from = this._to = this._final = null, this._current = t), this._set("effects", this._current[0] ? m(this._current[0].effects) : []);
  }
  _applyTimeTransition(t) {
    if (!(this._to && this._from && this._current && this._final))
      return;
    this._time += t;
    const e3 = Math.min(1, this._time / this.duration);
    for (let s2 = 0; s2 < this._current.length; s2++) {
      const t2 = this._current[s2], r = this._from[s2], i = this._to[s2];
      t2.scale = m2(r.scale, i.scale, e3);
      for (let s3 = 0; s3 < t2.effects.length; s3++) {
        const n3 = t2.effects[s3], c = r.effects[s3], o = i.effects[s3];
        n3.interpolate(c, o, e3);
      }
    }
    1 === e3 && (this._current = this._final, this._set("effects", this._current[0] ? m(this._current[0].effects) : []), this._from = this._to = this._final = null);
  }
  _updateForScale(t) {
    if (this._set("scale", t), 0 === this._current.length)
      return;
    const e3 = this._current, s2 = this._current.length - 1;
    let r, i, n3 = 1;
    if (1 === e3.length || t >= e3[0].scale)
      i = r = e3[0].effects;
    else if (t <= e3[s2].scale)
      i = r = e3[s2].effects;
    else
      for (let c = 0; c < s2; c++) {
        const s3 = e3[c], o = e3[c + 1];
        if (s3.scale >= t && o.scale <= t) {
          n3 = (t - s3.scale) / (o.scale - s3.scale), r = s3.effects, i = o.effects;
          break;
        }
      }
    for (let c = 0; c < this.effects.length; c++) {
      this.effects[c].interpolate(r[c], i[c], n3);
    }
  }
};
function u(t) {
  const e3 = d2(t) || [];
  return g(e3) ? [{ scale: a2, effects: e3 }] : e3;
}
function _(t, e3, s2) {
  var _a, _b, _c, _d;
  if (!((_a = t[0]) == null ? void 0 : _a.effects) || !((_b = e3[0]) == null ? void 0 : _b.effects))
    return true;
  return !((((_c = t[0]) == null ? void 0 : _c.scale) === a2 || ((_d = e3[0]) == null ? void 0 : _d.scale) === a2) && (t.length > 1 || e3.length > 1) && s2 <= 0) && n2(t[0].effects, e3[0].effects);
}
function p(t, e3, s2) {
  const r = t.length > e3.length ? t : e3, i = t.length > e3.length ? e3 : t, n3 = i[i.length - 1], c = (n3 == null ? void 0 : n3.scale) ?? s2, o = (n3 == null ? void 0 : n3.effects) ?? [];
  for (let f = i.length; f < r.length; f++)
    i.push({ scale: c, effects: [...o] });
  for (let f = 0; f < r.length; f++)
    i[f].scale = i[f].scale === a2 ? s2 : i[f].scale, r[f].scale = r[f].scale === a2 ? s2 : r[f].scale, e2(i[f].effects, r[f].effects);
}
function m2(t, e3, s2) {
  return t + (e3 - t) * s2;
}
function g(t) {
  const e3 = t[0];
  return !!e3 && "type" in e3;
}
e([d()], h.prototype, "_to", void 0), e([d()], h.prototype, "duration", void 0), e([d({ value: "" })], h.prototype, "effect", null), e([d({ readOnly: true })], h.prototype, "effects", void 0), e([d({ readOnly: true })], h.prototype, "hasEffects", null), e([d({ value: 0 })], h.prototype, "scale", null), e([d({ readOnly: true })], h.prototype, "transitioning", null), h = e([n("esri.layers.effects.EffectView")], h);

export {
  h
};
//# sourceMappingURL=chunk-OA3NMCNZ.js.map
