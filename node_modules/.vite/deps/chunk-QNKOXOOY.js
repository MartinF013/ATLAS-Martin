import {
  s as s2
} from "./chunk-FUQI3AAI.js";
import {
  l as l2
} from "./chunk-CF56UYH2.js";
import {
  i
} from "./chunk-C4LU7RDX.js";
import {
  d as d2
} from "./chunk-4PRVTUEZ.js";
import {
  o as o2
} from "./chunk-BPZGJQOB.js";
import {
  j2 as j
} from "./chunk-YPZEGNLG.js";
import {
  s
} from "./chunk-XRL56EGK.js";
import {
  r as r2
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  l
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  a
} from "./chunk-23NWA6WL.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/Camera.js
var u = class extends l2(l) {
  constructor(...o3) {
    super(...o3), this.position = new j([0, 0, 0]), this.heading = 0, this.tilt = 0, this.fov = 55;
  }
  normalizeCtorArgs(o3, r3, t, e2) {
    if (o3 && "object" == typeof o3 && ("x" in o3 || Array.isArray(o3))) {
      const s3 = { position: o3 };
      return null != r3 && (s3.heading = r3), null != t && (s3.tilt = t), null != e2 && (s3.fov = e2), s3;
    }
    return o3;
  }
  writePosition(o3, r3, t, e2) {
    const s3 = o3.clone();
    s3.x = a(o3.x || 0), s3.y = a(o3.y || 0), s3.z = o3.hasZ ? a(o3.z || 0) : o3.z, r3[t] = s3.write({}, e2);
  }
  readPosition(o3, r3) {
    const t = new j();
    return t.read(o3, r3), t.x = a(t.x || 0), t.y = a(t.y || 0), t.z = t.hasZ ? a(t.z || 0) : t.z, t;
  }
  equals(o3) {
    return !!o3 && (this.tilt === o3.tilt && this.heading === o3.heading && this.fov === o3.fov && this.position.equals(o3.position));
  }
};
e([d({ type: j, json: { write: { isRequired: true } } })], u.prototype, "position", void 0), e([r2("position")], u.prototype, "writePosition", null), e([o("position")], u.prototype, "readPosition", null), e([d({ type: Number, nonNullable: true, json: { write: { isRequired: true } } }), s((o3) => s2.normalize(a(o3)))], u.prototype, "heading", void 0), e([d({ type: Number, nonNullable: true, json: { write: { isRequired: true } } }), s((o3) => o2(a(o3), -180, 180))], u.prototype, "tilt", void 0), e([d({ type: Number, nonNullable: true, json: { read: false, write: false } })], u.prototype, "fov", void 0), u = e([n("esri.Camera")], u);
var d3 = u;

// node_modules/@arcgis/core/Viewpoint.js
var m;
var n2 = m = class extends l {
  constructor(r3) {
    super(r3), this.rotation = 0, this.scale = 0, this.targetGeometry = null, this.camera = null;
  }
  castRotation(r3) {
    return (r3 %= 360) < 0 && (r3 += 360), r3;
  }
  clone() {
    return new m({ rotation: this.rotation, scale: this.scale, targetGeometry: r(this.targetGeometry) ? this.targetGeometry.clone() : null, camera: r(this.camera) ? this.camera.clone() : null });
  }
};
function l3() {
  return { enabled: !this.camera };
}
e([d({ type: Number, json: { write: true, origins: { "web-map": { default: 0, write: true }, "web-scene": { write: { overridePolicy: l3 } } } } })], n2.prototype, "rotation", void 0), e([s("rotation")], n2.prototype, "castRotation", null), e([d({ type: Number, json: { write: true, origins: { "web-map": { default: 0, write: true }, "web-scene": { write: { overridePolicy: l3 } } } } })], n2.prototype, "scale", void 0), e([d({ types: i, json: { read: d2, write: true, origins: { "web-scene": { read: d2, write: { overridePolicy: l3 } } } } })], n2.prototype, "targetGeometry", void 0), e([d({ type: d3, json: { write: true } })], n2.prototype, "camera", void 0), n2 = m = e([n("esri.Viewpoint")], n2);
var u2 = n2;

export {
  d3 as d,
  u2 as u
};
//# sourceMappingURL=chunk-QNKOXOOY.js.map
