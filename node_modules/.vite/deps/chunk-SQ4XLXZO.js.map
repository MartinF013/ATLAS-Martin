{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/DefaultMaterial.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{isSome as e}from\"../core/maybe.js\";import{I as r}from\"./mat4f64.js\";import{ForwardLinearDepth as o}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{ShaderOutput as i}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutputOptions.js\";import{SliceDraw as t}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as l}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as n,NormalAttributeType as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{PositionAttribute as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/PositionAttribute.glsl.js\";import{SymbolColor as m}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as g}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as p}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VertexNormal as v}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexNormal.glsl.js\";import{VerticalOffset as u}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as h}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{ComputeNormalTexture as b}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js\";import{EvaluateAmbientOcclusion as f}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{multipassTerrainTest as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl.js\";import{Normals as y}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Normals.glsl.js\";import{PhysicallyBasedRendering as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PhysicallyBasedRenderingParameters as j,PBRMode as M}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as L,ReadShadowMapDraw as T}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{VisualVariables as P}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{symbolAlphaCutoff as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{DiscardOrAdjustAlphaPass as A}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js\";import{HeaderComment as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/HeaderComment.glsl.js\";import{MixExternalColor as $}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as N,addCameraPosition as E}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as _}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as V}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4PassUniform as B}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as I}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as z}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{TransparencyPassType as G}from\"../views/3d/webgl-engine/lib/basicInterfaces.js\";import{VertexAttribute as R}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{ambientBoost as U}from\"../views/3d/webgl-engine/lighting/SceneLighting.js\";function k(k){const W=new I,H=W.vertex.code,q=W.fragment.code;W.include(S,{name:\"Default Material Shader\",output:k.output});const J=N(W,k);return W.include(c),W.varyings.add(\"vpos\",\"vec3\"),W.include(P,k),W.include(s,k),W.include(u,k),k.output!==i.Color&&k.output!==i.Alpha||(E(W.vertex,k),W.include(n,k),W.include(l,{linearDepth:!1,hasModelTransformation:k.hasModelTransformation}),k.normalType===d.Attribute&&k.offsetBackfaces&&W.include(a),W.include(b,k),W.include(v,k),k.instancedColor&&W.attributes.add(R.INSTANCECOLOR,\"vec4\"),W.varyings.add(\"localvpos\",\"vec3\"),W.include(g,k),W.include(o,k),W.include(m,k),W.include(p,k),W.vertex.uniforms.add(new _(\"externalColor\",(e=>e.externalColor))),W.varyings.add(\"vcolorExt\",\"vec4\"),k.hasMultipassTerrain&&W.varyings.add(\"depth\",\"float\"),k.hasModelTransformation&&W.vertex.uniforms.add(new B(\"model\",(o=>e(o.modelTransformation)?o.modelTransformation:r))),H.add(V`\n      void main(void) {\n        forwardNormalizedVertexColor();\n        vcolorExt = externalColor;\n        ${k.instancedColor?\"vcolorExt *= instanceColor;\":\"\"}\n        vcolorExt *= vvColor();\n        vcolorExt *= getSymbolColor();\n        forwardColorMixMode();\n\n        if (vcolorExt.a < ${V.float(O)}) {\n          gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n        } else {\n          vpos = calculateVPos();\n          localvpos = vpos - view[3].xyz;\n          vpos = subtractOrigin(vpos);\n          ${k.normalType===d.Attribute?V`vNormalWorld = dpNormal(vvLocalNormal(normalModel()));`:\"\"}\n          vpos = addVerticalOffset(vpos, localOrigin);\n          ${k.hasVertexTangents?\"vTangent = dpTransformVertexTangent(tangent);\":\"\"}\n          gl_Position = transformPosition(proj, view, ${k.hasModelTransformation?\"model,\":\"\"} vpos);\n          ${k.normalType===d.Attribute&&k.offsetBackfaces?\"gl_Position = offsetBackfacingClipPosition(gl_Position, vpos, vNormalWorld, cameraPosition);\":\"\"}\n        }\n\n        ${k.hasMultipassTerrain?\"depth = (view * vec4(vpos, 1.0)).z;\":\"\"}\n        forwardLinearDepth();\n        forwardTextureCoordinates();\n      }\n    `)),k.output===i.Alpha&&(W.include(t,k),W.include(A,k),W.include(x,k),W.fragment.uniforms.add([new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity))]),k.hasColorTexture&&W.fragment.uniforms.add(new z(\"tex\",(e=>e.texture))),W.fragment.include($),q.add(V`\n      void main() {\n        discardBySlice(vpos);\n        ${k.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${k.hasColorTexture?V`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${k.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:V`vec4 texColor = vec4(1.0);`}\n        ${k.hasVertexColors?V`float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:V`float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        gl_FragColor = vec4(opacity_);\n      }\n    `)),k.output===i.Color&&(W.include(t,k),W.include(w,k),W.include(f,k),W.include(A,k),W.include(k.instancedDoublePrecision?L:T,k),W.include(x,k),E(W.fragment,k),W.fragment.uniforms.add([J,new D(\"ambient\",(e=>e.ambient)),new D(\"diffuse\",(e=>e.diffuse)),new F(\"opacity\",(e=>e.opacity)),new F(\"layerOpacity\",(e=>e.layerOpacity)),new F(\"lightingGlobalFactor\",((e,r)=>r.lighting.globalFactor)),new D(\"lightingMainIntensity\",((e,r)=>r.lighting.mainLight.intensity))]),W.fragment.constants.add(\"ambientBoostFactor\",\"float\",U),k.hasColorTexture&&W.fragment.uniforms.add(new z(\"tex\",(e=>e.texture))),W.include(j,k),W.include(C,k),W.fragment.include($),W.include(y,k),q.add(V`\n      void main() {\n        discardBySlice(vpos);\n        ${k.hasMultipassTerrain?\"terrainDepthTest(gl_FragCoord, depth);\":\"\"}\n        ${k.hasColorTexture?V`\n                vec4 texColor = texture2D(tex, vuv0);\n                ${k.textureAlphaPremultiplied?\"texColor.rgb /= texColor.a;\":\"\"}\n                discardOrAdjustAlpha(texColor);`:V`vec4 texColor = vec4(1.0);`}\n        shadingParams.viewDirection = normalize(vpos - cameraPosition);\n        ${k.normalType===d.ScreenDerivative?V`\n                vec3 normal = screenDerivativeNormal(localvpos);`:V`\n                shadingParams.normalView = vNormalWorld;\n                vec3 normal = shadingNormal(shadingParams);`}\n        ${k.pbrMode===M.Normal?\"applyPBRFactors();\":\"\"}\n        float ssao = evaluateAmbientOcclusionInverse();\n        ssao *= getBakedOcclusion();\n\n        float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\n        ${k.receiveShadows?\"float shadow = readShadowMap(vpos, linearDepth);\":k.spherical?\"float shadow = lightingGlobalFactor * (1.0 - additionalAmbientScale);\":\"float shadow = 0.0;\"}\n        vec3 matColor = max(ambient, diffuse);\n        ${k.hasVertexColors?V`\n                vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:V`\n                vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\n                float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\n        ${k.hasNormalTexture?V`\n                mat3 tangentSpace = ${k.hasVertexTangents?\"computeTangentSpace(normal);\":\"computeTangentSpace(normal, vpos, vuv0);\"}\n                vec3 shadingNormal = computeTextureNormal(tangentSpace, vuv0);`:V`vec3 shadingNormal = normal;`}\n        vec3 normalGround = ${k.spherical?V`normalize(vpos + localOrigin);`:V`vec3(0.0, 0.0, 1.0);`}\n\n        ${k.snowCover?V`\n                float snow = smoothstep(0.5, 0.55, dot(normal, normalGround));\n                albedo = mix(albedo, vec3(1), snow);\n                shadingNormal = mix(shadingNormal, normal, snow);\n                ssao = mix(ssao, 1.0, snow);`:\"\"}\n\n        vec3 additionalLight = ssao * lightingMainIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\n\n        ${k.pbrMode===M.Normal||k.pbrMode===M.Schematic?V`\n                float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * lightingMainIntensity[2];\n                ${k.snowCover?V`\n                        mrr = mix(mrr, vec3(0.0, 1.0, 0.04), snow);\n                        emission = mix(emission, vec3(0.0), snow);`:\"\"}\n\n                vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:V`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\n        gl_FragColor = highlightSlice(vec4(shadedColor, opacity_), vpos);\n        ${k.transparencyPassType===G.Color?V`gl_FragColor = premultiplyAlpha(gl_FragColor);`:\"\"}\n      }\n    `)),W.include(h,k),W}const W=Object.freeze(Object.defineProperty({__proto__:null,build:k},Symbol.toStringTag,{value:\"Module\"}));export{W as D,k as b};\n"],
  "mappings": "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",
  "names": ["k", "W", "i", "r", "d", "o", "c", "e", "m", "n", "t", "s", "a", "O"]
}
