import {
  o as o3
} from "./chunk-A3D26CKY.js";
import {
  o as o2
} from "./chunk-K37I5IIG.js";
import {
  s
} from "./chunk-K6UIDSFF.js";
import {
  o
} from "./chunk-YXFNNKMT.js";
import {
  e
} from "./chunk-2A3F5J6D.js";
import {
  a as a2
} from "./chunk-OYAHQ564.js";
import {
  a,
  i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  n
} from "./chunk-P6G64ARX.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/IntegerDrawUniform.js
var o4 = class extends i {
  constructor(r, o5) {
    super(r, "int", a.Draw, (e2, s3, i2) => e2.setUniform1i(r, o5(s3, i2)));
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/ComponentData.glsl.js
var m;
!function(o5) {
  o5[o5.Uniform = 0] = "Uniform", o5[o5.Varying = 1] = "Varying", o5[o5.COUNT = 2] = "COUNT";
}(m || (m = {}));
var x = 429496.7296;
function s2(o5, r) {
  o(o5 / x * 0.5 + 0.5, r);
}
function C(e2, r) {
  switch (r.componentData) {
    case m.Varying:
      return f(e2);
    case m.Uniform:
      return v(e2);
    case m.COUNT:
      return;
    default:
      n(r.componentData);
  }
}
function f(o5) {
  const { vertex: e2, fragment: l } = o5;
  e2.include(a2), e2.uniforms.add([new s("componentColorTex"), new o2("componentColorTexInvDim")]), o5.attributes.add(O.COMPONENTINDEX, "float"), o5.varyings.add("vExternalColorMixMode", "mediump float"), o5.varyings.add("vExternalColor", "vec4"), o5.include(e), e2.constants.add("elevationScale", "float", 2 * x), e2.code.add(n2`vec4 _readComponentColor() {
float normalizedIndex = (componentIndex * 2.0 + 0.5) * componentColorTexInvDim.x;
vec2 indexCoord = vec2(
mod(normalizedIndex, 1.0),
(floor(normalizedIndex) + 0.5) * componentColorTexInvDim.y
);
return texture2D(componentColorTex, indexCoord);
}
float readElevationOffset() {
float normalizedIndex = (componentIndex * 2.0 + 1.5) * componentColorTexInvDim.x;
vec2 indexCoord = vec2(
mod(normalizedIndex, 1.0),
(floor(normalizedIndex) + 0.5) * componentColorTexInvDim.y
);
return (rgba2float(texture2D(componentColorTex, indexCoord)) - 0.5) * elevationScale;
}
vec4 forwardExternalColor(out bool castShadows) {
vec4 componentColor = _readComponentColor() * 255.0;
float shadowFlag = mod(componentColor.b * 255.0, 2.0);
componentColor.b -= shadowFlag;
castShadows = shadowFlag >= 1.0;
int decodedColorMixMode;
vExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451;
vExternalColorMixMode = float(decodedColorMixMode) + 0.5;
return vExternalColor;
}`), l.code.add(n2`void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {
externalColor = vExternalColor;
externalColorMixMode = int(vExternalColorMixMode);
}`);
}
function v(o5) {
  const { vertex: e2, fragment: r } = o5;
  e2.uniforms.add(new o3("externalColor", (o6) => o6.componentParameters.externalColor)), r.uniforms.add(new o4("externalColorMixMode", (o6) => o6.componentParameters.externalColorMixMode)), o5.varyings.add("vExternalColor", "vec4"), e2.code.add(n2`float readElevationOffset() {
return 0.0;
}
vec4 forwardExternalColor(out bool castShadows) {
vExternalColor = externalColor;
castShadows = true;
return externalColor;
}`), r.code.add(n2`void readExternalColor(out vec4 color, out int colorMixMode) {
color = vExternalColor;
colorMixMode = externalColorMixMode;
}`);
}

export {
  m,
  x,
  s2 as s,
  C
};
//# sourceMappingURL=chunk-KP6RIJS6.js.map
