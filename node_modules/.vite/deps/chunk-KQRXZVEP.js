import {
  m
} from "./chunk-FTLBKDGL.js";
import {
  d,
  n2 as n,
  n8 as n2
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/analysis/AnalysisView3D.js
var n3 = (n4) => {
  let p = class extends m(n4) {
    constructor() {
      super(...arguments), this.parent = null, this._userInteractive = false, this._interactiveViewModelCount = 0;
    }
    get interactive() {
      return this._interactiveViewModelCount > 0 || this._userInteractive;
    }
    set interactive(e2) {
      this._userInteractive = e2;
    }
    get updating() {
      return false;
    }
    get visible() {
      return !r(this.parent) || this.parent.visible && !this.parent.suspended;
    }
    set visible(e2) {
      void 0 !== e2 ? this._override("visible", e2) : this._clearOverride("visible");
    }
    forceInteractiveForViewModel() {
      return this._interactiveViewModelCount++, n(() => this._interactiveViewModelCount--);
    }
  };
  return e([d({ readOnly: true })], p.prototype, "type", void 0), e([d({ constructOnly: true })], p.prototype, "analysis", void 0), e([d({ constructOnly: true })], p.prototype, "parent", void 0), e([d({ constructOnly: true })], p.prototype, "view", void 0), e([d({ type: Boolean })], p.prototype, "interactive", null), e([d()], p.prototype, "_userInteractive", void 0), e([d({ readOnly: true })], p.prototype, "updating", null), e([d()], p.prototype, "visible", null), e([d()], p.prototype, "_interactiveViewModelCount", void 0), p = e([n2("esri.views.3d.analysis.AnalysisView3D")], p), p;
};

export {
  n3 as n
};
//# sourceMappingURL=chunk-KQRXZVEP.js.map
