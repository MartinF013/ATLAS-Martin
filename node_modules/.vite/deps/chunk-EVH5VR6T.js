import {
  u
} from "./chunk-6UGZAJSY.js";
import {
  U,
  l
} from "./chunk-T7BEWVV3.js";
import {
  n as n2,
  t as t2
} from "./chunk-6DWU2ZQF.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/layers/GroupLayerView.js
var p = class extends u {
  constructor(i) {
    super(i), this.type = "group", this.layerViews = new j();
  }
  _allLayerViewVisibility(i) {
    this.layerViews.forEach((e2) => {
      e2.visible = i;
    });
  }
  initialize() {
    this.handles.add([this.layerViews.on("change", (i) => this._layerViewsChangeHandler(i)), l(() => this.layer.visibilityMode, () => this._applyVisibility(() => this._allLayerViewVisibility(this.visible), () => this._applyExclusiveVisibility(null)), U), l(() => this.visible, (i) => {
      this._applyVisibility(() => this._allLayerViewVisibility(i), () => {
      });
    }, U)], "grouplayerview"), this._layerViewsChangeHandler({ target: null, added: this.layerViews.toArray(), removed: [], moved: [] });
  }
  set layerViews(i) {
    this._set("layerViews", n2(i, this._get("layerViews")));
  }
  get updatingProgress() {
    return 0 === this.layerViews.length ? 1 : this.layerViews.reduce((i, e2) => i + e2.updatingProgress, 0) / this.layerViews.length;
  }
  isUpdating() {
    return this.layerViews.some((i) => i.updating);
  }
  _hasLayerViewVisibleOverrides() {
    return this.layerViews.some((i) => i._isOverridden("visible"));
  }
  _findLayerViewForLayer(i) {
    return i && this.layerViews.find((e2) => e2.layer === i);
  }
  _firstVisibleOnLayerOrder() {
    const i = this.layer.layers.find((i2) => {
      var _a;
      return (_a = this._findLayerViewForLayer(i2)) == null ? void 0 : _a.visible;
    });
    return i && this._findLayerViewForLayer(i);
  }
  _applyExclusiveVisibility(i) {
    t(i) && (i = this._firstVisibleOnLayerOrder(), t(i) && this.layerViews.length > 0 && (i = this._findLayerViewForLayer(this.layer.layers.getItemAt(0)))), this.layerViews.forEach((e2) => {
      e2.visible = e2 === i;
    });
  }
  _layerViewsChangeHandler(i) {
    this.handles.remove("grouplayerview:visible"), this.handles.add(this.layerViews.map((i2) => l(() => i2.visible, (e3) => this._applyVisibility(() => {
      e3 !== this.visible && (i2.visible = this.visible);
    }, () => this._applyExclusiveVisibility(e3 ? i2 : null)), U)).toArray(), "grouplayerview:visible");
    const e2 = i.added[i.added.length - 1];
    this._applyVisibility(() => this._allLayerViewVisibility(this.visible), () => this._applyExclusiveVisibility((e2 == null ? void 0 : e2.visible) ? e2 : null));
  }
  _applyVisibility(i, e2) {
    var _a, _b;
    this._hasLayerViewVisibleOverrides() && ("inherited" === ((_a = this.layer) == null ? void 0 : _a.visibilityMode) ? i() : "exclusive" === ((_b = this.layer) == null ? void 0 : _b.visibilityMode) && e2());
  }
};
e([d({ cast: t2 })], p.prototype, "layerViews", null), e([d({ readOnly: true })], p.prototype, "updatingProgress", null), e([d()], p.prototype, "view", void 0), p = e([n("esri.views.layers.GroupLayerView")], p);
var n3 = p;

export {
  n3 as n
};
//# sourceMappingURL=chunk-EVH5VR6T.js.map
