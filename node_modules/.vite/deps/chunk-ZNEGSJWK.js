import {
  a
} from "./chunk-PZG7CR4Y.js";
import {
  r
} from "./chunk-2HDG7SIE.js";
import {
  i,
  p
} from "./chunk-OO2JXX7L.js";
import {
  o as o2
} from "./chunk-NWRK6QLX.js";
import {
  G,
  K,
  X,
  et,
  nt
} from "./chunk-5N3FSR63.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  m
} from "./chunk-G5JBUC5N.js";

// node_modules/@arcgis/core/symbols/MarkerSymbol.js
var p2 = class extends a {
  constructor(t) {
    super(t), this.angle = 0, this.type = null, this.xoffset = 0, this.yoffset = 0, this.size = 9;
  }
  hash() {
    return `${this.type}.${this.angle}.${this.size}.${this.xoffset}.${this.yoffset}`;
  }
};
e([d({ type: Number, json: { read: (t) => t && -1 * t, write: (t, e2) => e2.angle = t && -1 * t } })], p2.prototype, "angle", void 0), e([d({ type: ["simple-marker", "picture-marker"], readOnly: true })], p2.prototype, "type", void 0), e([d({ type: Number, cast: o2, json: { write: true } })], p2.prototype, "xoffset", void 0), e([d({ type: Number, cast: o2, json: { write: true } })], p2.prototype, "yoffset", void 0), e([d({ type: Number, cast: (t) => "auto" === t ? t : o2(t), json: { write: true } })], p2.prototype, "size", void 0), p2 = e([n("esri.symbols.MarkerSymbol")], p2);
var i2 = p2;

// node_modules/@arcgis/core/symbols/support/urlUtils.js
function s(a3, r2, t) {
  return r2.imageData ? et({ mediaType: r2.contentType || "image/png", isBase64: true, data: r2.imageData }) : l(r2.url, t);
}
function l(e2, t) {
  return p3(t) && !K(e2) && t.layer.parsedUrl ? G(t.layer.parsedUrl.path, "images", e2) : i(e2, t);
}
function u(e2, a3, r2, n3) {
  if (X(e2)) {
    const t = nt(e2);
    a3.contentType = t.mediaType, a3.imageData = t.data, r2 && r2.imageData === a3.imageData && r2.url && p(r2.url, a3, "url", n3);
  } else
    p(e2, a3, "url", n3);
}
var m2 = { json: { read: { source: ["imageData", "url"], reader: s }, write: { writer(e2, a3, r2, t) {
  u(e2, a3, this.source, t);
} } } };
var c = { readOnly: true, json: { read: { source: ["imageData", "url"], reader(e2, a3, r2) {
  const t = {};
  return a3.imageData && (t.imageData = a3.imageData), a3.contentType && (t.contentType = a3.contentType), a3.url && (t.url = l(a3.url, r2)), t;
} } } };
function p3(e2) {
  return e2 && ("service" === e2.origin || "portal-item" === e2.origin) && e2.layer && ("feature" === e2.layer.type || "stream" === e2.layer.type);
}

// node_modules/@arcgis/core/symbols/PictureMarkerSymbol.js
var l2;
var a2 = l2 = class extends i2 {
  constructor(...r2) {
    super(...r2), this.color = null, this.type = "picture-marker", this.url = null, this.source = null, this.height = 12, this.width = 12, this.size = null;
  }
  normalizeCtorArgs(r2, t, o3) {
    if (r2 && "string" != typeof r2 && null == r2.imageData)
      return r2;
    const s2 = {};
    return r2 && (s2.url = r2), null != t && (s2.width = o2(t)), null != o3 && (s2.height = o2(o3)), s2;
  }
  readHeight(r2, t) {
    return t.size || r2;
  }
  readWidth(r2, t) {
    return t.size || r2;
  }
  clone() {
    const r2 = new l2({ angle: this.angle, height: this.height, url: this.url, width: this.width, xoffset: this.xoffset, yoffset: this.yoffset });
    return r2._set("source", m(this.source)), r2;
  }
  hash() {
    return `${super.hash()}.${this.height}.${this.url}.${this.width}`;
  }
};
e([d({ json: { write: false } })], a2.prototype, "color", void 0), e([r({ esriPMS: "picture-marker" }, { readOnly: true })], a2.prototype, "type", void 0), e([d(m2)], a2.prototype, "url", void 0), e([d(c)], a2.prototype, "source", void 0), e([d({ type: Number, cast: o2, json: { write: true } })], a2.prototype, "height", void 0), e([o("height", ["height", "size"])], a2.prototype, "readHeight", null), e([d({ type: Number, cast: o2, json: { write: true } })], a2.prototype, "width", void 0), e([d({ json: { write: false } })], a2.prototype, "size", void 0), a2 = l2 = e([n("esri.symbols.PictureMarkerSymbol")], a2);
var n2 = a2;

export {
  i2 as i,
  m2 as m,
  c,
  n2 as n
};
//# sourceMappingURL=chunk-ZNEGSJWK.js.map
