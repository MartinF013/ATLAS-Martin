import {
  S
} from "./chunk-HR2OX32D.js";
import {
  n as n2
} from "./chunk-RIWDMEW4.js";
import {
  c
} from "./chunk-X5Z3DJQ4.js";
import {
  O
} from "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-TBT57L4K.js";
import {
  a
} from "./chunk-D3XXPCBB.js";
import {
  t as t2
} from "./chunk-OWBMOIIV.js";
import {
  b
} from "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-ASC3X65B.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import {
  u
} from "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/layers/BaseTileLayer.js
var u2 = { id: "0/0/0", level: 0, row: 0, col: 0, extent: null };
var y = class extends a(t2(n2(b))) {
  constructor() {
    super(...arguments), this.tileInfo = S.create({ spatialReference: k.WebMercator, size: 256 }), this.type = "base-tile", this.fullExtent = new M(-20037508342787e-6, -2003750834278e-5, 2003750834278e-5, 20037508342787e-6, k.WebMercator), this.spatialReference = k.WebMercator;
  }
  getTileBounds(e2, t3, r2, o) {
    const s3 = o || u();
    return u2.level = e2, u2.row = t3, u2.col = r2, u2.extent = s3, this.tileInfo.updateTileInfo(u2), u2.extent = null, s3;
  }
  fetchTile(e2, r2, o, s3 = {}) {
    const { signal: i } = s3, l = this.getTileUrl(e2, r2, o), p = { responseType: "image", signal: i, query: { ...this.refreshParameters } };
    return U(l, p).then((e3) => e3.data);
  }
  getTileUrl() {
    throw new s2("basetilelayer:gettileurl-not-implemented", "getTileUrl() is not implemented");
  }
};
e([d({ type: S })], y.prototype, "tileInfo", void 0), e([d({ type: ["show", "hide"] })], y.prototype, "listMode", void 0), e([d({ readOnly: true, value: "base-tile" })], y.prototype, "type", void 0), e([d({ nonNullable: true })], y.prototype, "fullExtent", void 0), e([d()], y.prototype, "spatialReference", void 0), y = e([n("esri.layers.BaseTileLayer")], y);
var d2 = y;

// node_modules/@arcgis/core/layers/BingMapsLayer.js
var y2 = new s({ BingMapsAerial: "aerial", BingMapsRoad: "road", BingMapsHybrid: "hybrid" });
var h = "https://dev.virtualearth.net";
var m = class extends a(c(O(d2))) {
  constructor(e2) {
    super(e2), this.type = "bing-maps", this.tileInfo = new S({ size: [256, 256], dpi: 96, origin: { x: -20037508342787e-6, y: 20037508342787e-6, spatialReference: k.WebMercator }, spatialReference: k.WebMercator, lods: [{ level: 1, resolution: 78271.5169639999, scale: 295828763795777e-6 }, { level: 2, resolution: 39135.7584820001, scale: 147914381897889e-6 }, { level: 3, resolution: 19567.8792409999, scale: 73957190948944e-6 }, { level: 4, resolution: 9783.93962049996, scale: 36978595474472e-6 }, { level: 5, resolution: 4891.96981024998, scale: 18489297737236e-6 }, { level: 6, resolution: 2445.98490512499, scale: 9244648868618e-6 }, { level: 7, resolution: 1222.99245256249, scale: 4622324434309e-6 }, { level: 8, resolution: 611.49622628138, scale: 2311162217155e-6 }, { level: 9, resolution: 305.748113140558, scale: 1155581108577e-6 }, { level: 10, resolution: 152.874056570411, scale: 577790.554289 }, { level: 11, resolution: 76.4370282850732, scale: 288895.277144 }, { level: 12, resolution: 38.2185141425366, scale: 144447.638572 }, { level: 13, resolution: 19.1092570712683, scale: 72223.819286 }, { level: 14, resolution: 9.55462853563415, scale: 36111.909643 }, { level: 15, resolution: 4.77731426794937, scale: 18055.954822 }, { level: 16, resolution: 2.38865713397468, scale: 9027.977411 }, { level: 17, resolution: 1.19432856685505, scale: 4513.988705 }, { level: 18, resolution: 0.597164283559817, scale: 2256.994353 }, { level: 19, resolution: 0.298582141647617, scale: 1128.497176 }, { level: 20, resolution: 0.1492910708238085, scale: 564.248588 }] }), this.key = null, this.style = "road", this.culture = "en-US", this.region = null, this.portalUrl = null, this.hasAttributionData = true;
  }
  get bingMetadata() {
    return this._get("bingMetadata");
  }
  set bingMetadata(e2) {
    this._set("bingMetadata", e2);
  }
  get copyright() {
    return r(this.bingMetadata) ? this.bingMetadata.copyright : null;
  }
  get operationalLayerType() {
    return y2.toJSON(this.style);
  }
  get bingLogo() {
    return r(this.bingMetadata) ? this.bingMetadata.brandLogoUri : null;
  }
  load(e2) {
    return this.key ? this.addResolvingPromise(this._getMetadata()) : this.portalUrl ? this.addResolvingPromise(this._getPortalBingKey().then(() => this._getMetadata())) : this.addResolvingPromise(Promise.reject(new s2("bingmapslayer:load", "Bing layer must have bing key."))), Promise.resolve(this);
  }
  getTileUrl(e2, t3, r2) {
    if (!this.loaded || t(this.bingMetadata))
      return null;
    const o = this.bingMetadata.resourceSets[0].resources[0], a2 = o.imageUrlSubdomains[t3 % o.imageUrlSubdomains.length], i = this._getQuadKey(e2, t3, r2);
    return o.imageUrl.replace("{subdomain}", a2).replace("{quadkey}", i);
  }
  async fetchAttributionData() {
    return this.load().then(() => {
      if (t(this.bingMetadata))
        return null;
      return { contributors: this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map((e2) => ({ attribution: e2.attribution, coverageAreas: e2.coverageAreas.map((e3) => ({ zoomMin: e3.zoomMin, zoomMax: e3.zoomMax, score: 1, bbox: [e3.bbox[0], e3.bbox[1], e3.bbox[2], e3.bbox[3]] })) })) };
    });
  }
  _getMetadata() {
    const e2 = { road: "roadOnDemand", aerial: "aerial", hybrid: "aerialWithLabelsOnDemand" }[this.style];
    return U(`${h}/REST/v1/Imagery/Metadata/${e2}`, { responseType: "json", query: { include: "ImageryProviders", uriScheme: "https", key: this.key, suppressStatus: true, output: "json", culture: this.culture, userRegion: this.region } }).then((e3) => {
      const t3 = e3.data;
      if (200 !== t3.statusCode)
        throw new s2("bingmapslayer:getmetadata", t3.statusDescription);
      if (this.bingMetadata = t3, 0 === this.bingMetadata.resourceSets.length)
        throw new s2("bingmapslayer:getmetadata", "no bing resourcesets");
      if (0 === this.bingMetadata.resourceSets[0].resources.length)
        throw new s2("bingmapslayer:getmetadata", "no bing resources");
    }).catch((e3) => {
      throw new s2("bingmapslayer:getmetadata", e3.message);
    });
  }
  _getPortalBingKey() {
    return U(this.portalUrl, { responseType: "json", authMode: "no-prompt", query: { f: "json" } }).then((e2) => {
      if (!e2.data.bingKey)
        throw new s2("bingmapslayer:getportalbingkey", "The referenced Portal does not contain a valid bing key");
      this.key = e2.data.bingKey;
    }).catch((e2) => {
      throw new s2("bingmapslayer:getportalbingkey", e2.message);
    });
  }
  _getQuadKey(e2, t3, r2) {
    let o = "";
    for (let a2 = e2; a2 > 0; a2--) {
      let e3 = 0;
      const s3 = 1 << a2 - 1;
      0 != (r2 & s3) && (e3 += 1), 0 != (t3 & s3) && (e3 += 2), o += e3.toString();
    }
    return o;
  }
};
e([d({ json: { read: false, write: false }, value: null })], m.prototype, "bingMetadata", null), e([d({ json: { read: false, write: false }, value: "bing-maps", readOnly: true })], m.prototype, "type", void 0), e([d({ type: S })], m.prototype, "tileInfo", void 0), e([d({ type: String, readOnly: true, json: { read: false, write: false } })], m.prototype, "copyright", null), e([d({ type: String, json: { write: false, read: false } })], m.prototype, "key", void 0), e([d({ type: y2.apiValues, nonNullable: true, json: { read: { source: "layerType", reader: y2.read } } })], m.prototype, "style", void 0), e([d({ type: ["BingMapsAerial", "BingMapsHybrid", "BingMapsRoad"] })], m.prototype, "operationalLayerType", null), e([d({ type: String, json: { write: false, read: false } })], m.prototype, "culture", void 0), e([d({ type: String, json: { write: false, read: false } })], m.prototype, "region", void 0), e([d({ type: String, json: { write: true, read: true } })], m.prototype, "portalUrl", void 0), e([d({ type: Boolean, json: { write: false, read: false } })], m.prototype, "hasAttributionData", void 0), e([d({ type: String, readOnly: true })], m.prototype, "bingLogo", null), m = e([n("esri.layers.BingMapsLayer")], m);
var b2 = m;
export {
  b2 as default
};
//# sourceMappingURL=BingMapsLayer-HY67JDSK.js.map
