import {
  n as n2
} from "./chunk-JYMQQ22E.js";
import {
  m
} from "./chunk-PUU4QXN5.js";
import {
  H
} from "./chunk-Y75V5CF3.js";
import {
  T
} from "./chunk-52W4YMC2.js";
import {
  r as r3
} from "./chunk-KD6KBT2L.js";
import {
  g
} from "./chunk-7OZR6JFF.js";
import {
  h
} from "./chunk-EEJIELE6.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  c
} from "./chunk-ZYIEYKCD.js";
import {
  e as e2
} from "./chunk-YFBAFAZ2.js";
import {
  u as u2
} from "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import {
  i,
  x as x2
} from "./chunk-ASC3X65B.js";
import {
  a
} from "./chunk-ZOKX6UGH.js";
import {
  e,
  r as r2,
  u,
  x,
  z
} from "./chunk-PKZEO23A.js";
import {
  n
} from "./chunk-AIRC226G.js";
import {
  r
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/interactive/visualElements/RightAngleQuadVisualElement.js
var j = class extends n2 {
  constructor(t) {
    super(t), this._handles = new u2(), this._quadMaterial = null, this._outlineMaterial = null, this._maxSize = 0, this._position = n(), this._up = n(), this._right = n(), this._renderOccluded = h.OccludeAndTransparent, this._color = r3(1, 0, 0, 1), this._outlineColor = r3(0, 0, 0, 1), this._outlineSize = 0, this._size = 32, this._outlineRenderOccluded = h.Opaque, this.applyProps(t);
  }
  get renderOccluded() {
    return this._renderOccluded;
  }
  set renderOccluded(e3) {
    e3 !== this._renderOccluded && (this._renderOccluded = e3, this._updateQuadMaterial());
  }
  get color() {
    return this._color;
  }
  set color(e3) {
    a(this._color, e3), this._updateQuadMaterial();
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(e3) {
    a(this._outlineColor, e3), this._updateOutlineMaterial();
  }
  get outlineSize() {
    return this._outlineSize;
  }
  set outlineSize(e3) {
    const t = 0 === this._outlineSize != (0 === e3);
    this._outlineSize = e3, t ? this.recreateGeometry() : this._updateOutlineMaterial();
  }
  get size() {
    return this._size;
  }
  set size(e3) {
    e3 !== this._size && (this._size = e3, this._updateTransform());
  }
  get outlineRenderOccluded() {
    return this._outlineRenderOccluded;
  }
  set outlineRenderOccluded(e3) {
    this._outlineRenderOccluded = e3, this._updateOutlineMaterial();
  }
  set geometry({ previous: e3, center: t, next: i2 }) {
    this._maxSize = Math.min(x(t, e3), x(t, i2)) / 3, z(this._up, e(this._up, e3, t)), z(this._right, e(this._right, i2, t)), r2(this._position, t), this.recreateGeometry();
  }
  createExternalResources() {
    this._quadMaterial = new m(this.quadMaterialParameters), this._outlineMaterial = new H(this.outlineMaterialParameters), this._handles.add(l(() => this.view.state.camera, () => this._updateTransform()));
  }
  destroyExternalResources() {
    this._quadMaterial = null, this._outlineMaterial = null, this._handles.removeAll();
  }
  forEachExternalMaterial(e3) {
    e3(this._quadMaterial), e3(this._outlineMaterial);
  }
  createGeometries(e3) {
    this._createQuadGeometry(e3), this._createOutlineGeometry(e3), this._updateTransform(e3);
  }
  _createQuadGeometry(e3) {
    const t = this._quadGeometryData(this._up, this._right);
    e3.addGeometry(t, this._quadMaterial);
  }
  _createOutlineGeometry(e3) {
    if (0 === this._outlineSize)
      return;
    const t = u(c.get(), this._up, this._right), i2 = T.createPolylineGeometry([this._up, t, this._right]);
    e3.addGeometry(i2, this._outlineMaterial);
  }
  _updateTransform(e3 = this.object) {
    const i2 = this.view.state.camera, a2 = this._size * i2.computeScreenPixelSizeAt(this._position), o = Math.min(this._maxSize, a2);
    x2(b, this._position), i(b, b, [o, o, o]), r(e3) && (e3.transformation = b);
  }
  _quadGeometryData(e3, t) {
    const i2 = u(c.get(), e3, t);
    return new g([[O.POSITION, { size: 3, data: [0, 0, 0, ...t, ...e3, ...i2], exclusive: true }]], [[O.POSITION, new Uint16Array([0, 1, 2, 1, 2, 3])]]);
  }
  get quadMaterialParameters() {
    return { color: this._color, transparent: true, writeDepth: false, polygonOffset: true, renderOccluded: this._renderOccluded };
  }
  _updateQuadMaterial() {
    this._quadMaterial && this._quadMaterial.setParameters(this.quadMaterialParameters);
  }
  get outlineMaterialParameters() {
    return { color: this._outlineColor, width: this._outlineSize, renderOccluded: this._outlineRenderOccluded };
  }
  _updateOutlineMaterial() {
    this._outlineMaterial && this._outlineMaterial.setParameters(this.outlineMaterialParameters);
  }
};
var b = e2();

export {
  j
};
//# sourceMappingURL=chunk-ZIG56NBC.js.map
