import {
  B,
  C,
  q,
  v
} from "./chunk-Z7BSDVJ3.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import {
  s
} from "./chunk-CVWDM4C7.js";

// node_modules/@arcgis/core/views/2d/arcade/callExpressionWithFeature.js
function s3(e, t, o, n, a) {
  const s4 = e.referencesGeometry() && a ? u(t, n, a) : t, i2 = e.repurposeFeature(s4);
  try {
    return e.evaluate({ ...o, $feature: i2 });
  } catch (c2) {
    return s.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:", c2), null;
  }
}
var i = /* @__PURE__ */ new Map();
function u(e, r, t) {
  const { transform: o, hasZ: n, hasM: a } = t;
  i.has(r) || i.set(r, c(r));
  const s4 = i.get(r)(e.geometry, o, n, a);
  return { ...e, geometry: s4 };
}
function c(s4) {
  const i2 = {};
  switch (s4) {
    case "esriGeometryPoint":
      return (e, r, t, o) => v(r, i2, e, t, o);
    case "esriGeometryPolygon":
      return (e, r, t, o) => B(r, i2, e, t, o);
    case "esriGeometryPolyline":
      return (e, r, t, n) => C(r, i2, e, t, n);
    case "esriGeometryMultipoint":
      return (e, r, o, n) => q(r, i2, e, o, n);
    default:
      return s.getLogger("esri.views.2d.support.arcadeOnDemand").error(new s2("mapview-arcade", `Unable to handle geometryType: ${s4}`)), (e) => e;
  }
}

export {
  s3 as s
};
//# sourceMappingURL=chunk-ZEIWFXXO.js.map
