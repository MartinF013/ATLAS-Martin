import {
  u
} from "./chunk-3UQ4HI6Q.js";
import {
  J
} from "./chunk-Y7MFFYJY.js";
import {
  h
} from "./chunk-KW6WHTET.js";
import {
  m
} from "./chunk-EHWEX2VK.js";
import {
  a as a3,
  o as o3
} from "./chunk-LJAT5UYW.js";
import {
  T
} from "./chunk-52W4YMC2.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  c
} from "./chunk-ZYIEYKCD.js";
import {
  Bn
} from "./chunk-PZWU5EHT.js";
import {
  r as r2
} from "./chunk-U7B2WKBH.js";
import {
  M
} from "./chunk-TMBOFNWA.js";
import {
  a as a2,
  o as o2
} from "./chunk-BPZGJQOB.js";
import {
  D,
  a
} from "./chunk-ZOKX6UGH.js";
import {
  o
} from "./chunk-PKZEO23A.js";
import {
  n
} from "./chunk-AIRC226G.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/interactive/visualElements/PointVisualElement.js
var S = class {
  constructor(e) {
    this.view = null, this._geometry = null, this._size = 3, this._color = r2(1, 0, 1, 1), this._pixelSnappingEnabled = true, this._primitive = "square", this._outlineSize = 1, this._outlineColor = r2(1, 1, 1, 1), this._elevationInfo = null, this.resources = new u({ view: e.view, createResources: (e2) => this._createResources(e2), recreateGeometry: (e2, t3) => (e2.geometry = this._recreateGeometry(t3, e2.material), r(e2.geometry) ? [e2.geometry] : []) });
    let t2 = true;
    for (const r3 in e)
      r3 in this ? "attached" === r3 ? t2 = e[r3] : this[r3] = e[r3] : console.error("Cannot set unknown property", r3);
    this.attached = t2;
  }
  destroy() {
    this.resources.destroy();
  }
  get visible() {
    return this.resources.visible;
  }
  set visible(e) {
    this.resources.visible = e;
  }
  get attached() {
    return this.resources.attached;
  }
  set attached(e) {
    this.resources.attached = e;
  }
  get geometry() {
    return this._geometry;
  }
  set geometry(e) {
    this._geometry = e, this.resources.recreateGeometry();
  }
  get size() {
    return this._size;
  }
  set size(e) {
    if (e !== this._size) {
      const t2 = this.preferredTextureSize;
      this._size = e, t2 < this.preferredTextureSize ? r(this.resources) && this.resources.recreate() : this._updateSizeAttribute();
    }
  }
  get color() {
    return this._color;
  }
  set color(e) {
    D(e, this._color) || (a(this._color, e), this._updateMaterial());
  }
  get pixelSnappingEnabled() {
    return this._pixelSnappingEnabled;
  }
  set pixelSnappingEnabled(e) {
    this._pixelSnappingEnabled !== e && (this._pixelSnappingEnabled = e, this._updateMaterial());
  }
  get primitive() {
    return this._primitive;
  }
  set primitive(e) {
    this._primitive !== e && (this._primitive = e, r(this.resources) && this.resources.recreate());
  }
  get outlineSize() {
    return this._outlineSize;
  }
  set outlineSize(e) {
    e !== this._outlineSize && (this._outlineSize = e, this._updateMaterial());
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(e) {
    D(e, this._outlineColor) || (a(this._outlineColor, e), this._updateMaterial());
  }
  get elevationInfo() {
    return this._elevationInfo;
  }
  set elevationInfo(e) {
    this._elevationInfo = e, this.resources && this.resources.recreateGeometry();
  }
  _updateMaterial() {
    const e = this.resources.resources;
    t(e) || e.material.setParameters(this._materialParameters(e.texture.id));
  }
  _updateSizeAttribute() {
    const e = this.resources.resources, t2 = this.resources.object;
    if (t(e) || t(t2))
      return;
    const r3 = e.geometry;
    if (t(r3))
      return;
    const s = r3.getMutableAttribute(O.SIZE).data, o4 = this.geometrySize;
    s[0] = o4, s[1] = o4, t2.geometryVertexAttrsUpdated(t2.geometryRecords[0]);
  }
  _materialParameters(e) {
    return { color: this._color, textureIsSignedDistanceField: true, distanceFieldBoundingBox: z, occlusionTest: false, outlineColor: this._outlineColor, outlineSize: this._outlineSize, textureId: e, polygonOffset: false, shaderPolygonOffset: 0, drawInSecondSlot: true, depthEnabled: false, pixelSnappingEnabled: this.pixelSnappingEnabled };
  }
  get geometrySize() {
    return this._size / b;
  }
  _recreateGeometry(e, t2) {
    const i = this._createRenderGeometry();
    return r(i) && e.addGeometry(i, t2), i;
  }
  _createResources(e) {
    const t2 = o3(this._primitive, this.preferredTextureSize), i = new J(this._materialParameters(t2.id)), s = this._recreateGeometry(e, i);
    return { material: i, texture: t2, geometry: s, forEach(e2) {
      e2(t2), e2(i), r(this.geometry) && e2(this.geometry);
    } };
  }
  get preferredTextureSize() {
    return o2(a2(2 * this.geometrySize), 16, 128);
  }
  calculateMapBounds(e) {
    if (t(this.resources.resources) || t(this.resources.resources.geometry))
      return false;
    const t2 = this.resources.resources.geometry.vertexAttributes.get(O.POSITION);
    return Bn(t2.data, this.view.renderCoordsHelper.spatialReference, x, this.view.spatialReference), M(e, x), true;
  }
  _createRenderGeometry() {
    const e = this.geometry;
    if (t(e))
      return null;
    const { renderCoordsHelper: t2, elevationProvider: r3 } = this.view, o4 = m(e, r3, h.fromElevationInfo(this.elevationInfo), t2), n2 = o(c.get(), e.x, e.y, o4), a4 = c.get();
    Bn(n2, e.spatialReference, a4, t2.spatialReference);
    const l = this.geometrySize;
    return T.createPointGeometry(null, a4, null, [l, l], [0, 0, 0, 1]);
  }
};
var b = a3;
var z = [b / 2, b / 2, 1 - b / 2, 1 - b / 2];
var x = n();

export {
  S
};
//# sourceMappingURL=chunk-7ZQJSAEA.js.map
