import {
  u
} from "./chunk-NCMBCUFA.js";
import "./chunk-EZ4QR7V3.js";
import {
  a as a3,
  a2 as a4,
  m as m2,
  m2 as m3,
  n as n2,
  n2 as n4,
  s2 as s4,
  s3 as s5,
  s4 as s6,
  u as u2
} from "./chunk-5YWIJLO7.js";
import {
  n as n3,
  s as s3
} from "./chunk-MR6FXIW4.js";
import {
  a as a2
} from "./chunk-22YODLVL.js";
import "./chunk-TB42IUV7.js";
import "./chunk-ZWMYDR2G.js";
import "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-6FKG7JUE.js";
import {
  i
} from "./chunk-OBCAVCXI.js";
import {
  d as d3
} from "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import {
  x as x2
} from "./chunk-4XBERLPX.js";
import "./chunk-CQ47VEUP.js";
import {
  K,
  b
} from "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import {
  y as y3
} from "./chunk-TBT57L4K.js";
import "./chunk-P6G64ARX.js";
import "./chunk-RN2KRYDN.js";
import {
  g
} from "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import {
  m
} from "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import {
  j,
  nt
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import {
  d as d2
} from "./chunk-4PRVTUEZ.js";
import {
  s
} from "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  y3 as y2
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  x,
  y
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import {
  o
} from "./chunk-G5JBUC5N.js";
import {
  a,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/tasks/Task.js
var i2 = class extends y2 {
  constructor(...r2) {
    super(...r2), this.requestOptions = null, this.url = null;
  }
  normalizeCtorArgs(r2, s7) {
    return "string" != typeof r2 ? r2 : { url: r2, ...s7 };
  }
  get parsedUrl() {
    return this._parseUrl(this.url);
  }
  _parseUrl(r2) {
    return r2 ? j(r2) : null;
  }
  _encode(r2, s7, t2) {
    const o2 = {};
    for (const e2 in r2) {
      if ("declaredClass" === e2)
        continue;
      const i3 = r2[e2];
      if (null != i3 && "function" != typeof i3)
        if (Array.isArray(i3)) {
          o2[e2] = [];
          for (let r3 = 0; r3 < i3.length; r3++)
            o2[e2][r3] = this._encode(i3[r3]);
        } else if ("object" == typeof i3)
          if (i3.toJSON) {
            const r3 = i3.toJSON(t2 && t2[e2]);
            o2[e2] = s7 ? r3 : JSON.stringify(r3);
          } else
            o2[e2] = s7 ? i3 : JSON.stringify(i3);
        else
          o2[e2] = i3;
    }
    return o2;
  }
};
e([d({ readOnly: true })], i2.prototype, "parsedUrl", null), e([d()], i2.prototype, "requestOptions", void 0), e([d({ type: String })], i2.prototype, "url", void 0), i2 = e([n("esri.tasks.Task")], i2);
var l = i2;

// node_modules/@arcgis/core/layers/graphics/sources/support/QueryTask.js
var g2 = class extends l {
  constructor(t2) {
    super(t2), this.dynamicDataSource = null, this.fieldsIndex = null, this.format = "json", this.gdbVersion = null, this.infoFor3D = null, this.sourceSpatialReference = null;
  }
  execute(t2, e2) {
    return this.executeJSON(t2, e2).then((r2) => this.featureSetFromJSON(t2, r2, e2));
  }
  async executeJSON(t2, e2) {
    var _a;
    const o2 = { ...this.requestOptions, ...e2 }, s7 = this._normalizeQuery(t2), i3 = null != ((_a = t2.outStatistics) == null ? void 0 : _a[0]), u3 = a("featurelayer-pbf-statistics"), n5 = !i3 || u3;
    let a5;
    if ("pbf" === this.format && n5)
      try {
        a5 = await n2(this.url, s7, o2);
      } catch (m4) {
        if ("query:parsing-pbf" !== m4.name)
          throw m4;
        this.format = "json";
      }
    return "json" !== this.format && n5 || (a5 = await a2(this.url, s7, o2)), this._normalizeFields(a5.fields), a5;
  }
  async featureSetFromJSON(t2, e2, r2) {
    if (!this._queryIs3DObjectFormat(t2) || t(this.infoFor3D) || !e2.features || !e2.features.length)
      return x2.fromJSON(e2);
    const { meshFeatureSetFromJSON: s7 } = await y(import("./meshFeatureSet-ZMVSY6IE.js"), r2);
    return s7(t2, this.infoFor3D, e2);
  }
  executeForCount(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 }, o2 = this._normalizeQuery(t2);
    return n3(this.url, o2, r2);
  }
  executeForExtent(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 }, o2 = this._normalizeQuery(t2);
    return m2(this.url, o2, r2);
  }
  executeForIds(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 }, o2 = this._normalizeQuery(t2);
    return s3(this.url, o2, r2);
  }
  executeRelationshipQuery(t2, e2) {
    t2 = d3.from(t2);
    const r2 = { ...this.requestOptions, ...e2 };
    return (this.gdbVersion || this.dynamicDataSource) && ((t2 = t2.clone()).gdbVersion = t2.gdbVersion || this.gdbVersion, t2.dynamicDataSource = t2.dynamicDataSource || this.dynamicDataSource), n4(this.url, t2, r2);
  }
  executeRelationshipQueryForCount(t2, e2) {
    t2 = d3.from(t2);
    const r2 = { ...this.requestOptions, ...e2 };
    return (this.gdbVersion || this.dynamicDataSource) && ((t2 = t2.clone()).gdbVersion = t2.gdbVersion || this.gdbVersion, t2.dynamicDataSource = t2.dynamicDataSource || this.dynamicDataSource), u2(this.url, t2, r2);
  }
  executeAttachmentQuery(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 };
    return a4(this.url, t2, r2);
  }
  executeTopFeaturesQuery(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 };
    return s4(this.parsedUrl, t2, this.sourceSpatialReference, r2);
  }
  executeForTopIds(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 };
    return s5(this.parsedUrl, t2, r2);
  }
  executeForTopExtents(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 };
    return m3(this.parsedUrl, t2, r2);
  }
  executeForTopCount(t2, e2) {
    const r2 = { ...this.requestOptions, ...e2 };
    return s6(this.parsedUrl, t2, r2);
  }
  _normalizeQuery(t2) {
    let r2 = b.from(t2);
    if (r2.sourceSpatialReference = r2.sourceSpatialReference || this.sourceSpatialReference, (this.gdbVersion || this.dynamicDataSource) && (r2 = r2 === t2 ? r2.clone() : r2, r2.gdbVersion = t2.gdbVersion || this.gdbVersion, r2.dynamicDataSource = t2.dynamicDataSource ? K.from(t2.dynamicDataSource) : this.dynamicDataSource), r(this.infoFor3D) && this._queryIs3DObjectFormat(t2)) {
      r2 = r2 === t2 ? r2.clone() : r2, r2.formatOf3DObjects = null;
      for (const t3 of this.infoFor3D.queryFormats) {
        if ("3D_glb" === t3.id) {
          r2.formatOf3DObjects = t3.id;
          break;
        }
        "3D_gltf" !== t3.id || r2.formatOf3DObjects || (r2.formatOf3DObjects = t3.id);
      }
      if (!r2.formatOf3DObjects)
        throw new s2("query:unsupported-3d-query-formats", "Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");
      if (t(r2.outFields) || !r2.outFields.includes("*")) {
        r2 = r2 === t2 ? r2.clone() : r2, t(r2.outFields) && (r2.outFields = []);
        const { originX: e2, originY: s7, originZ: i3, translationX: u3, translationY: n5, translationZ: a5, scaleX: c, scaleY: p, scaleZ: m4, rotationX: f, rotationY: l2, rotationZ: h, rotationDeg: d4 } = this.infoFor3D.transformFieldRoles;
        r2.outFields.push(e2, s7, i3, u3, n5, a5, c, p, m4, f, l2, h, d4);
      }
    }
    return r2;
  }
  _normalizeFields(t2) {
    if (r(this.fieldsIndex) && r(t2))
      for (const e2 of t2) {
        const t3 = this.fieldsIndex.get(e2.name);
        t3 && Object.assign(e2, t3.toJSON());
      }
  }
  _queryIs3DObjectFormat(t2) {
    return r(this.infoFor3D) && t2.returnGeometry && "xyFootprint" !== t2.multipatchOption && !t2.outStatistics;
  }
};
e([d({ type: K })], g2.prototype, "dynamicDataSource", void 0), e([d()], g2.prototype, "fieldsIndex", void 0), e([d()], g2.prototype, "format", void 0), e([d()], g2.prototype, "gdbVersion", void 0), e([d()], g2.prototype, "infoFor3D", void 0), e([d()], g2.prototype, "sourceSpatialReference", void 0), g2 = e([n("esri.tasks.QueryTask")], g2);
var Q = g2;

// node_modules/@arcgis/core/layers/graphics/sources/FeatureLayerSource.js
var I = new s({ originalAndCurrentFeatures: "original-and-current-features", none: "none" });
async function _(e2) {
  if ("string" == typeof e2) {
    const t2 = nt(e2);
    return t2 || { data: e2 };
  }
  return new Promise((t2, r2) => {
    const s7 = new FileReader();
    s7.readAsDataURL(e2), s7.onload = () => t2(nt(s7.result)), s7.onerror = (e3) => r2(e3);
  });
}
var O = /* @__PURE__ */ new Set(["Feature Layer", "Table"]);
var S = class extends m {
  constructor() {
    super(...arguments), this.type = "feature-layer", this.refresh = x(async () => {
      var _a, _b;
      await this.load();
      const e2 = (_a = this.sourceJSON.editingInfo) == null ? void 0 : _a.lastEditDate;
      if (null == e2)
        return { dataChanged: true, updates: {} };
      try {
        await this._fetchService(null);
      } catch {
        return { dataChanged: true, updates: {} };
      }
      const t2 = e2 !== ((_b = this.sourceJSON.editingInfo) == null ? void 0 : _b.lastEditDate);
      return { dataChanged: t2, updates: t2 ? { editingInfo: this.sourceJSON.editingInfo, extent: this.sourceJSON.extent } : null };
    });
  }
  load(e2) {
    const t2 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this._fetchService(this.layer.sourceJSON, t2)), Promise.resolve(this);
  }
  get queryTask() {
    const { capabilities: { query: { supportsFormatPBF: e2 } }, parsedUrl: t2, dynamicDataSource: r2, infoFor3D: s7, gdbVersion: a5, spatialReference: o2, fieldsIndex: n5 } = this.layer, u3 = a("featurelayer-pbf") && e2 && t(s7) ? "pbf" : "json";
    return new Q({ url: t2.path, format: u3, fieldsIndex: n5, infoFor3D: s7, dynamicDataSource: r2, gdbVersion: a5, sourceSpatialReference: o2 });
  }
  async addAttachment(e2, t2) {
    await this.load();
    const s7 = e2.attributes[this.layer.objectIdField], a5 = this.layer.parsedUrl.path + "/" + s7 + "/addAttachment", i3 = this._getLayerRequestOptions(), o2 = this._getFormDataForAttachment(t2, i3.query);
    try {
      const e3 = await U(a5, { body: o2 });
      return this._createFeatureEditResult(e3.data.addAttachmentResult);
    } catch (n5) {
      throw this._createAttachmentErrorResult(s7, n5);
    }
  }
  async updateAttachment(e2, t2, s7) {
    await this.load();
    const a5 = e2.attributes[this.layer.objectIdField], i3 = this.layer.parsedUrl.path + "/" + a5 + "/updateAttachment", o2 = this._getLayerRequestOptions({ query: { attachmentId: t2 } }), n5 = this._getFormDataForAttachment(s7, o2.query);
    try {
      const e3 = await U(i3, { body: n5 });
      return this._createFeatureEditResult(e3.data.updateAttachmentResult);
    } catch (u3) {
      throw this._createAttachmentErrorResult(a5, u3);
    }
  }
  async applyEdits(e2, t2) {
    await this.load();
    const s7 = e2.addFeatures.map(this._serializeFeature, this), a5 = e2.updateFeatures.map(this._serializeFeature, this), i3 = this._getFeatureIds(e2.deleteFeatures, t2 == null ? void 0 : t2.globalIdUsed);
    i(s7, a5, this.layer.spatialReference);
    const o2 = [], n5 = [], u3 = [...e2.deleteAttachments];
    for (const r2 of e2.addAttachments)
      o2.push(await this._serializeAttachment(r2));
    for (const r2 of e2.updateAttachments)
      n5.push(await this._serializeAttachment(r2));
    const d4 = o2.length || n5.length || u3.length ? { adds: o2, updates: n5, deletes: u3 } : null, l2 = { gdbVersion: (t2 == null ? void 0 : t2.gdbVersion) || this.layer.gdbVersion, rollbackOnFailure: t2 == null ? void 0 : t2.rollbackOnFailureEnabled, useGlobalIds: t2 == null ? void 0 : t2.globalIdUsed, returnEditMoment: t2 == null ? void 0 : t2.returnEditMoment, usePreviousEditMoment: t2 == null ? void 0 : t2.usePreviousEditMoment, sessionId: t2 == null ? void 0 : t2.sessionId };
    (t2 == null ? void 0 : t2.returnServiceEditsOption) ? (l2.edits = JSON.stringify([{ id: this.layer.layerId, adds: s7, updates: a5, deletes: i3, attachments: d4 }]), l2.returnServiceEditsOption = I.toJSON(t2 == null ? void 0 : t2.returnServiceEditsOption), l2.returnServiceEditsInSourceSR = t2 == null ? void 0 : t2.returnServiceEditsInSourceSR) : (l2.adds = s7.length ? JSON.stringify(s7) : null, l2.updates = a5.length ? JSON.stringify(a5) : null, l2.deletes = i3.length ? (t2 == null ? void 0 : t2.globalIdUsed) ? JSON.stringify(i3) : i3.join(",") : null, l2.attachments = d4 && JSON.stringify(d4));
    const c = this._getLayerRequestOptions({ method: "post", query: l2 }), h = (t2 == null ? void 0 : t2.returnServiceEditsOption) ? this.layer.url : this.layer.parsedUrl.path, p = await U(h + "/applyEdits", c);
    return this._createEditsResult(p);
  }
  async deleteAttachments(e2, t2) {
    await this.load();
    const s7 = e2.attributes[this.layer.objectIdField], a5 = this.layer.parsedUrl.path + "/" + s7 + "/deleteAttachments";
    try {
      return (await U(a5, this._getLayerRequestOptions({ query: { attachmentIds: t2.join(",") }, method: "post" }))).data.deleteAttachmentResults.map(this._createFeatureEditResult);
    } catch (i3) {
      throw this._createAttachmentErrorResult(s7, i3);
    }
  }
  fetchRecomputedExtents(e2 = {}) {
    const t2 = e2.signal;
    return this.load({ signal: t2 }).then(async () => {
      const t3 = this._getLayerRequestOptions({ ...e2, query: { returnUpdates: true } }), { layerId: a5, url: i3 } = this.layer, { data: o2 } = await U(`${i3}/${a5}`, t3), { id: n5, extent: u3, fullExtent: d4, timeExtent: l2 } = o2, c = u3 || d4;
      return { id: n5, fullExtent: c && M.fromJSON(c), timeExtent: l2 && y3.fromJSON({ start: l2[0], end: l2[1] }) };
    });
  }
  async queryAttachments(e2, t2 = {}) {
    const { parsedUrl: s7 } = this.layer, a5 = s7.path;
    await this.load();
    const i3 = this._getLayerRequestOptions(t2);
    if (!this.layer.get("capabilities.operations.supportsQueryAttachments")) {
      const { objectIds: t3 } = e2, s8 = [];
      for (const e3 of t3) {
        const t4 = a5 + "/" + e3 + "/attachments";
        s8.push(U(t4, i3));
      }
      return Promise.all(s8).then((e3) => t3.map((t4, r2) => ({ parentObjectId: t4, attachmentInfos: e3[r2].data.attachmentInfos }))).then((e3) => a3(e3, a5));
    }
    return this.queryTask.executeAttachmentQuery(e2, i3);
  }
  async queryFeatures(e2, t2) {
    return await this.load(), this.queryTask.execute(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryFeaturesJSON(e2, t2) {
    return await this.load(), this.queryTask.executeJSON(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryObjectIds(e2, t2) {
    return await this.load(), this.queryTask.executeForIds(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryFeatureCount(e2, t2) {
    return await this.load(), this.queryTask.executeForCount(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryExtent(e2, t2) {
    return await this.load(), this.queryTask.executeForExtent(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryRelatedFeatures(e2, t2) {
    return await this.load(), this.queryTask.executeRelationshipQuery(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryRelatedFeaturesCount(e2, t2) {
    return await this.load(), this.queryTask.executeRelationshipQueryForCount(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryTopFeatures(e2, t2) {
    return await this.load(), this.queryTask.executeTopFeaturesQuery(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryTopObjectIds(e2, t2) {
    return await this.load(), this.queryTask.executeForTopIds(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryTopExtents(e2, t2) {
    return await this.load(), this.queryTask.executeForTopExtents(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  async queryTopCount(e2, t2) {
    return await this.load(), this.queryTask.executeForTopCount(e2, { ...t2, query: this._createRequestQueryOptions(t2) });
  }
  _createRequestQueryOptions(e2) {
    const t2 = { ...this.layer.customParameters, token: this.layer.apiKey, ...e2 == null ? void 0 : e2.query };
    return this.layer.datesInUnknownTimezone && (t2.timeReferenceUnknownClient = true), t2;
  }
  async _fetchService(e2, t2) {
    if (!e2) {
      const { data: s8 } = await U(this.layer.parsedUrl.path, this._getLayerRequestOptions({ query: a("featurelayer-advanced-symbols") ? { returnAdvancedSymbols: true } : {}, signal: t2 }));
      e2 = s8;
    }
    this.sourceJSON = this._patchServiceJSON(e2);
    const s7 = e2.type;
    if (!O.has(s7))
      throw new s2("feature-layer-source:unsupported-type", `Source type "${s7}" is not supported`);
  }
  _patchServiceJSON(e2) {
    var _a;
    if ("Table" !== e2.type && e2.geometryType && !((_a = e2 == null ? void 0 : e2.drawingInfo) == null ? void 0 : _a.renderer) && !e2.defaultSymbol) {
      const t2 = u(e2.geometryType).renderer;
      o("drawingInfo.renderer", t2, e2);
    }
    return "esriGeometryMultiPatch" === e2.geometryType && e2.infoFor3D && (e2.geometryType = "mesh"), e2;
  }
  _serializeFeature(e2) {
    const { geometry: t2, attributes: r2 } = e2;
    return t(t2) ? { attributes: r2 } : "mesh" === t2.type || "extent" === t2.type ? null : { geometry: t2.toJSON(), attributes: r2 };
  }
  async _serializeAttachment(e2) {
    const { feature: t2, attachment: r2 } = e2, { globalId: s7, name: a5, contentType: i3, data: o2, uploadId: n5 } = r2, u3 = { globalId: s7, parentGlobalId: null, contentType: null, name: null, uploadId: null, data: null };
    if (t2 && (u3.parentGlobalId = "attributes" in t2 ? t2.attributes && t2.attributes[this.layer.globalIdField] : t2.globalId), n5)
      u3.uploadId = n5;
    else if (o2) {
      const e3 = await _(o2);
      u3.contentType = e3.mediaType, u3.data = e3.data, o2 instanceof File && (u3.name = o2.name);
    }
    return a5 && (u3.name = a5), i3 && (u3.contentType = i3), u3;
  }
  _getFeatureIds(e2, t2) {
    const r2 = e2[0];
    return r2 ? this._canUseGlobalIds(t2, e2) ? this._getGlobalIdsFromFeatureIdentifier(e2) : "objectId" in r2 ? this._getObjectIdsFromFeatureIdentifier(e2) : this._getIdsFromFeatures(e2) : [];
  }
  _getIdsFromFeatures(e2) {
    const t2 = this.layer.objectIdField;
    return e2.map((e3) => e3.attributes && e3.attributes[t2]);
  }
  _canUseGlobalIds(e2, t2) {
    return e2 && "globalId" in t2[0];
  }
  _getObjectIdsFromFeatureIdentifier(e2) {
    return e2.map((e3) => e3.objectId);
  }
  _getGlobalIdsFromFeatureIdentifier(e2) {
    return e2.map((e3) => e3.globalId);
  }
  _createEditsResult(e2) {
    const t2 = e2.data, { layerId: r2 } = this.layer, s7 = [];
    let a5 = null;
    if (Array.isArray(t2))
      for (const n5 of t2)
        s7.push({ id: n5.id, editedFeatures: n5.editedFeatures }), n5.id === r2 && (a5 = { addResults: n5.addResults, updateResults: n5.updateResults, deleteResults: n5.deleteResults, attachments: n5.attachments, editMoment: n5.editMoment });
    else
      a5 = t2;
    const i3 = a5 == null ? void 0 : a5.attachments, o2 = { addFeatureResults: a5.addResults ? a5.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: a5.updateResults ? a5.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: a5.deleteResults ? a5.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: i3 && i3.addResults ? i3.addResults.map(this._createFeatureEditResult, this) : [], updateAttachmentResults: i3 && i3.updateResults ? i3.updateResults.map(this._createFeatureEditResult, this) : [], deleteAttachmentResults: i3 && i3.deleteResults ? i3.deleteResults.map(this._createFeatureEditResult, this) : [] };
    if (a5.editMoment && (o2.editMoment = a5.editMoment), s7.length > 0) {
      o2.editedFeatureResults = [];
      for (const e3 of s7) {
        const { adds: t3, updates: r3, deletes: s8, spatialReference: a6 } = e3.editedFeatures, i4 = a6 ? new k(a6) : null;
        o2.editedFeatureResults.push({ layerId: e3.id, editedFeatures: { adds: (t3 == null ? void 0 : t3.map((e4) => this._createEditedFeature(e4, i4))) || [], updates: (r3 == null ? void 0 : r3.map((e4) => ({ original: this._createEditedFeature(e4[0], i4), current: this._createEditedFeature(e4[1], i4) }))) || [], deletes: (s8 == null ? void 0 : s8.map((e4) => this._createEditedFeature(e4, i4))) || [], spatialReference: i4 } });
      }
    }
    return o2;
  }
  _createEditedFeature(e2, r2) {
    return new g({ attributes: e2.attributes, geometry: d2({ ...e2.geometry, spatialReference: r2 }) });
  }
  _createFeatureEditResult(e2) {
    const t2 = true === e2.success ? null : e2.error || { code: void 0, description: void 0 };
    return { objectId: e2.objectId, globalId: e2.globalId, error: t2 ? new s2("feature-layer-source:edit-failure", t2.description, { code: t2.code }) : null };
  }
  _createAttachmentErrorResult(e2, t2) {
    const r2 = t2.details.messages && t2.details.messages[0] || t2.message, s7 = t2.details.httpStatus || t2.details.messageCode;
    return { objectId: e2, globalId: null, error: new s2("feature-layer-source:attachment-failure", r2, { code: s7 }) };
  }
  _getFormDataForAttachment(e2, t2) {
    const r2 = e2 instanceof FormData ? e2 : e2 && e2.elements ? new FormData(e2) : null;
    if (r2)
      for (const s7 in t2) {
        const e3 = t2[s7];
        null != e3 && (r2.set ? r2.set(s7, e3) : r2.append(s7, e3));
      }
    return r2;
  }
  _getLayerRequestOptions(e2 = {}) {
    const { parsedUrl: t2, gdbVersion: r2, dynamicDataSource: s7 } = this.layer;
    return { ...e2, query: { gdbVersion: r2, layer: s7 ? JSON.stringify({ source: s7 }) : void 0, ...t2.query, f: "json", ...this._createRequestQueryOptions(e2) }, responseType: "json" };
  }
};
e([d()], S.prototype, "type", void 0), e([d({ constructOnly: true })], S.prototype, "layer", void 0), e([d({ readOnly: true })], S.prototype, "queryTask", null), S = e([n("esri.layers.graphics.sources.FeatureLayerSource")], S);
var E = S;
export {
  E as default
};
//# sourceMappingURL=FeatureLayerSource-IKOM7CRG.js.map
