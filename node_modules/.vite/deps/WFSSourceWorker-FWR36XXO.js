import {
  K
} from "./chunk-3RU6IUIF.js";
import "./chunk-EZXI7GSK.js";
import {
  L,
  O as O2
} from "./chunk-WFUZXUS4.js";
import {
  m
} from "./chunk-YRLGNAUD.js";
import {
  u
} from "./chunk-4QVQG5LC.js";
import "./chunk-UQFAHV7T.js";
import {
  Y
} from "./chunk-COK4R22F.js";
import "./chunk-T6XN76GI.js";
import "./chunk-EZ4QR7V3.js";
import "./chunk-25Y2OKSP.js";
import "./chunk-EMETVH63.js";
import "./chunk-V56SVRSV.js";
import {
  f as f2,
  g as g2
} from "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-X64NQ2GK.js";
import "./chunk-NVOCHKIH.js";
import "./chunk-DGELARKE.js";
import "./chunk-WN3KE5M2.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-CC32E45Q.js";
import "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import {
  ne,
  te
} from "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YG6VFATO.js";
import {
  d
} from "./chunk-FU5UMT3R.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-GRILTTJT.js";
import "./chunk-G4IZ2HTT.js";
import "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  E,
  c
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import "./chunk-2QOWZFCU.js";
import "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  O,
  f,
  g
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  e,
  r
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var E2 = class {
  constructor() {
    this._queryEngine = null, this._customParameters = null, this._snapshotFeatures = async (e2) => {
      const { objectIdField: t } = this._queryEngine, s3 = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureOutputFormat, { customParameters: this._customParameters, dateFields: this._queryEngine.fieldsIndex.dateFields.map((e3) => e3.name), signal: e2 });
      await O2(s3), f(e2);
      const i = L(s3, { geometryType: this._queryEngine.geometryType, hasZ: false, objectIdField: t });
      if (!E(this._queryEngine.spatialReference, c))
        for (const a of i)
          r(a.geometry) && (a.geometry = te(g2(ne(a.geometry, this._queryEngine.geometryType, false, false), c, this._queryEngine.spatialReference)));
      let o = 1;
      for (const r2 of i) {
        const e3 = {};
        m(this._fieldsIndex, e3, r2.attributes, true), r2.attributes = e3, null == r2.attributes[t] && (r2.objectId = r2.attributes[t] = o++);
      }
      return i;
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e2, t) {
    const { getFeatureUrl: r2, getFeatureOutputFormat: i, spatialReference: o, fields: n, geometryType: u2, featureType: p, objectIdField: h, customParameters: c2 } = e2;
    this._featureType = p, this._customParameters = c2, this._getFeatureUrl = r2, this._getFeatureOutputFormat = i, this._fieldsIndex = new d(n), await this._checkProjection(o), f(t), this._queryEngine = new Y({ fields: n, geometryType: u2, hasM: false, hasZ: false, objectIdField: h, spatialReference: o, timeInfo: null, featureStore: new u({ geometryType: u2, hasM: false, hasZ: false }) });
    const m2 = await this._snapshotFeatures(e(t.signal));
    return this._queryEngine.featureStore.addMany(m2), { extent: this._queryEngine.fullExtent };
  }
  async applyEdits() {
    throw new s2("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e2, t.signal);
  }
  async queryFeatureCount(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e2, t.signal);
  }
  async queryObjectIds(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e2, t.signal);
  }
  async queryExtent(e2 = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e2, t.signal);
  }
  async querySnapping(e2, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e2, t.signal);
  }
  async refresh(r2) {
    var _a;
    return this._customParameters = r2, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = O(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), e2 && this._queryEngine.featureStore.addMany(e2);
    }, (r3) => {
      this._queryEngine.featureStore.clear(), g(r3) || s.getLogger("esri.layers.WFSLayer").error(new s2("wfs-layer:getfeature-error", "An error occurred during the GetFeature request", { error: r3 }));
    }), await this._waitSnapshotComplete(), { extent: this._queryEngine.fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _checkProjection(t) {
    try {
      await f2(c, t);
    } catch {
      throw new s2("unsupported-projection", "Projection not supported", { spatialReference: t });
    }
  }
};
export {
  E2 as default
};
//# sourceMappingURL=WFSSourceWorker-FWR36XXO.js.map
