import {
  a
} from "./chunk-PZG7CR4Y.js";
import {
  r as r2
} from "./chunk-2HDG7SIE.js";
import {
  b
} from "./chunk-5Z5455ZY.js";
import {
  r
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  c,
  m
} from "./chunk-G5JBUC5N.js";

// node_modules/@arcgis/core/symbols/CIMSymbol.js
var m2;
var l = m2 = class extends a {
  constructor(r3) {
    super(r3), this.data = null, this.type = "cim";
  }
  readData(r3, o2) {
    return o2;
  }
  writeData(r3, o2) {
    if (r3)
      for (const t in r3)
        o2[t] = r3[t];
  }
  async collectRequiredFields(r3, o2) {
    if ("CIMSymbolReference" === this.data.type) {
      const t = this.data.primitiveOverrides;
      if (t) {
        const e2 = t.map((t2) => {
          const e3 = t2.valueExpressionInfo;
          return b(r3, o2, e3.expression);
        });
        await Promise.all(e2);
      }
    }
  }
  clone() {
    return new m2({ data: m(this.data) });
  }
  hash() {
    return c(JSON.stringify(this.data)).toString();
  }
};
e([d({ json: { write: false } })], l.prototype, "color", void 0), e([d({ json: { write: true } })], l.prototype, "data", void 0), e([o("data", ["symbol"])], l.prototype, "readData", null), e([r("data", {})], l.prototype, "writeData", null), e([r2({ CIMSymbolReference: "cim" }, { readOnly: true })], l.prototype, "type", void 0), l = m2 = e([n("esri.symbols.CIMSymbol")], l);
var d2 = l;

export {
  d2 as d
};
//# sourceMappingURL=chunk-HJHWUUQQ.js.map
