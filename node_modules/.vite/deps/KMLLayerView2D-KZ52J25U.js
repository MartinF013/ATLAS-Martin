import {
  t as t2
} from "./chunk-EYP4YHHR.js";
import {
  i
} from "./chunk-LXAC66BS.js";
import {
  ae
} from "./chunk-TOHMM6FQ.js";
import "./chunk-DQPH5EKZ.js";
import "./chunk-LCW6FHIL.js";
import "./chunk-WKUIJCRG.js";
import "./chunk-XQ337NY7.js";
import {
  f
} from "./chunk-VKEKAYXP.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-2HUXPKKU.js";
import "./chunk-WL7KJZAL.js";
import {
  v as v2
} from "./chunk-YZ46FBEM.js";
import "./chunk-JX3YCNPL.js";
import "./chunk-JERZLQLG.js";
import "./chunk-JWKDNFWF.js";
import "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-SASFTPK5.js";
import "./chunk-Z34NAJDO.js";
import "./chunk-HHJIVHSH.js";
import "./chunk-6UTST6NO.js";
import "./chunk-BYHUWBKS.js";
import "./chunk-IEPHENP2.js";
import "./chunk-436X6OVY.js";
import "./chunk-XP3NTQW6.js";
import "./chunk-UJS24K6P.js";
import "./chunk-RB2H3SKO.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-SNC4BDIX.js";
import "./chunk-3CED37X7.js";
import "./chunk-FMIFCFD7.js";
import "./chunk-WL7AHHN3.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import "./chunk-6FQZDXGD.js";
import "./chunk-ZUKXZSOF.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-4V2P7IXX.js";
import "./chunk-SF7Z6XNR.js";
import "./chunk-YRAX326I.js";
import "./chunk-AKQ6VRGN.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-WN3KE5M2.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-AGO2OES3.js";
import "./chunk-ARI6FRU4.js";
import "./chunk-BBO6WYBO.js";
import "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-ZIAGZEFK.js";
import "./chunk-FR7M4UDR.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-G2GJVIQC.js";
import "./chunk-567AWHAB.js";
import "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-ZEIWFXXO.js";
import "./chunk-YXFNNKMT.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-S5PZEGLP.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-6EODZIDR.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-PQO66WZ2.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import {
  n as n2
} from "./chunk-6FKG7JUE.js";
import {
  rn,
  tn
} from "./chunk-PZWU5EHT.js";
import {
  c
} from "./chunk-37ZVELW7.js";
import "./chunk-YL26MZEL.js";
import "./chunk-YG6VFATO.js";
import {
  b,
  d as d2,
  g as g2
} from "./chunk-CH4NHR4K.js";
import "./chunk-4XBERLPX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import {
  s
} from "./chunk-GVELBHGI.js";
import {
  I,
  v
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M as M2
} from "./chunk-Q72YFZUL.js";
import {
  M,
  g
} from "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var P = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var j2 = class extends f(u) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new t2(), this._kmlVisualData = new P(), this.allVisiblePoints = new c(), this.allVisiblePolylines = new c(), this.allVisiblePolygons = new c(), this.allVisibleMapImages = new j();
  }
  async hitTest(e2, i2) {
    var _a, _b, _c;
    const t3 = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e2), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e2), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e2)].flat().filter(Boolean).map((i3) => (i3.layer = t3, i3.sourceLayer = t3, { type: "graphic", graphic: i3, layer: t3, mapPoint: e2 }));
  }
  update(e2) {
    this._polygonsView && this._polygonsView.processUpdate(e2), this._polylinesView && this._polylinesView.processUpdate(e2), this._pointsView && this._pointsView.processUpdate(e2);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new ae({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new i(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new ae({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new i(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new ae({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new i(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.handles.add([this.allVisibleMapImages.on("change", (e2) => {
      e2.added.forEach((e3) => this._addMapImage(e3)), e2.removed.forEach((e3) => this._removeMapImage(e3));
    }), l(() => this.layer.visibleSublayers, (e2) => {
      for (const [i2, t3] of this._kmlVisualData.allSublayers)
        t3.visibility = 0;
      for (const i2 of e2) {
        const e3 = this._kmlVisualData.allSublayers.get(i2.id);
        e3 && (e3.visibility = 1);
      }
      this._refreshCollections();
    })]), this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal));
  }
  detach() {
    this._fetchController.abort(), this._fetchController = null, this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView && (this._polygonsView.destroy(), this._polygonsView = null), this._polylinesView && (this._polylinesView.destroy(), this._polylinesView = null), this._pointsView && (this._pointsView.destroy(), this._pointsView = null);
  }
  moveStart() {
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e2) {
    (this.view.spatialReference.isWGS84 || this.view.spatialReference.isWebMercator) && U(e2.href, { responseType: "image" }).then(({ data: i2 }) => {
      let t3 = M2.fromJSON(e2.extent);
      g(t3, this.view.spatialReference) && (t3 = M(t3, this.view.spatialReference));
      const s2 = new v2(i2, "standard");
      s2.x = t3.xmin, s2.y = t3.ymax, s2.resolution = t3.width / i2.naturalWidth, s2.rotation = e2.rotation, this._mapImageContainer.addChild(s2), this._bitmapIndex.set(e2, s2);
    });
  }
  async _getViewDependentUrl(e2, t3) {
    const { viewFormat: s2, viewBoundScale: l2, httpQuery: h } = e2;
    if (r(s2)) {
      if (t(t3))
        throw new Error("Loading this network link requires a view state.");
      let p;
      if (await tn(), r(l2) && 1 !== l2) {
        const e3 = new M2(t3.extent);
        e3.expand(l2), p = e3;
      } else
        p = t3.extent;
      p = rn(p, k.WGS84);
      const w = rn(p, k.WebMercator), g3 = p.xmin, u2 = p.xmax, _ = p.ymin, V = p.ymax, f2 = t3.size[0] * t3.pixelRatio, v3 = t3.size[1] * t3.pixelRatio, S = Math.max(w.width, w.height), I2 = { "[bboxWest]": g3.toString(), "[bboxEast]": u2.toString(), "[bboxSouth]": _.toString(), "[bboxNorth]": V.toString(), "[lookatLon]": p.center.x.toString(), "[lookatLat]": p.center.y.toString(), "[lookatRange]": S.toString(), "[lookatTilt]": "0", "[lookatHeading]": t3.rotation.toString(), "[lookatTerrainLon]": p.center.x.toString(), "[lookatTerrainLat]": p.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": p.center.x.toString(), "[cameraLat]": p.center.y.toString(), "[cameraAlt]": S.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": f2.toString(), "[vertPixels]": v3.toString(), "[terrainEnabled]": "0", "[clientVersion]": s, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, C = (e3) => {
        for (const i2 in e3)
          for (const t4 in I2)
            e3[i2] = e3[i2].replace(t4, I2[t4]);
      }, x = v(s2);
      C(x);
      let k2 = {};
      r(h) && (k2 = v(h), C(k2));
      const P2 = n2(e2.href);
      P2.query = { ...P2.query, ...x, ...k2 };
      return `${P2.path}?${I(x)}`;
    }
    return e2.href;
  }
  async _fetchService(e2) {
    const i2 = new P();
    await this._loadVisualData(this.layer.url, i2, e2), this._kmlVisualData = i2, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2));
  }
  _isSublayerVisible(e2) {
    const i2 = this._kmlVisualData.allSublayers.get(e2);
    return !!i2.visibility && (-1 === i2.parentFolderId || this._isSublayerVisible(i2.parentFolderId));
  }
  _loadVisualData(e2, i2, t3) {
    return this._fetchParsedKML(e2, t3).then(async (e3) => {
      for (const s2 of e3.sublayers) {
        i2.allSublayers.set(s2.id, s2);
        const e4 = s2.points ? await b(s2.points) : [], a = s2.polylines ? await b(s2.polylines) : [], o = s2.polygons ? await b(s2.polygons) : [], l2 = s2.mapImages || [];
        if (i2.allPoints.push(...e4.map((e5) => ({ item: e5, sublayerId: s2.id }))), i2.allPolylines.push(...a.map((e5) => ({ item: e5, sublayerId: s2.id }))), i2.allPolygons.push(...o.map((e5) => ({ item: e5, sublayerId: s2.id }))), i2.allMapImages.push(...l2.map((e5) => ({ item: e5, sublayerId: s2.id }))), s2.networkLink) {
          const e5 = await this._getViewDependentUrl(s2.networkLink, this.view.state);
          await this._loadVisualData(e5, i2, t3);
        }
      }
    });
  }
  _fetchParsedKML(e2, i2) {
    return g2(e2, this.view.spatialReference, this.layer.refreshInterval, i2).then((e3) => d2(e3.data));
  }
  _removeMapImage(e2) {
    const i2 = this._bitmapIndex.get(e2);
    i2 && (this._mapImageContainer.removeChild(i2), this._bitmapIndex.delete(e2));
  }
};
e([d()], j2.prototype, "_pointsView", void 0), e([d()], j2.prototype, "_polylinesView", void 0), e([d()], j2.prototype, "_polygonsView", void 0), e([d()], j2.prototype, "updating", void 0), j2 = e([n("esri.views.2d.layers.KMLLayerView2D")], j2);
var M3 = j2;
export {
  M3 as default
};
//# sourceMappingURL=KMLLayerView2D-KZ52J25U.js.map
