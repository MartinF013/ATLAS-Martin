import {
  s
} from "./chunk-EQNRDJV7.js";
import {
  r
} from "./chunk-FEEXJRYO.js";

// node_modules/@arcgis/core/geometry/geometryEngine.js
function r2(n) {
  return Array.isArray(n) ? n[0].spatialReference : n && n.spatialReference;
}
function t(e) {
  return s.extendedSpatialReferenceInfo(e);
}
function u(t2, u2) {
  return s.clip(r, r2(t2), t2, u2);
}
function i(t2, u2) {
  return s.cut(r, r2(t2), t2, u2);
}
function o(t2, u2) {
  return s.contains(r, r2(t2), t2, u2);
}
function c(t2, u2) {
  return s.crosses(r, r2(t2), t2, u2);
}
function f(t2, u2, i2) {
  return s.distance(r, r2(t2), t2, u2, i2);
}
function l(t2, u2) {
  return s.equals(r, r2(t2), t2, u2);
}
function s2(t2, u2) {
  return s.intersects(r, r2(t2), t2, u2);
}
function a(t2, u2) {
  return s.touches(r, r2(t2), t2, u2);
}
function p(t2, u2) {
  return s.within(r, r2(t2), t2, u2);
}
function g(t2, u2) {
  return s.disjoint(r, r2(t2), t2, u2);
}
function m(t2, u2) {
  return s.overlaps(r, r2(t2), t2, u2);
}
function d(t2, u2, i2) {
  return s.relate(r, r2(t2), t2, u2, i2);
}
function x(t2) {
  return s.isSimple(r, r2(t2), t2);
}
function w(t2) {
  return s.simplify(r, r2(t2), t2);
}
function E(t2, u2 = false) {
  return s.convexHull(r, r2(t2), t2, u2);
}
function h(t2, u2) {
  return s.difference(r, r2(t2), t2, u2);
}
function A(t2, u2) {
  return s.symmetricDifference(r, r2(t2), t2, u2);
}
function y(t2, u2) {
  return s.intersect(r, r2(t2), t2, u2);
}
function R(t2, u2 = null) {
  return s.union(r, r2(t2), t2, u2);
}
function I(t2, u2, i2, o2, c2, f2) {
  return s.offset(r, r2(t2), t2, u2, i2, o2, c2, f2);
}
function S(t2, u2, i2, o2 = false) {
  return s.buffer(r, r2(t2), t2, u2, i2, o2);
}
function j(t2, u2, i2, o2, c2, f2) {
  return s.geodesicBuffer(r, r2(t2), t2, u2, i2, o2, c2, f2);
}
function J(t2, u2, i2 = true) {
  return s.nearestCoordinate(r, r2(t2), t2, u2, i2);
}
function N(t2, u2) {
  return s.nearestVertex(r, r2(t2), t2, u2);
}
function O(t2, u2, i2, o2) {
  return s.nearestVertices(r, r2(t2), t2, u2, i2, o2);
}
function V(n) {
  return "xmin" in n ? "center" in n ? n.center : null : "x" in n ? n : "extent" in n ? n.extent.center : null;
}
function v(e, r3, t2) {
  if (null == e)
    throw new Error("Illegal Argument Exception");
  const u2 = e.spatialReference;
  if (null == (t2 = t2 ?? V(e)))
    throw new Error("Illegal Argument Exception");
  const i2 = e.constructor.fromJSON(s.rotate(e, r3, t2));
  return i2.spatialReference = u2, i2;
}
function z(e, r3) {
  if (null == e)
    throw new Error("Illegal Argument Exception");
  const t2 = e.spatialReference;
  if (null == (r3 = r3 ?? V(e)))
    throw new Error("Illegal Argument Exception");
  const u2 = e.constructor.fromJSON(s.flipHorizontal(e, r3));
  return u2.spatialReference = t2, u2;
}
function B(e, r3) {
  if (null == e)
    throw new Error("Illegal Argument Exception");
  const t2 = e.spatialReference;
  if (null == (r3 = r3 ?? V(e)))
    throw new Error("Illegal Argument Exception");
  const u2 = e.constructor.fromJSON(s.flipVertical(e, r3));
  return u2.spatialReference = t2, u2;
}
function D(t2, u2, i2, o2) {
  return s.generalize(r, r2(t2), t2, u2, i2, o2);
}
function H(t2, u2, i2) {
  return s.densify(r, r2(t2), t2, u2, i2);
}
function L(t2, u2, i2, o2 = 0) {
  return s.geodesicDensify(r, r2(t2), t2, u2, i2, o2);
}
function b(t2, u2) {
  return s.planarArea(r, r2(t2), t2, u2);
}
function k(t2, u2) {
  return s.planarLength(r, r2(t2), t2, u2);
}
function q(t2, u2, i2) {
  return s.geodesicArea(r, r2(t2), t2, u2, i2);
}
function C(t2, u2, i2) {
  return s.geodesicLength(r, r2(t2), t2, u2, i2);
}

export {
  t,
  u,
  i,
  o,
  c,
  f,
  l,
  s2 as s,
  a,
  p,
  g,
  m,
  d,
  x,
  w,
  E,
  h,
  A,
  y,
  R,
  I,
  S,
  j,
  J,
  N,
  O,
  v,
  z,
  B,
  D,
  H,
  L,
  b,
  k,
  q,
  C
};
//# sourceMappingURL=chunk-AWWWJUTQ.js.map
