import {
  e as e2,
  t as t2
} from "./chunk-LAHCYKZK.js";
import {
  L
} from "./chunk-4CRT3CQZ.js";
import {
  j
} from "./chunk-T7BEWVV3.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/layers/TiledLayerView3D.js
var c = (c2) => {
  let m = class extends c2 {
    get imageFormatIsOpaque() {
      return false;
    }
    get fullExtent() {
      return this.layer.fullExtent;
    }
    get isOpaque() {
      return this.fullOpacity >= 1 && this.imageFormatIsOpaque;
    }
    get dataLevelRange() {
      const e3 = this.tileInfo.lods, t3 = e3[0].scale, r2 = e3[e3.length - 1].scale;
      return this.levelRangeFromScaleRange(t3, r2);
    }
    get displayLevelRange() {
      const e3 = this.tileInfo.lods, t3 = this.layer.minScale || e3[0].scale, r2 = this.layer.maxScale || e3[e3.length - 1].scale, i = this.levelRangeFromScaleRange(t3, r2);
      return this.layer.maxScale && i.maxLevel++, i;
    }
    getTileUrl(e3, t3, r2) {
      return this.layer.getTileUrl(e3, t3, r2);
    }
    _addTilingSchemeMatchPromise() {
      if (t(this.fullExtent))
        return this.addResolvingPromise(Promise.reject(new s("tilingscheme:extent-not-defined", "This layer doesn't define a fullExtent.")));
      const e3 = this._getTileInfoSupportError(this.tileInfo, this.fullExtent);
      if (r(e3))
        return this.addResolvingPromise(Promise.reject(e3));
      const a = j(() => {
        var _a, _b;
        return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
      }).then(() => {
        const e4 = this.view.basemapTerrain.tilingScheme, t3 = this._getTileInfoCompatibilityError(this.tileInfo, e4);
        if (t3)
          throw t3;
      });
      this.addResolvingPromise(a);
    }
    _getTileInfoSupportError(e3, r2) {
      const i = L(e3, r2, this.view.spatialReference, this.view.state.viewingMode);
      if (i) {
        const e4 = { layer: this.layer, error: i };
        let r3;
        switch (i.name) {
          case "tilingscheme:spatial-reference-mismatch":
          case "tilingscheme:global-unsupported-spatial-reference":
          case "tilingscheme:local-unsupported-spatial-reference":
            r3 = new s("layerview:spatial-reference-incompatible", "The spatial reference of this layer does not meet the requirements of the view", e4);
            break;
          default:
            r3 = new s("layerview:tiling-scheme-unsupported", "The tiling scheme of this layer is not supported by SceneView", e4);
        }
        return r3;
      }
      return null;
    }
    _getTileInfoCompatibilityError(e3, r2) {
      return r2.compatibleWith(e3) ? null : new s("layerview:tiling-scheme-incompatible", "The tiling scheme of this layer is incompatible with the tiling scheme of the surface");
    }
    levelRangeFromScaleRange(e3, t3) {
      const r2 = { minLevel: 0, maxLevel: 1 / 0 }, i = this.view && this.view.basemapTerrain && this.view.basemapTerrain.tilingScheme;
      if (!i)
        return r2;
      const s2 = i.levels[0], a = (e4) => {
        const t4 = Math.log(s2.scale / e4) / Math.LN2;
        return 0.5 - Math.abs(0.5 - t4 % 1) < 1e-9 ? Math.round(t4) : Math.ceil(t4);
      };
      return null != e3 && e3 > 0 && (r2.minLevel = Math.max(0, a(e3))), null != t3 && t3 > 0 && (r2.maxLevel = Math.max(0, a(t3))), r2;
    }
    isUpdating() {
      return !!(this.view && this.view.basemapTerrain && this.view.basemapTerrain.updating);
    }
  };
  return e([d({ readOnly: true })], m.prototype, "imageFormatIsOpaque", null), e([d({ readOnly: true })], m.prototype, "updating", void 0), e([d(t2)], m.prototype, "updatingProgress", void 0), e([d(e2)], m.prototype, "updatingProgressValue", void 0), e([d()], m.prototype, "fullExtent", null), e([d({ readOnly: true })], m.prototype, "isOpaque", null), e([d({ readOnly: true })], m.prototype, "dataLevelRange", null), e([d({ readOnly: true })], m.prototype, "displayLevelRange", null), e([d()], m.prototype, "layer", void 0), e([d()], m.prototype, "tileInfo", void 0), m = e([n("esri.views.3d.layers.TiledLayerView3D")], m), m;
};

export {
  c
};
//# sourceMappingURL=chunk-CULPK55Q.js.map
