{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/Fog.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport{a as e}from\"./mat4.js\";import{c as r}from\"./mat4f64.js\";import{TextureCoordinateAttribute as a,TextureCoordinateAttributeType as o}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{ReadLinearDepth as t}from\"../views/3d/webgl-engine/core/shaderLibrary/output/ReadLinearDepth.glsl.js\";import{Gamma as i}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/Gamma.glsl.js\";import{Float2PassUniform as n}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float3Uniform as d}from\"../views/3d/webgl-engine/core/shaderModules/Float3Uniform.js\";import{FloatUniform as s}from\"../views/3d/webgl-engine/core/shaderModules/FloatUniform.js\";import{glsl as m}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{Matrix4PassUniform as c}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4PassUniform.js\";import{ShaderBuilder as l}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DUniform.js\";import{VertexAttribute as p}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";function g(r){const g=new l;g.attributes.add(p.POSITION,\"vec2\"),g.include(a,{textureCoordinateType:o.Default}),g.varyings.add(\"worldRay\",\"vec3\"),g.varyings.add(\"eyeDir\",\"vec3\");const{vertex:u,fragment:w}=g;return u.uniforms.add([new c(\"inverseProjectionMatrix\",((e,r)=>r.camera.inverseProjectionMatrix)),new c(\"inverseViewMatrix\",((r,a)=>e(v,a.camera.viewMatrix)))]),u.code.add(m`void main(void) {\nvec3 posViewNear = (inverseProjectionMatrix * vec4(position, -1, 1)).xyz;\neyeDir = posViewNear;\nworldRay = (inverseViewMatrix * vec4(posViewNear, 0)).xyz;\nforwardTextureCoordinates();\ngl_Position = vec4(position, 1, 1);\n}`),w.uniforms.add(new s(\"atmosphereC\")),w.uniforms.add(new d(\"cameraPosition\")),w.uniforms.add(new n(\"nearFar\",((e,r)=>r.camera.nearFar))),w.uniforms.add(new f(\"depthTex\")),w.uniforms.add(new s(\"fogStrength\")),w.uniforms.add(new s(\"fogAmount\")),w.uniforms.add(new d(\"fogColor\")),g.include(i),w.include(t),w.code.add(m`vec2 sphereIntersect(vec3 start, vec3 dir) {\nfloat a = dot(dir, dir);\nfloat b = 2.0 * dot(dir, start);\nfloat d = (b * b) - 4.0 * a * atmosphereC;\nif (d < 0.0) {\nreturn vec2(1e5, -1e5);\n}\nreturn vec2((-b - sqrt(d)) / (2.0 * a), (-b + sqrt(d)) / (2.0 * a));\n}`),w.code.add(m`vec4 applyFog(float dist, vec3 rayDir){\nif(dist == -1.0){\nvec2 rayAtmosphereIntersect = sphereIntersect(cameraPosition, rayDir);\ndist = 0.055 * rayAtmosphereIntersect.y;\n}\nfloat fogAmount = fogAmount * (1.0 - exp(-dist * fogStrength));\nreturn vec4(fogAmount * fogColor, fogAmount);\n}`),w.code.add(m`\n    vec3 tonemapACES(vec3 x) {\n      return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n    }\n\n    void main() {\n      vec3 rayDir = normalize(worldRay);\n      float terrainDepth = -1.0;\n\n      float depthSample = texture2D(depthTex, vuv0).r;\n      float zNorm = 2.0 * depthSample - 1.0;\n      float linDepth = 2.0 * nearFar[0] * nearFar[1] / (nearFar[1] + nearFar[0] - zNorm * (nearFar[1] - nearFar[0]));\n      if(depthSample < 1.0 && depthSample > 0.0){\n        vec3 cameraSpaceRay = normalize(eyeDir);\n        cameraSpaceRay /= cameraSpaceRay.z;\n        cameraSpaceRay *= linDepth;\n        terrainDepth = max(0.0, length(cameraSpaceRay));\n      }\n\n      ${r.haze?m`\n          if(terrainDepth == -1.0){\n            gl_FragColor = vec4(0);\n            return;\n          }`:\"\"}\n\n      vec4 fog = applyFog(terrainDepth, rayDir);\n\n      gl_FragColor = delinearizeGamma(vec4(tonemapACES(fog.rgb), fog.a));\n    }\n  `),g}const v=r(),u=Object.freeze(Object.defineProperty({__proto__:null,build:g},Symbol.toStringTag,{value:\"Module\"}));export{u as F,g as b};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIwpC,SAAS,EAAEA,IAAE;AAAC,QAAMC,KAAE,IAAI;AAAE,EAAAA,GAAE,WAAW,IAAI,EAAE,UAAS,MAAM,GAAEA,GAAE,QAAQ,GAAE,EAAC,uBAAsB,EAAE,QAAO,CAAC,GAAEA,GAAE,SAAS,IAAI,YAAW,MAAM,GAAEA,GAAE,SAAS,IAAI,UAAS,MAAM;AAAE,QAAK,EAAC,QAAOC,IAAE,UAAS,EAAC,IAAED;AAAE,SAAOC,GAAE,SAAS,IAAI,CAAC,IAAIC,GAAE,2BAA2B,CAACA,IAAEH,OAAIA,GAAE,OAAO,uBAAwB,GAAE,IAAIG,GAAE,qBAAqB,CAACH,IAAEI,OAAI,EAAE,GAAEA,GAAE,OAAO,UAAU,CAAE,CAAC,CAAC,GAAEF,GAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhhD,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,aAAa,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIG,GAAE,gBAAgB,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIF,GAAE,WAAW,CAACA,IAAEH,OAAIA,GAAE,OAAO,OAAQ,CAAC,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,UAAU,CAAC,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,aAAa,CAAC,GAAE,EAAE,SAAS,IAAI,IAAI,EAAE,WAAW,CAAC,GAAE,EAAE,SAAS,IAAI,IAAIK,GAAE,UAAU,CAAC,GAAEJ,GAAE,QAAQE,EAAC,GAAE,EAAE,QAAQ,CAAC,GAAE,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ3T,GAAE,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOb,GAAE,EAAE,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAmBPH,GAAE,OAAK;AAAA;AAAA;AAAA;AAAA,eAIF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAMV,GAAEC;AAAC;AAAC,IAAM,IAAE,EAAE;AAAV,IAAY,IAAE,OAAO,OAAO,OAAO,eAAe,EAAC,WAAU,MAAK,OAAM,EAAC,GAAE,OAAO,aAAY,EAAC,OAAM,SAAQ,CAAC,CAAC;",
  "names": ["r", "g", "u", "e", "a", "o"]
}
