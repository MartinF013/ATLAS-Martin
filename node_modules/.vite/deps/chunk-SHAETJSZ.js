import {
  o as o3
} from "./chunk-A3D26CKY.js";
import {
  n as n4
} from "./chunk-WSQIVEW5.js";
import {
  o as o2
} from "./chunk-3236UEJN.js";
import {
  f
} from "./chunk-B3IXFXV6.js";
import {
  l as l2
} from "./chunk-DVE4HUBR.js";
import {
  c
} from "./chunk-DMGVDNFD.js";
import {
  e
} from "./chunk-4MKQUQD4.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  H,
  T
} from "./chunk-PLLZPG4O.js";
import {
  n as n3,
  t
} from "./chunk-NAB3NF54.js";
import {
  n as n2
} from "./chunk-U7B2WKBH.js";
import {
  l,
  s,
  y
} from "./chunk-56RHM4A6.js";
import {
  n
} from "./chunk-AIRC226G.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/renderPasses/AllRenderPasses.js
var r = class extends f {
  constructor() {
    super(...arguments), this.slicePlaneLocalOrigin = n(), this.origin = this.slicePlaneLocalOrigin;
  }
};
var a;
var o4;
!function(t2) {
  t2[t2.Material = 0] = "Material", t2[t2.ShadowMap = 1] = "ShadowMap", t2[t2.Highlight = 2] = "Highlight";
}(a || (a = {})), function(t2) {
  t2[t2.Color = 0] = "Color", t2[t2.Alpha = 1] = "Alpha", t2[t2.Depth = 2] = "Depth", t2[t2.Normal = 3] = "Normal";
}(o4 || (o4 = {}));
var l3 = class extends r {
  constructor() {
    super(...arguments), this.identifier = a.Material, this.transparent = false, this.integratedMesh = false;
  }
};
var n5 = class extends r {
  constructor() {
    super(...arguments), this.identifier = a.ShadowMap;
  }
};
var h = class extends r {
  constructor() {
    super(...arguments), this.identifier = a.Highlight;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js
var p;
!function(e2) {
  e2[e2.Disabled = 0] = "Disabled", e2[e2.Enabled = 1] = "Enabled", e2[e2.EnabledWithWater = 2] = "EnabledWithWater", e2[e2.COUNT = 3] = "COUNT";
}(p || (p = {}));
var g = class extends t {
  constructor() {
    super(...arguments), this.overlayOpacity = 1;
  }
};
function h2(e2, o5) {
  e2.vertex.uniforms.add([new o2("overlayTexOffset"), new o2("overlayTexScale")]), e2.fragment.uniforms.add([new o("overlayOpacity", (e3) => e3.overlayOpacity), new c("ovColorTex", (e3, o6) => 0 === o6.overlays.length ? null : o6.overlays[T.INNER].getColorTexture(e3.overlaySource))]), M(e2, o5);
}
function C(e2, o5) {
  const { vertex: r2, fragment: t2 } = e2;
  r2.uniforms.add([new o3("overlayTexOffset", (e3, o6) => b(e3, o6)), new o3("overlayTexScale", (e3, o6) => T2(e3, o6))]), t2.constants.add("overlayOpacity", "float", 1), t2.uniforms.add(new c("ovColorTex", (e3, o6) => O(e3, o6))), M(e2, o5);
}
function M(e2, o5) {
  e2.extensions.add("GL_OES_standard_derivatives"), o5.pbrMode !== l2.Water && o5.pbrMode !== l2.WaterOnIntegratedMesh || e2.include(n4, o5);
  const { vertex: r2, fragment: t2 } = e2;
  e2.varyings.add("vtcOverlay", "vec4"), r2.code.add(n3`void setOverlayVTC(in vec2 uv) {
vtcOverlay = vec4(uv, uv) * overlayTexScale + overlayTexOffset;
}`), t2.code.add(n3`bool isValid(vec2 uv, vec2 dxdy) {
return (uv.x >= 0.0 + dxdy.x) && (uv.x <= 1.0 - dxdy.x) && (uv.y >= 0.0 + dxdy.y) && (uv.y <= 1.0 - dxdy.y);
}
vec4 getOverlayColor(sampler2D ov0Tex, vec4 texCoords) {
vec4 color0 = texture2D(ov0Tex, vec2(texCoords.x * 0.5, texCoords.y));
vec4 color1 = texture2D(ov0Tex, vec2(texCoords.z * 0.5 + 0.5, texCoords.w));
bool isValid0 = isValid(texCoords.xy, fwidth(texCoords.xy));
bool isValid1 = isValid(texCoords.zw, vec2(0.0, 0.0));
return mix(color1 * float(isValid1), color0, float(isValid0));
}`), t2.code.add(n3`vec4 getCombinedOverlayColor() {
return overlayOpacity * getOverlayColor(ovColorTex, vtcOverlay);
}`), o5.pbrMode !== l2.Water && o5.pbrMode !== l2.WaterOnIntegratedMesh || (t2.uniforms.add([new e("lightingMainDirection", (e3, o6) => o6.lighting.lightingMainDirection), new e("lightingMainIntensity", (e3, o6) => o6.lighting.mainLight.intensity)]), t2.code.add(n3`vec4 getOverlayWaterColor(vec4 maskInput, vec4 colorInput, vec3 vposEyeDir,
float shadow, vec3 localUp, mat3 tbn, vec3 position, vec3 positionWorld) {
vec3 n = normalize(tbn *  (2.0 * maskInput.rgb - vec3(1.0)));
vec3 v = vposEyeDir;
vec3 final = getSeaColor(n, v, lightingMainDirection, colorInput.rgb, lightingMainIntensity, localUp, 1.0 - shadow, maskInput.w, position, positionWorld);
return vec4(final, colorInput.w);
}`));
}
function O(e2, o5) {
  return 0 === o5.overlays.length ? null : e2.identifier === a.Material && e2.subPass === o4.Color ? o5.overlays[T.INNER].getColorTextureNoRasterImage() : e2.identifier === a.Highlight ? o5.overlays[T.INNER].getValidTexture(H.Highlight) : null;
}
function b(e2, a2) {
  for (const n6 of a2.overlays) {
    const { index: a3, extent: i } = n6;
    y(i) > 0 && (w[2 * a3] = e2.toMapSpace[0] / s(i) - i[0] / s(i), w[2 * a3 + 1] = e2.toMapSpace[1] / l(i) - i[1] / l(i));
  }
  return w;
}
function T2(e2, a2) {
  for (const n6 of a2.overlays) {
    const { index: a3, extent: i } = n6;
    y(i) > 0 && (w[2 * a3] = e2.toMapSpace[2] / s(i), w[2 * a3 + 1] = e2.toMapSpace[3] / l(i));
  }
  return w;
}
var w = n2();

export {
  a,
  o4 as o,
  l3 as l,
  n5 as n,
  h,
  p,
  g,
  h2,
  C,
  O
};
//# sourceMappingURL=chunk-SHAETJSZ.js.map
