import {
  z
} from "./chunk-3ZEVQCCO.js";
import "./chunk-5KER37ZC.js";
import "./chunk-IEPHENP2.js";
import "./chunk-436X6OVY.js";
import "./chunk-RB2H3SKO.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-RGZ7VIMW.js";
import "./chunk-SF7Z6XNR.js";
import "./chunk-HH3D3A65.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-ZEIWFXXO.js";
import "./chunk-YXFNNKMT.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-YZNDHJDJ.js";
import {
  l
} from "./chunk-ZDSMRGKC.js";
import {
  t
} from "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RRFFPL7N.js";
import {
  c,
  i
} from "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-GRILTTJT.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import {
  e
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import "./chunk-2QOWZFCU.js";
import "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var s = new z(null, true);
var n = t.maxSize;
async function r(t2, a = {}) {
  const { size: r2, maxSize: c2, node: m, opacity: f } = a, p = a.cimOptions || a, { feature: y, fieldMap: h, geometryType: u, style: d } = p, g = i(t2), w = "number" == typeof r2 ? r2 : null, b = Math.min(null != w ? w : g, null != c2 ? c2 : e(n));
  b !== g && (t2 = t2.clone(), c(t2, b, { preserveOutlineWidth: true }));
  let M = 3;
  t2 && t2.data && t2.data.symbol && "CIMPointSymbol" !== t2.data.symbol.type && (M = 1);
  const S = await s.rasterizeCIMSymbolAsync(t2, y, h, u, { scaleFactor: M, style: d }), j = document.createElement("canvas");
  j.width = S.imageData.width, j.height = S.imageData.height;
  j.getContext("2d").putImageData(S.imageData, 0, 0);
  let x = j.width / M, z2 = j.height / M;
  if (null != r2 && (null == (a == null ? void 0 : a.scale) || (a == null ? void 0 : a.scale))) {
    const e2 = x / z2;
    x = e2 <= 1 ? Math.ceil(b * e2) : b, z2 = e2 <= 1 ? b : Math.ceil(b / e2);
  }
  const C = new Image(x, z2);
  C.src = j.toDataURL(), null != f && (C.style.opacity = `${f}`);
  let D = C;
  if (null != a.effectView) {
    const e2 = { shape: { type: "image", x: 0, y: 0, width: x, height: z2, src: C.src }, fill: null, stroke: null, offset: [0, 0] };
    D = l([[e2]], [x, z2], { effectView: a.effectView });
  }
  return m && m.appendChild(D), D;
}
export {
  r as previewCIMSymbol
};
//# sourceMappingURL=previewCIMSymbol-2UNZXC6V.js.map
