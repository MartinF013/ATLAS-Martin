import {
  b
} from "./chunk-P3QN5DXX.js";
import {
  a
} from "./chunk-QKRZMDWG.js";
import {
  B
} from "./chunk-Q3R7XFM5.js";
import {
  p
} from "./chunk-JCPK2OXG.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import {
  n as n2
} from "./chunk-GVELBHGI.js";
import {
  F,
  N
} from "./chunk-5N3FSR63.js";
import {
  r as r2
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  f,
  g,
  w
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/layers/mixins/PortalLayer.js
var w2 = s.getLogger("esri.layers.mixins.PortalLayer");
var v = (i) => {
  let v2 = class extends i {
    constructor() {
      super(...arguments), this.resourceReferences = { portalItem: null, paths: [] }, this.userHasEditingPrivileges = true;
    }
    destroy() {
      var _a;
      (_a = this.portalItem) == null ? void 0 : _a.destroy(), this.portalItem = null;
    }
    set portalItem(t2) {
      t2 !== this._get("portalItem") && (this.removeOrigin("portal-item"), this._set("portalItem", t2));
    }
    readPortalItem(t2, r3, e2) {
      if (r3.itemId)
        return new b({ id: r3.itemId, portal: e2 && e2.portal });
    }
    writePortalItem(t2, r3) {
      t2 && t2.id && (r3.itemId = t2.id);
    }
    async loadFromPortal(t2, r3) {
      if (this.portalItem && this.portalItem.id)
        try {
          const e2 = await import("./layersLoader-5BYY5UZZ.js");
          return f(r3), await e2.load({ instance: this, supportedTypes: t2.supportedTypes, validateItem: t2.validateItem, supportsData: t2.supportsData }, r3);
        } catch (e2) {
          throw g(e2) || w2.warn(`Failed to load layer (${this.title}, ${this.id}) portal item (${this.portalItem.id})
  ${e2}`), e2;
        }
    }
    async finishLoadEditablePortalLayer(t2) {
      this._set("userHasEditingPrivileges", await this._fetchUserHasEditingPrivileges(t2).catch((t3) => (w(t3), true)));
    }
    async _fetchUserHasEditingPrivileges(t2) {
      var _a;
      const e2 = this.url ? (_a = n2) == null ? void 0 : _a.findCredential(this.url) : null;
      if (!e2)
        return true;
      const s3 = P.credential === e2 ? P.user : await this._fetchEditingUser(t2);
      return P.credential = e2, P.user = s3, t(s3) || null == s3.privileges || s3.privileges.includes("features:user:edit");
    }
    async _fetchEditingUser(t2) {
      var _a, _b;
      const o2 = (_b = (_a = this.portalItem) == null ? void 0 : _a.portal) == null ? void 0 : _b.user;
      if (o2)
        return o2;
      const i2 = n2.findServerInfo(this.url);
      if (!(i2 == null ? void 0 : i2.owningSystemUrl))
        return null;
      const a2 = `${i2.owningSystemUrl}/sharing/rest`, p2 = B.getDefault();
      if (p2 && p2.loaded && F(p2.restUrl) === F(a2))
        return p2.user;
      const n3 = `${a2}/community/self`, m = r(t2) ? t2.signal : null, u = await a(U(n3, { authMode: "no-prompt", query: { f: "json" }, signal: m }));
      return u.ok ? p.fromJSON(u.value.data) : null;
    }
    read(t2, r3) {
      r3 && (r3.layer = this), super.read(t2, r3);
    }
    write(t2, r3) {
      const e2 = r3 && r3.portal, s3 = this.portalItem && this.portalItem.id && (this.portalItem.portal || B.getDefault());
      return e2 && s3 && !N(s3.restUrl, e2.restUrl) ? (r3.messages && r3.messages.push(new s2("layer:cross-portal", `The layer '${this.title} (${this.id})' cannot be persisted because it refers to an item on a different portal than the one being saved to. To save, set layer.portalItem to null or save to the same portal as the item associated with the layer`, { layer: this })), null) : super.write(t2, { ...r3, layer: this });
    }
  };
  return e([d({ type: b })], v2.prototype, "portalItem", null), e([o("web-document", "portalItem", ["itemId"])], v2.prototype, "readPortalItem", null), e([r2("web-document", "portalItem", { itemId: { type: String } })], v2.prototype, "writePortalItem", null), e([d({ clonable: false })], v2.prototype, "resourceReferences", void 0), e([d({ readOnly: true })], v2.prototype, "userHasEditingPrivileges", void 0), v2 = e([n("esri.layers.mixins.PortalLayer")], v2), v2;
};
var P = { credential: null, user: null };

export {
  v
};
//# sourceMappingURL=chunk-OG6CQEZJ.js.map
