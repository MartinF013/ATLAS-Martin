import {
  f
} from "./chunk-FUKESVWQ.js";
import {
  c
} from "./chunk-T3KDRLPE.js";
import {
  u
} from "./chunk-EJ7RFMRW.js";
import {
  t
} from "./chunk-33INAWJA.js";
import {
  C,
  F,
  G,
  L,
  M,
  P
} from "./chunk-FPMD6IB4.js";
import {
  E
} from "./chunk-Y55TYMBP.js";
import {
  O
} from "./chunk-VMF4NMEB.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/DefaultVertexBufferLayouts.js
var n = [new t(O.POSITION, 3, C.FLOAT, 0, 12)];
var w = [new t(O.POSITION, 3, C.FLOAT, 0, 20), new t(O.UV0, 2, C.FLOAT, 12, 20)];
var I = [new t(O.POSITION, 3, C.FLOAT, 0, 32), new t(O.NORMAL, 3, C.FLOAT, 12, 32), new t(O.UV0, 2, C.FLOAT, 24, 32)];
var r = [new t(O.POSITION, 3, C.FLOAT, 0, 16), new t(O.COLOR, 4, C.UNSIGNED_BYTE, 12, 16)];
var t2 = [new t(O.POSITION, 2, C.FLOAT, 0, 8)];
var A = [new t(O.POSITION, 2, C.FLOAT, 0, 16), new t(O.UV0, 2, C.FLOAT, 8, 16)];

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/glUtil3D.js
function u2(a, i = t2, m = E, l = -1, T = 1) {
  let u3 = null;
  if (i === A)
    u3 = new Float32Array([l, l, 0, 0, T, l, 1, 0, l, T, 0, 1, T, T, 1, 1]);
  else
    u3 = new Float32Array([l, l, T, l, l, T, T, T]);
  return new f(a, m, { geometry: i }, { geometry: c.createVertex(a, F.STATIC_DRAW, u3) });
}
function g(r2, a = t2, i = E) {
  const m = new Float32Array([-1, -1, 3, -1, -1, 3]);
  return new f(r2, i, { geometry: a }, { geometry: c.createVertex(r2, F.STATIC_DRAW, m) });
}
var E2 = 4;
function w2(e, t3 = E2) {
  return new u(e, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, width: t3, height: t3 });
}
function A2(e, t3, r2 = E2) {
  const o = new Uint8Array(r2 * r2 * 4);
  for (let n2 = 0; n2 < o.length; n2 += 4)
    o[n2 + 0] = 255 * t3[0], o[n2 + 1] = 255 * t3[1], o[n2 + 2] = 255 * t3[2], o[n2 + 3] = 255 * t3[3];
  return new u(e, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, width: r2, height: r2 }, o);
}
function p(e) {
  return new u(e, { target: M.TEXTURE_2D, pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.NEAREST, width: 1, height: 1 }, new Uint8Array([255, 255, 255, 255]));
}

export {
  t2 as t,
  A,
  u2 as u,
  g,
  w2 as w,
  A2,
  p
};
//# sourceMappingURL=chunk-PWYPPSAW.js.map
