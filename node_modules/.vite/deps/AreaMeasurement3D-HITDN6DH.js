import {
  s as s2,
  t as t4,
  v as v2
} from "./chunk-7Q7UV72N.js";
import "./chunk-2ZFIKSC6.js";
import {
  E
} from "./chunk-6CMUWHIK.js";
import {
  B,
  z
} from "./chunk-RED2ALFM.js";
import {
  _
} from "./chunk-TVBLDFP3.js";
import {
  a
} from "./chunk-R5LRVAQP.js";
import {
  y
} from "./chunk-EEPTXXKK.js";
import "./chunk-JYWDI7GA.js";
import "./chunk-MQZSD3AZ.js";
import "./chunk-5CAQC3RU.js";
import "./chunk-A5WV4QY7.js";
import "./chunk-PH7BQFVK.js";
import {
  c
} from "./chunk-SUK6SE2D.js";
import {
  r as r3
} from "./chunk-B6K3W2TL.js";
import {
  p,
  r as r2
} from "./chunk-22MSECLU.js";
import "./chunk-PTJ3MGYO.js";
import "./chunk-DSCM4HDL.js";
import "./chunk-WGMCNMOI.js";
import "./chunk-UV5UBITC.js";
import "./chunk-PUU4QXN5.js";
import {
  Z
} from "./chunk-HPO2NV7P.js";
import "./chunk-22O7HU3A.js";
import "./chunk-PQM6RARY.js";
import "./chunk-5ZS6RUSM.js";
import "./chunk-R3PFJUIG.js";
import "./chunk-GKYJJGE3.js";
import "./chunk-3236UEJN.js";
import "./chunk-KSOWE6GO.js";
import "./chunk-HRAEK6P4.js";
import "./chunk-K6UIDSFF.js";
import {
  T
} from "./chunk-52W4YMC2.js";
import "./chunk-YLSPLHY5.js";
import "./chunk-4GGQTXXY.js";
import "./chunk-XEWFCJLT.js";
import "./chunk-ZEDAE7EU.js";
import "./chunk-7OZR6JFF.js";
import "./chunk-NXOQBIK7.js";
import "./chunk-ERNXFM5T.js";
import "./chunk-6ITXWFMK.js";
import "./chunk-SV4VP57N.js";
import "./chunk-PWYPPSAW.js";
import "./chunk-5EXPMKQP.js";
import "./chunk-B7F3T673.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-YSWURJZW.js";
import "./chunk-O7YSDCZE.js";
import "./chunk-767LZ6IM.js";
import "./chunk-WJDUBZ7S.js";
import "./chunk-DNPZNIDB.js";
import "./chunk-WW7VYUQW.js";
import "./chunk-FCDEMPPS.js";
import "./chunk-TEJEYVH4.js";
import "./chunk-HEZ2ATGC.js";
import "./chunk-AALA53RH.js";
import "./chunk-BOVIIQLB.js";
import "./chunk-IJHFAZOW.js";
import "./chunk-DMGVDNFD.js";
import "./chunk-YAQGRU5B.js";
import "./chunk-M3GMIUQS.js";
import "./chunk-BMA2CXVS.js";
import "./chunk-46N7XS5M.js";
import "./chunk-4MKQUQD4.js";
import "./chunk-A3QLZKCF.js";
import "./chunk-OYAHQ564.js";
import "./chunk-LGILR4HN.js";
import "./chunk-I5UNY2WQ.js";
import "./chunk-EYJ2F5XB.js";
import "./chunk-TR3U55RZ.js";
import "./chunk-3DCTMZI6.js";
import "./chunk-33INAWJA.js";
import "./chunk-5WOO2FX6.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-MQBVOUKB.js";
import {
  t as t3,
  x
} from "./chunk-WQLER7IU.js";
import "./chunk-7GTYHKA3.js";
import "./chunk-MOXYEJRV.js";
import "./chunk-EEJIELE6.js";
import "./chunk-Y55TYMBP.js";
import "./chunk-NAB3NF54.js";
import "./chunk-MHB3L22D.js";
import "./chunk-MDCKEJ7B.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-VMF4NMEB.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-72PB636Q.js";
import "./chunk-SOZCO2CU.js";
import "./chunk-53KI6WDE.js";
import "./chunk-W2HLA6I3.js";
import "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-G4ERZR5M.js";
import "./chunk-GRW2GUB3.js";
import {
  n as n4
} from "./chunk-RBVTRJPJ.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZZCCRN4U.js";
import "./chunk-TWQ374WD.js";
import "./chunk-GT2OBOXC.js";
import "./chunk-Z3S5X75I.js";
import "./chunk-YK4ZKK2Q.js";
import "./chunk-NMRWU44S.js";
import "./chunk-LBBA3SFR.js";
import "./chunk-2KZBVPWA.js";
import "./chunk-CXIMLSDF.js";
import "./chunk-ZDSMRGKC.js";
import "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RRFFPL7N.js";
import "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import "./chunk-V7M26XZ7.js";
import "./chunk-ZN2MGN4S.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-XZTXACPW.js";
import "./chunk-EHYYP2L2.js";
import "./chunk-ZUEYZA7M.js";
import "./chunk-74GUBHRJ.js";
import "./chunk-E447OCKN.js";
import {
  t as t2
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2 as e3
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n3
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-22YODLVL.js";
import "./chunk-TB42IUV7.js";
import "./chunk-ZWMYDR2G.js";
import "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-6FKG7JUE.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-4XBERLPX.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  U,
  l as l2,
  w
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-DYETG5YB.js";
import "./chunk-CLGCKZUR.js";
import {
  P,
  S
} from "./chunk-RN2KRYDN.js";
import "./chunk-AWWWJUTQ.js";
import "./chunk-EQNRDJV7.js";
import "./chunk-FEEXJRYO.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import {
  d as d2
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import {
  n as n2
} from "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import {
  v2 as v
} from "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  j
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  m
} from "./chunk-G5JBUC5N.js";
import {
  e as e2,
  i2 as i,
  l,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/analysis/AreaMeasurementAnalysis.js
var m2 = s.getLogger("esri.analysis.AreaMeasurementAnalysis");
var y2 = class extends c {
  constructor(e4) {
    super(e4), this.type = "area-measurement", this.extent = null, this.unit = null, this.nonEditableMessage = "Assign a closed polygon geometry containing more than two points to the analysis to allow editing.";
  }
  set geometry(e4) {
    if (t(e4))
      return this._set("geometry", null), void this._set("extent", null);
    e4.rings.length > 1 && m2.warn("Measuring polygons with multiple rings is not supported."), this._set("geometry", e4.clone()), this._set("extent", e4.extent);
  }
  get requiredPropertiesForEditing() {
    if (r(this.geometry) && 1 === this.geometry.rings.length) {
      const e4 = this.geometry.rings[0];
      if (e4.length <= 2 || !i(e4[0], e4[e4.length - 1]))
        return [null];
    }
    return [this.geometry];
  }
  clear() {
    this.geometry = null;
  }
};
e([d({ type: ["area-measurement"] })], y2.prototype, "type", void 0), e([d({ value: null, type: v })], y2.prototype, "geometry", null), e([d({ readOnly: true })], y2.prototype, "extent", void 0), e([d({ type: S, value: null })], y2.prototype, "unit", void 0), e([d({ readOnly: true })], y2.prototype, "requiredPropertiesForEditing", null), e([d({ readOnly: true })], y2.prototype, "nonEditableMessage", void 0), y2 = e([n("esri.analysis.AreaMeasurementAnalysis")], y2);
var g = y2;

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/areaMeasurement3D/AreaMeasurement3DView.js
var w2 = { laserLineGlowColor: [1, 0.5, 0], laserLineGlowWidth: 8, laserLineGlowFalloff: 8, laserLineInnerColor: [1, 1, 1], laserLineInnerWidth: 1, laserLineGlobalAlpha: 0.75, laserLineEnabled: true, handleColor: [1, 0.5, 0], handleOpacity: 0.5, handleRadius: 5, handleRadiusHovered: 10, handleRadiusMouse: 10, handleRadiusTouch: 25, pathLineColor: [1, 0.5, 0, 1], pathLineWidth: 3, intersectingLineColor: [1, 0.2, 0, 1], perimeterLineColor: [1, 0.5, 0, 1], perimeterLineWidth: 2, projectionLineColor: [1, 0.5, 0, 1], projectionLineWidth: 2, projectionLineStippleSize: 5, areaColor1: [1, 0.5, 0, 0.5], areaColor2: [1, 1, 1, 0.5], fillColor: [1, 0.5, 0, 0.5], lineSubdivisions: 64, labelDistance: 25 };
var y3 = class {
  constructor(t5) {
    this.vertexManipulators = [], this._analysisViewData = null, this._destroyed = false, this._isManipulatorsOwner = true, this._visible = true, this._laserLine = null, this._cursorManipulator = null, this._listenerHandles = null, this._tempHandlePosition = n2();
    const { analysisViewData: e4, manipulators: i2, toolState: s3, view: a2, visible: n5 } = t5;
    this._analysisViewData = e4, this._toolState = s3, null != i2 ? (this._manipulators = i2, this._isManipulatorsOwner = false) : this._manipulators = new r2(), this._view = a2;
    const r4 = this._style = L(w2, t5.style);
    this._intersector = x(a2.state.viewingMode), this._intersector.options.store = t3.MIN;
    const l3 = y(a2, r4.handleColor, r4.handleOpacity);
    l3.available = false, l3.radius = r4.handleRadius, l3.interactive = false, this._manipulators.add(l3), this._cursorManipulator = l3, this._laserLine = new _({ view: a2, attached: true, style: { glowColor: r4.laserLineGlowColor, glowWidth: r4.laserLineGlowWidth, glowFalloff: r4.laserLineGlowFalloff, innerColor: r4.laserLineInnerColor, innerWidth: r4.laserLineInnerWidth, globalAlpha: r4.laserLineGlobalAlpha } }), this._updateVisibility(n5 || true);
  }
  destroy() {
    this._listenerHandles = l(this._listenerHandles), this._isManipulatorsOwner ? this._manipulators = l(this._manipulators) : this._manipulators = null, this._laserLine = l(this._laserLine), this._destroyed = true;
  }
  get destroyed() {
    return this._destroyed;
  }
  get visible() {
    return this._visible;
  }
  set visible(t5) {
    t5 ? this.show() : this.hide();
  }
  get testData() {
    const t5 = this._laserLine.testData;
    return { laserLineRenderer: r(t5) ? { heightManifoldEnabled: t5.heightManifoldEnabled, heightManifoldTarget: t5.heightManifoldTarget, pointDistanceEnabled: t5.pointDistanceEnabled, pointDistanceOrigin: t5.pointDistanceOrigin, pointDistanceTarget: t5.pointDistanceTarget, lineVerticalPlaneEnabled: t5.lineVerticalPlaneEnabled } : { heightManifoldEnabled: false, heightManifoldTarget: null, pointDistanceEnabled: false, pointDistanceOrigin: null, pointDistanceTarget: null, lineVerticalPlaneEnabled: false } };
  }
  show() {
    this._setVisibility(true);
  }
  hide() {
    this._setVisibility(false);
  }
  _setVisibility(t5) {
    this._destroyed || this._visible === t5 || this._updateVisibility(t5);
  }
  _updateVisibility(t5) {
    this._visible = t5, this._laserLine.visible = t5, t5 ? (this._initializeListeners(), this._updateAll()) : (this._destroyListeners(), this.vertexManipulators.forEach((t6) => {
      this._removeVertexManipulator(t6.manipulator);
    }), this.vertexManipulators = [], this._view.cursor = null);
  }
  vertexHandleAt(t5, e4) {
    const i2 = this._manipulators.intersect(t5, e4);
    return r(i2) ? i2.manipulator.metadata : null;
  }
  pick(t5) {
    const e4 = this._view.spatialReference, i2 = d2(t5.screenPoint);
    this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(i2, this._intersector);
    const s3 = this._intersector.results.min, n5 = n2();
    if (!s3.getIntersectionPoint(n5))
      return null;
    const r4 = this._view.renderCoordsHelper.fromRenderCoords(n5, e4);
    return t(r4) ? null : new t4(n5, r4);
  }
  _updateAll() {
    this._visible && (this._updateVertexManipulators(), this._updateLaserLine());
  }
  _createVertexManipulator() {
    const t5 = y(this._view, this._style.handleColor, this._style.handleOpacity);
    t5.radius = this._style.handleRadius;
    return { id: this._manipulators.add(t5), manipulator: t5 };
  }
  _removeVertexManipulator(t5) {
    this._manipulators.remove(t5);
  }
  _updateVertexManipulators() {
    const { viewData: t5 } = this._analysisViewData, e4 = this._analysisViewData.path ? this._analysisViewData.path.vertices : [], i2 = this.vertexManipulators;
    f(i2, e4.length, () => this._createVertexManipulator(), (t6) => this._removeVertexManipulator(t6.manipulator)), i2.forEach((i3, s3) => {
      i3.manipulator.metadata = e4[s3], i3.manipulator.renderLocation = t5.positionsRenderCoords[s3];
    }), "drawing" === this._toolState.polygonState && r(this._analysisViewData.cursorPoint) ? (this._cursorManipulator.available = true, this._cursorManipulator.location = this._analysisViewData.cursorPoint) : this._cursorManipulator.available = false;
  }
  _getFocusPoint() {
    const { lastDraggedVertex: t5 } = this._analysisViewData;
    switch (this._toolState.polygonState) {
      case "drawing":
        return r(this._analysisViewData.cursorPoint) ? this._analysisViewData.cursorPoint : r(t5) ? this._analysisViewData.path.getVertexPositionAsPoint(t5) : e2(this._analysisViewData.path.lastPoint);
      case "editing":
        return r(t5) ? this._analysisViewData.path.getVertexPositionAsPoint(t5) : null;
      default:
        return this._analysisViewData.cursorPoint;
    }
  }
  _updateLaserLine() {
    const t5 = this._style.laserLineEnabled && "measured" !== this._toolState.polygonState && this._toolState.active, e4 = this._getFocusPoint();
    if (t5 && r(e4)) {
      const t6 = this._tempHandlePosition;
      this._view.renderCoordsHelper.toRenderCoords(e4, t6), this._laserLine.heightManifoldTarget = t6;
    } else
      this._laserLine.heightManifoldTarget = null;
  }
  _initializeListeners() {
    this._listenerHandles = new u(), this._listenerHandles.add([l2(() => this._toolState.polygonState, () => this._updateLaserLine()), l2(() => this._analysisViewData.viewData, () => this._updateAll(), U), l2(() => ({ lastDraggedVertex: this._analysisViewData.lastDraggedVertex, cursorPoint: this._analysisViewData.cursorPoint }), () => this._updateLaserLine()), l2(() => this._toolState.active, () => this._updateAll())]);
  }
  _destroyListeners() {
    this._listenerHandles = l(this._listenerHandles);
  }
};
function L(t5, i2) {
  return { ...t5, ...m(i2) };
}
function f(t5, e4, i2, s3) {
  for (; t5.length < e4; )
    t5.push(i2());
  if (s3)
    for (; t5.length > e4; ) {
      s3(t5.pop());
    }
  else
    t5.length = e4;
}
y3._handleGeometry = T.createSphereGeometry(1, 32, 32);

// node_modules/@arcgis/core/views/3d/interactive/measurementTools/areaMeasurement3D/AreaMeasurement3DTool.js
var V = class extends a {
  constructor(t5) {
    super(t5), this._handles = new u(), this.polygonState = "initial", this.analysisViewData = null;
  }
  initialize() {
    const { view: t5, analysisViewData: e4, manipulators: i2, visible: s3 } = this;
    this.measurementView = new y3({ view: t5, analysisViewData: e4, toolState: this, manipulators: i2, visible: s3 }), this._setupManipulators(), this._handles.add(l2(() => this.state, (t6) => {
      "measured" === t6 && this.finishToolCreation();
    }, w));
  }
  destroy() {
    this.measurementView.destroy(), this._set("measurementView", null), this._handles = l(this._handles);
  }
  get state() {
    return 0 === this.analysisViewData.path.numVertices ? "ready" : this.analysisViewData.validMeasurement && "editing" !== this.polygonState ? "measured" : "measuring";
  }
  get cursor() {
    return "ready" === this.state || "drawing" === this.polygonState ? "crosshair" : null;
  }
  finishMeasurement() {
    const { path: t5 } = this.analysisViewData;
    t5.numVertices < 3 ? (t5.clear(), this.polygonState = "initial") : (t5.close(), this.polygonState = "measured"), this.analysisViewData.cursorPoint = null;
  }
  onShow() {
    this.measurementView.show();
  }
  onHide() {
    this.measurementView.hide();
  }
  onInputEvent(t5) {
    switch (t5.type) {
      case "immediate-double-click":
        this._handleImmediateDoubleClick(t5);
        break;
      case "immediate-click":
        this._handleImmediateClick(t5);
        break;
      case "pointer-move":
        this._handlePointerMove(t5);
        break;
      case "drag":
        this._handleDrag(t5);
        break;
      case "key-down":
        this._handleKeyDown(t5);
    }
  }
  _setupManipulators() {
    const t5 = (t6) => `manipulator-${t6}`, e4 = (t6) => t6.events.on("grab-changed", () => {
      if (this.analysisViewData.validMeasurement) {
        const t7 = this.manipulators.some((t8) => t8.manipulator.grabbing);
        this.polygonState = t7 ? "editing" : "measured";
      }
    }), i2 = (i3, s4) => {
      this._handles.add([p(s4, (t6, e5, i4) => {
        const s5 = z(t6), a2 = e2(t6.metadata);
        e5.next(s5).next(B(this.view)).next((e6) => {
          t6.location = e6.mapEnd, this.analysisViewData.path.setVertexPosition(a2, Z(e6.mapEnd));
        });
        const n5 = Z(this.analysisViewData.path.getVertexPositionAsPoint(a2));
        i4.next(s5).next(() => {
          this.analysisViewData.path.setVertexPosition(a2, n5), t6.location = n5;
        });
      }), e4(s4)], t5(i3));
    }, s3 = (e5) => {
      this._handles.remove(t5(e5));
    };
    this.manipulators.forEach(({ id: t6, manipulator: e5 }) => {
      i2(t6, e5);
    }), this._handles.add([this.manipulators.on("after-add", ({ item: { id: t6, manipulator: e5 } }) => {
      i2(t6, e5);
    }), this.manipulators.on("after-remove", ({ item: { id: t6 } }) => {
      s3(t6);
    })]);
  }
  _handleImmediateDoubleClick(t5) {
    E(t5) && ("drawing" === this.polygonState && this.finishMeasurement(), t5.stopPropagation());
  }
  _handleDrag(t5) {
    "editing" === this.polygonState && t5.stopPropagation();
  }
  _handleImmediateClick(t5) {
    if (!E(t5))
      return;
    const e4 = n4(t5);
    if (this.active)
      switch (this.polygonState) {
        case "initial":
          if (this._addVertexAt(e4))
            return this.analysisViewData.cursorPoint = null, this.polygonState = "drawing", void t5.stopPropagation();
          break;
        case "drawing": {
          const i2 = this.measurementView.vertexHandleAt(e4, t5.pointerType);
          if (t(i2)) {
            if (this._addVertexAt(e4))
              return this.analysisViewData.cursorPoint = null, void t5.stopPropagation();
          } else
            0 === i2.index && (this.finishMeasurement(), t5.stopPropagation());
          break;
        }
      }
    "mouse" === t5.pointerType && this._hoverAt(e4);
  }
  _handlePointerMove(t5) {
    if ("mouse" === t5.pointerType) {
      const e4 = n4(t5);
      this._hoverAt(e4);
    }
  }
  _handleKeyDown(t5) {
    "Enter" === t5.key && "drawing" === this.polygonState && (this.finishMeasurement(), t5.stopPropagation());
  }
  _hoverAt(t5) {
    if (this.active && ("initial" === this.polygonState || "drawing" === this.polygonState)) {
      const e4 = this._pick(t5);
      r(e4) && (this.analysisViewData.cursorPoint = e4.mapPoint);
    } else
      this.analysisViewData.cursorPoint = null;
  }
  _addVertexAt(t5) {
    const e4 = this._pick(t5);
    return !(!r(e4) || !r(e4.mapPoint)) && (this.analysisViewData.path.add(e4.mapPoint), true);
  }
  _pick(t5) {
    const e4 = new s2(t5);
    return this.measurementView.pick(e4);
  }
};
e([d({ readOnly: true })], V.prototype, "state", null), e([d()], V.prototype, "polygonState", void 0), e([d({ readOnly: true })], V.prototype, "cursor", null), e([d()], V.prototype, "measurementView", void 0), e([d({ constructOnly: true })], V.prototype, "view", void 0), e([d()], V.prototype, "analysis", void 0), e([d({ constructOnly: true })], V.prototype, "analysisViewData", void 0), V = e([n("esri.views.3d.interactive.measurementTools.areaMeasurement3D.AreaMeasurement3DTool")], V);
var f2 = V;

// node_modules/@arcgis/core/widgets/AreaMeasurement3D/AreaMeasurement3DViewModel.js
var d3 = class extends v2 {
  constructor(t5) {
    super(t5), this.analysis = null, this.supportedViewType = "3d", this.unsupportedErrorMessage = "AreaMeasurement3DViewModel is only supported in 3D views.", this._userUnitOptions = null, this._userUnit = null;
  }
  initialize() {
    this.analysis.unit = this.unit;
  }
  get state() {
    return this.disabled || !this.ready ? "disabled" : t(this.tool) ? "ready" : this.tool.state;
  }
  get measurement() {
    if (t(this.tool) || this.disabled || this.tool.destroyed)
      return null;
    const { analysisView: t5 } = this;
    if (t(t5))
      return null;
    const e4 = t5.analysisVisualization, i2 = e4.viewData, r4 = i2.measurementData, n5 = t5.validMeasurement, a2 = "euclidean" === i2.mode, o2 = 0 === (a2 ? r4.intersectingSegments : r4.geodesicIntersectingSegments).size, l3 = o2 ? n5 ? "available" : "unavailable" : "invalid";
    return { mode: a2 ? "euclidean" : "geodesic", area: { text: o2 && n5 ? e4.areaLabel : null, state: l3 }, perimeterLength: { text: o2 && n5 ? e4.perimeterLengthLabel : null, state: l3 } };
  }
  set unitOptions(t5) {
    this._userUnitOptions = t5, this._set("unitOptions", this._filteredOrAllUnits(this._userUnitOptions));
  }
  get unitOptions() {
    return this._filteredOrAllUnits(this._userUnitOptions);
  }
  set unit(t5) {
    this._userUnit = t5 ? this._findSelectableUnit(t5, this._userUnit) : null, this.analysis.unit = this._userUnit;
  }
  get unit() {
    return r(this._userUnit) ? (this._userUnit = this._findSelectableUnit(this._userUnit, this.defaultUnit), this._userUnit) : this._findSelectableUnit(this.defaultUnit);
  }
  constructAnalysis() {
    return new g();
  }
  constructTool() {
    return new f2({ view: e2(this.view), analysis: this.analysis, analysisViewData: e2(this.analysisView), visible: this.visible });
  }
  _findSelectableUnit(t5, e4) {
    const { unitOptions: s3 } = this;
    return s3.includes(t5) ? t5 : r(e4) ? this._findSelectableUnit(e4) : s3[0];
  }
  _filteredOrAllUnits(t5) {
    if (t(t5))
      return S.slice();
    const e4 = t5.filter((t6) => S.includes(t6));
    return 0 === e4.length ? S.slice() : e4;
  }
};
e([d({ type: g })], d3.prototype, "analysis", void 0), e([d({ readOnly: true })], d3.prototype, "state", null), e([d({ readOnly: true })], d3.prototype, "measurement", null), e([d()], d3.prototype, "unitOptions", null), e([d()], d3.prototype, "unit", null), e([d(r3)], d3.prototype, "defaultUnit", void 0), e([d()], d3.prototype, "_userUnit", void 0), d3 = e([n("esri.widgets.AreaMeasurement3D.AreaMeasurement3DViewModel")], d3);
var c2 = d3;

// node_modules/@arcgis/core/widgets/AreaMeasurement3D.js
var p2 = "esri-area-measurement-3d";
var c3 = { buttonDisabled: "esri-button--disabled", base: `${p2} esri-widget esri-widget--panel`, container: `${p2}__container`, hint: `${p2}__hint`, hintText: `${p2}__hint-text`, panelError: `${p2}__panel--error`, measurement: `${p2}__measurement`, measurementItem: `${p2}__measurement-item`, measurementItemDisabled: `${p2}__measurement-item--disabled`, measurementItemTitle: `${p2}__measurement-item-title`, measurementItemValue: `${p2}__measurement-item-value`, settings: `${p2}__settings`, units: `${p2}__units`, unitsLabel: `${p2}__units-label`, unitsSelect: `${p2}__units-select esri-select`, unitsSelectWrapper: `${p2}__units-select-wrapper`, actionSection: `${p2}__actions`, newMeasurementButton: `${p2}__clear-button esri-button esri-button--primary`, widgetIcon: "esri-icon-measure-area" };
var d4 = class extends O {
  constructor(e4, t5) {
    super(e4, t5), this.view = null, this.visible = null, this.iconClass = c3.widgetIcon, this.label = void 0, this.messages = null, this.messagesUnits = null, this.viewModel = new c2(), this.unitOptions = null, this.unit = null;
  }
  get analysis() {
    return this.viewModel.analysis;
  }
  set analysis(e4) {
    this.viewModel.analysis = e4;
  }
  render() {
    const { supported: e4, active: t5, measurement: i2, state: a2, unit: r4 } = this.viewModel, n5 = "disabled" === a2, o2 = "ready" === a2, l3 = "measuring" === a2 || "measured" === a2, { messages: u2, messagesUnits: p3 } = this, d5 = t5 && o2 ? n3("section", { key: "esri-area-measurement-3d__hint", class: c3.hint }, n3("p", { class: c3.hintText }, u2.hint)) : null, v4 = e4 ? null : n3("section", { key: "esri-area-measurement-3d__unsupported", class: c3.panelError }, n3("p", null, u2.unsupported)), _2 = (e5, t6, s3) => {
      switch (t6.state) {
        case "available":
          return n3("div", { key: `${s3}-enabled`, class: c3.measurementItem }, n3("span", { class: c3.measurementItemTitle }, e5), n3("span", { class: c3.measurementItemValue }, t6.text));
        case "unavailable":
          return n3("div", { key: `${s3}-disabled`, class: this.classes(c3.measurementItem, c3.measurementItemDisabled) }, n3("span", { class: c3.measurementItemTitle }, e5));
        case "invalid":
          return n3("div", { key: `${s3}-enabled`, class: c3.measurementItem }, n3("span", { class: c3.measurementItemTitle }, e5), n3("span", { class: c3.measurementItemValue }, u2.notApplicable));
      }
    }, h = l3 ? n3("section", { key: "esri-area-measurement-3d__measurement", class: c3.measurement }, _2(u2.area, i2.area, "area"), _2(u2.perimeterLength, i2.perimeterLength, "perimeter-length")) : null, b = `${this.id}__units`, y4 = n3("label", { class: c3.unitsLabel, for: b }, u2.unit), w3 = n3("div", { class: c3.unitsSelectWrapper }, n3("select", { class: c3.unitsSelect, id: b, onchange: this._changeUnit, bind: this, value: r4 }, this.viewModel.unitOptions.map((e5) => {
      var _a;
      return n3("option", { key: e5, value: e5 }, P(e5) ? p3.systems[e5] : (_a = p3.units[e5]) == null ? void 0 : _a.pluralCapitalized);
    }))), g2 = l3 ? n3("section", { key: "esri-area-measurement-3d__units", class: c3.units }, y4, w3) : null, M = l3 ? n3("div", { key: "settings", class: c3.settings }, g2) : null, $ = !e4 || t5 && !l3 ? null : n3("div", { class: c3.actionSection }, n3("button", { disabled: n5, class: this.classes(c3.newMeasurementButton, n5 && c3.buttonDisabled), bind: this, onclick: this._newMeasurement, type: "button" }, u2.newMeasurement)), j2 = this.visible ? n3("div", { class: c3.container }, v4, d5, M, h, $) : null;
    return n3("div", { key: this, class: c3.base, role: "presentation" }, j2);
  }
  _newMeasurement() {
    j(this.viewModel.start());
  }
  _changeUnit(e4) {
    const t5 = e4.target, s3 = t5.options[t5.selectedIndex];
    s3 && (this.unit = s3.value);
  }
};
e([o("viewModel.view")], d4.prototype, "view", void 0), e([o("viewModel.visible")], d4.prototype, "visible", void 0), e([o("viewModel.active")], d4.prototype, "active", void 0), e([d({ constructOnly: true, nonNullable: true })], d4.prototype, "analysis", null), e([d()], d4.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], d4.prototype, "label", void 0), e([d(), e3("esri/widgets/AreaMeasurement3D/t9n/AreaMeasurement3D")], d4.prototype, "messages", void 0), e([d(), e3("esri/core/t9n/Units")], d4.prototype, "messagesUnits", void 0), e([d()], d4.prototype, "uiStrings", void 0), e([d({ type: c2 })], d4.prototype, "viewModel", void 0), e([o("viewModel.unitOptions")], d4.prototype, "unitOptions", void 0), e([o("viewModel.unit")], d4.prototype, "unit", void 0), e([t2()], d4.prototype, "_newMeasurement", null), e([t2()], d4.prototype, "_changeUnit", null), d4 = e([n("esri.widgets.AreaMeasurement3D")], d4);
var v3 = d4;
export {
  v3 as default
};
//# sourceMappingURL=AreaMeasurement3D-HITDN6DH.js.map
