import {
  C,
  f,
  n as n4,
  p as p2
} from "./chunk-T6YZ2CRM.js";
import {
  p as p3
} from "./chunk-5XRPB3CU.js";
import {
  I as I2,
  L as L2,
  pt,
  u as u2
} from "./chunk-536JSWCC.js";
import "./chunk-XVC34HIT.js";
import "./chunk-5SHHATAH.js";
import "./chunk-3ITGQWSQ.js";
import {
  n as n3
} from "./chunk-WLVMYWO2.js";
import {
  d as d2,
  s as s4
} from "./chunk-7S6G3GM7.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-AZ33IVEJ.js";
import "./chunk-23E5E222.js";
import "./chunk-DYRM6FXE.js";
import "./chunk-7Y6VVOP3.js";
import "./chunk-CVV43JR7.js";
import "./chunk-2FLJ43TR.js";
import "./chunk-EY24INV2.js";
import "./chunk-3DTDACBY.js";
import "./chunk-ZG7SHSSS.js";
import "./chunk-UQFAHV7T.js";
import "./chunk-COK4R22F.js";
import "./chunk-T6XN76GI.js";
import "./chunk-EZ4QR7V3.js";
import "./chunk-25Y2OKSP.js";
import "./chunk-DJFBTMGM.js";
import "./chunk-E452MYWA.js";
import "./chunk-QFYBIFWB.js";
import "./chunk-EMETVH63.js";
import "./chunk-V56SVRSV.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import {
  m as m2
} from "./chunk-X64NQ2GK.js";
import "./chunk-NVOCHKIH.js";
import "./chunk-DGELARKE.js";
import "./chunk-WN3KE5M2.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-UVXRU6XP.js";
import "./chunk-PMQUXI6L.js";
import {
  je,
  ve,
  ye
} from "./chunk-RHH23PAT.js";
import "./chunk-PUR7HIYZ.js";
import "./chunk-O2JKFSHC.js";
import "./chunk-76A4CWFG.js";
import "./chunk-KYD2B4O6.js";
import "./chunk-Y7MFFYJY.js";
import "./chunk-KW6WHTET.js";
import "./chunk-PUU4QXN5.js";
import "./chunk-EHWEX2VK.js";
import "./chunk-HPO2NV7P.js";
import "./chunk-22O7HU3A.js";
import "./chunk-Y75V5CF3.js";
import "./chunk-PQM6RARY.js";
import "./chunk-2Y5KPYOJ.js";
import "./chunk-BBUIX72C.js";
import "./chunk-5ZS6RUSM.js";
import {
  p
} from "./chunk-HTS3HEEU.js";
import "./chunk-CYT6A5IX.js";
import "./chunk-R3PFJUIG.js";
import "./chunk-QWEWSWF7.js";
import "./chunk-7LH2XNVI.js";
import "./chunk-PXOPYXIX.js";
import "./chunk-WSQIVEW5.js";
import "./chunk-ZTFWVZTL.js";
import "./chunk-ELZC3DZT.js";
import "./chunk-TGUQXVQU.js";
import "./chunk-4LQ6NAOX.js";
import "./chunk-K37I5IIG.js";
import "./chunk-GKYJJGE3.js";
import "./chunk-AWIG2DGF.js";
import "./chunk-3236UEJN.js";
import "./chunk-KSOWE6GO.js";
import "./chunk-TCYVDK2B.js";
import "./chunk-PGSJOMCO.js";
import "./chunk-ZLORWBMB.js";
import "./chunk-LJAT5UYW.js";
import "./chunk-OZAI2STL.js";
import "./chunk-CNL2CHF7.js";
import "./chunk-HRAEK6P4.js";
import "./chunk-K6UIDSFF.js";
import {
  t as t3
} from "./chunk-LAHCYKZK.js";
import "./chunk-52W4YMC2.js";
import "./chunk-MHEQOIKQ.js";
import "./chunk-AIONJO5O.js";
import "./chunk-YLSPLHY5.js";
import "./chunk-4GGQTXXY.js";
import "./chunk-MCSRSOMA.js";
import "./chunk-2DP653N7.js";
import "./chunk-QZCFKQOH.js";
import "./chunk-QMP4VG7M.js";
import "./chunk-5RP42VZJ.js";
import "./chunk-7CXXTQLM.js";
import "./chunk-XEWFCJLT.js";
import "./chunk-ZEDAE7EU.js";
import "./chunk-ZEIWFXXO.js";
import "./chunk-YXFNNKMT.js";
import "./chunk-X7CKOX5Z.js";
import "./chunk-7OZR6JFF.js";
import "./chunk-NXOQBIK7.js";
import "./chunk-ERNXFM5T.js";
import "./chunk-6ITXWFMK.js";
import "./chunk-SV4VP57N.js";
import "./chunk-5LWMNFCG.js";
import "./chunk-PWYPPSAW.js";
import "./chunk-5EXPMKQP.js";
import "./chunk-B7F3T673.js";
import "./chunk-QXYW5CVF.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-SQ4XLXZO.js";
import "./chunk-6YT7XVZA.js";
import "./chunk-444THZYK.js";
import "./chunk-E3V32BOJ.js";
import "./chunk-VQLKKADV.js";
import "./chunk-D764DGF2.js";
import "./chunk-XEIRRA3E.js";
import "./chunk-PZHH54V6.js";
import "./chunk-PZFKIJU3.js";
import "./chunk-2A3F5J6D.js";
import "./chunk-B3IXFXV6.js";
import {
  r as r3
} from "./chunk-EPNT7GPS.js";
import "./chunk-MQLLOFWM.js";
import "./chunk-XNOIZLCR.js";
import "./chunk-PMOPLTRU.js";
import "./chunk-I22L7HNU.js";
import "./chunk-44UD36FH.js";
import "./chunk-ODYLXHP4.js";
import "./chunk-Y5AGUEHG.js";
import "./chunk-DVE4HUBR.js";
import "./chunk-RC6OMMF6.js";
import "./chunk-AWPZQDE5.js";
import "./chunk-OYNEZ5VG.js";
import "./chunk-R67CDTDF.js";
import "./chunk-UCWSHVC4.js";
import "./chunk-DHZ2TSD5.js";
import "./chunk-ZV3LDRB3.js";
import "./chunk-FAF3GP2W.js";
import "./chunk-YSWURJZW.js";
import "./chunk-5JKCNCL2.js";
import "./chunk-2YDCEMEJ.js";
import "./chunk-O7YSDCZE.js";
import "./chunk-767LZ6IM.js";
import "./chunk-TTKSAULB.js";
import "./chunk-WJDUBZ7S.js";
import "./chunk-DNPZNIDB.js";
import "./chunk-WW7VYUQW.js";
import "./chunk-FCDEMPPS.js";
import "./chunk-TEJEYVH4.js";
import "./chunk-HEZ2ATGC.js";
import "./chunk-ECNFP4CF.js";
import "./chunk-AALA53RH.js";
import "./chunk-BOVIIQLB.js";
import "./chunk-IJHFAZOW.js";
import "./chunk-DMGVDNFD.js";
import "./chunk-YAQGRU5B.js";
import "./chunk-M3GMIUQS.js";
import "./chunk-BMA2CXVS.js";
import "./chunk-46N7XS5M.js";
import "./chunk-4MKQUQD4.js";
import "./chunk-A3QLZKCF.js";
import "./chunk-OYAHQ564.js";
import "./chunk-LGILR4HN.js";
import "./chunk-I5UNY2WQ.js";
import "./chunk-KETNREBT.js";
import "./chunk-GKICNYWA.js";
import "./chunk-EYJ2F5XB.js";
import "./chunk-5EPJG7SL.js";
import "./chunk-XXEJXJP4.js";
import "./chunk-MFOJFHT7.js";
import "./chunk-TR3U55RZ.js";
import "./chunk-3DCTMZI6.js";
import "./chunk-33INAWJA.js";
import "./chunk-5WOO2FX6.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-J73IXFNW.js";
import "./chunk-FFHGE66H.js";
import "./chunk-MOZ4GR2L.js";
import "./chunk-MQBVOUKB.js";
import "./chunk-S5PZEGLP.js";
import "./chunk-PLLZPG4O.js";
import "./chunk-WQLER7IU.js";
import "./chunk-7GTYHKA3.js";
import "./chunk-MOXYEJRV.js";
import "./chunk-EEJIELE6.js";
import "./chunk-Y55TYMBP.js";
import "./chunk-NAB3NF54.js";
import "./chunk-MHB3L22D.js";
import "./chunk-MDCKEJ7B.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-VMF4NMEB.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-72PB636Q.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-SOZCO2CU.js";
import "./chunk-53KI6WDE.js";
import "./chunk-W2HLA6I3.js";
import "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-2EPPX4WN.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-MZ4JF5C6.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-NMRWU44S.js";
import "./chunk-RRFFPL7N.js";
import "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-CC32E45Q.js";
import "./chunk-V7M26XZ7.js";
import "./chunk-ZN2MGN4S.js";
import {
  L
} from "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-CQSGZXR7.js";
import "./chunk-POPR7XUB.js";
import "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import {
  y as y2
} from "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import "./chunk-4XBERLPX.js";
import "./chunk-D7AOY7GH.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import {
  b
} from "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import {
  t as t2
} from "./chunk-U7B2WKBH.js";
import "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import {
  a
} from "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  h,
  l,
  w
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import {
  g as g2
} from "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import {
  m
} from "./chunk-FTLBKDGL.js";
import {
  I,
  me,
  y as y3
} from "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import {
  s as s3
} from "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  n as n2
} from "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n,
  r as r2,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  g
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  o,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/3d/layers/BuildingSublayerView3D.js
var l2 = (l4, n6) => {
  let u4 = class extends m(a(s3(n2.EventedMixin(l4)))) {
    constructor(e2) {
      super(e2), this.sublayer = null, this.parent = null, this.view = null;
    }
    initialize() {
    }
    get suspended() {
      return !this.canResume();
    }
    get updating() {
      return !this.suspended && this.isUpdating();
    }
    get visible() {
      return true === this.get("sublayer.visible");
    }
    set visible(e2) {
      void 0 !== e2 ? this._override("visible", e2) : this._clearOverride("visible");
    }
    get fullOpacity() {
      const e2 = (e3) => null != e3 ? e3 : 1;
      return e2(this.get("sublayer.opacity")) * e2(this.get("parent.fullOpacity"));
    }
    canResume() {
      return !this.get("parent.suspended") && this.get("view.ready") && this.visible || false;
    }
    isUpdating() {
      return false;
    }
  };
  return e([d()], u4.prototype, "sublayer", void 0), e([d()], u4.prototype, "parent", void 0), e([d({ readOnly: true })], u4.prototype, "suspended", null), e([d({ type: Boolean, readOnly: true })], u4.prototype, "updating", null), e([d()], u4.prototype, "view", void 0), e([d()], u4.prototype, "visible", null), e([d()], u4.prototype, "fullOpacity", null), u4 = e([n("esri.views.3d.layers.BuildingSublayerView3D")], u4), u4;
};

// node_modules/@arcgis/core/views/3d/layers/i3s/BuildingFilterUtil.js
var l3;
!function(e2) {
  e2[e2.Solid = 0] = "Solid", e2[e2.WireFrame = 1] = "WireFrame", e2[e2.XRay = 2] = "XRay";
}(l3 || (l3 = {}));
var t4 = 0.15;
var i = 0.5 * t4;
function c(e2) {
  switch (e2.filterMode.type) {
    case "solid":
      return { mode: l3.Solid };
    case "wire-frame":
      return { mode: l3.WireFrame, edgeMaterial: p(e2.filterMode.edges, {}) };
    case "x-ray":
      return { mode: l3.XRay };
  }
}
function s5(r4, o3) {
  if (t(o3))
    return r4.color[3] = 0, r4.edgeMaterial = null, void (r4.pickable = false);
  switch (o3.mode) {
    case l3.Solid:
      return;
    case l3.WireFrame:
      return r4.color[3] = 0, r4.edgeMaterial = o3.edgeMaterial, void (r4.pickable = false);
    case l3.XRay:
      return r4.color[0] = 1, r4.color[1] = 1, r4.color[2] = 1, r4.color[3] *= t4, r4.colorMixMode = r3.Replace, r4.castShadows = false, r4.pickable = false, void (r4.edgeMaterial = d3(r4.edgeMaterial));
  }
}
function d3(r4) {
  return t(r4) ? null : (u3.lastMaterial !== r4 && (u3.cachedMaterial = n5(r4), u3.lastMaterial = r4), u3.cachedMaterial);
}
function n5(e2) {
  const o3 = t2(e2.color);
  return o3[3] *= i, { ...e2, color: o3 };
}
var u3 = { cachedMaterial: null, lastMaterial: null };

// node_modules/@arcgis/core/views/layers/BuildingComponentSublayerView.js
var o2 = class extends y {
  constructor() {
    super(...arguments), this.sublayer = null;
  }
  get updating() {
    return false;
  }
  get suspended() {
    return false;
  }
  get availableFields() {
    return [];
  }
  get filter() {
    return null;
  }
  set filter(r4) {
    throw new Error("Not implemented");
  }
  queryFeatures(r4, e2) {
    throw new Error("Not implemented");
  }
  queryObjectIds(r4, e2) {
    throw new Error("Not implemented");
  }
  queryFeatureCount(r4, e2) {
    throw new Error("Not implemented");
  }
  createQuery() {
    throw new Error("Not implemented");
  }
  queryExtent(r4, e2) {
    throw new Error("Not implemented");
  }
  highlight(r4) {
    throw new Error("Not implemented");
  }
};
e([d()], o2.prototype, "sublayer", void 0), e([d()], o2.prototype, "availableFields", null), e([d()], o2.prototype, "filter", null);

// node_modules/@arcgis/core/views/3d/layers/BuildingComponentSublayerView3D.js
var O = s.getLogger("esri.views.3d.layers.BuildingComponentSublayerView3D");
var C2 = class extends p3(pt(l2(o2))) {
  constructor() {
    super(...arguments), this.type = "building-component-sublayer-3d", this.layerView = null, this._elevationContext = "scene", this._isIntegratedMesh = false, this._supportsLabeling = false, this.lodFactor = 1, this.progressiveLoadFactor = 1, this._queryEngine = null;
  }
  get layerUid() {
    return this.sublayer.layer.uid;
  }
  get sublayerUid() {
    return this.sublayer.uid;
  }
  initialize() {
    this.updatingHandles.add(() => [this.sublayer.renderer, this.definitionExpressionFields, this.filterExpressionFields], () => this._updateRequiredFields()), this.updatingHandles.add(() => this.sublayer.renderer, (e2) => this._rendererChange(e2), h), this.updatingHandles.add(() => [this.parsedDefinitionExpression, this.filter, o(this._filter, ({ parsedWhereClause: e2, parsedGeometry: r4, sortedObjectIds: t5 }) => [e2, r4, t5])], () => this._filterChange()), this.updatingHandles.add(() => this.parsedFilterExpressions, () => this._updateSymbologyOverride(), h), this.addResolvingPromise(this._updateRequiredFields());
  }
  get parsedFilterExpressions() {
    return "Overview" === this.sublayer.modelName ? [] : this.layerView.filterExpressions.map(([e2, r4]) => {
      let t5;
      try {
        t5 = m2.create(e2, this.sublayer.fieldsIndex);
      } catch (l4) {
        return O.error("Failed to parse filterExpression: " + l4), null;
      }
      if (!t5.isStandardized)
        return O.error("filterExpression is using non standard function"), null;
      const i2 = [], s7 = t5.fieldNames;
      return ye(s7, this.sublayer.fields, { missingFields: i2 }), i2.length > 0 ? (O.error(`filterExpression references unknown fields: ${i2.join(", ")}`), null) : [t5, r4];
    }).filter((e2) => null != e2);
  }
  get filter() {
    return r(this._filter) ? this._filter.viewFilter : null;
  }
  set filter(e2) {
    !t(e2) && C.checkSupport(e2) ? r(this._filter) ? this._filter.viewFilter = e2 : this._filter = new C({ viewFilter: e2, layerFieldsIndex: this.sublayer.fieldsIndex, loadAsyncModule: (e3) => this._loadAsyncModule(e3), applyFilters: () => this._applyFilters(true), addSqlFilter: (e3, r4) => this.addSqlFilter(e3, r4, this.logError) }) : this._filter = null;
  }
  _updateSymbologyOverride() {
    const e2 = this.parsedFilterExpressions;
    e2.length > 0 ? this._setSymbologyOverride((r4, t5) => {
      for (const [s7, l4] of e2)
        try {
          if (s7.testFeature(r4))
            return s5(t5, l4);
        } catch (i2) {
          this.logError(i2);
        }
      return s5(t5, null);
    }, this.filterExpressionFields) : this._setSymbologyOverride(null, null);
  }
  get filterExpressionFields() {
    return y3(this.sublayer.fieldsIndex, this.parsedFilterExpressions.reduce((e2, [r4]) => e2.concat(r4.fieldNames), []));
  }
  get availableFields() {
    const e2 = this.sublayer, r4 = e2.fieldsIndex;
    let t5 = this.requiredFields;
    if (e2.outFields || e2.layer.outFields) {
      const i2 = [...e2.outFields || [], ...e2.layer.outFields || []];
      t5 = [...I(r4, i2), ...t5];
    }
    return y3(r4, t5);
  }
  _createLayerGraphic(e2) {
    const t5 = new g2(null, null, e2);
    return t5.layer = this.sublayer.layer, t5.sourceLayer = this.sublayer, t5;
  }
  canResume() {
    return super.canResume() && (!this._controller || this._controller.rootNodeVisible);
  }
  async fetchPopupFeatures(e2, r4) {
    const t5 = this._validateFetchPopupFeatures(r4);
    if (t5)
      throw t5;
    if (t(r4) || !r4.clientGraphics || 0 === r4.clientGraphics.length)
      return [];
    const i2 = [], s7 = [], n6 = r(this.sublayer.associatedLayer) ? await this.sublayer.associatedLayer.load() : this.sublayer, a2 = I(this.sublayer.fieldsIndex, await d2(n6, s4(this.sublayer, r4))), u4 = /* @__PURE__ */ new Set();
    for (const l4 of r4.clientGraphics)
      me(a2, l4, u4) ? s7.push(l4) : i2.push(l4);
    return 0 === s7.length ? i2 : (r(this.sublayer.associatedLayer) && await this.sublayer.associatedLayer.load().catch(() => O.warn("Failed to load associated feature layer. Displaying popup attributes from cached attributes.")), this.whenGraphicAttributes(s7, Array.from(u4)).catch(() => s7).then((e3) => i2.concat(e3)));
  }
  async _updateRequiredFields() {
    const e2 = y3(this.sublayer.fieldsIndex, [...this.sublayer.renderer ? await this.sublayer.renderer.getRequiredFields(this.sublayer.fieldsIndex) : [], ...this.definitionExpressionFields || [], ...this.filterExpressionFields || []]);
    this._set("requiredFields", e2);
  }
  _validateFetchPopupFeatures(e2) {
    const { sublayer: r4 } = this, { popupEnabled: i2 } = r4;
    return i2 ? s4(r4, e2) ? void 0 : new s2("buildingscenelayerview3d:fetchPopupFeatures", "Layer does not define a popup template", { sublayer: r4 }) : new s2("buildingscenelayerview3d:fetchPopupFeatures", "Popups are disabled", { sublayer: r4 });
  }
  getFilters() {
    const e2 = super.getFilters();
    return this.addSqlFilter(e2, this.parsedDefinitionExpression, this.logError), r(this._filter) && this._filter.addFilters(e2, this.view, this._controller.crsIndex, this._collection), e2;
  }
  createQuery() {
    const e2 = { outFields: ["*"], returnGeometry: false, outSpatialReference: this.view.spatialReference };
    return r(this.filter) ? this.filter.createQuery(e2) : new b(e2);
  }
  queryExtent(e2, r4) {
    return this._ensureQueryEngine().executeQueryForExtent(this._ensureQuery(e2), r4 == null ? void 0 : r4.signal);
  }
  queryFeatureCount(e2, r4) {
    return this._ensureQueryEngine().executeQueryForCount(this._ensureQuery(e2), r4 == null ? void 0 : r4.signal);
  }
  queryFeatures(e2, r4) {
    return this._ensureQueryEngine().executeQuery(this._ensureQuery(e2), r4 == null ? void 0 : r4.signal).then((e3) => {
      if (!(e3 == null ? void 0 : e3.features))
        return e3;
      const r5 = this.sublayer, t5 = r5.layer;
      for (const i2 of e3.features)
        i2.layer = t5, i2.sourceLayer = r5;
      return e3;
    });
  }
  queryObjectIds(e2, r4) {
    return this._ensureQueryEngine().executeQueryForIds(this._ensureQuery(e2), r4 == null ? void 0 : r4.signal);
  }
  _ensureQueryEngine() {
    return t(this._queryEngine) && (this._queryEngine = this._createQueryEngine()), this._queryEngine;
  }
  _createQueryEngine() {
    const e2 = u2(this.view.spatialReference, this.view.renderSpatialReference, this._collection);
    return new p2({ layerView: this, priority: L.FEATURE_QUERY_ENGINE, spatialIndex: new f({ featureAdapter: new n4({ objectIdField: this.sublayer.objectIdField, attributeStorageInfo: this.sublayer.attributeStorageInfo, getFeatureExtent: e2 }), toArray: () => {
      const e3 = new Array();
      return this._forAllFeatures((r4, t5, i2) => (e3.push({ id: r4, index: t5, meta: i2 }), L2.CONTINUE), null, I2.ALL_IN_CLIPPING_AREA), e3;
    }, forAllFeatures: (e3, r4) => this._forAllFeatures((r5, t5, i2) => e3({ id: r5, index: t5, meta: i2 }), r4, I2.ALL_IN_CLIPPING_AREA), getFeatureExtent: e2, sourceSpatialReference: ve(this.sublayer), viewSpatialReference: this.view.spatialReference }) });
  }
  _ensureQuery(e2) {
    return this._addDefinitionExpressionToQuery(t(e2) ? this.createQuery() : b.from(e2));
  }
};
e([d({ aliasOf: "sublayer" })], C2.prototype, "i3slayer", void 0), e([d()], C2.prototype, "layerView", void 0), e([d()], C2.prototype, "suspended", void 0), e([d({ readOnly: true, aliasOf: "view.qualitySettings.sceneService.3dObject.lodFactor" })], C2.prototype, "lodFactor", void 0), e([d({ readOnly: true })], C2.prototype, "parsedFilterExpressions", null), e([d({ type: y2 })], C2.prototype, "filter", null), e([d()], C2.prototype, "_filter", void 0), e([d({ type: [String], readOnly: true })], C2.prototype, "filterExpressionFields", null), e([d({ type: [String], readOnly: true })], C2.prototype, "requiredFields", void 0), e([d({ type: [String], readOnly: true })], C2.prototype, "availableFields", null), C2 = e([n("esri.views.3d.layers.BuildingComponentSublayerView3D")], C2);
var V = C2;

// node_modules/@arcgis/core/views/layers/BuildingSceneLayerView.js
var s6 = class extends u {
  constructor() {
    super(...arguments), this.layer = null, this.sublayerViews = null;
  }
  highlight(r4) {
    throw new Error("Not implemented");
  }
};
e([d()], s6.prototype, "layer", void 0), e([d()], s6.prototype, "sublayerViews", void 0);

// node_modules/@arcgis/core/views/3d/layers/BuildingSceneLayerView3D.js
var w2 = s.getLogger("esri.views.3d.layers.BuildingSceneLayerView3D");
var V2 = l2(y);
var j2 = class extends n3(s6) {
  constructor() {
    super(...arguments), this.type = "building-scene-3d", this.sublayerViews = new j(), this._abortController = new AbortController(), this._loadingComponents = 0;
  }
  get filterExpression() {
    const e2 = this.layer.activeFilterId, r4 = null != e2 ? this.layer.filters.find((r5) => r5.id === e2) : null, s7 = null != r4 ? r4.filterBlocks.find((e3) => "solid" === e3.filterMode.type) : null;
    return s7 ? s7.filterExpression : null;
  }
  get filterExpressions() {
    const e2 = this.layer.activeFilterId, r4 = null != e2 ? this.layer.filters.find((r5) => r5.id === e2) : null;
    return r4 && r4.filterBlocks ? r4.filterBlocks.toArray().map((e3) => [e3.filterExpression, c(e3)]) : [];
  }
  get updatingProgressValue() {
    const e2 = this.sublayerViews, r4 = this._loadingComponents + (e2 ? e2.length : 0);
    return e2.reduce((e3, r5) => e3 + r5.updatingProgress, 0) / r4;
  }
  isUpdating() {
    return this._loadingComponents > 0 || this.sublayerViews && this.sublayerViews.some((e2) => e2.updating);
  }
  initialize() {
    je(this.layer.spatialReference, this.view.spatialReference, this.view.viewingMode), this._initializeSubLayerViews(this.layer.sublayers, this);
  }
  destroy() {
    this.sublayerViews && (this.sublayerViews.forEach((e2) => e2.destroy()), this.sublayerViews = null), this._abortController.abort(), this._abortController = null;
  }
  _initializeSubLayerViews(e2, r4) {
    const s7 = this, t5 = this.view;
    e2.forEach((e3) => {
      if (!e3.isEmpty)
        if ("building-group" === e3.type) {
          const s8 = new V2({ sublayer: e3, view: t5, parent: r4 });
          this._initializeSubLayerViews(e3.sublayers, s8);
        } else
          "mesh" === e3.geometryType && (this._loadingComponents++, e3.load({ signal: this._abortController.signal }).then(() => {
            const i2 = new V({ sublayer: e3, layerView: s7, view: t5, parent: r4 });
            this.sublayerViews.push(i2), this.handles.add([l(() => i2.updating, () => this.notifyChange("updating"), w), l(() => i2.updatingProgress, () => this.notifyChange("updatingProgressValue"), w)]);
          }).catch((r5) => {
            g(r5) || w2.error(`Error while creating view for sublayer ${e3.id}
Layer: ${this.layer.url}
`, r5);
          }).then(() => {
            this._loadingComponents--, this.notifyChange("updating"), this.notifyChange("updatingProgressValue");
          }));
    });
  }
  getGraphicFromIntersectorTarget(e2) {
    for (const r4 of this.sublayerViews.items)
      if (r4.sublayer.uid === e2.sublayerUid)
        return r4.getGraphicFromIntersectorTarget(e2);
    return null;
  }
  async fetchPopupFeatures(e2, r4) {
    if (t(r4) || !r4.clientGraphics || 0 === r4.clientGraphics.length)
      return;
    const s7 = this._findComponent(r4.clientGraphics[0].sourceLayer);
    return t(s7) ? void 0 : s7.fetchPopupFeatures(e2, r4);
  }
  whenGraphicBounds(e2) {
    const r4 = this._findComponent(e2.sourceLayer);
    return t(r4) ? Promise.reject() : r4.whenGraphicBounds(e2);
  }
  getAABBFromIntersectorTarget(e2) {
    for (const r4 of this.sublayerViews.items)
      if (r4.sublayer.uid === e2.sublayerUid)
        return r4.getAABBFromIntersectorTarget(e2);
    return null;
  }
  _findComponent(e2) {
    return this.sublayerViews.find((r4) => e2 === r4.sublayer);
  }
  highlight(e2) {
    e2 instanceof g2 ? e2 = [e2] : e2 instanceof j && (e2 = e2.toArray());
    const s7 = [];
    if (Array.isArray(e2) && e2.length > 0 && e2[0] instanceof g2) {
      const r4 = e2, t5 = /* @__PURE__ */ new Map();
      for (const e3 of r4) {
        let r5 = t5.get(e3.sourceLayer);
        null == r5 && (r5 = [], t5.set(e3.sourceLayer, r5)), r5.push(e3);
      }
      this.sublayerViews.forEach((e3) => {
        const r5 = t5.get(e3.sublayer);
        r5 && s7.push(e3.highlight(r5));
      });
    }
    return r2(s7);
  }
  getUsedMemory() {
    return this.sublayerViews.reduce((e2, r4) => e2 + r4.getUsedMemory(), 0);
  }
  getUnloadedMemory() {
    return this.sublayerViews.reduce((e2, r4) => e2 + r4.getUnloadedMemory(), 0);
  }
  ignoresMemoryFactor() {
    return false;
  }
};
e([d()], j2.prototype, "sublayerViews", void 0), e([d({ readOnly: true })], j2.prototype, "filterExpression", null), e([d({ readOnly: true })], j2.prototype, "filterExpressions", null), e([d(t3)], j2.prototype, "updatingProgress", void 0), e([d({ readOnly: true, dependsOn: [] })], j2.prototype, "updatingProgressValue", null), j2 = e([n("esri.views.3d.layers.BuildingSceneLayerView3D")], j2);
var C3 = j2;
export {
  C3 as default
};
//# sourceMappingURL=BuildingSceneLayerView3D-ANWUOZJ5.js.map
