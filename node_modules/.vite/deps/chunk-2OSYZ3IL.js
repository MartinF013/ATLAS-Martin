import {
  o as o2
} from "./chunk-CRCA6KDA.js";
import {
  r
} from "./chunk-T6BL6FYR.js";
import {
  U,
  w
} from "./chunk-YDPQRKY4.js";
import {
  p
} from "./chunk-3HMF3PNP.js";
import {
  o,
  y
} from "./chunk-YZNDHJDJ.js";
import {
  n as n3
} from "./chunk-RTHP2LNT.js";
import {
  g
} from "./chunk-BLINZ65M.js";
import {
  y as y2
} from "./chunk-TADZYUVR.js";
import {
  d
} from "./chunk-HJHWUUQQ.js";
import {
  m as m2
} from "./chunk-5TRUGQDM.js";
import {
  e
} from "./chunk-NWRK6QLX.js";
import {
  n as n2
} from "./chunk-AIRC226G.js";
import {
  m2 as m
} from "./chunk-CHNDTVQJ.js";
import {
  j2 as j
} from "./chunk-YPZEGNLG.js";
import {
  n2 as n
} from "./chunk-2QOWZFCU.js";

// node_modules/@arcgis/core/views/2d/interactive/SnappingVisualizer2D.js
var g2 = class extends r {
  constructor(e2) {
    super(), this.graphicsLayer = e2;
  }
  visualizeIntersectionPoint(e2, r2) {
    return this._visualizeSnappingIndicator(new j({ x: e2.intersectionPoint[0], y: e2.intersectionPoint[1], spatialReference: r2.coordinateHelper.spatialReference }), f);
  }
  visualizePoint(e2, r2) {
    return this._visualizeSnappingIndicator(new j({ x: e2.point[0], y: e2.point[1], spatialReference: r2.coordinateHelper.spatialReference }), I);
  }
  visualizeLine(e2, r2) {
    return this._visualizeSnappingIndicator(new m({ paths: [[e2.lineStart, e2.lineEnd]], spatialReference: r2.coordinateHelper.spatialReference }), P);
  }
  visualizeParallelSign(e2, r2) {
    return this._visualizeSnappingIndicator(new m({ paths: [[e2.lineStart, e2.lineEnd]], spatialReference: r2.coordinateHelper.spatialReference }), x);
  }
  visualizeRightAngleQuad(e2, r2) {
    return this._visualizeSnappingIndicator(new m({ paths: [[e2.previousVertex, e2.centerVertex, e2.nextVertex]], spatialReference: r2.coordinateHelper.spatialReference }), z(e2));
  }
  _visualizeSnappingIndicator(i, t) {
    const n4 = new g({ geometry: i, symbol: t });
    return this.graphicsLayer.add(n4), n(() => {
      this.graphicsLayer.remove(n4);
    });
  }
};
var u = o2.main.toArray();
var M = [...o2.main.toRgb(), 100];
var f = new y2({ outline: new m2({ width: 1.5, color: u }), size: 15, color: [0, 0, 0, 0] });
var I = new y2({ outline: { width: 0.5, color: [0, 0, 0, 1] }, size: 10, color: u });
var P = new d({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", enable: true, capStyle: U.Butt, joinStyle: w.Round, miterLimit: 10, width: e(p.lineHintWidthTarget), color: u }] } } });
var x = new d({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0, y: -1, z: 0 }, anchorPointUnits: "Relative", size: 5, markerPlacement: { type: "CIMMarkerPlacementOnLine", placePerPart: true, angleToLine: true, relativeTo: "LineMiddle" }, frame: { xmin: -5, ymin: -1.5, xmax: 5, ymax: 1.5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[7, 0], [-7, 0], [-7, 1.5], [7, 1.5]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: u }] } }], scaleSymbolsProportionally: true, respectFrame: true }, { type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0, y: 1, z: 0 }, anchorPointUnits: "Relative", size: 5, markerPlacement: { type: "CIMMarkerPlacementOnLine", placePerPart: true, angleToLine: true, relativeTo: "LineMiddle" }, frame: { xmin: -5, ymin: -1.5, xmax: 5, ymax: 1.5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { rings: [[[7, 0], [-7, 0], [-7, -1.5], [7, -1.5]]] }, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: u }] } }], scaleSymbolsProportionally: true, respectFrame: true }] } } });
var v = (e2) => new d({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, anchorPoint: { x: 0.5, y: 0.5, z: 0 }, anchorPointUnits: "Relative", size: e(p.rightAngleHintSize), rotation: e2, markerPlacement: { type: "CIMMarkerPlacementOnVertices", placePerPart: true, angleToLine: true, placeOnEndPoints: false }, frame: { xmin: -5, ymin: -5, xmax: 5, ymax: 5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { paths: [[[5, -5], [-5, -5], [-5, 5], [5, 5], [5, -5]]] }, symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", miterLimit: 10, width: e(p.rightAngleHintOutlineSize), color: u }, { type: "CIMSolidFill", enable: true, color: M }] } }], scaleSymbolsProportionally: true, respectFrame: true }] } } });
var C = v(45);
var L = v(225);
var z = (() => {
  const e2 = n3(), r2 = n3(), i = n2();
  return (o3) => (o(e2, o3.centerVertex, o3.previousVertex), o(r2, o3.nextVertex, o3.previousVertex), y(i, e2, r2), i[2] < 0 ? C : L);
})();

export {
  g2 as g
};
//# sourceMappingURL=chunk-2OSYZ3IL.js.map
