import {
  n as n3
} from "./chunk-DNPZNIDB.js";
import {
  e as e4
} from "./chunk-WW7VYUQW.js";
import {
  r
} from "./chunk-FCDEMPPS.js";
import {
  o
} from "./chunk-TEJEYVH4.js";
import {
  t
} from "./chunk-HEZ2ATGC.js";
import {
  e as e3
} from "./chunk-AALA53RH.js";
import {
  u
} from "./chunk-IJHFAZOW.js";
import {
  c,
  d
} from "./chunk-YAQGRU5B.js";
import {
  e as e2
} from "./chunk-46N7XS5M.js";
import {
  e
} from "./chunk-4MKQUQD4.js";
import {
  o as o2
} from "./chunk-A3QLZKCF.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2
} from "./chunk-NAB3NF54.js";
import {
  O as O2
} from "./chunk-MDCKEJ7B.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  n
} from "./chunk-U7B2WKBH.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/ScreenSizeScaling.glsl.js
function o3(o4, n4) {
  if (!n4.screenSizeEnabled)
    return;
  const c2 = o4.vertex;
  c(c2, n4), c2.uniforms.add(new o2("perScreenPixelRatio", (e5, i2) => i2.camera.perScreenPixelRatio)), c2.uniforms.add(new o2("screenSizeScale", (e5) => e5.screenSizeScale)), c2.code.add(n2`float computeRenderPixelSizeAt( vec3 pWorld ){
vec3 viewForward = - vec3(view[0][2], view[1][2], view[2][2]);
float viewDirectionDistance = abs(dot(viewForward, pWorld - cameraPosition));
return viewDirectionDistance * perScreenPixelRatio;
}
vec3 screenSizeScaling(vec3 position, vec3 anchor){
return position * screenSizeScale * computeRenderPixelSizeAt(anchor) + anchor;
}`);
}

// node_modules/@arcgis/core/chunks/ShadedColorMaterial.glsl.js
function f(e5) {
  const f2 = new i(), b2 = e5.hasMultipassTerrain && (e5.output === o.Color || e5.output === o.Alpha);
  f2.include(r), f2.include(o3, e5), f2.include(u, e5);
  const { vertex: h2, fragment: C } = f2;
  return C.include(e4), d(f2, e5), C.uniforms.add(new e3("uColor", (e6) => e6.color)), f2.attributes.add(O.POSITION, "vec3"), f2.varyings.add("vWorldPosition", "vec3"), b2 && f2.varyings.add("depth", "float"), e5.screenSizeEnabled && f2.attributes.add(O.OFFSET, "vec3"), e5.shadingEnabled && (h2.uniforms.add(new e2("viewNormal", (e6, o4) => o4.camera.viewInverseTransposeMatrix)), f2.attributes.add(O.NORMAL, "vec3"), f2.varyings.add("vViewNormal", "vec3")), h2.code.add(n2`
    void main(void) {
      vWorldPosition = ${e5.screenSizeEnabled ? "screenSizeScaling(offset, position)" : "position"};
  `), e5.shadingEnabled && h2.code.add(n2`vec3 worldNormal = normal;
vViewNormal = (viewNormal * vec4(worldNormal, 1)).xyz;`), h2.code.add(n2`
    ${b2 ? "depth = (view * vec4(vWorldPosition, 1.0)).z;" : ""}
    gl_Position = transformPosition(proj, view, vWorldPosition);
  }
  `), b2 && f2.include(n3, e5), C.code.add(n2`
    void main() {
      discardBySlice(vWorldPosition);
      ${b2 ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
    `), e5.shadingEnabled ? (C.uniforms.add(new e("shadingDirection", (e6) => e6.shadingDirection)), C.uniforms.add(new e3("shadedColor", (e6) => p(e6.shadingTint, e6.color))), C.code.add(n2`vec3 viewNormalNorm = normalize(vViewNormal);
float shadingFactor = 1.0 - clamp(-dot(viewNormalNorm, shadingDirection), 0.0, 1.0);
vec4 finalColor = mix(uColor, shadedColor, shadingFactor);`)) : C.code.add(n2`vec4 finalColor = uColor;`), C.code.add(n2`
      if (finalColor.a < ${n2.float(t)}) {
        discard;
      }
      ${e5.output === o.Alpha ? n2`gl_FragColor = vec4(finalColor.a);` : ""}

      ${e5.output === o.Color ? n2`gl_FragColor = highlightSlice(finalColor, vWorldPosition); ${e5.transparencyPassType === O2.Color ? "gl_FragColor = premultiplyAlpha(gl_FragColor);" : ""}` : ""}
    }
    `), f2;
}
function p(e5, o4) {
  const r2 = 1 - e5[3], i2 = e5[3] + o4[3] * r2;
  return 0 === i2 ? (b[3] = i2, b) : (b[0] = (e5[0] * e5[3] + o4[0] * o4[3] * r2) / i2, b[1] = (e5[1] * e5[3] + o4[1] * o4[3] * r2) / i2, b[2] = (e5[2] * e5[3] + o4[2] * o4[3] * r2) / i2, b[3] = o4[3], b);
}
var b = n();
var h = Object.freeze(Object.defineProperty({ __proto__: null, build: f }, Symbol.toStringTag, { value: "Module" }));

export {
  f,
  h
};
//# sourceMappingURL=chunk-MQZSD3AZ.js.map
