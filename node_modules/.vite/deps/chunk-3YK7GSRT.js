import {
  F,
  S as S2,
  c as c2,
  e as e4,
  n as n4,
  r as r2
} from "./chunk-IEHZGLM3.js";
import {
  g
} from "./chunk-2OSYZ3IL.js";
import {
  h as h2
} from "./chunk-7TCJ26U5.js";
import {
  e as e2
} from "./chunk-T6BL6FYR.js";
import {
  S,
  g as g2,
  p,
  x
} from "./chunk-GVCSP4OP.js";
import {
  c as c3
} from "./chunk-22MSECLU.js";
import {
  e as e3
} from "./chunk-XKY65LLM.js";
import {
  v
} from "./chunk-SOZCO2CU.js";
import {
  n as n3
} from "./chunk-RBVTRJPJ.js";
import {
  g as g3
} from "./chunk-Z3S5X75I.js";
import {
  l as l2
} from "./chunk-ZN2MGN4S.js";
import {
  h
} from "./chunk-BS7TS6UC.js";
import {
  a
} from "./chunk-JJRJ6TV3.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  n as n2
} from "./chunk-OIPX3EDD.js";
import {
  i
} from "./chunk-NWRK6QLX.js";
import {
  j2
} from "./chunk-YPZEGNLG.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  j
} from "./chunk-U3PSONS6.js";
import {
  m
} from "./chunk-G5JBUC5N.js";
import {
  c,
  l,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/draw/DrawAction.js
var G;
var V = G = class extends n2.EventedAccessor {
  constructor(e5) {
    super(e5), this._hasZ = null, this._cursorScreenPoint = null, this._activePointerId = null, this._stagedVertexUnsnapped = null, this._lastVertexUnsnapped = null, this._handles = new u(), this._viewHandlesKey = "view-handles", this._undoRedoHandlesKey = "undo-redo-handles", this._drawToolHandlesKey = "draw-tool", this._nativeEventHistory = { undoStack: [], redoStack: [] }, this.interactiveUndoDisabled = false, this.history = [], this.redoHistory = [], this.snapToScene = false, this.view = null, this.elevationInfo = null, this.defaultZ = 0, this._coordinateHelper = x(e5.hasZ, false, e5.view.spatialReference), this._snappingManager = e5.snappingManager, this._editGeometryOperations = new S(new g2(e5.editGeometryType ?? "polygon", this._coordinateHelper)), this._snappingGraphicsLayer = new h({ id: G.SNAPPING_GRAPHICS_LAYER_ID, listMode: "hide", internal: true }), this._snappingContext = new e2({ editGeometryOperations: this._editGeometryOperations, elevationInfo: { mode: "on-the-ground", offset: 0 }, pointer: "mouse", visualizer: new g(this._snappingGraphicsLayer) }), this._activeComponent = new p(e5.view.spatialReference, l2.Local), this._editGeometryOperations.data.components.push(this._activeComponent);
  }
  normalizeCtorArgs(e5) {
    const t3 = { ...e5 };
    return delete t3.editGeometryType, t3;
  }
  initialize() {
    this._snappingOperation = new h2({ view: this.view }), "2d" === this.view.type && this.view.map.layers.add(this._snappingGraphicsLayer);
  }
  destroy() {
    this._handles.destroy(), this.view.map.layers.remove(this._snappingGraphicsLayer), this._snappingGraphicsLayer.destroy(), r(this._snappingManager) && this._snappingManager.doneSnapping(), this._snappingOperation = l(this._snappingOperation), this._editGeometryOperations.destroy();
  }
  get _committedVertices() {
    return this._editGeometryOperations.data.components[0].vertices.map((e5) => e5.pos);
  }
  get vertices() {
    return r(this._stagedVertex) ? [...this._committedVertices, this._coordinateHelper.pointToArray(this._stagedVertex)] : this._committedVertices;
  }
  get hasZ() {
    return r(this._hasZ) ? this._hasZ : "3d" === this.view.type;
  }
  set hasZ(e5) {
    this._hasZ = e5, this.notifyChange("hasZ");
  }
  get _stagedVertex() {
    return this._snappingOperation.stagedPoint;
  }
  set _stagedVertex(e5) {
    this._snappingOperation.stagedPoint = m(e5);
  }
  canUndo() {
    return this._editGeometryOperations.canUndo;
  }
  canRedo() {
    return this._editGeometryOperations.canRedo;
  }
  undo() {
    this.canUndo && this._editGeometryOperations.undo();
  }
  redo() {
    this.canRedo && this._editGeometryOperations.redo();
  }
  getCoordsFromScreenPoint(e5) {
    const t3 = this.screenToMap(e5);
    return t(t3) ? null : t3.hasZ ? [t3.x, t3.y, t3.z] : [t3.x, t3.y];
  }
  getCoordsAndPointFromScreenPoint(e5) {
    const t3 = this.screenToMap(e5);
    return t(t3) ? null : t3.hasZ ? { vertex: [t3.x, t3.y, t3.z], mapPoint: t3 } : { vertex: [t3.x, t3.y], mapPoint: t3 };
  }
  screenToMap(e5) {
    let t3 = null;
    if ("3d" === this.view.type)
      if (this.hasZ) {
        const i3 = c(this.elevationInfo, O);
        t3 = this.view.sceneIntersectionHelper.intersectElevationFromScreen(i(e5.x, e5.y), i3, this._getGeometryZValue());
      } else {
        const i3 = c(this.elevationInfo, P);
        t3 = this.view.sceneIntersectionHelper.intersectElevationFromScreen(i(e5.x, e5.y), i3, 0), r(t3) && (t3.z = void 0);
      }
    else
      t3 = this.view.toMap(e5), r(t3) && (t3.z = this.hasZ ? this._getGeometryZValue() : void 0);
    return t3;
  }
  _pushCursorVertex(e5, t3) {
    const i3 = v(e5[0], e5[1], null, this.view.spatialReference);
    this._stagedVertexUnsnapped = i3;
    const r4 = this._snappingManager;
    if (t(r4))
      return this._stagedVertex = i3, void t3();
    j(this._snappingOperation.snap(i3, r4, this._snappingContext)).then(() => {
      t3();
    });
  }
  _popCursorVertex() {
    this._stagedVertexUnsnapped = null, this._stagedVertex = null;
  }
  _getGeometryZValue() {
    return this.defaultZ;
  }
  _abortSnapping() {
    this._snappingOperation.abort();
  }
  _isDuplicateOfLastVertex(e5) {
    const t3 = this._editGeometryOperations.data.components[0].getLastVertex();
    if (r(t3) && e5[0] === t3[0] && e5[1] === t3[1])
      return true;
    const { x: i3, y: r4 } = this._coordinateHelper.vectorToDehydratedPoint(e5);
    return !(!r(this._lastVertexUnsnapped) || i3 !== this._lastVertexUnsnapped.x || r4 !== this._lastVertexUnsnapped.y);
  }
  _shouldHandlePointerEvent(e5) {
    return this._isPrimaryPointerAction(e5) && (t(this._activePointerId) || this._activePointerId === e5.pointerId);
  }
  _vertexAddHandler(e5) {
    const t3 = r(this._stagedVertex) ? this._coordinateHelper.pointToArray(this._stagedVertex) : this.getCoordsFromScreenPoint(this._cursorScreenPoint);
    r(t3) && this._addVertex(t3, e5.native);
  }
  _drawCompleteHandler(e5) {
    this._completeDrawing(e5.native);
  }
  _isPrimaryPointerAction(e5) {
    return "mouse" !== e5.pointerType || 0 === e5.button;
  }
};
V.SNAPPING_GRAPHICS_LAYER_ID = "DrawAction-snapping-graphics-layer", e([d({ readOnly: true })], V.prototype, "vertices", null), e([d({ type: Boolean, nonNullable: true })], V.prototype, "interactiveUndoDisabled", void 0), e([d({ readOnly: true })], V.prototype, "history", void 0), e([d({ readOnly: true })], V.prototype, "redoHistory", void 0), e([d()], V.prototype, "snapToScene", void 0), e([d()], V.prototype, "view", void 0), e([d()], V.prototype, "elevationInfo", void 0), e([d({ nonNullable: true })], V.prototype, "defaultZ", void 0), e([d()], V.prototype, "hasZ", null), e([d()], V.prototype, "_snappingOperation", void 0), e([d()], V.prototype, "_stagedVertex", null), V = G = e([n("esri.views.draw.DrawAction")], V);
var O = { mode: "absolute-height", offset: 0 };
var P = { mode: "on-the-ground", offset: 0 };
var S3 = V;

// node_modules/@arcgis/core/views/draw/input/DrawEvents.js
var t2 = class {
  constructor(t3, e5, s2, i3) {
    this.view = t3, this.native = e5, this.vertexIndex = s2, this.vertices = i3, this.defaultPrevented = false, this.type = "vertex-add";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var s = class {
  constructor(t3, e5, s2, i3) {
    this.view = t3, this.native = e5, this.vertexIndex = s2, this.vertices = i3, this.defaultPrevented = false, this.type = "vertex-remove";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var i2 = class {
  constructor(t3, e5, s2, i3, r4 = null) {
    this.view = t3, this.native = e5, this.vertexIndex = s2, this.vertices = i3, this.mapPoint = r4, this.coordinates = null, this.defaultPrevented = false, this.type = "cursor-update", this.coordinates = 1 === i3.length ? i3[0] : null;
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var r3 = class {
  constructor(t3, e5) {
    this.native = t3, this.vertices = e5, this.coordinates = null, this.defaultPrevented = false, this.type = "draw-complete", this.coordinates = 1 === e5.length ? e5[0] : null;
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};

// node_modules/@arcgis/core/chunks/MultipointDrawAction.js
var _ = class extends S3 {
  constructor(e5) {
    super(e5), this._popVertexOnPointerMove = false, this._addVertexOnPointerUp = false;
  }
  initialize() {
    this._addViewHandles(), this._addUndoRedoHandles();
  }
  destroy() {
    this._removeViewHandles(), this._removeUndoRedoHandles(), this.emit("destroy");
  }
  undo() {
    super.undo(), this.notifyChange("vertices");
  }
  redo() {
    super.redo(), this.notifyChange("vertices");
  }
  complete() {
    this._completeDrawing();
  }
  _addViewHandles() {
    this._removeViewHandles(), this._handles.add([this.view.on("click", (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("pointer-down", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._activePointerId = e5.pointerId, this._addVertexOnPointerUp = true, this._cursorScreenPoint = n3(e5), "touch" === e5.pointerType && this._updateCursor(e5.native));
    }, g3.TOOL), this.view.on("pointer-move", (e5) => {
      this._popVertexOnPointerMove && (this.undo(), this._popVertexOnPointerMove = false), this._abortSnapping(), this._cursorScreenPoint = n3(e5), "touch" !== e5.pointerType && this._updateCursor(e5.native);
    }, g3.TOOL), this.view.on("pointer-drag", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._addVertexOnPointerUp = false);
    }, g3.TOOL), this.view.on("pointer-up", (e5) => {
      if (this._shouldHandlePointerEvent(e5))
        if (this._abortSnapping(), this._activePointerId = null, this._addVertexOnPointerUp)
          this._vertexAddHandler(e5);
        else {
          const t3 = "touch" === e5.pointerType;
          this._updateCursor(e5.native, t3);
        }
    }, g3.TOOL), this.view.on("drag", ["Shift"], (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("double-click", (e5) => {
      e5.stopPropagation(), this._drawCompleteHandler(e5);
    }, g3.TOOL), this.view.on("double-click", ["Control"], (e5) => {
      e5.stopPropagation(), this._drawCompleteHandler(e5);
    }, g3.TOOL), this.view.on("key-down", (e5) => {
      const { key: t3, repeat: i3 } = e5;
      t3 === e3.vertexAdd && !i3 && this._cursorScreenPoint ? (e5.stopPropagation(), this._abortSnapping(), this._vertexAddHandler(e5)) : t3 !== e3.complete || i3 ? t3 !== e3.undo || this.interactiveUndoDisabled || i3 ? t3 !== e3.redo || this.interactiveUndoDisabled || i3 ? t3 !== e3.pan || i3 || e5.stopPropagation() : (e5.stopPropagation(), this.redo()) : (e5.stopPropagation(), this.undo()) : (e5.stopPropagation(), this._drawCompleteHandler(e5));
    }, g3.TOOL), this.view.on("key-up", (e5) => {
      e5.key === e3.pan && e5.stopPropagation();
    }, g3.TOOL)], this._viewHandlesKey);
  }
  _addUndoRedoHandles() {
    this._removeUndoRedoHandles(), this._handles.add([this._editGeometryOperations.on("vertex-remove", (e5) => {
      if (this.notifyChange("vertices"), "undo" === e5.operation) {
        const i3 = this._nativeEventHistory.undoStack.pop();
        this._nativeEventHistory.redoStack.push(i3);
        const o = [...this._committedVertices];
        r(this._stagedVertex) && o.push(this._coordinateHelper.pointToArray(this._stagedVertex)), this.emit("undo", new s(this.view, i3, e5.vertices[0].index, o));
      }
    }), this._editGeometryOperations.on("vertex-add", (e5) => {
      if (this.notifyChange("vertices"), "apply" === e5.operation) {
        const e6 = this._nativeEventHistory.undoStack[this._nativeEventHistory.undoStack.length], t3 = this._committedVertices.length - 1, i3 = new t2(this.view, e6, t3, this.vertices);
        this.emit("vertex-add", i3), i3.defaultPrevented && (this._popVertexOnPointerMove = true);
      } else if ("redo" === e5.operation) {
        const i3 = this._nativeEventHistory.redoStack.pop();
        this._nativeEventHistory.undoStack.push(i3);
        const o = [...this._committedVertices];
        r(this._stagedVertex) && o.push(this._coordinateHelper.pointToArray(this._stagedVertex)), this.emit("redo", new t2(this.view, i3, e5.vertices[0].index, o));
      }
    })], this._undoRedoHandlesKey);
  }
  _removeViewHandles() {
    this._handles.remove(this._viewHandlesKey);
  }
  _removeUndoRedoHandles() {
    this._handles.remove(this._undoRedoHandlesKey);
  }
  _addVertex(e5, t3) {
    const i3 = this._coordinateHelper.arrayToVector(e5);
    if (this._isDuplicateOfLastVertex(i3))
      return;
    this._lastVertexUnsnapped = this._stagedVertexUnsnapped, this._popCursorVertex(), this._editGeometryOperations.appendVertex(i3);
    const o = t3 || new Event("placeholder");
    this._nativeEventHistory.undoStack.push(o);
  }
  _updateCursor(e5, i3 = false) {
    if (this._popCursorVertex(), !this._cursorScreenPoint)
      return;
    const o = this.getCoordsAndPointFromScreenPoint(this._cursorScreenPoint);
    r(o) && !i3 && this._pushCursorVertex(o.vertex, () => this.emit("cursor-update", new i2(this.view, e5, this._activeComponent.vertices.length, this.vertices, r(this._stagedVertex) ? new j2(this._stagedVertex) : null)));
  }
  _completeDrawing(e5) {
    if (this._activePointerId = null, this._popCursorVertex(), this._abortSnapping(), r(this._snappingManager) && this._snappingManager.doneSnapping(), this.vertices.length < 1)
      return;
    const i3 = new r3(e5, this.vertices);
    this.emit("draw-complete", i3), i3.defaultPrevented || this._removeViewHandles();
  }
};
_ = e([n("esri.views.draw.MultipointDrawAction")], _);
var v2 = Object.freeze(Object.defineProperty({ __proto__: null, get MultipointDrawAction() {
  return _;
} }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/views/draw/DrawTool.js
var h3 = class extends a(n2.EventedMixin(c3)) {
  constructor(e5) {
    super(e5), this.defaultZ = 0, this.elevationInfo = null, this.hasZ = true, this.mode = null, this.snapToScene = null, this.type = "draw-3d";
  }
  initialize() {
    const e5 = c(this.elevationInfo, { mode: this.hasZ ? "absolute-height" : "on-the-ground", offset: 0 }), t3 = this.view;
    this.drawOperation = new F({ view: t3, manipulators: this.manipulators, geometryType: this.geometryType, drawingMode: this.mode, hasZ: this.hasZ, defaultZ: this.defaultZ, snapToSceneEnabled: this.snapToScene, drawSurface: "3d" === t3.type ? new n4(t3, e5) : null, elevationDrawSurface: "3d" === t3.type ? new r2(e5, this.defaultZ, t3) : null, hasM: false, elevationInfo: e5 }), this.handles.add([this.drawOperation.on("vertex-add", (e6) => this.onVertexAdd(e6)), this.drawOperation.on("vertex-remove", (e6) => this.onVertexRemove(e6)), this.drawOperation.on("vertex-update", (e6) => this.onVertexUpdate(e6)), this.drawOperation.on("cursor-update", (e6) => this.onCursorUpdate(e6)), this.drawOperation.on("complete", (e6) => this.onComplete(e6))]), this.finishToolCreation();
  }
  destroy() {
    this.drawOperation = l(this.drawOperation), this._set("view", null);
  }
  get canRedo() {
    return this.drawOperation.canRedo;
  }
  get canUndo() {
    return this.drawOperation.canUndo;
  }
  set enabled(e5) {
    this.drawOperation.interactive = e5, this._set("enabled", e5);
  }
  get updating() {
    var _a;
    return ((_a = this.drawOperation) == null ? void 0 : _a.updating) ?? false;
  }
  completeCreateOperation() {
    this.drawOperation.complete();
  }
  onDeactivate() {
    this.drawOperation.isCompleted || this.drawOperation.cancel();
  }
  getVertexCoords() {
    return this.drawOperation.vertices;
  }
  onInputEvent(e5) {
    this.drawOperation.onInputEvent(e5);
  }
  redo() {
    this.drawOperation.redo();
  }
  reset() {
  }
  undo() {
    this.drawOperation.undo();
  }
  onComplete(e5) {
    this.emit("complete", e5);
  }
  onCursorUpdate(e5) {
    this.emit("cursor-update", e5);
  }
  onVertexAdd(e5) {
    this.emit("vertex-add", e5);
  }
  onVertexRemove(e5) {
    this.emit("vertex-remove", e5);
  }
  onVertexUpdate(e5) {
    this.emit("vertex-update", e5);
  }
};
e([d({ constructOnly: true, nonNullable: true })], h3.prototype, "defaultZ", void 0), e([d()], h3.prototype, "drawOperation", void 0), e([d({ constructOnly: true })], h3.prototype, "elevationInfo", void 0), e([d({ value: true })], h3.prototype, "enabled", null), e([d({ constructOnly: true })], h3.prototype, "geometryType", void 0), e([d({ constructOnly: true })], h3.prototype, "hasZ", void 0), e([d({ constructOnly: true })], h3.prototype, "mode", void 0), e([d()], h3.prototype, "snapToScene", void 0), e([d({ readOnly: true })], h3.prototype, "type", void 0), e([d({ readOnly: true })], h3.prototype, "updating", null), e([d({ constructOnly: true, nonNullable: true })], h3.prototype, "view", void 0), h3 = e([n("esri.views.draw.DrawTool")], h3);

// node_modules/@arcgis/core/views/draw/PointDrawAction.js
var _2 = class extends S3 {
  constructor(e5) {
    super(e5), this._addVertexOnPointerUp = false;
  }
  initialize() {
    "2d" === this.view.type ? this._addViewHandles() : this._addDrawTool();
  }
  destroy() {
    "2d" === this.view.type ? this._removeViewHandles() : this._removeDrawTool(), this.emit("destroy");
  }
  complete() {
    "2d" === this.view.type ? this._cursorScreenPoint && this._completeDrawing() : this._drawTool.completeCreateOperation();
  }
  _addViewHandles() {
    this._removeViewHandles(), this._handles.add([this.view.on("pointer-down", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._activePointerId = e5.pointerId, this._addVertexOnPointerUp = true, this._cursorScreenPoint = n3(e5), "touch" === e5.pointerType && this._updateCursor(e5.native));
    }, g3.TOOL), this.view.on("pointer-move", (e5) => {
      this._abortSnapping(), this._cursorScreenPoint = n3(e5), "touch" !== e5.pointerType && this._updateCursor(e5.native);
    }, g3.TOOL), this.view.on("pointer-drag", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._addVertexOnPointerUp = false);
    }, g3.TOOL), this.view.on("pointer-up", (e5) => {
      if (this._shouldHandlePointerEvent(e5))
        if (this._abortSnapping(), this._activePointerId = null, this._addVertexOnPointerUp)
          e5.stopPropagation(), this._vertexAddHandler(e5);
        else {
          const t3 = "touch" === e5.pointerType;
          this._updateCursor(e5.native, t3);
        }
    }, g3.TOOL), this.view.on("drag", ["Shift"], (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("key-down", (e5) => {
      e5.key === e3.complete && this._cursorScreenPoint && (this._abortSnapping(), this._vertexAddHandler(e5));
    }, g3.TOOL)], this._viewHandlesKey);
  }
  _removeViewHandles() {
    this._handles.remove(this._viewHandlesKey);
  }
  _addDrawTool() {
    this._drawTool = new h3({ view: this.view, elevationInfo: this.elevationInfo, hasZ: this.hasZ, geometryType: "point", mode: "click" }), this.view.addAndActivateTool(this._drawTool), this._handles.add([this._drawTool.on("cursor-update", (e5) => {
      1 === e5.vertices.length && this.emit("cursor-update", new i2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("complete", (e5) => {
      this.emit("draw-complete", new r3(null, this._drawTool.getVertexCoords())), this._removeDrawTool();
    })], this._drawToolHandlesKey);
  }
  _removeDrawTool() {
    this._handles.remove(this._drawToolHandlesKey), this.view.tools.remove(this._drawTool), this._drawTool = l(this._drawTool);
  }
  _addVertex(e5) {
    const t3 = this._coordinateHelper.arrayToVector(e5);
    this._isDuplicateOfLastVertex(t3) || (this._lastVertexUnsnapped = this._stagedVertexUnsnapped, this._popCursorVertex(), this._editGeometryOperations.appendVertex(t3), this.notifyChange("vertices"), this._completeDrawing());
  }
  _updateCursor(e5, t3 = false) {
    if (this._popCursorVertex(), !this._cursorScreenPoint)
      return;
    const o = this.getCoordsAndPointFromScreenPoint(this._cursorScreenPoint);
    r(o) && !t3 && this._pushCursorVertex(o.vertex, () => this.emit("cursor-update", new i2(this.view, e5, this._activeComponent.vertices.length, this.vertices, r(this._stagedVertex) ? new j2(this._stagedVertex) : null)));
  }
  _completeDrawing(e5) {
    this._activePointerId = null, this._popCursorVertex(), this._abortSnapping(), r(this._snappingManager) && this._snappingManager.doneSnapping();
    const t3 = new r3(e5, this.vertices);
    this.emit("draw-complete", t3), t3.defaultPrevented || this._removeViewHandles();
  }
};
_2 = e([n("esri.views.draw.PointDrawAction")], _2);

// node_modules/@arcgis/core/views/draw/PolygonDrawAction.js
var w = class extends S3 {
  constructor(e5) {
    super(e5), this._panEnabled = false, this._popVertexOnPointerMove = false, this._addVertexOnPointerUp = false, this.mode = e4;
  }
  initialize() {
    "2d" === this.view.type ? (this._addViewHandles(), this._addUndoRedoHandles()) : this._addDrawTool();
  }
  destroy() {
    "2d" === this.view.type ? (this._removeViewHandles(), this._removeUndoRedoHandles()) : this._removeDrawTool(), this.emit("destroy");
  }
  get _dragEnabled() {
    return "freehand" === this.mode || "hybrid" === this.mode;
  }
  get _clickEnabled() {
    return "click" === this.mode || "hybrid" === this.mode;
  }
  undo() {
    super.undo(), this.notifyChange("vertices");
  }
  redo() {
    super.redo(), this.notifyChange("vertices");
  }
  complete() {
    "2d" === this.view.type ? this._completeDrawing() : this._drawTool.completeCreateOperation();
  }
  _getGeometryZValue() {
    return this.hasZ && this.vertices.length > 0 ? this.vertices[0][2] : this.defaultZ;
  }
  _addViewHandles() {
    this._removeViewHandles(), this._handles.add([this.view.on("click", (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("pointer-down", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._activePointerId = e5.pointerId, this._addVertexOnPointerUp = true, this._cursorScreenPoint = n3(e5), "touch" === e5.pointerType && this._updateCursor(e5.native));
    }, g3.TOOL), this.view.on("pointer-move", (e5) => {
      this._abortSnapping(), this._popVertexOnPointerMove && (this.undo(), this._popVertexOnPointerMove = false), this._cursorScreenPoint = n3(e5), "touch" !== e5.pointerType && this._updateCursor(e5.native);
    }, g3.TOOL), this.view.on("pointer-drag", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._cursorScreenPoint = n3(e5), this._dragEnabled && !this._panEnabled ? this._vertexAddHandler(e5) : this._addVertexOnPointerUp = false);
    }, g3.TOOL), this.view.on("pointer-up", (e5) => {
      if (this._shouldHandlePointerEvent(e5))
        if (this._abortSnapping(), this._activePointerId = null, this._addVertexOnPointerUp) {
          if (!this._clickEnabled)
            return 1 === this.vertices.length && this.vertices.pop(), void this._drawCompleteHandler(e5);
          this._vertexAddHandler(e5);
        } else {
          const t3 = "touch" === e5.pointerType;
          this._updateCursor(e5.native, t3);
        }
    }, g3.TOOL), this.view.on("drag", (e5) => {
      this._dragEnabled && r(this._activePointerId) && !this._panEnabled && e5.stopPropagation();
    }, g3.TOOL), this.view.on("drag", ["Shift"], (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("double-click", (e5) => {
      e5.stopPropagation(), this._drawCompleteHandler(e5);
    }, g3.TOOL), this.view.on("double-click", ["Control"], (e5) => {
      e5.stopPropagation(), this._drawCompleteHandler(e5);
    }, g3.TOOL), this.view.on("key-down", (e5) => {
      const { key: t3, repeat: i3 } = e5;
      t3 === e3.vertexAdd && !i3 && this._cursorScreenPoint ? (e5.stopPropagation(), this._abortSnapping(), this._vertexAddHandler(e5)) : t3 !== e3.complete || i3 ? t3 !== e3.undo || this.interactiveUndoDisabled || i3 ? t3 !== e3.redo || this.interactiveUndoDisabled || i3 ? t3 !== e3.pan || i3 || (e5.stopPropagation(), this._panEnabled = true) : (e5.stopPropagation(), this.redo()) : (e5.stopPropagation(), this.undo()) : (e5.stopPropagation(), this._drawCompleteHandler(e5));
    }, g3.TOOL), this.view.on("key-up", (e5) => {
      e5.key === e3.pan && (e5.stopPropagation(), this._panEnabled = false);
    }, g3.TOOL)], this._viewHandlesKey);
  }
  _addUndoRedoHandles() {
    this._removeUndoRedoHandles(), this._handles.add([this._editGeometryOperations.on("vertex-remove", (e5) => {
      if (this.notifyChange("vertices"), "undo" === e5.operation) {
        const i3 = this._nativeEventHistory.undoStack.pop();
        this._nativeEventHistory.redoStack.push(i3);
        const o = [...this._committedVertices];
        r(this._stagedVertex) && o.push(this._coordinateHelper.pointToArray(this._stagedVertex)), this.emit("undo", new s(this.view, i3, e5.vertices[0].index, o));
      }
    }), this._editGeometryOperations.on("vertex-add", (e5) => {
      if (this.notifyChange("vertices"), "apply" === e5.operation) {
        const e6 = this._nativeEventHistory.undoStack[this._nativeEventHistory.undoStack.length], t3 = this._committedVertices.length - 1, i3 = new t2(this.view, e6, t3, this.vertices);
        this.emit("vertex-add", i3), i3.defaultPrevented && (this._popVertexOnPointerMove = true);
      } else if ("redo" === e5.operation) {
        const i3 = this._nativeEventHistory.redoStack.pop();
        this._nativeEventHistory.undoStack.push(i3);
        const o = [...this._committedVertices];
        r(this._stagedVertex) && o.push(this._coordinateHelper.pointToArray(this._stagedVertex)), this.emit("redo", new t2(this.view, i3, e5.vertices[0].index, o));
      }
    })], this._undoRedoHandlesKey);
  }
  _removeViewHandles() {
    this._handles.remove(this._viewHandlesKey);
  }
  _removeUndoRedoHandles() {
    this._handles.remove(this._undoRedoHandlesKey);
  }
  _addDrawTool() {
    this._drawTool = new h3({ view: this.view, elevationInfo: this.elevationInfo, hasZ: this.hasZ, geometryType: "polygon", mode: this.mode }), this.view.addAndActivateTool(this._drawTool), this._drawTool.on("vertex-add", (e5) => {
      1 === e5.vertices.length && this.emit("vertex-add", new t2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("cursor-update", (e5) => {
      1 === e5.vertices.length && this.emit("cursor-update", new i2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("complete", (e5) => {
      this.emit("draw-complete", new r3(null, this._drawTool.getVertexCoords())), this._removeDrawTool();
    });
  }
  _removeDrawTool() {
    this._handles.remove(this._drawToolHandlesKey), this.view.tools.remove(this._drawTool), this._drawTool = l(this._drawTool);
  }
  _addVertex(e5, t3) {
    const i3 = this._coordinateHelper.arrayToVector(e5);
    if (this._isDuplicateOfLastVertex(i3))
      return;
    this._lastVertexUnsnapped = this._stagedVertexUnsnapped, this._popCursorVertex(), this._editGeometryOperations.appendVertex(i3);
    const o = t3 || new Event("placeholder");
    this._nativeEventHistory.undoStack.push(o);
  }
  _updateCursor(e5, i3 = false) {
    if (this._popCursorVertex(), !this._cursorScreenPoint)
      return;
    const o = this.getCoordsAndPointFromScreenPoint(this._cursorScreenPoint);
    r(o) && !i3 && this._pushCursorVertex(o.vertex, () => this.emit("cursor-update", new i2(this.view, e5, this._activeComponent.vertices.length, this.vertices, r(this._stagedVertex) ? new j2(this._stagedVertex) : null)));
  }
  _completeDrawing(e5) {
    if (this._activePointerId = null, this._popCursorVertex(), this._committedVertices.length < 3)
      return;
    this._abortSnapping(), r(this._snappingManager) && this._snappingManager.doneSnapping();
    const i3 = new r3(e5, this.vertices);
    this.emit("draw-complete", i3), i3.defaultPrevented || this._removeViewHandles();
  }
};
e([d()], w.prototype, "_dragEnabled", null), e([d()], w.prototype, "_clickEnabled", null), e([d({ type: c2 })], w.prototype, "mode", void 0), w = e([n("esri.views.draw.PolygonDrawAction")], w);

// node_modules/@arcgis/core/views/draw/PolylineDrawAction.js
var w2 = class extends S3 {
  constructor(e5) {
    super(e5), this._panEnabled = false, this._popVertexOnPointerMove = false, this._addVertexOnPointerUp = false, this.mode = e4;
  }
  initialize() {
    "2d" === this.view.type ? (this._addViewHandles(), this._addUndoRedoHandles()) : this._addDrawTool();
  }
  destroy() {
    "2d" === this.view.type ? (this._removeViewHandles(), this._removeUndoRedoHandles()) : this._removeDrawTool(), this.emit("destroy");
  }
  get _clickEnabled() {
    return "click" === this.mode || "hybrid" === this.mode;
  }
  get _dragEnabled() {
    return "freehand" === this.mode || "hybrid" === this.mode;
  }
  undo() {
    super.undo(), this.notifyChange("vertices");
  }
  redo() {
    super.redo(), this.notifyChange("vertices");
  }
  complete() {
    "2d" === this.view.type ? this._completeDrawing() : this._drawTool.completeCreateOperation();
  }
  _addViewHandles() {
    this._removeViewHandles(), this._handles.add([this.view.on("click", (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("pointer-down", (e5) => {
      this._shouldHandlePointerEvent(e5) && !this._panEnabled && (this._abortSnapping(), this._activePointerId = e5.pointerId, this._addVertexOnPointerUp = true, this._cursorScreenPoint = n3(e5), "touch" === e5.pointerType && this._updateCursor(e5.native));
    }, g3.TOOL), this.view.on("pointer-move", (e5) => {
      this._popVertexOnPointerMove && (this.undo(), this._popVertexOnPointerMove = false), this._abortSnapping(), this._cursorScreenPoint = n3(e5), "touch" !== e5.pointerType && this._updateCursor(e5.native);
    }, g3.TOOL), this.view.on("pointer-drag", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._cursorScreenPoint = n3(e5), this._dragEnabled && !this._panEnabled ? this._vertexAddHandler(e5) : this._addVertexOnPointerUp = false);
    }, g3.TOOL), this.view.on("pointer-up", (e5) => {
      if (this._shouldHandlePointerEvent(e5))
        if (this._abortSnapping(), this._activePointerId = null, this._addVertexOnPointerUp) {
          if (!this._clickEnabled)
            return 1 === this.vertices.length && this.vertices.pop(), void this._drawCompleteHandler(e5);
          this._vertexAddHandler(e5);
        } else {
          const t3 = "touch" === e5.pointerType;
          this._updateCursor(e5.native, t3);
        }
    }, g3.TOOL), this.view.on("drag", (e5) => {
      this._dragEnabled && r(this._activePointerId) && !this._panEnabled && e5.stopPropagation();
    }, g3.TOOL), this.view.on("drag", ["Shift"], (e5) => {
      e5.stopPropagation();
    }, g3.TOOL), this.view.on("double-click", (e5) => {
      e5.stopPropagation(), this._drawCompleteHandler(e5);
    }, g3.TOOL), this.view.on("double-click", ["Control"], (e5) => {
      e5.stopPropagation(), this._drawCompleteHandler(e5);
    }, g3.TOOL), this.view.on("key-down", (e5) => {
      const { key: t3, repeat: i3 } = e5;
      t3 === e3.vertexAdd && !i3 && this._cursorScreenPoint ? (e5.stopPropagation(), this._abortSnapping(), this._vertexAddHandler(e5)) : t3 !== e3.complete || i3 ? t3 !== e3.undo || this.interactiveUndoDisabled || i3 ? t3 !== e3.redo || this.interactiveUndoDisabled || i3 ? t3 !== e3.pan || i3 || (e5.stopPropagation(), this._panEnabled = true) : (e5.stopPropagation(), this.redo()) : (e5.stopPropagation(), this.undo()) : (e5.stopPropagation(), this._drawCompleteHandler(e5));
    }, g3.TOOL), this.view.on("key-up", (e5) => {
      e5.key === e3.pan && (e5.stopPropagation(), this._panEnabled = false);
    }, g3.TOOL)], this._viewHandlesKey);
  }
  _addUndoRedoHandles() {
    this._removeUndoRedoHandles(), this._handles.add([this._editGeometryOperations.on("vertex-remove", (e5) => {
      if (this.notifyChange("vertices"), "undo" === e5.operation) {
        const i3 = this._nativeEventHistory.undoStack.pop();
        this._nativeEventHistory.redoStack.push(i3);
        const o = [...this._committedVertices];
        r(this._stagedVertex) && o.push(this._coordinateHelper.pointToArray(this._stagedVertex)), this.emit("undo", new s(this.view, i3, e5.vertices[0].index, o));
      }
    }), this._editGeometryOperations.on("vertex-add", (e5) => {
      if (this.notifyChange("vertices"), "apply" === e5.operation) {
        const e6 = this._nativeEventHistory.undoStack[this._nativeEventHistory.undoStack.length], t3 = this._committedVertices.length - 1, i3 = new t2(this.view, e6, t3, this.vertices);
        this.emit("vertex-add", i3), i3.defaultPrevented && (this._popVertexOnPointerMove = true);
      } else if ("redo" === e5.operation) {
        const i3 = this._nativeEventHistory.redoStack.pop();
        this._nativeEventHistory.undoStack.push(i3);
        const o = [...this._committedVertices];
        r(this._stagedVertex) && o.push(this._coordinateHelper.pointToArray(this._stagedVertex)), this.emit("redo", new t2(this.view, i3, e5.vertices[0].index, o));
      }
    })], this._undoRedoHandlesKey);
  }
  _removeViewHandles() {
    this._handles.remove(this._viewHandlesKey);
  }
  _removeUndoRedoHandles() {
    this._handles.remove(this._undoRedoHandlesKey);
  }
  _addDrawTool() {
    this._drawTool = new h3({ view: this.view, elevationInfo: this.elevationInfo, hasZ: this.hasZ, geometryType: "polyline", mode: this.mode }), this.view.addAndActivateTool(this._drawTool), this._handles.add([this._drawTool.on("vertex-add", (e5) => {
      1 === e5.vertices.length && this.emit("vertex-add", new t2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("cursor-update", (e5) => {
      1 === e5.vertices.length && this.emit("cursor-update", new i2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("complete", (e5) => {
      this.emit("draw-complete", new r3(null, this._drawTool.getVertexCoords())), this._removeDrawTool();
    })], this._drawToolHandlesKey);
  }
  _removeDrawTool() {
    this._handles.remove(this._drawToolHandlesKey), this.view.tools.remove(this._drawTool), this._drawTool = l(this._drawTool);
  }
  _addVertex(e5, t3) {
    const i3 = this._coordinateHelper.arrayToVector(e5);
    if (this._isDuplicateOfLastVertex(i3))
      return;
    this._lastVertexUnsnapped = this._stagedVertexUnsnapped, this._popCursorVertex(), this._editGeometryOperations.appendVertex(i3);
    const o = t3 || new Event("placeholder");
    this._nativeEventHistory.undoStack.push(o);
  }
  _updateCursor(e5, i3 = false) {
    if (this._popCursorVertex(), !this._cursorScreenPoint)
      return;
    const o = this.getCoordsAndPointFromScreenPoint(this._cursorScreenPoint);
    r(o) && !i3 && this._pushCursorVertex(o.vertex, () => this.emit("cursor-update", new i2(this.view, e5, this._activeComponent.vertices.length, this.vertices, r(this._stagedVertex) ? new j2(this._stagedVertex) : null)));
  }
  _completeDrawing(e5) {
    if (this._activePointerId = null, this._popCursorVertex(), this._committedVertices.length < 2)
      return;
    this._abortSnapping(), r(this._snappingManager) && this._snappingManager.doneSnapping();
    const i3 = new r3(e5, this.vertices);
    this.emit("draw-complete", i3), i3.defaultPrevented || this._removeViewHandles();
  }
};
e([d()], w2.prototype, "_clickEnabled", null), e([d()], w2.prototype, "_dragEnabled", null), e([d({ type: c2 })], w2.prototype, "mode", void 0), w2 = e([n("esri.views.draw.PolylineDrawAction")], w2);

// node_modules/@arcgis/core/views/draw/SegmentDrawAction.js
var T = ["freehand", "click"];
var O2 = class extends S3 {
  constructor(e5) {
    super(e5), this._isDragging = false, this._panEnabled = false, this._addVertexOnPointerUp = false, this.viewAlignedCoordinateSystem = null, this.mode = "freehand";
  }
  initialize() {
    "2d" === this.view.type ? this._addViewHandles() : this._addDrawTool();
  }
  destroy() {
    "2d" === this.view.type ? this._removeViewHandles() : this._removeDrawTool(), this.emit("destroy");
  }
  complete() {
    "2d" === this.view.type ? this._completeDrawing() : this._drawTool.completeCreateOperation();
  }
  _getGeometryZValue() {
    return this.hasZ && this.vertices.length > 0 ? this.vertices[0][2] : this.defaultZ;
  }
  _addViewHandles() {
    this._removeViewHandles(), "click" === this.mode ? this._handles.add(this._getClickModeViewHandles(), this._viewHandlesKey) : this._handles.add(this._getDragModeViewHandles(), this._viewHandlesKey);
  }
  _getDragModeViewHandles() {
    return [this.view.on("immediate-click", (e5) => {
      if (e5.stopPropagation(), e5.mapPoint && !this._panEnabled) {
        const i3 = this.getCoordsFromScreenPoint(n3(e5));
        r(i3) && (this._vertexAddHandler(e5), this._drawCompleteHandler(e5));
      }
    }, g3.TOOL), this.view.on("pointer-down", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._panEnabled || (this._resetGeometry(), this._addVertexOnPointerUp = true, this._cursorScreenPoint = n3(e5), this._activePointerId = e5.pointerId, this._vertexAddHandler(e5), this._isDragging = false, "touch" === e5.pointerType && this._updateCursor(e5.native)));
    }, g3.TOOL), this.view.on("pointer-move", (e5) => {
      this._abortSnapping(), t(this._activePointerId) && "touch" !== e5.pointerType && (this._cursorScreenPoint = n3(e5), this._updateCursor(e5.native));
    }, g3.TOOL), this.view.on("pointer-drag", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._isDragging = true, this._cursorScreenPoint = n3(e5), this._updateCursor(e5.native));
    }, g3.TOOL), this.view.on("pointer-up", (e5) => {
      this._shouldHandlePointerEvent(e5) && this._addVertexOnPointerUp && (this._abortSnapping(), this._activePointerId = null, this._isDragging && this._vertexAddHandler(e5), 2 === this._committedVertices.length && this._drawCompleteHandler(e5), this._isDragging = false);
    }, g3.TOOL), this.view.on("key-down", (e5) => {
      e5.key === e3.complete && this._cursorScreenPoint ? (this._abortSnapping(), this._vertexAddHandler(e5), this._drawCompleteHandler(e5)) : e5.key === e3.pan && (this._panEnabled = true);
    }, g3.TOOL), this.view.on("key-up", (e5) => {
      e5.key === e3.pan && (this._panEnabled = false);
    }, g3.TOOL), this.view.on("drag", (e5) => {
      r(this._activePointerId) && e5.stopPropagation();
    }, g3.TOOL), this.view.on("drag", ["Shift"], (e5) => {
      e5.stopPropagation();
    }, g3.TOOL)];
  }
  _getClickModeViewHandles() {
    return [this.view.on("pointer-down", (e5) => {
      this._abortSnapping(), this._cursorScreenPoint = n3(e5), this._activePointerId = e5.pointerId, this._isDragging = false, "touch" === e5.pointerType && this._updateCursor(e5.native);
    }, g3.TOOL), this.view.on("pointer-move", (e5) => {
      this._abortSnapping(), this._cursorScreenPoint = n3(e5), t(this._activePointerId) && "touch" !== e5.pointerType && this._updateCursor(e5.native);
    }, g3.TOOL), this.view.on("pointer-drag", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._isDragging = true);
    }, g3.TOOL), this.view.on("pointer-up", (e5) => {
      this._shouldHandlePointerEvent(e5) && (this._abortSnapping(), this._activePointerId = null, e5.stopPropagation(), this._isDragging || this._vertexAddHandler(e5), 2 !== this.vertices.length || this._isDragging || this._drawCompleteHandler(e5), this._isDragging = false);
    }, g3.TOOL), this.view.on("key-down", (e5) => {
      e5.key === e3.vertexAdd && this._cursorScreenPoint && (this._vertexAddHandler(e5), 2 === this.vertices.length && this._drawCompleteHandler(e5)), e5.key === e3.complete && this._cursorScreenPoint && 2 === this.vertices.length && (this._vertexAddHandler(e5), this._drawCompleteHandler(e5));
    }, g3.TOOL)];
  }
  _removeViewHandles() {
    this._handles.remove(this._viewHandlesKey);
  }
  _addDrawTool() {
    this._drawTool = new h3({ view: this.view, elevationInfo: this.elevationInfo, hasZ: this.hasZ, geometryType: "segment", mode: this.mode }), this.view.addAndActivateTool(this._drawTool), this._handles.add([this._drawTool.on("vertex-add", (e5) => {
      1 === e5.vertices.length && this.emit("vertex-add", new t2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("cursor-update", (e5) => {
      1 === e5.vertices.length && this.emit("cursor-update", new i2(this.view, null, e5.vertices[0].vertexIndex, this._drawTool.getVertexCoords()));
    }), this._drawTool.on("complete", (e5) => {
      this.emit("draw-complete", new r3(null, this._drawTool.getVertexCoords())), this._removeDrawTool();
    })], this._drawToolHandlesKey);
  }
  _removeDrawTool() {
    this._handles.remove(this._drawToolHandlesKey), this.view.tools.remove(this._drawTool), this._drawTool = l(this._drawTool);
  }
  _addVertex(e5, t3) {
    const i3 = this._coordinateHelper.arrayToVector(e5);
    if (this._isDuplicateOfLastVertex(i3))
      return;
    this._lastVertexUnsnapped = this._stagedVertexUnsnapped, this._popCursorVertex(), this._editGeometryOperations.appendVertex(i3), 1 === this._committedVertices.length && (this.viewAlignedCoordinateSystem = S2(this.view, this._committedVertices[0]));
    const r4 = this._committedVertices.length - 1, s2 = new t2(this.view, t3, r4, this.vertices);
    this.emit("vertex-add", s2);
  }
  _updateCursor(e5) {
    if (this._popCursorVertex(), !this._cursorScreenPoint)
      return;
    const i3 = this.getCoordsAndPointFromScreenPoint(this._cursorScreenPoint);
    r(i3) && this._pushCursorVertex(i3.vertex, () => this.emit("cursor-update", new i2(this.view, e5, this._activeComponent.vertices.length, this.vertices, r(this._stagedVertex) ? new j2(this._stagedVertex) : null)));
  }
  _completeDrawing(e5) {
    if (this._activePointerId = null, this._popCursorVertex(), this._cursorScreenPoint = null, this._isDragging = false, this._abortSnapping(), r(this._snappingManager) && this._snappingManager.doneSnapping(), this.vertices.length < 1)
      return;
    const i3 = new r3(e5, this.vertices);
    this.emit("draw-complete", i3), i3.defaultPrevented || this._removeViewHandles();
  }
  _resetGeometry() {
    this._editGeometryOperations.destroy(), this._editGeometryOperations = new S(new g2("polygon", this._coordinateHelper)), this._activeComponent = new p(this._coordinateHelper.spatialReference, l2.Local), this._editGeometryOperations.data.components.push(this._activeComponent);
  }
};
e([d({ type: T })], O2.prototype, "mode", void 0), O2 = e([n("esri/views/2d/engine/markup/SegmentDrawAction")], O2);

// node_modules/@arcgis/core/views/draw/Draw.js
var p2 = class extends y {
  constructor() {
    super(...arguments), this.activeAction = null, this.type = "draw", this.view = null;
  }
  destroy() {
    this.activeAction && (this.activeAction.destroy(), this.activeAction = null);
  }
  create(t3, e5) {
    this.reset();
    const o = { view: this.view, ...e5 };
    switch (t3) {
      case "point":
        o.editGeometryType = "point", this.activeAction = new _2(o);
        break;
      case "polyline":
        o.editGeometryType = "polyline", this.activeAction = new w2(o);
        break;
      case "multipoint":
        o.editGeometryType = "polygon", this.activeAction = new _(o);
        break;
      case "polygon":
        o.editGeometryType = "polygon", this.activeAction = new w(o);
        break;
      case "rectangle":
      case "circle":
      case "ellipse":
      case "triangle":
        o.editGeometryType = "polygon", this.activeAction = new O2(o);
    }
    return this.activeAction;
  }
  complete() {
    this.activeAction && this.activeAction.complete(), this.activeAction = null;
  }
  reset() {
    this.activeAction && this.activeAction.destroy(), this.activeAction = null;
  }
};
e([d()], p2.prototype, "activeAction", void 0), e([d({ readOnly: true })], p2.prototype, "type", void 0), e([d()], p2.prototype, "view", void 0), p2 = e([n("esri.views.draw.Draw")], p2);
var l3 = p2;

export {
  l3 as l
};
//# sourceMappingURL=chunk-3YK7GSRT.js.map
