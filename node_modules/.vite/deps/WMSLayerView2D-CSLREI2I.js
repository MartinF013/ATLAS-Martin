import {
  a
} from "./chunk-4ENOJW46.js";
import {
  S
} from "./chunk-AQHDXFPK.js";
import {
  t
} from "./chunk-EYP4YHHR.js";
import {
  i
} from "./chunk-UMSO3HI4.js";
import {
  f
} from "./chunk-VKEKAYXP.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-YZ46FBEM.js";
import "./chunk-JERZLQLG.js";
import "./chunk-JWKDNFWF.js";
import "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-SASFTPK5.js";
import "./chunk-UJS24K6P.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import "./chunk-6FQZDXGD.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-HO3HYBW5.js";
import "./chunk-YRAX326I.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-PQO66WZ2.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-HR2OX32D.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-TBT57L4K.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  g
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var u2 = s.getLogger("esri.views.2d.layers.WMSLayerView2D");
var l2 = class extends a(i(f(u))) {
  constructor() {
    super(...arguments), this.container = new t();
  }
  supportsSpatialReference(e2) {
    return this.layer.serviceSupportsSpatialReference(e2);
  }
  update(e2) {
    this.strategy.update(e2).catch((e3) => {
      g(e3) || u2.error(e3);
    });
  }
  attach() {
    const { layer: e2, container: t2 } = this, { imageMaxHeight: r, imageMaxWidth: i2 } = e2;
    this.strategy = new S({ container: t2, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: r, imageMaxWidth: i2, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.handles.add(l(() => this.exportImageVersion, () => this.requestUpdate()), "exportImageVersion");
  }
  detach() {
    this.handles.remove("exportImageVersion"), this.strategy.destroy(), this.strategy = null, this.container.removeAllChildren();
  }
  moveStart() {
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e2) {
    const { view: t2, container: r } = this, { x: s2, y: i2 } = e2, { spatialReference: o } = t2;
    let n2 = null, p = 0, m = 0;
    if (r.children.some((e3) => {
      const { width: t3, height: r2, resolution: h2, x: c2, y: d3 } = e3, u3 = c2 + h2 * t3, l3 = d3 - h2 * r2;
      return s2 >= c2 && s2 <= u3 && i2 <= d3 && i2 >= l3 && (n2 = new M({ xmin: c2, ymin: l3, xmax: u3, ymax: d3, spatialReference: o }), p = t3, m = r2, true);
    }), !n2)
      return null;
    const h = n2.width / p, c = Math.round((s2 - n2.xmin) / h), d2 = Math.round((n2.ymax - i2) / h);
    return { extent: n2, width: p, height: m, x: c, y: d2 };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e2, t2, r, s2) {
    return this.layer.fetchImage(e2, t2, r, { timeExtent: this.timeExtent, ...s2 });
  }
};
e([d()], l2.prototype, "strategy", void 0), e([d()], l2.prototype, "updating", void 0), l2 = e([n("esri.views.2d.layers.WMSLayerView2D")], l2);
var y = l2;
export {
  y as default
};
//# sourceMappingURL=WMSLayerView2D-CSLREI2I.js.map
