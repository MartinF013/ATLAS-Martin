import {
  l
} from "./chunk-EUJZTYUI.js";
import "./chunk-45USOESC.js";
import "./chunk-SXVJRHUR.js";
import {
  a
} from "./chunk-HMUUQDIL.js";
import "./chunk-7USXBUJ4.js";
import "./chunk-PZWU5EHT.js";
import {
  t
} from "./chunk-RFOZTYJH.js";
import "./chunk-YG6VFATO.js";
import {
  b
} from "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import "./chunk-2QOWZFCU.js";
import "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  E
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/portal/support/featureCollectionUtils.js
function e(e2) {
  return t2(e2, "notes");
}
function r(e2) {
  return t2(e2, "route");
}
function t2(e2, r2) {
  return !(!e2.layerType || "ArcGISFeatureLayer" !== e2.layerType) && e2.featureCollectionType === r2;
}

// node_modules/@arcgis/core/layers/support/layersCreator.js
async function n(e2, a2, y) {
  if (!a2)
    return;
  const t3 = [];
  for (const r2 of a2) {
    const e3 = I(r2, y);
    "GroupLayer" === r2.layerType ? t3.push(G(e3, r2, y)) : t3.push(e3);
  }
  const i = await E(t3);
  for (const r2 of i)
    !r2.value || y.filter && !y.filter(r2.value) || e2.add(r2.value);
}
var l2 = { ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", PointCloudLayer: "PointCloudLayer", ArcGISSceneServiceLayer: "SceneLayer", IntegratedMeshLayer: "IntegratedMeshLayer", OGCFeatureLayer: "OGCFeatureLayer", BuildingSceneLayer: "BuildingSceneLayer", ArcGISTiledElevationServiceLayer: "ElevationLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", GroupLayer: "GroupLayer", GeoJSON: "GeoJSONLayer", WebTiledLayer: "WebTileLayer", CSV: "CSVLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer", KML: "KMLLayer", RasterDataLayer: "UnsupportedLayer", Voxel: "VoxelLayer", LineOfSightLayer: "LineOfSightLayer" };
var c = { ArcGISTiledElevationServiceLayer: "ElevationLayer", DefaultTileLayer: "ElevationLayer", RasterDataElevationLayer: "UnsupportedLayer" };
var s = { ArcGISTiledMapServiceLayer: "TileLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", OpenStreetMap: "OpenStreetMapLayer", WebTiledLayer: "WebTileLayer", VectorTileLayer: "VectorTileLayer", ArcGISImageServiceLayer: "UnsupportedLayer", WMS: "UnsupportedLayer", ArcGISMapServiceLayer: "UnsupportedLayer", DefaultTileLayer: "TileLayer" };
var p = { ArcGISAnnotationLayer: "UnsupportedLayer", ArcGISDimensionLayer: "UnsupportedLayer", ArcGISFeatureLayer: "FeatureLayer", ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISStreamLayer: "StreamLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", CSV: "CSVLayer", DefaultTileLayer: "TileLayer", GeoRSS: "GeoRSSLayer", GeoJSON: "GeoJSONLayer", GroupLayer: "GroupLayer", KML: "KMLLayer", OGCFeatureLayer: "OGCFeatureLayer", SubtypeGroupLayer: "UnsupportedLayer", VectorTileLayer: "VectorTileLayer", WFS: "WFSLayer", WMS: "WMSLayer", WebTiledLayer: "WebTileLayer" };
var S = { ArcGISFeatureLayer: "FeatureLayer" };
var u = { ArcGISImageServiceLayer: "ImageryLayer", ArcGISImageServiceVectorLayer: "ImageryLayer", ArcGISMapServiceLayer: "MapImageLayer", ArcGISTiledImageServiceLayer: "ImageryTileLayer", ArcGISTiledMapServiceLayer: "TileLayer", OpenStreetMap: "OpenStreetMapLayer", VectorTileLayer: "VectorTileLayer", WebTiledLayer: "WebTileLayer", BingMapsAerial: "BingMapsLayer", BingMapsRoad: "BingMapsLayer", BingMapsHybrid: "BingMapsLayer", WMS: "WMSLayer", DefaultTileLayer: "TileLayer" };
async function I(e2, r2) {
  return d(await m(e2, r2), e2, r2);
}
async function d(e2, r2, a2) {
  const y = new e2();
  return y.read(r2, a2.context), "group" === y.type && T(r2) && await M(y, r2, a2.context), await t(y, a2.context), y;
}
async function m(e2, r2) {
  const o = r2.context, n2 = g(o);
  let l3 = e2.layerType || e2.type;
  !l3 && r2 && r2.defaultLayerType && (l3 = r2.defaultLayerType);
  const c2 = n2[l3];
  let s2 = c2 ? a[c2] : a.UnknownLayer;
  if (f(e2)) {
    const r3 = o == null ? void 0 : o.portal;
    if (e2.itemId) {
      const t3 = new b({ id: e2.itemId, portal: r3 });
      await t3.load();
      const i = (await l(t3)).className || "UnknownLayer";
      s2 = a[i];
    }
  } else
    "ArcGISFeatureLayer" === l3 ? e(e2) ? s2 = a.MapNotesLayer : r(e2) ? s2 = a.RouteLayer : T(e2) && (s2 = a.GroupLayer) : e2.wmtsInfo && e2.wmtsInfo.url && e2.wmtsInfo.layerIdentifier ? s2 = a.WMTSLayer : "WFS" === l3 && "2.0.0" !== e2.wfsInfo.version && (s2 = a.UnsupportedLayer);
  return s2();
}
function T(e2) {
  var _a, _b;
  if ("ArcGISFeatureLayer" !== e2.layerType || f(e2))
    return false;
  return (((_b = (_a = e2.featureCollection) == null ? void 0 : _a.layers) == null ? void 0 : _b.length) ?? 0) > 1;
}
function f(e2) {
  return "Feature Collection" === e2.type;
}
function g(e2) {
  let r2;
  if ("web-scene" === e2.origin)
    switch (e2.layerContainerType) {
      case "basemap":
        r2 = s;
        break;
      case "ground":
        r2 = c;
        break;
      default:
        r2 = l2;
    }
  else
    switch (e2.layerContainerType) {
      case "basemap":
        r2 = u;
        break;
      case "tables":
        r2 = S;
        break;
      default:
        r2 = p;
    }
  return r2;
}
async function G(r2, a2, y) {
  const t3 = new j(), i = n(t3, Array.isArray(a2.layers) ? a2.layers : [], y), L = await r2;
  if (await i, "group" === L.type)
    return L.layers.addMany(t3), L;
}
async function M(e2, r2, y) {
  const t3 = a.FeatureLayer, i = await t3(), L = r2.featureCollection, o = L.showLegend, n2 = L.layers.map((a2, t4) => {
    var _a;
    const L2 = new i();
    L2.read(a2, y);
    const n3 = { ...y, ignoreDefaults: true };
    return L2.read({ id: `${e2.id}-sublayer-${t4}`, visibility: ((_a = r2.visibleLayers) == null ? void 0 : _a.includes(t4)) ?? true }, n3), null != o && L2.read({ showLegend: o }, n3), L2;
  });
  e2.layers.addMany(n2);
}
export {
  n as populateOperationalLayers
};
//# sourceMappingURL=layersCreator-25L6KWMN.js.map
