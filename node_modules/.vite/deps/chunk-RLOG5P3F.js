import {
  n
} from "./chunk-KETNREBT.js";
import {
  D,
  f
} from "./chunk-QUUJFQ73.js";
import {
  s3 as s
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/edgeRendering/EdgeWorkerHandle.js
var n2 = class extends n {
  constructor(t) {
    super("EdgeProcessingWorker", "extract", { extract: (t2) => [t2.dataBuffer], extractComponentsEdgeLocations: (t2) => [t2.dataBuffer], extractEdgeLocations: (t2) => [t2.dataBuffer] }, t);
  }
  async process(t, e, r) {
    if (r)
      return f(t);
    const n3 = this._packInput(t), s2 = await this.invoke(n3, e);
    return this._unpackOutput(s2);
  }
  async extractEdgeLocations(t, e) {
    const a = this._packInput(t), n3 = await this.invokeMethod("extractEdgeLocations", a, e);
    return D(n3);
  }
  async extractComponentsEdgeLocations(t, e) {
    const a = this._packInput(t), n3 = await this.invokeMethod("extractComponentsEdgeLocations", a, e);
    return D(n3);
  }
  _packInput(e) {
    return { dataBuffer: e.data.buffer, writerSettings: e.writerSettings, skipDeduplicate: e.skipDeduplicate, indicesBuffer: e.indices.buffer, indicesType: s(e.indices) ? "Uint32Array" : "Uint16Array", indicesLength: e.indicesLength };
  }
  _unpackOutput(t) {
    return { regular: { instancesData: D(t.regular.instancesData), lodInfo: { lengths: new Float32Array(t.regular.lodInfo.lengths) } }, silhouette: { instancesData: D(t.silhouette.instancesData), lodInfo: { lengths: new Float32Array(t.silhouette.lodInfo.lengths) } }, averageEdgeLength: t.averageEdgeLength };
  }
};

export {
  n2 as n
};
//# sourceMappingURL=chunk-RLOG5P3F.js.map
