import {
  m
} from "./chunk-X64NQ2GK.js";
import {
  ye
} from "./chunk-RHH23PAT.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s
} from "./chunk-CVWDM4C7.js";

// node_modules/@arcgis/core/views/3d/layers/support/DefinitionExpressionSceneLayerView.js
var t = s.getLogger("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView");
var p = (e2) => {
  let p2 = class extends e2 {
    constructor() {
      super(...arguments), this._definitionExpressionErrors = 0, this._maxDefinitionExpressionErrors = 20, this.logError = (r) => {
        this._definitionExpressionErrors < this._maxDefinitionExpressionErrors && t.error("Error while evaluating definitionExpression: " + r), this._definitionExpressionErrors++, this._definitionExpressionErrors === this._maxDefinitionExpressionErrors && t.error("Further errors are ignored");
      };
    }
    get parsedDefinitionExpression() {
      if (!this.i3slayer || !this.i3slayer.definitionExpression)
        return null;
      try {
        const r = m.create(this.i3slayer.definitionExpression, this.i3slayer.fieldsIndex);
        if (!r.isStandardized)
          return t.error("definitionExpression is using non standard function"), null;
        const e3 = [], i = r.fieldNames;
        return ye(i, this.i3slayer.fields, { missingFields: e3 }), e3.length > 0 ? (t.error(`definitionExpression references unknown fields: ${e3.join(", ")}`), null) : (this._definitionExpressionErrors = 0, r);
      } catch (r) {
        return t.error("Failed to parse definitionExpression: " + r), null;
      }
    }
    get definitionExpressionFields() {
      return this.parsedDefinitionExpression ? this.parsedDefinitionExpression.fieldNames : null;
    }
    _evaluateClause(r, e3) {
      try {
        return r.testFeature(e3);
      } catch (i) {
        return this.logError(i), false;
      }
    }
    _addDefinitionExpressionToQuery(r) {
      if (!this.parsedDefinitionExpression)
        return r;
      const e3 = this.i3slayer.definitionExpression, i = r.clone();
      return i.where ? i.where = `(${e3}) AND (${i.where})` : i.where = e3, i;
    }
  };
  return e([d()], p2.prototype, "i3slayer", void 0), e([d({ readOnly: true })], p2.prototype, "parsedDefinitionExpression", null), e([d({ readOnly: true })], p2.prototype, "definitionExpressionFields", null), p2 = e([n("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView")], p2), p2;
};

export {
  p
};
//# sourceMappingURL=chunk-5XRPB3CU.js.map
