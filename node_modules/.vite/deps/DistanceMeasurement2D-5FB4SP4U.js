import {
  v
} from "./chunk-2ZFIKSC6.js";
import {
  C as C2
} from "./chunk-GL3DI4QI.js";
import "./chunk-4OFLHC3C.js";
import {
  r as r2
} from "./chunk-B6K3W2TL.js";
import {
  l as l5
} from "./chunk-3YK7GSRT.js";
import "./chunk-IEHZGLM3.js";
import "./chunk-2OSYZ3IL.js";
import "./chunk-CRCA6KDA.js";
import "./chunk-OPQ375VL.js";
import "./chunk-VOFRIPQR.js";
import "./chunk-7TCJ26U5.js";
import "./chunk-T6BL6FYR.js";
import "./chunk-U7I6IKUN.js";
import "./chunk-GVCSP4OP.js";
import "./chunk-7LOTF6IL.js";
import "./chunk-PJI2LYU5.js";
import {
  c,
  j as j5,
  p,
  x
} from "./chunk-22MSECLU.js";
import "./chunk-PTJ3MGYO.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-NSEAWM6P.js";
import "./chunk-XKY65LLM.js";
import "./chunk-ILEVWNLM.js";
import "./chunk-3HMF3PNP.js";
import "./chunk-N5C77AAH.js";
import "./chunk-DSCM4HDL.js";
import "./chunk-72PB636Q.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-SOZCO2CU.js";
import "./chunk-53KI6WDE.js";
import "./chunk-W2HLA6I3.js";
import "./chunk-Q6AASANP.js";
import "./chunk-ZYIEYKCD.js";
import "./chunk-DLM6NKXW.js";
import "./chunk-TQLSOIYV.js";
import "./chunk-YFBAFAZ2.js";
import "./chunk-LUU3J646.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-G4ERZR5M.js";
import "./chunk-AMGAY4O5.js";
import "./chunk-GRW2GUB3.js";
import "./chunk-RBVTRJPJ.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZZCCRN4U.js";
import "./chunk-TWQ374WD.js";
import {
  D,
  l as l4,
  y as y3
} from "./chunk-GT2OBOXC.js";
import "./chunk-Z3S5X75I.js";
import "./chunk-YK4ZKK2Q.js";
import "./chunk-NMRWU44S.js";
import "./chunk-LBBA3SFR.js";
import "./chunk-2KZBVPWA.js";
import "./chunk-CXIMLSDF.js";
import "./chunk-ZDSMRGKC.js";
import "./chunk-I6H66HCE.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RRFFPL7N.js";
import "./chunk-JYR7GBAU.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-HB4HVKJV.js";
import "./chunk-CC32E45Q.js";
import "./chunk-V7M26XZ7.js";
import {
  l as l3
} from "./chunk-ZN2MGN4S.js";
import "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-XZTXACPW.js";
import "./chunk-EHYYP2L2.js";
import "./chunk-ZUEYZA7M.js";
import "./chunk-74GUBHRJ.js";
import "./chunk-E447OCKN.js";
import {
  t as t2
} from "./chunk-LPU5TMA4.js";
import {
  O,
  e2 as e3
} from "./chunk-25QHXOZB.js";
import "./chunk-AA7FGPNP.js";
import {
  n as n2
} from "./chunk-UHJVTABQ.js";
import "./chunk-W66LN57L.js";
import "./chunk-PNUWGOXY.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-22YODLVL.js";
import "./chunk-TB42IUV7.js";
import "./chunk-ZWMYDR2G.js";
import "./chunk-ZZY5IDKU.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-6FKG7JUE.js";
import {
  rn,
  tn
} from "./chunk-PZWU5EHT.js";
import {
  h as h3
} from "./chunk-BS7TS6UC.js";
import "./chunk-37ZVELW7.js";
import "./chunk-7LOJJ46D.js";
import "./chunk-VNR743PA.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-SWCA522B.js";
import "./chunk-YPIBZ3CH.js";
import "./chunk-XLCZFN6R.js";
import "./chunk-OMNBM2E4.js";
import "./chunk-WKHS6QIX.js";
import "./chunk-6O7ZZEV7.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-OBCAVCXI.js";
import "./chunk-RFOZTYJH.js";
import "./chunk-J6DXGG2A.js";
import "./chunk-L2YBXQTH.js";
import "./chunk-S4ZKPFDU.js";
import "./chunk-YG6VFATO.js";
import "./chunk-WBX2MY5R.js";
import {
  h as h2
} from "./chunk-3DZ4BNVJ.js";
import "./chunk-4XBERLPX.js";
import "./chunk-7ZPDA3EC.js";
import "./chunk-SZPDY7KN.js";
import "./chunk-Y6YGVGFR.js";
import "./chunk-GKRQ3NBT.js";
import "./chunk-OXEYQYNR.js";
import "./chunk-OXRBYKVX.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-YLU2PLJS.js";
import "./chunk-MZX3HN4G.js";
import "./chunk-T47JAOQZ.js";
import "./chunk-6GPADSSO.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-GSFXXEAM.js";
import "./chunk-QZTJM4HG.js";
import "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import {
  o
} from "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import "./chunk-OG6CQEZJ.js";
import "./chunk-X5Z3DJQ4.js";
import "./chunk-BUWXVMJU.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import "./chunk-D3XXPCBB.js";
import "./chunk-OWBMOIIV.js";
import "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  h,
  j as j4,
  l as l2
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import {
  M,
  R,
  y
} from "./chunk-DYETG5YB.js";
import "./chunk-CLGCKZUR.js";
import {
  N,
  P,
  j as j2
} from "./chunk-RN2KRYDN.js";
import {
  C,
  L,
  k as k2
} from "./chunk-AWWWJUTQ.js";
import "./chunk-EQNRDJV7.js";
import "./chunk-FEEXJRYO.js";
import {
  g
} from "./chunk-BLINZ65M.js";
import {
  m as m2,
  m2 as m3,
  y as y2
} from "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import {
  d as d2
} from "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import {
  s
} from "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import {
  m2 as m
} from "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import {
  j2 as j3
} from "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  j
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  e as e2,
  l,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/widgets/DistanceMeasurement2D/DistanceMeasurement2DTool.js
var W = 1e5;
var E = class extends c {
  constructor(e4) {
    super(e4), this._drawActive = false, this._handles = new u(), this._measurementLayer = new h3({ internal: true, listMode: "hide", visible: false }), this._manipulatorLayer = new h3({ internal: true, listMode: "hide", visible: false }), this._vertices = [], this.geodesicDistanceThreshold = 1e5, this.measurement = null, this.measurementLabel = null;
  }
  initialize() {
    h2("esri/core/t9n/Units").then((e5) => {
      this.messages = e5;
    }), this._handles.add(s(async () => {
      this.messages = await h2("esri/core/t9n/Units");
    }));
    const e4 = this.view;
    this._draw = new l5({ view: e4 }), e4.map.addMany([this._measurementLayer, this._manipulatorLayer]), e4.focus(), this._handles.add([l2(() => [this.unit, this.geodesicDistanceThreshold, this.palette, this.messages], () => {
      this._vertices.length > 0 && this._updatePolylines();
    }, h)]);
  }
  destroy() {
    const { map: e4 } = this.view;
    this._draw.view = null, this._draw = l(this._draw), e4.removeMany([this._measurementLayer, this._manipulatorLayer]), this._handles.removeAll(), this._measurementLayer.removeAll(), this._manipulatorLayer.removeAll(), this._set("measurement", null), this._set("measurementLabel", null), this._handles = l(this._handles), this._measurementLayer = l(this._measurementLayer), this._manipulatorLayer = l(this._manipulatorLayer);
  }
  get cursor() {
    return this._drawActive ? "crosshair" : null;
  }
  set editable(e4) {
    this._set("editable", e4), e4 || this._draw.reset();
  }
  onActivate() {
    this._drawActive || 0 !== this._vertices.length || this._startSketch();
  }
  onShow() {
    this._measurementLayer.visible = true, this._manipulatorLayer.visible = true;
  }
  onHide() {
    this._measurementLayer.visible = false, this._manipulatorLayer.visible = false;
  }
  reset() {
    this._vertices = [], this._measurementLayer.removeAll(), this._set("measurement", null), this._set("measurementLabel", null), this._draw.reset(), this._drawActive = false, this._updateSketch([]);
  }
  _startSketch() {
    this._drawActive = true;
    const e4 = this._draw.create("polyline", { mode: "click" });
    e4.on(["vertex-add", "vertex-update", "vertex-remove", "cursor-update", "undo", "redo"], (e5) => this._updateSketch(e5.vertices)), e4.on("draw-complete", () => {
      this._stopSketch();
    });
  }
  _stopSketch() {
    this.manipulators.forEach((e4) => {
      e4.manipulator.interactive = true;
    }), this._drawActive = false, this.finishToolCreation();
  }
  _updateSketch(e4) {
    if (e4.length < 2)
      return this._vertices = [], this.manipulators.removeAll(), void this._measurementLayer.removeAll();
    const { spatialReference: t3 } = this.view;
    for (; this._vertices.length > e4.length; ) {
      const { manipulatorId: e5 } = this._vertices.pop();
      this.manipulators.remove(e5);
    }
    for (let n3 = this._vertices.length; n3 < e4.length; n3++) {
      const [s3, i2] = e4[n3], r4 = U(new j3({ x: s3, y: i2, spatialReference: t3 }), this.view, this._manipulatorLayer, this.palette), o3 = this.manipulators.add(r4);
      p(r4, (e5, t4) => {
        t4.next(j5(this.view)).next(x(e5.graphic, l3.Local)).next(() => {
          const t5 = e5.graphic.geometry;
          this._vertices[n3].coord = [t5.x, t5.y], this._updatePolylines();
        });
      }), this._vertices.push({ manipulatorId: o3, coord: [s3, i2] });
    }
    const s2 = this._vertices.length - 1, i = this._vertices[s2], [r3, o2] = e4[s2];
    if (i.coord[0] !== r3 || i.coord[1] !== o2) {
      i.coord = [r3, o2];
      const e5 = new j3({ x: r3, y: o2, spatialReference: t3 });
      this.manipulators.findById(i.manipulatorId).graphic.geometry = e5;
    }
    const a = this._drawActive ? this._vertices[s2].manipulatorId : null;
    this.manipulators.forEach((e5) => {
      e5.manipulator.interactive = null == a || e5.id !== a;
    }), this._updatePolylines();
  }
  _updatePolylines() {
    const e4 = this._vertices.map((e5) => e5.coord), { measurement: s2, drawing: i, original: r3 } = z(e4, this.view.spatialReference, this.geodesicDistanceThreshold);
    this._set("measurement", s2);
    const o2 = F(this.messages, s2, this.unit);
    let a, n3;
    this._set("measurementLabel", o2);
    const { graphics: l6 } = this._measurementLayer;
    if (2 === l6.length)
      a = l6.getItemAt(0), n3 = l6.getItemAt(1);
    else {
      const { pathPrimaryColor: e5, pathSecondaryColor: s3, pathWidth: i2 } = this.palette;
      a = new g({ symbol: new d2({ data: { type: "CIMSymbolReference", symbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", effects: [{ type: "CIMGeometricEffectDashes", dashTemplate: [14, 12], lineDashEnding: "FullGap", controlPointEnding: "NoConstraint" }], enable: true, capStyle: "Butt", joinStyle: "Round", width: i2 - 1.5, color: s3 }, { type: "CIMSolidStroke", enable: true, capStyle: "Butt", joinStyle: "Round", width: i2, color: e5 }] } } }) }), n3 = new g({ symbol: new m3({ color: [255, 255, 255, 1], haloColor: [0, 0, 0, 0.5], haloSize: 2, font: new m2({ size: 14, family: "sans-serif" }) }) }), l6.removeAll(), l6.addMany([a, n3]);
    }
    a.geometry = i, n3.geometry = r3.extent.center, n3.symbol.text = o2;
  }
};
function U(e4, s2, i, r3) {
  const o2 = new y2({ style: "circle", color: r3.handleColor, size: r3.handleWidth, outline: { type: "simple-line", width: 0 } }), a = new y2({ style: "circle", color: r3.handleColor, size: 1.5 * r3.handleWidth, outline: { type: "simple-line", width: 0 } }), n3 = new g({ geometry: e4, symbol: o2 });
  return new C2({ view: s2, layer: i, graphic: n3, focusedSymbol: a });
}
function z(e4, t3, s2) {
  const i = new m({ paths: [e4], spatialReference: t3 });
  let r3, o2;
  if (t3.isGeographic)
    if (M(t3))
      r3 = y([i], "meters")[0], o2 = R(i, W);
    else {
      const e5 = rn(i, k.WGS84), s3 = R(e5, W);
      r3 = y([e5], "meters")[0], o2 = rn(s3, t3);
    }
  else if (t3.isWebMercator)
    r3 = C(i, "meters"), o2 = L(i, W, "meters");
  else {
    const e5 = k2(i, "meters");
    if (e5 >= s2) {
      const e6 = rn(i, k.WGS84), s3 = R(e6, W);
      r3 = y([e6], "meters")[0], o2 = rn(s3, t3);
    } else
      r3 = e5, o2 = i;
  }
  return { measurement: { geometry: o2, length: r3 }, original: i, drawing: o2 };
}
function B(e4) {
  return null != e4;
}
function O2(e4) {
  if (!e4)
    return false;
  const { isGeographic: t3, isWebMercator: s2, isWGS84: i } = e4;
  return t3 && !i && !M(e4) || !t3 && !s2;
}
function F(e4, t3, s2) {
  if (!t3 || !e4)
    return null;
  switch (s2) {
    case "metric":
      return D(e4, t3.length, "meters");
    case "imperial":
      return y3(e4, t3.length, "meters");
    default:
      return l4(e4, N(t3.length, "meters", s2), s2);
  }
}
e([d()], E.prototype, "_drawActive", void 0), e([d({ readOnly: true })], E.prototype, "cursor", null), e([d({ value: true })], E.prototype, "editable", null), e([d({ type: Number })], E.prototype, "geodesicDistanceThreshold", void 0), e([d({ readOnly: true })], E.prototype, "measurement", void 0), e([d({ readOnly: true })], E.prototype, "measurementLabel", void 0), e([d()], E.prototype, "messages", void 0), e([d()], E.prototype, "palette", void 0), e([d()], E.prototype, "unit", void 0), e([d({ constructOnly: true })], E.prototype, "view", void 0), E = e([n("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")], E);

// node_modules/@arcgis/core/widgets/DistanceMeasurement2D/DistanceMeasurement2DViewModel.js
var f = { handleWidth: 8, handleColor: [255, 128, 0, 0.5], pathWidth: 5, pathPrimaryColor: [255, 128, 0, 255], pathSecondaryColor: [255, 255, 255, 255] };
var g2 = class extends v {
  constructor(t3) {
    super(t3), this.supportedViewType = "2d", this.unsupportedErrorMessage = "DistanceMeasurement2DViewModel is only supported in 2D views.", this._handles = new u(), this.geodesicDistanceThreshold = 1e5, this.measurement = null, this.measurementLabel = null, this.palette = f;
  }
  initialize() {
    this._handles.add([l2(() => {
      var _a;
      return (_a = e2(this.view)) == null ? void 0 : _a.spatialReference;
    }, () => this.clear()), l2(() => this.unit, (t3) => {
      r(this.tool) && (this.tool.unit = t3);
    }, h), l2(() => this.geodesicDistanceThreshold, (t3) => {
      r(this.tool) && (this.tool.geodesicDistanceThreshold = t3);
    }, h), l2(() => this.palette, (t3) => {
      r(this.tool) && (this.tool.palette = t3);
    }, h)]);
  }
  destroy() {
    this._handles && (this._handles.destroy(), this._handles = null);
  }
  get state() {
    var _a;
    return this.disabled || t(this.view) || !B((_a = this.view) == null ? void 0 : _a.spatialReference) ? "disabled" : r(this.tool) && this.measurement ? this.tool.active ? "measuring" : "measured" : "ready";
  }
  get unit() {
    return this._validateUnit(this.defaultUnit);
  }
  set unit(t3) {
    void 0 !== t3 ? this._override("unit", this._validateUnit(t3)) : this._clearOverride("unit");
  }
  get unitOptions() {
    return j2;
  }
  set unitOptions(t3) {
    void 0 !== t3 ? this._override("unitOptions", this._validateUnits(t3)) : this._clearOverride("unitOptions");
  }
  async start() {
    const t3 = this.view;
    r(t3) && (await j4(() => t3.ready), O2(t3.spatialReference) && await tn()), this.createTool({ interactive: true });
  }
  clear() {
    this.removeTool();
  }
  constructTool() {
    return new E({ view: e2(this.view), visible: this.visible, geodesicDistanceThreshold: this.geodesicDistanceThreshold, palette: this.palette, unit: this.unit });
  }
  _validateUnit(t3) {
    return this.unitOptions.includes(t3) ? t3 : this.unitOptions.includes(this.defaultUnit) ? this.defaultUnit : this.unitOptions[0];
  }
  _validateUnits(t3 = []) {
    const e4 = t3.filter((t4) => j2.includes(t4));
    return 0 === e4.length ? j2.slice() : e4;
  }
};
e([d(r2)], g2.prototype, "defaultUnit", void 0), e([d({ type: Number })], g2.prototype, "geodesicDistanceThreshold", void 0), e([d({ readOnly: true, aliasOf: "tool.measurement" })], g2.prototype, "measurement", void 0), e([d({ readOnly: true, aliasOf: "tool.measurementLabel" })], g2.prototype, "measurementLabel", void 0), e([d()], g2.prototype, "palette", void 0), e([d({ readOnly: true })], g2.prototype, "state", null), e([d({ type: String })], g2.prototype, "unit", null), e([d({ type: [String] })], g2.prototype, "unitOptions", null), g2 = e([n("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")], g2);
var w = g2;

// node_modules/@arcgis/core/widgets/DistanceMeasurement2D.js
var c2 = "esri-distance-measurement-2d";
var p2 = { buttonDisabled: "esri-button--disabled", widgetIcon: "esri-icon-measure-line", base: `${c2} esri-widget esri-widget--panel`, container: `${c2}__container`, hint: `${c2}__hint`, hintText: `${c2}__hint-text`, panelError: `${c2}__panel--error`, measurement: `${c2}__measurement`, measurementItem: `${c2}__measurement-item`, measurementItemDisabled: `${c2}__measurement-item--disabled`, measurementItemTitle: `${c2}__measurement-item-title`, measurementItemValue: `${c2}__measurement-item-value`, settings: `${c2}__settings`, units: `${c2}__units`, unitsLabel: `${c2}__units-label`, unitsSelect: `${c2}__units-select esri-select`, unitsSelectWrapper: `${c2}__units-select-wrapper`, actionSection: `${c2}__actions`, newMeasurementButton: `${c2}__clear-button esri-button esri-button--primary` };
var d3 = class extends O {
  constructor(e4, t3) {
    super(e4, t3), this.iconClass = p2.widgetIcon, this.label = void 0, this.messages = null, this.messagesUnits = null, this.unit = null, this.unitOptions = null, this.view = null, this.viewModel = new w();
  }
  render() {
    const { id: e4, messages: t3, messagesUnits: i, viewModel: n3, visible: r3 } = this, { active: a, supported: o2, measurementLabel: l6, state: u2, unit: c3, unitOptions: d4 } = n3, v3 = "disabled" === u2, b = "measuring" === u2 || "measured" === u2, _ = a && "ready" === u2 ? n2("section", { key: "hint", class: p2.hint }, n2("p", { class: p2.hintText }, t3.hint)) : null, w2 = o2 ? null : n2("section", { key: "unsupported", class: p2.panelError }, n2("p", null, t3.unsupported)), h4 = (e5, t4, s2) => t4 ? n2("div", { key: `${s2}-enabled`, class: p2.measurementItem }, n2("span", { class: p2.measurementItemTitle }, e5), n2("span", { class: p2.measurementItemValue }, t4)) : n2("div", { key: `${s2}-disabled`, class: this.classes(p2.measurementItem, p2.measurementItemDisabled), "aria-disabled": "true" }, n2("span", { class: p2.measurementItemTitle }, e5)), y4 = b ? n2("section", { key: "measurement", class: p2.measurement }, h4(t3.distance, l6, "distance")) : null, g3 = `${e4}-units`, M2 = b ? n2("section", { key: "units", class: p2.units }, n2("label", { class: p2.unitsLabel, for: g3 }, t3.unit), n2("div", { class: p2.unitsSelectWrapper }, n2("select", { class: p2.unitsSelect, id: g3, onchange: this._changeUnit, bind: this, value: c3 }, d4.map((e5) => {
      var _a;
      return n2("option", { key: e5, value: e5 }, P(e5) ? i.systems[e5] : (_a = i.units[e5]) == null ? void 0 : _a.pluralCapitalized);
    })))) : null, $ = b ? n2("div", { key: "settings", class: p2.settings }, M2) : null, j6 = !o2 || a && !b ? null : n2("div", { class: p2.actionSection }, n2("button", { disabled: v3, class: this.classes(p2.newMeasurementButton, v3 && p2.buttonDisabled), bind: this, onclick: this._newMeasurement, title: t3.newMeasurement, "aria-label": t3.newMeasurement, type: "button" }, t3.newMeasurement)), f2 = r3 ? n2("div", { class: p2.container }, w2, _, $, y4, j6) : null;
    return n2("div", { class: p2.base }, f2);
  }
  _newMeasurement() {
    j(this.viewModel.start());
  }
  _changeUnit(e4) {
    const t3 = e4.target, s2 = t3.options[t3.selectedIndex];
    s2 && (this.viewModel.unit = s2.value);
  }
};
e([o("viewModel.active")], d3.prototype, "active", void 0), e([d()], d3.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], d3.prototype, "label", void 0), e([d()], d3.prototype, "uiStrings", void 0), e([d(), e3("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")], d3.prototype, "messages", void 0), e([d(), e3("esri/core/t9n/Units")], d3.prototype, "messagesUnits", void 0), e([o("viewModel.unit")], d3.prototype, "unit", void 0), e([o("viewModel.unitOptions")], d3.prototype, "unitOptions", void 0), e([o("viewModel.view")], d3.prototype, "view", void 0), e([d({ type: w })], d3.prototype, "viewModel", void 0), e([o("viewModel.visible")], d3.prototype, "visible", void 0), e([t2()], d3.prototype, "_newMeasurement", null), e([t2()], d3.prototype, "_changeUnit", null), d3 = e([n("esri.widgets.DistanceMeasurement2D")], d3);
var v2 = d3;
export {
  v2 as default
};
//# sourceMappingURL=DistanceMeasurement2D-5FB4SP4U.js.map
