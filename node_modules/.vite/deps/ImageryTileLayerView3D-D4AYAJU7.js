import {
  c
} from "./chunk-CULPK55Q.js";
import {
  n as n2
} from "./chunk-WLVMYWO2.js";
import {
  m
} from "./chunk-DMGE4KYG.js";
import "./chunk-7S6G3GM7.js";
import {
  a
} from "./chunk-4OFLHC3C.js";
import {
  i
} from "./chunk-UMSO3HI4.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-B5VZTE6L.js";
import {
  _
} from "./chunk-UPTIBS6K.js";
import "./chunk-FK4VVO2E.js";
import "./chunk-WRIKJ4W5.js";
import "./chunk-7WSRILGC.js";
import "./chunk-GZ6H7JK2.js";
import "./chunk-LAHCYKZK.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-R67CDTDF.js";
import "./chunk-UCWSHVC4.js";
import "./chunk-2YDCEMEJ.js";
import "./chunk-WW7VYUQW.js";
import "./chunk-DMGVDNFD.js";
import "./chunk-4MKQUQD4.js";
import "./chunk-A3QLZKCF.js";
import "./chunk-LGILR4HN.js";
import "./chunk-I5UNY2WQ.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-4CRT3CQZ.js";
import "./chunk-EJ4V43KX.js";
import "./chunk-PLLZPG4O.js";
import "./chunk-NAB3NF54.js";
import "./chunk-VMF4NMEB.js";
import "./chunk-NAIF4GWX.js";
import "./chunk-2EPPX4WN.js";
import {
  l
} from "./chunk-6EODZIDR.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZN2MGN4S.js";
import "./chunk-JZY7CGEI.js";
import "./chunk-2LGANX7J.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-CQSGZXR7.js";
import "./chunk-JJ7VMWJT.js";
import "./chunk-YG6VFATO.js";
import "./chunk-HR2OX32D.js";
import "./chunk-6GPADSSO.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JT3LXQ47.js";
import "./chunk-TBT57L4K.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  j
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import {
  s2 as s
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  e as e2,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/3d/layers/ImageryTileLayerView3D.js
var f = class extends m(i(c(n2(u)))) {
  constructor() {
    super(...arguments), this.type = "imagery-tile-3d", this.isAlignedMapTile = true;
  }
  initialize() {
    this.layer.increaseRasterJobHandlerUsage(), null == this.fullExtent && this.addResolvingPromise(Promise.reject(new s("layerview:spatial-reference-incompatible", "The layer extent cannot be projected to the view's spatial reference", { layer: this.layer })));
    const e3 = j(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.basemapTerrain) == null ? void 0 : _b.tilingSchemeLocked;
    }).then(() => {
      const e4 = this.view.basemapTerrain.tilingScheme, { tileInfo: r } = this.layer, t2 = ["png", "png24", "png32", "jpg", "mixed"].includes(r.format) && e4.compatibleWith(r);
      this.isAlignedMapTile = t2;
      const i2 = t2 ? r : e4.toTileInfo();
      this.tileInfo = i2, this.updatingHandles.add(() => [this.layer.renderer, this.layer.interpolation, this.layer.bandIds, this.layer.multidimensionalDefinition], () => this.refresh());
    });
    this.addResolvingPromise(e3);
  }
  destroy() {
    this.layer.decreaseRasterJobHandlerUsage(), this.view = null;
  }
  get _blankTile() {
    const e3 = document.createElement("canvas"), r = e3.getContext("2d"), [t2, i2] = this.tileInfo.size;
    return e3.width = t2, e3.height = i2, r.clearRect(0, 0, t2, i2), r.getImageData(0, 0, t2, i2);
  }
  get imageFormatIsOpaque() {
    return "jpg" === this.layer.tileInfo.format;
  }
  get hasMixedImageFormats() {
    return "mixed" === this.layer.tileInfo.format;
  }
  get dataLevelRange() {
    const e3 = this.tileInfo.lods, r = this.layer.tileInfo.lods, t2 = e3[0].scale, i2 = r[r.length - 1].scale;
    return this.levelRangeFromScaleRange(t2, i2);
  }
  _getfullExtent() {
    return this.projectFullExtent(this.view.basemapTerrain && null !== this.view.basemapTerrain.spatialReference ? this.view.basemapTerrain.spatialReference : this.view.spatialReference);
  }
  async fetchTile(e3, r, s2, a2) {
    const l2 = this.tileInfo, n3 = this._canSymbolizeInWebGL(), o = { tileInfo: l2, requestRawData: n3, signal: e2(a2.signal), requestAsImageElement: this.isAlignedMapTile }, p = await this.layer.fetchTile(e3, r, s2, o);
    if (p instanceof HTMLImageElement)
      return p;
    let h = p && p.pixelBlock;
    if (t(h))
      return this._blankTile;
    if (!n3 && (h = await this.layer.applyRenderer(p), t(h)))
      return this._blankTile;
    const c2 = new _([e3, r, s2], h, l2.size[0], l2.size[1]);
    return n3 ? (c2.symbolizerRenderer = this.layer.symbolizer.rendererJSON, c2.symbolizerParameters = this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e3)), c2.transformGrid = p.transformGrid) : c2.isRendereredSource = true, c2.interpolation = this.layer.interpolation, c2.bandIds = this.layer.bandIds, c2;
  }
  _getSymbolizerOptions(e3) {
    const r = this.tileInfo.lodAt(e3).resolution;
    return { pixelBlock: null, isGCS: this.view.basemapTerrain ? this.view.basemapTerrain.spatialReference.isGeographic : this.view.spatialReference.isGeographic, resolution: { x: r, y: r }, bandIds: this.layer.bandIds };
  }
  ensureSymbolizerParameters(e3) {
    this._canSymbolizeInWebGL() && JSON.stringify(e3.symbolizerRenderer) !== JSON.stringify(this.layer.symbolizer.rendererJSON) && (e3.symbolizerParameters = this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(e3.lij[0])));
  }
  createFetchPopupFeaturesQueryGeometry(e3, r) {
    return a(e3, r, this.view);
  }
  refresh() {
    this.emit("data-changed");
  }
  async doRefresh() {
    this.suspended || this.emit("data-changed");
  }
  _canSymbolizeInWebGL() {
    return l("3d").supportsTextureFloat && this.layer.symbolizer.canRenderInWebGL;
  }
};
e([d({ readOnly: true })], f.prototype, "_blankTile", null), e([d({ readOnly: true })], f.prototype, "imageFormatIsOpaque", null), e([d({ readOnly: true })], f.prototype, "hasMixedImageFormats", null), e([d({ readOnly: true })], f.prototype, "dataLevelRange", null), f = e([n("esri.views.3d.layers.ImageryTileLayerView3D")], f);
var g = f;
export {
  g as default
};
//# sourceMappingURL=ImageryTileLayerView3D-D4AYAJU7.js.map
