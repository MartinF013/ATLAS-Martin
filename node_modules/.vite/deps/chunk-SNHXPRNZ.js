import {
  n4 as n
} from "./chunk-2QOWZFCU.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/terrain/tileUtils.js
var r2 = class {
  constructor() {
    this._queue = new n(), this._last = null, this.remove = () => {
    };
  }
  get done() {
    return 0 === this._queue.length && (!this._last || this._last.isLeaf);
  }
  resetOne(t2) {
    this._queue.clear(), this._queue.push(t2), this._last = null;
  }
  reset(e = null) {
    this._queue.clear(), r(e) && this._queue.pushArray(e), this._last = null;
  }
  skipSubtree() {
    this._last = null;
  }
  next() {
    return this._last && !this._last.isLeaf && this._queue.pushArray(this._last.children), this._last = this._queue.pop(), this._last;
  }
};
var i = class {
  constructor() {
    this.q = new n();
  }
  get done() {
    return 0 === this.q.length;
  }
  reset(t2) {
    if (this.q.clear(), !t(t2)) {
      this.q.pushArray(t2);
      for (let t3 = 0; t3 < this.q.length; ++t3) {
        const e = this.q.data[t3];
        e.isLeaf || this.q.pushArray(e.children);
      }
    }
  }
  next() {
    return this.q.pop();
  }
};
function u(t2, n2, r3) {
  if (t(n2) || t(n2.fullExtent))
    return false;
  const i2 = n2.fullExtent, s = t2.extent;
  if (r3) {
    if (s[0] < i2.xmin || s[1] < i2.ymin || s[2] > i2.xmax || s[3] > i2.ymax)
      return false;
  } else if (i2.xmin > s[2] || i2.ymin > s[3] || i2.xmax < s[0] || i2.ymax < s[1])
    return false;
  const l = t2.surface.tilingScheme.levels[t2.level].scale;
  return !(n2.minScale > 0 && l > 1.00000001 * n2.minScale) && !(n2.maxScale > 0 && l < 0.99999999 * n2.maxScale);
}
function o(t2, e) {
  return t2.lij[0] - e.lij[0] || t2.lij[1] - e.lij[1] || t2.lij[2] - e.lij[2];
}
function a(t2, e) {
  e.sort((e2, n2) => h(e2, n2, t2));
}
function h(t2, e, n2) {
  const r3 = t2.screenDepth, i2 = e.screenDepth;
  return r3 < i2 ? -n2 : r3 > i2 ? n2 : o(t2, e);
}
function c(t2, e) {
  const n2 = /* @__PURE__ */ new Map();
  t2.forAll((t3) => n2.set(t3.lij, t3.distanceToSquared(e))), t2.sort((t3, e2) => n2.get(t3.lij) - n2.get(e2.lij) || o(t3, e2));
}
function f(t2, e, n2) {
  let r3 = 1, i2 = 0, s = 0;
  for (; t2 !== e; )
    if (r3 *= 0.5, i2 *= 0.5, s *= 0.5, 1 & t2.lij[2] && (i2 += 0.5), 0 == (1 & t2.lij[1]) && (s += 0.5), null == (t2 = t2.parent))
      throw new Error("tile was not a descendant of upsampleTile");
  n2.init(e, i2, s, r3);
}
function m(t2) {
  for (let e = 0; e < t2.length; e++) {
    const n2 = t2[e], r3 = n2.parent;
    if (r3)
      for (let t3 = 0; t3 < 4; t3++) {
        const e2 = r3.children[t3];
        if (e2 && e2 !== n2)
          return true;
      }
  }
  return false;
}
function p(t2, e) {
  if (!t2 || !e || t2[0] === e[0])
    return false;
  const n2 = t2[0] < e[0], r3 = n2 ? t2 : e, i2 = n2 ? e : t2, s = 1 << i2[0] - r3[0];
  return Math.floor(i2[1] / s) === r3[1] && Math.floor(i2[2] / s) === r3[2];
}

export {
  r2 as r,
  i,
  u,
  a,
  h,
  c,
  f,
  m,
  p
};
//# sourceMappingURL=chunk-SNHXPRNZ.js.map
