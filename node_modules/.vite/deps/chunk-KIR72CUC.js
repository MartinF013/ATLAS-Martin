import {
  o as o2
} from "./chunk-UV5UBITC.js";
import {
  e as e4
} from "./chunk-ELZC3DZT.js";
import {
  r
} from "./chunk-HRAEK6P4.js";
import {
  s
} from "./chunk-K6UIDSFF.js";
import {
  d,
  o
} from "./chunk-OYNEZ5VG.js";
import {
  a
} from "./chunk-BOVIIQLB.js";
import {
  e as e3
} from "./chunk-46N7XS5M.js";
import {
  e as e2
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  e
} from "./chunk-YFBAFAZ2.js";
import {
  h
} from "./chunk-ASC3X65B.js";

// node_modules/@arcgis/core/chunks/Fog.glsl.js
function g(r2) {
  const g2 = new i();
  g2.attributes.add(O.POSITION, "vec2"), g2.include(d, { textureCoordinateType: o.Default }), g2.varyings.add("worldRay", "vec3"), g2.varyings.add("eyeDir", "vec3");
  const { vertex: u2, fragment: w } = g2;
  return u2.uniforms.add([new e3("inverseProjectionMatrix", (e5, r3) => r3.camera.inverseProjectionMatrix), new e3("inverseViewMatrix", (r3, a2) => h(v, a2.camera.viewMatrix))]), u2.code.add(n`void main(void) {
vec3 posViewNear = (inverseProjectionMatrix * vec4(position, -1, 1)).xyz;
eyeDir = posViewNear;
worldRay = (inverseViewMatrix * vec4(posViewNear, 0)).xyz;
forwardTextureCoordinates();
gl_Position = vec4(position, 1, 1);
}`), w.uniforms.add(new r("atmosphereC")), w.uniforms.add(new o2("cameraPosition")), w.uniforms.add(new e2("nearFar", (e5, r3) => r3.camera.nearFar)), w.uniforms.add(new s("depthTex")), w.uniforms.add(new r("fogStrength")), w.uniforms.add(new r("fogAmount")), w.uniforms.add(new o2("fogColor")), g2.include(e4), w.include(a), w.code.add(n`vec2 sphereIntersect(vec3 start, vec3 dir) {
float a = dot(dir, dir);
float b = 2.0 * dot(dir, start);
float d = (b * b) - 4.0 * a * atmosphereC;
if (d < 0.0) {
return vec2(1e5, -1e5);
}
return vec2((-b - sqrt(d)) / (2.0 * a), (-b + sqrt(d)) / (2.0 * a));
}`), w.code.add(n`vec4 applyFog(float dist, vec3 rayDir){
if(dist == -1.0){
vec2 rayAtmosphereIntersect = sphereIntersect(cameraPosition, rayDir);
dist = 0.055 * rayAtmosphereIntersect.y;
}
float fogAmount = fogAmount * (1.0 - exp(-dist * fogStrength));
return vec4(fogAmount * fogColor, fogAmount);
}`), w.code.add(n`
    vec3 tonemapACES(vec3 x) {
      return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);
    }

    void main() {
      vec3 rayDir = normalize(worldRay);
      float terrainDepth = -1.0;

      float depthSample = texture2D(depthTex, vuv0).r;
      float zNorm = 2.0 * depthSample - 1.0;
      float linDepth = 2.0 * nearFar[0] * nearFar[1] / (nearFar[1] + nearFar[0] - zNorm * (nearFar[1] - nearFar[0]));
      if(depthSample < 1.0 && depthSample > 0.0){
        vec3 cameraSpaceRay = normalize(eyeDir);
        cameraSpaceRay /= cameraSpaceRay.z;
        cameraSpaceRay *= linDepth;
        terrainDepth = max(0.0, length(cameraSpaceRay));
      }

      ${r2.haze ? n`
          if(terrainDepth == -1.0){
            gl_FragColor = vec4(0);
            return;
          }` : ""}

      vec4 fog = applyFog(terrainDepth, rayDir);

      gl_FragColor = delinearizeGamma(vec4(tonemapACES(fog.rgb), fog.a));
    }
  `), g2;
}
var v = e();
var u = Object.freeze(Object.defineProperty({ __proto__: null, build: g }, Symbol.toStringTag, { value: "Module" }));

export {
  g,
  u
};
//# sourceMappingURL=chunk-KIR72CUC.js.map
