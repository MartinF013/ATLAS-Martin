import {
  t as t5
} from "./chunk-JYWDI7GA.js";
import {
  w as w2
} from "./chunk-5CAQC3RU.js";
import {
  h as h2,
  w as w3
} from "./chunk-A5WV4QY7.js";
import {
  l,
  m as m2,
  p as p2,
  s as s3,
  v as v2
} from "./chunk-ZEDAE7EU.js";
import {
  e as e3,
  o as o3,
  t as t3
} from "./chunk-NXOQBIK7.js";
import {
  E as E3
} from "./chunk-ERNXFM5T.js";
import {
  e as e4,
  t as t4
} from "./chunk-SV4VP57N.js";
import {
  u as u2
} from "./chunk-PWYPPSAW.js";
import {
  W,
  c as c2,
  s as s2
} from "./chunk-B7F3T673.js";
import {
  f
} from "./chunk-FUKESVWQ.js";
import {
  c
} from "./chunk-T3KDRLPE.js";
import {
  o as o2
} from "./chunk-TR3U55RZ.js";
import {
  T
} from "./chunk-3DCTMZI6.js";
import {
  E,
  F,
  R
} from "./chunk-FPMD6IB4.js";
import {
  B,
  S
} from "./chunk-EEJIELE6.js";
import {
  E as E2
} from "./chunk-Y55TYMBP.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  _ as _3,
  p2 as p3
} from "./chunk-53KI6WDE.js";
import {
  _ as _2,
  j as j2
} from "./chunk-W2HLA6I3.js";
import {
  h,
  j,
  m,
  v
} from "./chunk-Q6AASANP.js";
import {
  n as n2
} from "./chunk-U7B2WKBH.js";
import {
  M
} from "./chunk-BPZGJQOB.js";
import {
  w
} from "./chunk-ZOKX6UGH.js";
import {
  L,
  _,
  e as e2,
  o,
  r as r2,
  u,
  x,
  z
} from "./chunk-PKZEO23A.js";
import {
  n,
  t as t2
} from "./chunk-AIRC226G.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  p,
  r,
  s,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlinePathTechnique.js
var m3 = class extends e3 {
  initializeProgram(e6) {
    const r3 = m3.shader.get().build(this.configuration);
    return new o3(e6.rctx, r3, m3.attributeLocations);
  }
  initializePipeline() {
    return W({ blending: s2(R.ONE, R.ONE_MINUS_SRC_ALPHA), colorWrite: c2 });
  }
};
m3.shader = new t3(w2, () => import("./LaserlinePath.glsl-G7XAHG6K.js")), m3.attributeLocations = /* @__PURE__ */ new Map([[O.START, 0], [O.END, 1], [O.UP, 2], [O.EXTRUDE, 3]]);

// node_modules/@arcgis/core/views/3d/support/LaserlinePathData.js
var _4 = class {
  constructor(e6) {
    this._renderCoordsHelper = e6, this._buffers = null, this._origin = n(), this._dirty = false, this._count = 0, this._vao = null;
  }
  set vertices(e6) {
    const t7 = new Float64Array(3 * e6.length);
    let r3 = 0;
    for (const s4 of e6)
      t7[r3++] = s4[0], t7[r3++] = s4[1], t7[r3++] = s4[2];
    this.buffers = [t7];
  }
  set buffers(e6) {
    if (this._buffers = e6, this._buffers.length > 0) {
      const e7 = this._buffers[0], t7 = 3 * Math.floor(e7.length / 3 / 2);
      o(this._origin, e7[t7 + 0], e7[t7 + 1], e7[t7 + 2]);
    } else
      o(this._origin, 0, 0, 0);
    this._dirty = true;
  }
  get origin() {
    return this._origin;
  }
  draw(t7) {
    const r3 = this._ensureVAO(t7);
    r(r3) && (t7.bindVAO(r3), t7.drawArrays(E.TRIANGLES, 0, this._count));
  }
  dispose() {
    r(this._vao) && this._vao.dispose();
  }
  _ensureVAO(e6) {
    return t(this._buffers) ? null : (t(this._vao) && (this._vao = this._createVAO(e6, this._buffers)), this._ensureVertexData(this._vao, this._buffers), this._vao);
  }
  _createVAO(e6, t7) {
    const r3 = this._createDataBuffer(t7);
    return this._dirty = false, new f(e6, m3.attributeLocations, { data: o2(V) }, { data: c.createVertex(e6, F.STATIC_DRAW, r3) });
  }
  _ensureVertexData(e6, t7) {
    if (!this._dirty)
      return;
    const r3 = this._createDataBuffer(t7);
    e6.vertexBuffers.data.setData(r3), this._dirty = false;
  }
  _numberOfRenderVertices(e6) {
    return 3 * (2 * (e6.length / 3 - 1));
  }
  _createDataBuffer(e6) {
    const t7 = e6.reduce((e7, t8) => e7 + this._numberOfRenderVertices(t8), 0);
    this._count = t7;
    const i = V.createBuffer(t7), o5 = this._origin;
    let n4 = 0, f2 = 0;
    for (const u3 of e6) {
      for (let e7 = 0; e7 < u3.length; e7 += 3) {
        const t8 = o(b, u3[e7 + 0], u3[e7 + 1], u3[e7 + 2]);
        0 === e7 ? f2 = this._renderCoordsHelper.getAltitude(t8) : this._renderCoordsHelper.setAltitude(t8, f2);
        const a = this._renderCoordsHelper.worldUpAtPosition(t8, d), c3 = n4 + 2 * e7, h3 = e2(b, t8, o5);
        if (e7 < u3.length - 3) {
          i.up.setVec(c3, a), i.up.setVec(c3 + 3, a), i.up.setVec(c3 + 5, a);
          for (let e8 = 0; e8 < 6; e8++)
            i.start.setVec(c3 + e8, h3);
          i.extrude.setValues(c3 + 0, 0, -1), i.extrude.setValues(c3 + 1, 1, -1), i.extrude.setValues(c3 + 2, 1, 1), i.extrude.setValues(c3 + 3, 0, -1), i.extrude.setValues(c3 + 4, 1, 1), i.extrude.setValues(c3 + 5, 0, 1);
        }
        if (e7 > 0) {
          i.up.setVec(c3 - 2, a), i.up.setVec(c3 - 4, a), i.up.setVec(c3 - 5, a);
          for (let e8 = -6; e8 < 0; e8++)
            i.end.setVec(c3 + e8, h3);
        }
      }
      n4 += this._numberOfRenderVertices(u3);
    }
    return i.buffer;
  }
};
var d = n();
var b = n();
var V = T().vec3f(O.START).vec3f(O.END).vec3f(O.UP).vec2f(O.EXTRUDE);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlinePathTechniqueConfiguration.js
var e5 = class extends t4 {
  constructor() {
    super(...arguments), this.contrastControlEnabled = false;
  }
};
e([e4()], e5.prototype, "contrastControlEnabled", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlineTechnique.js
var d2 = class extends e3 {
  initializeProgram(e6) {
    const r3 = d2.shader.get().build(this.configuration);
    return new o3(e6.rctx, r3, E2);
  }
  initializePipeline() {
    return W({ blending: s2(R.ONE, R.ONE_MINUS_SRC_ALPHA), colorWrite: c2 });
  }
};
d2.shader = new t3(w3, () => import("./Laserlines.glsl-HDGSD2JL.js"));

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LaserlineTechniqueConfiguration.js
var n3 = class extends e5 {
  constructor() {
    super(...arguments), this.heightManifoldEnabled = false, this.pointDistanceEnabled = false, this.lineVerticalPlaneEnabled = false, this.intersectsLineEnabled = false;
  }
};
e([e4()], n3.prototype, "heightManifoldEnabled", void 0), e([e4()], n3.prototype, "pointDistanceEnabled", void 0), e([e4()], n3.prototype, "lineVerticalPlaneEnabled", void 0), e([e4()], n3.prototype, "intersectsLineEnabled", void 0);

// node_modules/@arcgis/core/views/3d/support/LaserLineRenderer.js
var O2 = n();
var y = n2();
var I = { glowColor: [1, 0.5, 0], glowWidth: 8, glowFalloff: 8, innerColor: [1, 1, 1], innerWidth: 1, globalAlpha: 0.75, angleCutoff: M(6), globalAlphaContrastBoost: 2, __tagStrict: "NoParameters" };
function N(e6, t7, i, n4) {
  const s4 = O2, h3 = y;
  L(s4, t7, n4), r2(h3, i), h3[3] = 0, w(h3, h3, n4), _3(s4, h3, e6);
}
var H = class {
  constructor(e6, t7 = {}, i = { contrastControlEnabled: false }) {
    this._renderCoordsHelper = e6, this._config = i, this._technique = null, this._heightManifoldEnabled = false, this._heightManifoldTarget = n(), this._pointDistanceEnabled = false, this._pointDistanceOrigin = n(), this._pointDistanceTarget = n(), this._lineVerticalPlaneEnabled = false, this._lineVerticalPlaneSegment = v(), this._intersectsLineEnabled = false, this._intersectsLineSegment = v(), this._intersectsLineRadius = 3, this._intersectsLineInfinite = false, this._pathVerticalPlaneEnabled = false, this._pathVerticalPlaneData = null, this._pathTechnique = null, this.canRender = true, this._tempNormal = n(), this._tempDir = n(), this._tempUp = n(), this._tempVec3A = n(), this._tempVec3B = n(), this._tempVec4 = n2(), this._tempPlane = p3(), this._tempSphere = _2(), this._parameters = S(t7, I);
  }
  get renderSlots() {
    return [this._config.contrastControlEnabled ? E3.LASERLINES_CONTRAST_CONTROL : E3.LASERLINES];
  }
  get needsLinearDepth() {
    return true;
  }
  get heightManifoldEnabled() {
    return this._heightManifoldEnabled;
  }
  set heightManifoldEnabled(e6) {
    this._heightManifoldEnabled !== e6 && (this._heightManifoldEnabled = e6, this._requestRender());
  }
  get heightManifoldTarget() {
    return this._heightManifoldTarget;
  }
  set heightManifoldTarget(e6) {
    r2(this._heightManifoldTarget, e6), this._requestRender();
  }
  get pointDistanceEnabled() {
    return this._pointDistanceEnabled;
  }
  set pointDistanceEnabled(e6) {
    e6 !== this._pointDistanceEnabled && (this._pointDistanceEnabled = e6, this._requestRender());
  }
  get pointDistanceTarget() {
    return this._pointDistanceTarget;
  }
  set pointDistanceTarget(e6) {
    r2(this._pointDistanceTarget, e6), this._requestRender();
  }
  get pointDistanceOrigin() {
    return this._pointDistanceOrigin;
  }
  set pointDistanceOrigin(e6) {
    r2(this._pointDistanceOrigin, e6), this._requestRender();
  }
  get lineVerticalPlaneEnabled() {
    return this._lineVerticalPlaneEnabled;
  }
  set lineVerticalPlaneEnabled(e6) {
    e6 !== this._lineVerticalPlaneEnabled && (this._lineVerticalPlaneEnabled = e6, this._requestRender());
  }
  get lineVerticalPlaneSegment() {
    return this._lineVerticalPlaneSegment;
  }
  set lineVerticalPlaneSegment(e6) {
    h(e6, this._lineVerticalPlaneSegment), this._requestRender();
  }
  get intersectsLineEnabled() {
    return this._intersectsLineEnabled;
  }
  set intersectsLineEnabled(e6) {
    e6 !== this._intersectsLineEnabled && (this._intersectsLineEnabled = e6, this._requestRender());
  }
  get intersectsLineSegment() {
    return this._intersectsLineSegment;
  }
  set intersectsLineSegment(e6) {
    h(e6, this._intersectsLineSegment), this._requestRender();
  }
  get intersectsLineRadius() {
    return this._intersectsLineRadius;
  }
  set intersectsLineRadius(e6) {
    e6 !== this._intersectsLineRadius && (this._intersectsLineRadius = e6, this._requestRender());
  }
  get intersectsLineInfinite() {
    return this._intersectsLineInfinite;
  }
  set intersectsLineInfinite(e6) {
    e6 !== this._intersectsLineInfinite && (this._intersectsLineInfinite = e6, this._requestRender());
  }
  get pathVerticalPlaneEnabled() {
    return this._pathVerticalPlaneEnabled;
  }
  set pathVerticalPlaneEnabled(e6) {
    e6 !== this._pathVerticalPlaneEnabled && (this._pathVerticalPlaneEnabled = e6, r(this._pathVerticalPlaneData) && this._requestRender());
  }
  set pathVerticalPlaneVertices(e6) {
    t(this._pathVerticalPlaneData) && (this._pathVerticalPlaneData = new _4(this._renderCoordsHelper)), this._pathVerticalPlaneData.vertices = e6, this.pathVerticalPlaneEnabled && this._requestRender();
  }
  set pathVerticalPlaneBuffers(e6) {
    t(this._pathVerticalPlaneData) && (this._pathVerticalPlaneData = new _4(this._renderCoordsHelper)), this._pathVerticalPlaneData.buffers = e6, this.pathVerticalPlaneEnabled && this._requestRender();
  }
  setParameters(e6) {
    B(this._parameters, e6) && this._requestRender();
  }
  initializeRenderContext(e6) {
    this._context = e6;
    const t7 = e6.renderContext.rctx;
    this._quadVAO = u2(t7), this._techniqueRepository = e6.shaderTechniqueRepository, this._techniqueConfig = new n3();
    const i = new e5();
    i.contrastControlEnabled = this._config.contrastControlEnabled, this._pathTechnique = this._techniqueRepository.acquire(m3, i);
  }
  uninitializeRenderContext() {
    this._quadVAO = s(this._quadVAO), this._technique = p(this._technique), this._pathVerticalPlaneData = s(this._pathVerticalPlaneData), this._pathTechnique = p(this._pathTechnique);
  }
  prepareTechnique() {
    return this.heightManifoldEnabled || this.pointDistanceEnabled || this.lineVerticalPlaneSegment || this.intersectsLineEnabled ? (this._techniqueConfig.heightManifoldEnabled = this.heightManifoldEnabled, this._techniqueConfig.lineVerticalPlaneEnabled = this.lineVerticalPlaneEnabled, this._techniqueConfig.pointDistanceEnabled = this.pointDistanceEnabled, this._techniqueConfig.intersectsLineEnabled = this.intersectsLineEnabled, this._techniqueConfig.contrastControlEnabled = this._config.contrastControlEnabled, this._technique = this._techniqueRepository.releaseAndAcquire(d2, this._techniqueConfig, this._technique), this._technique) : this._pathTechnique;
  }
  render(e6, t7) {
    (this.heightManifoldEnabled || this.pointDistanceEnabled || this.lineVerticalPlaneSegment || this.intersectsLineEnabled) && this._renderUnified(e6, t7), this.pathVerticalPlaneEnabled && this._renderPath(e6);
  }
  _renderUnified(e6, t7) {
    const i = e6.rctx, n4 = i.bindTechnique(t7, this._parameters, e6.bindParameters);
    this._bindGlobalUniforms(e6, n4), this._bindHeightManifoldUniforms(e6, n4), this._bindPointDistanceUniforms(e6, n4), this._bindLineVerticalPlaneUniforms(e6, n4), this._bindIntersectsLineUniforms(e6, n4), i.bindVAO(this._quadVAO), i.drawArrays(E.TRIANGLE_STRIP, 0, 4);
  }
  _renderPath(e6) {
    if (t(this._pathVerticalPlaneData) || t(this._pathTechnique))
      return;
    const t7 = e6.rctx, n4 = this._pathTechnique, s4 = t7.bindTechnique(n4, { ...this._parameters, origin: this._pathVerticalPlaneData.origin }, e6.bindParameters);
    this._bindGlobalUniforms(e6, s4), this._pathVerticalPlaneData.draw(e6.rctx);
  }
  _bindHeightManifoldUniforms(e6, t7) {
    if (!this.heightManifoldEnabled)
      return;
    const i = this._tempVec3A, n4 = this._tempPlane, s4 = e6.bindParameters.camera;
    this._renderCoordsHelper.worldUpAtPosition(this._heightManifoldTarget, i), N(n4, this._heightManifoldTarget, i, s4.viewMatrix), t7.setUniform4fv("heightPlane", n4);
  }
  _bindPointDistanceUniforms(e6, t7) {
    if (!this._pointDistanceEnabled)
      return;
    const i = e6.bindParameters.camera, n4 = this._tempSphere;
    r2(n4, this._pointDistanceOrigin), L(n4, n4, i.viewMatrix), n4[3] = x(this._pointDistanceOrigin, this._pointDistanceTarget), t7.setUniform4f("pointDistanceSphere", n4[0], n4[1], n4[2], n4[3]);
  }
  _bindLineVerticalPlaneUniforms(e6, t7) {
    if (!this._lineVerticalPlaneEnabled)
      return;
    const i = this._renderCoordsHelper, n4 = e6.bindParameters.camera, s4 = this._tempPlane, h3 = this._tempVec3A, _6 = this._tempUp, d3 = this._tempDir, m4 = this._tempNormal;
    j(this._lineVerticalPlaneSegment, 0.5, h3), i.worldUpAtPosition(h3, _6), z(d3, this._lineVerticalPlaneSegment.vector), _(m4, _6, d3), z(m4, m4), N(s4, this._lineVerticalPlaneSegment.origin, m4, n4.viewMatrix), t7.setUniform4fv("lineVerticalPlane", s4);
    const p4 = this._tempVec3A;
    r2(p4, this._lineVerticalPlaneSegment.origin), i.setAltitude(p4, 0), L(p4, p4, n4.viewMatrix), t7.setUniform3fv("lineVerticalStart", p4);
    const g = this._tempVec3B;
    u(g, this._lineVerticalPlaneSegment.origin, this._lineVerticalPlaneSegment.vector), i.setAltitude(g, 0), L(g, g, n4.viewMatrix), t7.setUniform3fv("lineVerticalEnd", g);
  }
  _bindIntersectsLineUniforms(e6, t7) {
    if (!this._intersectsLineEnabled)
      return;
    const i = z2, n4 = B2, s4 = e6.bindParameters.camera;
    if (this._intersectsLineInfinite) {
      if (p2(j2(this._intersectsLineSegment.origin, this._intersectsLineSegment.vector), k), k.c0 = -Number.MAX_VALUE, !m2(s4.frustum, k))
        return;
      l(k, i), v2(k, n4);
    } else
      r2(i, this._intersectsLineSegment.origin), u(n4, this._intersectsLineSegment.origin, this._intersectsLineSegment.vector);
    const h3 = this._tempVec3A;
    L(h3, i, s4.viewMatrix), t7.setUniform3fv("intersectsLineStart", h3);
    const o5 = this._tempVec4;
    r2(o5, this._intersectsLineSegment.vector), this._tempVec4[3] = 0, w(this._tempVec4, this._tempVec4, s4.viewMatrix), L(n4, n4, s4.viewMatrix), t7.setUniform3fv("intersectsLineEnd", n4), z(o5, o5), t7.setUniform3f("intersectsLineDirection", o5[0], o5[1], o5[2]), t7.setUniform1f("intersectsLineRadius", this._intersectsLineRadius);
  }
  _bindGlobalUniforms(e6, t7) {
    const i = e6.bindParameters.camera;
    this._heightManifoldEnabled ? t7.setUniform1f("maxPixelDistance", 2 * i.computeScreenPixelSizeAt(this._heightManifoldTarget)) : this._pointDistanceEnabled ? t7.setUniform1f("maxPixelDistance", 2 * i.computeScreenPixelSizeAt(this._pointDistanceTarget)) : this._lineVerticalPlaneEnabled && t7.setUniform1f("maxPixelDistance", 2 * i.computeScreenPixelSizeAt(this._lineVerticalPlaneSegment.origin)), t7.bindTexture("frameColor", e6.offscreenRenderingHelper.mainColorTexture);
  }
  _requestRender() {
    this._context && this._context.requestRender();
  }
};
var k = s3();
var z2 = n();
var B2 = n();

// node_modules/@arcgis/core/views/3d/interactive/visualElements/LaserlineVisualElement.js
var _5 = class extends t5 {
  constructor(e6) {
    super(e6.view), this._angleCutoff = h2, this._style = {}, this._heightManifoldTarget = n(), this._heightManifoldEnabled = false, this._intersectsLine = v(), this._intersectsLineEnabled = false, this._intersectsLineInfinite = false, this._lineVerticalPlaneSegment = null, this._pathVerticalPlaneBuffers = null, this._pointDistanceLine = null, this.applyProps(e6);
  }
  get testData() {
    return this.renderer;
  }
  createResources() {
    this._ensureRenderer();
  }
  destroyResources() {
    this._disposeRenderer();
  }
  updateVisibility() {
    this._syncRenderer(), this._syncHeightManifold(), this._syncIntersectsLine(), this._syncPathVerticalPlane(), this._syncLineVerticalPlane(), this._syncPointDistance();
  }
  get angleCutoff() {
    return this._angleCutoff;
  }
  set angleCutoff(e6) {
    this._angleCutoff !== e6 && (this._angleCutoff = e6, this._syncAngleCutoff());
  }
  get style() {
    return this._style;
  }
  set style(e6) {
    this._style = e6, this._syncStyle();
  }
  get heightManifoldTarget() {
    return this._heightManifoldEnabled ? this._heightManifoldTarget : null;
  }
  set heightManifoldTarget(t7) {
    r(t7) ? (r2(this._heightManifoldTarget, t7), this._heightManifoldEnabled = true) : this._heightManifoldEnabled = false, this._syncRenderer(), this._syncHeightManifold();
  }
  set intersectsWorldUpAtLocation(e6) {
    if (t(e6))
      return void (this.intersectsLine = null);
    const i = this.view.renderCoordsHelper.worldUpAtPosition(e6, o4);
    this.intersectsLine = m(e6, i), this.intersectsLineInfinite = true;
  }
  get intersectsLine() {
    return this._intersectsLineEnabled ? this._intersectsLine : null;
  }
  set intersectsLine(t7) {
    r(t7) ? (h(t7, this._intersectsLine), this._intersectsLineEnabled = true) : this._intersectsLineEnabled = false, this._syncIntersectsLine(), this._syncRenderer();
  }
  get intersectsLineInfinite() {
    return this._intersectsLineInfinite;
  }
  set intersectsLineInfinite(e6) {
    this._intersectsLineInfinite = e6, this._syncIntersectsLineInfinite();
  }
  get lineVerticalPlaneSegment() {
    return this._lineVerticalPlaneSegment;
  }
  set lineVerticalPlaneSegment(t7) {
    this._lineVerticalPlaneSegment = r(t7) ? h(t7) : null, this._syncLineVerticalPlane(), this._syncRenderer();
  }
  get pathVerticalPlane() {
    return this._pathVerticalPlaneBuffers;
  }
  set pathVerticalPlane(e6) {
    this._pathVerticalPlaneBuffers = e6, this._syncPathVerticalPlane(), this._syncLineVerticalPlane(), this._syncPointDistance(), this._syncRenderer();
  }
  get pointDistanceLine() {
    return this._pointDistanceLine;
  }
  set pointDistanceLine(t7) {
    this._pointDistanceLine = r(t7) ? { origin: t2(t7.origin), target: t2(t7.target) } : null, this._syncPointDistance(), this._syncRenderer();
  }
  _syncRenderer() {
    this.attached && this.visible && (this._intersectsLineEnabled || this._heightManifoldEnabled || r(this._pointDistanceLine) || r(this._pathVerticalPlaneBuffers)) ? this._ensureRenderer() : this._disposeRenderer();
  }
  _ensureRenderer() {
    r(this.renderer) || (this.renderer = new H(this.view.renderCoordsHelper, void 0, { contrastControlEnabled: true }), this._syncStyle(), this._syncHeightManifold(), this._syncIntersectsLine(), this._syncIntersectsLineInfinite(), this._syncPathVerticalPlane(), this._syncLineVerticalPlane(), this._syncPointDistance(), this._syncAngleCutoff(), this.view._stage && this.view._stage.addRenderPlugin(this.renderer.renderSlots, this.renderer));
  }
  _syncStyle() {
    t(this.renderer) || (this.renderer.setParameters(this._style), null != this._style.intersectsLineRadius && (this.renderer.intersectsLineRadius = this._style.intersectsLineRadius));
  }
  _syncAngleCutoff() {
    t(this.renderer) || this.renderer.setParameters({ angleCutoff: this._angleCutoff });
  }
  _syncHeightManifold() {
    t(this.renderer) || (this.renderer.heightManifoldEnabled = this._heightManifoldEnabled && this.visible, this._heightManifoldEnabled && (this.renderer.heightManifoldTarget = this._heightManifoldTarget));
  }
  _syncIntersectsLine() {
    t(this.renderer) || (this.renderer.intersectsLineEnabled = this._intersectsLineEnabled && this.visible, this._intersectsLineEnabled && (this.renderer.intersectsLineSegment = this._intersectsLine));
  }
  _syncIntersectsLineInfinite() {
    t(this.renderer) || (this.renderer.intersectsLineInfinite = this._intersectsLineInfinite);
  }
  _syncPathVerticalPlane() {
    t(this.renderer) || (this.renderer.pathVerticalPlaneEnabled = r(this._pathVerticalPlaneBuffers) && this.visible, r(this._pathVerticalPlaneBuffers) && (this.renderer.pathVerticalPlaneBuffers = this._pathVerticalPlaneBuffers));
  }
  _syncLineVerticalPlane() {
    t(this.renderer) || (this.renderer.lineVerticalPlaneEnabled = r(this._lineVerticalPlaneSegment) && this.visible, r(this._lineVerticalPlaneSegment) && (this.renderer.lineVerticalPlaneSegment = this._lineVerticalPlaneSegment));
  }
  _syncPointDistance() {
    t(this.renderer) || (this.renderer.pointDistanceEnabled = r(this._pointDistanceLine) && this.visible, r(this._pointDistanceLine) && (this.renderer.pointDistanceOrigin = this._pointDistanceLine.origin, this.renderer.pointDistanceTarget = this._pointDistanceLine.target));
  }
  _disposeRenderer() {
    r(this.renderer) && this.view._stage && (this.view._stage.removeRenderPlugin(this.renderer), this.renderer = null);
  }
};
var o4 = n();

export {
  _5 as _
};
//# sourceMappingURL=chunk-TVBLDFP3.js.map
