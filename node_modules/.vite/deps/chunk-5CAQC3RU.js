import {
  s
} from "./chunk-PH7BQFVK.js";
import {
  e as e3
} from "./chunk-46N7XS5M.js";
import {
  o
} from "./chunk-A3QLZKCF.js";
import {
  e as e2
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n as n2
} from "./chunk-NAB3NF54.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  e
} from "./chunk-YFBAFAZ2.js";
import {
  r
} from "./chunk-YZNDHJDJ.js";
import {
  n
} from "./chunk-RTHP2LNT.js";
import {
  c
} from "./chunk-ASC3X65B.js";

// node_modules/@arcgis/core/chunks/LaserlinePath.glsl.js
function v(i2) {
  const r2 = new i();
  r2.include(s, i2);
  const { vertex: v2, fragment: w2 } = r2;
  return v2.uniforms.add([new e3("modelView", (i3, o2) => c(m, o2.camera.viewMatrix, i3.origin)), new e3("proj", (e4, i3) => i3.camera.projectionMatrix), new o("glowWidth", (e4, i3) => e4.glowWidth * i3.camera.pixelRatio), new e2("pixelToNDC", (e4, i3) => r(p, 2 / i3.camera.fullViewport[2], 2 / i3.camera.fullViewport[3]))]), r2.attributes.add(O.START, "vec3"), r2.attributes.add(O.END, "vec3"), r2.attributes.add(O.UP, "vec3"), r2.attributes.add(O.EXTRUDE, "vec2"), r2.varyings.add("uv", "vec2"), r2.varyings.add("vViewStart", "vec3"), r2.varyings.add("vViewEnd", "vec3"), r2.varyings.add("vViewPlane", "vec4"), v2.code.add(n2`void main() {
vec3 pos = mix(start, end, extrude.x);
vec4 viewPos = modelView * vec4(pos, 1);
vec4 projPos = proj * viewPos;
vec2 ndcPos = projPos.xy / projPos.w;
vec3 viewUp = (modelView * vec4(extrude.y * up, 0)).xyz;
vec4 projPosUp = proj * vec4(viewPos.xyz + viewUp, 1);
vec2 projExtrudeDir = normalize(projPosUp.xy / projPosUp.w - ndcPos);
vec2 lxy = abs(sign(projExtrudeDir) - ndcPos);
ndcPos += length(lxy) * projExtrudeDir;
vec3 worldPlaneNormal = normalize(cross(up, normalize(end - start)));
vec3 viewPlaneNormal = (modelView * vec4(worldPlaneNormal, 0)).xyz;
vViewStart = (modelView * vec4(start, 1)).xyz;
vViewEnd = (modelView * vec4(end, 1)).xyz;
vViewPlane = vec4(viewPlaneNormal, -dot(viewPlaneNormal, vViewStart));
float xPaddingPixels = sign(dot(viewPlaneNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;
ndcPos.x += xPaddingPixels * pixelToNDC.x;
uv = ndcPos * 0.5 + 0.5;
gl_Position = vec4(ndcPos, 0, 1);
}`), w2.uniforms.add(new o("perScreenPixelRatio", (e4, i3) => i3.camera.perScreenPixelRatio)), w2.code.add(n2`float planeDistancePixels(vec4 plane, vec3 pos, vec3 start, vec3 end) {
vec3 origin = mix(start, end, 0.5);
vec3 basis = end - origin;
vec3 posAtOrigin = pos - origin;
float x = dot(normalize(basis), posAtOrigin);
float y = dot(plane.xyz, posAtOrigin);
float dx = max(abs(x) - length(basis), 0.0);
float dy = y;
float dist = length(vec2(dx, dy));
float width = fwidth(y);
float maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;
float pixelDist = dist / min(width, maxPixelDistance);
return abs(pixelDist);
}
void main() {
vec3 pos;
vec3 normal;
float depthDiscontinuityAlpha;
if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {
discard;
}
float distance = planeDistancePixels(vViewPlane, pos, vViewStart, vViewEnd);
vec4 color = laserlineProfile(distance);
float alpha = 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, vViewPlane.xyz)));
gl_FragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);
}`), r2;
}
var p = n();
var m = e();
var w = Object.freeze(Object.defineProperty({ __proto__: null, build: v }, Symbol.toStringTag, { value: "Module" }));

export {
  v,
  w
};
//# sourceMappingURL=chunk-5CAQC3RU.js.map
