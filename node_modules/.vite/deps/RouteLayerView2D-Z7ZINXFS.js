import {
  i
} from "./chunk-LXAC66BS.js";
import {
  ae
} from "./chunk-TOHMM6FQ.js";
import "./chunk-DQPH5EKZ.js";
import "./chunk-LCW6FHIL.js";
import "./chunk-WKUIJCRG.js";
import "./chunk-XQ337NY7.js";
import {
  f
} from "./chunk-VKEKAYXP.js";
import {
  u
} from "./chunk-6UGZAJSY.js";
import "./chunk-2HUXPKKU.js";
import "./chunk-WL7KJZAL.js";
import "./chunk-JX3YCNPL.js";
import "./chunk-JERZLQLG.js";
import "./chunk-JWKDNFWF.js";
import "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-SASFTPK5.js";
import "./chunk-Z34NAJDO.js";
import "./chunk-HHJIVHSH.js";
import "./chunk-6UTST6NO.js";
import "./chunk-BYHUWBKS.js";
import "./chunk-IEPHENP2.js";
import "./chunk-436X6OVY.js";
import "./chunk-XP3NTQW6.js";
import "./chunk-UJS24K6P.js";
import "./chunk-RB2H3SKO.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-SNC4BDIX.js";
import "./chunk-3CED37X7.js";
import "./chunk-FMIFCFD7.js";
import "./chunk-WL7AHHN3.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import "./chunk-6FQZDXGD.js";
import "./chunk-ZUKXZSOF.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-4V2P7IXX.js";
import "./chunk-SF7Z6XNR.js";
import {
  D,
  O,
  b2 as b,
  g,
  h2,
  h3,
  h4
} from "./chunk-ZO3EM3I6.js";
import "./chunk-YRAX326I.js";
import "./chunk-AKQ6VRGN.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-XZHFGTRH.js";
import "./chunk-2I27THZD.js";
import "./chunk-WN3KE5M2.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-AGO2OES3.js";
import "./chunk-ARI6FRU4.js";
import "./chunk-BBO6WYBO.js";
import "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-ZIAGZEFK.js";
import "./chunk-FR7M4UDR.js";
import "./chunk-KBCUY3VB.js";
import "./chunk-G2GJVIQC.js";
import "./chunk-567AWHAB.js";
import "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-ZEIWFXXO.js";
import "./chunk-YXFNNKMT.js";
import "./chunk-Z7AZMEL6.js";
import "./chunk-FUKESVWQ.js";
import "./chunk-T3KDRLPE.js";
import "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import "./chunk-FPMD6IB4.js";
import "./chunk-S5PZEGLP.js";
import "./chunk-MLAOYRDT.js";
import "./chunk-RIOXX6J2.js";
import "./chunk-Z7BSDVJ3.js";
import "./chunk-MEW2XKT2.js";
import "./chunk-RB3LJE4I.js";
import "./chunk-6EODZIDR.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-PQO66WZ2.js";
import "./chunk-3NPGGTI6.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-4P4OV7G6.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-IG4CY4XM.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YL26MZEL.js";
import "./chunk-YG6VFATO.js";
import "./chunk-6O2ARNGD.js";
import "./chunk-CQ47VEUP.js";
import "./chunk-FU5UMT3R.js";
import "./chunk-ODX6X222.js";
import "./chunk-QZTJM4HG.js";
import {
  p
} from "./chunk-TMSBC6BS.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  h,
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-I4USSDLI.js";
import "./chunk-B42HXLDM.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = Object.freeze({ remove() {
}, pause() {
}, resume() {
} });
var v = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var j2 = { graphic: null, property: null, oldValue: null, newValue: null };
function M(e2) {
  return e2 instanceof b || e2 instanceof h2 || e2 instanceof O || e2 instanceof g || e2 instanceof h3 || e2 instanceof h4 || e2 instanceof D;
}
function V(e2) {
  return j.isCollection(e2) && e2.length && M(e2.getItemAt(0));
}
function G(e2) {
  return Array.isArray(e2) && e2.length && M(e2[0]);
}
var I = class extends f(u) {
  constructor() {
    super(...arguments), this._graphics = new j(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new p({ getCollections: () => [r(this.layer.routeInfo) ? new j([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.updatingHandles.addOnCollectionChange(() => this._routeItems, (e2) => this._routeItemsChanged(e2), h);
  }
  destroy() {
    this.handles.removeAll(), this.updatingHandles.removeAll(), this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeatures(e2) {
    return this._graphicsView.hitTest(e2).filter((e3) => !!e3.popupTemplate);
  }
  highlight(e2) {
    let t2;
    t2 = M(e2) ? [this._getNetworkFeatureUid(e2)] : G(e2) ? e2.map((e3) => this._getNetworkFeatureUid(e3)) : V(e2) ? e2.map((e3) => this._getNetworkFeatureUid(e3)).toArray() : [e2.uid];
    const r2 = t2.filter(r);
    return r2.length ? (this._addHighlight(r2), { remove: () => this._removeHighlight(r2) }) : k;
  }
  async hitTest(e2, t2) {
    if (this.suspended)
      return null;
    const r2 = this._graphicsView.hitTest(e2).filter(r).map((e3) => this._networkGraphicMap.get(e3));
    if (!r2.length)
      return null;
    const { layer: s } = this;
    return r2.reverse().map((t3) => ({ type: "route", layer: s, mapPoint: e2, networkFeature: t3 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveStart() {
  }
  moveEnd() {
  }
  update(e2) {
    this._graphicsView.processUpdate(e2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(e2) {
    for (const t2 of e2)
      if (this._highlightIds.has(t2)) {
        const e3 = this._highlightIds.get(t2);
        this._highlightIds.set(t2, e3 + 1);
      } else
        this._highlightIds.set(t2, 1);
    this._updateHighlight();
  }
  _createGraphic(e2) {
    const t2 = e2.toGraphic();
    return t2.layer = this.layer, t2.sourceLayer = this.layer, t2;
  }
  _createGraphicsView() {
    const e2 = this.view, t2 = () => this.requestUpdate(), r2 = new i(e2.featuresTilingScheme);
    this._graphicsView = new ae({ container: r2, graphics: this._graphics, requestUpdateCallback: t2, view: e2 }), this.container.addChild(r2), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(e2) {
    const t2 = this._networkGraphicMap.get(e2);
    return v.indexOf(t2.type);
  }
  _getNetworkFeatureUid(e2) {
    return this._networkFeatureMap.has(e2) ? this._networkFeatureMap.get(e2).uid : null;
  }
  _removeHighlight(e2) {
    for (const t2 of e2)
      if (this._highlightIds.has(t2)) {
        const e3 = this._highlightIds.get(t2) - 1;
        0 === e3 ? this._highlightIds.delete(t2) : this._highlightIds.set(t2, e3);
      }
    this._updateHighlight();
  }
  _routeItemsChanged(e2) {
    if (e2.removed.length) {
      this._graphics.removeMany(e2.removed.map((e3) => {
        const t2 = this._networkFeatureMap.get(e3);
        return this._networkFeatureMap.delete(e3), this._networkGraphicMap.delete(t2), t2;
      }));
      for (const t2 of e2.removed)
        this.handles.remove(t2);
    }
    if (e2.added.length) {
      this._graphics.addMany(e2.added.map((e3) => {
        const t2 = this._createGraphic(e3);
        return t(t2.symbol) ? null : (this._networkFeatureMap.set(e3, t2), this._networkGraphicMap.set(t2, e3), t2);
      }).filter(r));
      for (const t2 of e2.added)
        this.handles.add([l(() => t2.geometry, (e3, r2) => {
          this._updateGraphic(t2, "geometry", e3, r2);
        }), l(() => t2.symbol, (e3, r2) => {
          this._updateGraphic(t2, "symbol", e3, r2);
        })], t2);
      this._graphics.sort((e3, t2) => this._getDrawOrder(e3) - this._getDrawOrder(t2));
    }
  }
  _updateGraphic(e2, t2, r2, i2) {
    if (!this._networkFeatureMap.has(e2)) {
      const t3 = this._createGraphic(e2);
      return this._networkFeatureMap.set(e2, t3), this._networkGraphicMap.set(t3, e2), void this._graphics.add(t3);
    }
    const s = this._networkFeatureMap.get(e2);
    s[t2] = r2, j2.graphic = s, j2.property = t2, j2.oldValue = i2, j2.newValue = r2, this._graphicsView.graphicUpdateHandler(j2);
  }
  _updateHighlight() {
    const e2 = Array.from(this._highlightIds.keys());
    this._graphicsView.setHighlight(e2);
  }
};
e([d()], I.prototype, "_graphics", void 0), e([d()], I.prototype, "_routeItems", null), I = e([n("esri.views.2d.layers.RouteLayerView2D")], I);
var F = I;
export {
  F as default
};
//# sourceMappingURL=RouteLayerView2D-Z7ZINXFS.js.map
