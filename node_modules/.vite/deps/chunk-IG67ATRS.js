import {
  p as p3,
  r as r5
} from "./chunk-WTYOB7O7.js";
import {
  t as t7
} from "./chunk-KDNPPW3Z.js";
import {
  g as g3,
  h as h4
} from "./chunk-2EPPX4WN.js";
import {
  Z,
  _ as _2,
  ft,
  lt,
  ot,
  ut,
  yt
} from "./chunk-4ZEOAETN.js";
import {
  e as e8
} from "./chunk-MEW2XKT2.js";
import {
  t as t6
} from "./chunk-RB3LJE4I.js";
import {
  l as l5
} from "./chunk-6EODZIDR.js";
import {
  o as o5
} from "./chunk-MV2XZ5BA.js";
import {
  L as L3
} from "./chunk-6S5B4VLQ.js";
import {
  M as M3,
  h as h3,
  i,
  r as r3,
  s as s4
} from "./chunk-3NPGGTI6.js";
import {
  u as u2
} from "./chunk-QNKOXOOY.js";
import {
  o as o7
} from "./chunk-G4ERZR5M.js";
import {
  e as e7
} from "./chunk-AMGAY4O5.js";
import {
  i as i4,
  n as n10
} from "./chunk-RBVTRJPJ.js";
import {
  a as a4,
  z
} from "./chunk-YZNDHJDJ.js";
import {
  a as a8,
  g as g2,
  i as i3
} from "./chunk-Z3S5X75I.js";
import {
  n as n8
} from "./chunk-4P4OV7G6.js";
import {
  e as e5,
  f as f4,
  i as i2,
  r as r4
} from "./chunk-ZUDEVIXR.js";
import {
  l as l4
} from "./chunk-ZN2MGN4S.js";
import {
  L as L2,
  Q
} from "./chunk-JZY7CGEI.js";
import {
  n as n9
} from "./chunk-RTHP2LNT.js";
import {
  e as e6
} from "./chunk-EHYYP2L2.js";
import {
  n as n7
} from "./chunk-74GUBHRJ.js";
import {
  t as t5
} from "./chunk-LPU5TMA4.js";
import {
  O as O2,
  e as e3,
  e2 as e4,
  o as o4,
  t as t4
} from "./chunk-25QHXOZB.js";
import {
  n as n6
} from "./chunk-UHJVTABQ.js";
import {
  f as f3
} from "./chunk-W66LN57L.js";
import {
  An,
  en,
  rn,
  tn
} from "./chunk-PZWU5EHT.js";
import {
  a as a7,
  c as c3,
  m as m3
} from "./chunk-37ZVELW7.js";
import {
  v as v3
} from "./chunk-JJ7VMWJT.js";
import {
  p as p2
} from "./chunk-TMSBC6BS.js";
import {
  o as o6
} from "./chunk-T7SYNS2R.js";
import {
  a as a6
} from "./chunk-QKRZMDWG.js";
import {
  y as y2
} from "./chunk-TBT57L4K.js";
import {
  a as a5,
  d as d2
} from "./chunk-JJRJ6TV3.js";
import {
  c as c2
} from "./chunk-K2FQEYBG.js";
import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  U,
  a as a3,
  f as f2,
  h as h2,
  j as j4,
  l as l3,
  w
} from "./chunk-T7BEWVV3.js";
import {
  m as m2
} from "./chunk-HVM5D6S5.js";
import {
  _,
  m
} from "./chunk-FTLBKDGL.js";
import {
  j as j3
} from "./chunk-TT2HIXWQ.js";
import {
  n as n5
} from "./chunk-OIPX3EDD.js";
import {
  c
} from "./chunk-NWRK6QLX.js";
import {
  o as o3
} from "./chunk-BPZGJQOB.js";
import {
  q
} from "./chunk-PKZEO23A.js";
import {
  o as o2
} from "./chunk-BNPOKP6A.js";
import {
  M as M2,
  r as r2
} from "./chunk-Q72YFZUL.js";
import {
  M,
  R,
  j2
} from "./chunk-YPZEGNLG.js";
import {
  E,
  k2
} from "./chunk-3NMRL5CR.js";
import {
  s as s3
} from "./chunk-XRL56EGK.js";
import {
  l as l2
} from "./chunk-ICD7AJSY.js";
import {
  A,
  d,
  n2 as n,
  n5 as n2,
  n8 as n4,
  v as v2,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  t as t2
} from "./chunk-5EQKHR4M.js";
import {
  C,
  L,
  O,
  T,
  f,
  g,
  j,
  k,
  p,
  t as t3,
  v
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import {
  n as n3
} from "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  a,
  a2,
  e as e2,
  h,
  l,
  o,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/BreakpointsOwner.js
var n11 = { widthBreakpoint: { getValue(e12) {
  const i15 = e12.viewSize[0], s14 = e12.breakpoints, a21 = this.values;
  return i15 <= s14.xsmall ? a21.xsmall : i15 <= s14.small ? a21.small : i15 <= s14.medium ? a21.medium : i15 <= s14.large ? a21.large : a21.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", small: "esri-view-width-small esri-view-width-greater-than-xsmall esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", medium: "esri-view-width-medium esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-less-than-large esri-view-width-less-than-xlarge", large: "esri-view-width-large esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-less-than-xlarge", xlarge: "esri-view-width-xlarge esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-greater-than-large" } }, heightBreakpoint: { getValue(e12) {
  const i15 = e12.viewSize[1], s14 = e12.breakpoints, a21 = this.values;
  return i15 <= s14.xsmall ? a21.xsmall : i15 <= s14.small ? a21.small : i15 <= s14.medium ? a21.medium : i15 <= s14.large ? a21.large : a21.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", small: "esri-view-height-small esri-view-height-greater-than-xsmall esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", medium: "esri-view-height-medium esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-less-than-large esri-view-height-less-than-xlarge", large: "esri-view-height-large esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-less-than-xlarge", xlarge: "esri-view-height-xlarge esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-greater-than-large" } }, orientation: { getValue(e12) {
  const i15 = e12.viewSize, s14 = i15[0], a21 = i15[1], t11 = this.values;
  return a21 >= s14 ? t11.portrait : t11.landscape;
}, values: { portrait: "portrait", landscape: "landscape" }, valueToClassName: { portrait: "esri-view-orientation-portrait", landscape: "esri-view-orientation-landscape" } } };
var o8 = { xsmall: 544, small: 768, medium: 992, large: 1200 };
function m4(e12) {
  const i15 = e12;
  return i15 && i15.xsmall < i15.small && i15.small < i15.medium && i15.medium < i15.large;
}
function g4(e12, i15) {
  return i15 ? n11[e12].valueToClassName[i15].split(" ") : [];
}
var w2 = (w4) => {
  let d9 = class extends w4 {
    constructor(...e12) {
      super(...e12), this._breakpointsHandles = new u(), this.orientation = null, this.widthBreakpoint = null, this.heightBreakpoint = null, this.breakpoints = o8;
    }
    initialize() {
      this._breakpointsHandles.add(l3(() => [this.breakpoints, this.size], () => this._updateClassNames(), h2));
    }
    destroy() {
      this.destroyed || (this._removeActiveClassNames(), this._breakpointsHandles = l(this._breakpointsHandles));
    }
    set breakpoints(e12) {
      if (e12 === this._get("breakpoints"))
        return;
      const i15 = m4(e12);
      if (!i15) {
        const e13 = JSON.stringify(o8, null, 2);
        console.warn("provided breakpoints are not valid, using defaults:" + e13);
      }
      e12 = i15 ? e12 : o8, this._set("breakpoints", { ...e12 });
    }
    _updateClassNames() {
      if (!this.container)
        return;
      const e12 = t2.acquire(), s14 = t2.acquire();
      let a21, t11 = false;
      for (a21 in n11) {
        const i15 = this[a21], r11 = n11[a21].getValue({ viewSize: this.size, breakpoints: this.breakpoints });
        i15 !== r11 && (t11 = true, this[a21] = r11, g4(a21, i15).forEach((e13) => s14.push(e13)), g4(a21, r11).forEach((i16) => e12.push(i16)));
      }
      t11 && (this._applyClassNameChanges(e12, s14), t2.release(e12), t2.release(s14));
    }
    _applyClassNameChanges(e12, i15) {
      const s14 = this.container;
      s14 && (i15.forEach((e13) => s14.classList.remove(e13)), e12.forEach((e13) => s14.classList.add(e13)));
    }
    _removeActiveClassNames() {
      const e12 = this.container;
      if (!e12)
        return;
      let i15;
      for (i15 in n11)
        g4(i15, this[i15]).forEach((i16) => e12.classList.remove(i16));
    }
  };
  return e([d()], d9.prototype, "breakpoints", null), e([d()], d9.prototype, "orientation", void 0), e([d()], d9.prototype, "widthBreakpoint", void 0), e([d()], d9.prototype, "heightBreakpoint", void 0), d9 = e([n4("esri.views.BreakpointsOwner")], d9), d9;
};

// node_modules/@arcgis/core/views/PopupView.js
var p4 = (p17) => {
  let a21 = class extends p17 {
    async fetchPopupFeatures(e12, r11) {
      await this.when();
      const { location: i15, queryArea: p18, layerViewsAndGraphics: a22, clientOnlyGraphics: t11 } = await this._prepareFetchPopupFeatures(e12, r11), o15 = Promise.resolve(t11), c14 = this._queryLayerPopupFeatures(p18, a22, r11), n23 = c14.map((e13) => e13.promise);
      return { location: i15, clientOnlyGraphics: t11, allGraphicsPromise: C([o15, ...n23]).then((e13) => Array.from(new Set(e13.flat()))), promisesPerLayerView: c14 };
    }
    _queryLayerPopupFeatures(e12, s14, i15) {
      return s14.map(({ layerView: s15, graphics: p18 }) => {
        const a22 = { clientGraphics: p18, event: r(i15) ? i15.event : null, signal: r(i15) ? i15.signal : null, defaultPopupTemplateEnabled: !!r(i15) && !!i15.defaultPopupTemplateEnabled }, t11 = s15.fetchPopupFeatures(e12, a22);
        return { layerView: s15, promise: t11 };
      });
    }
    _isValidPopupGraphic(e12, s14) {
      return e12 && !!e12.getEffectivePopupTemplate(r(s14) && s14.defaultPopupTemplateEnabled);
    }
    async _prepareFetchPopupFeatures(e12, r11) {
      const { clientGraphics: s14, queryArea: i15, location: p18 } = await this._popupHitTestGraphics(e12, r11), a22 = this._getFetchPopupLayerViews(), { layerViewsAndGraphics: t11, clientOnlyGraphics: o15 } = this._graphicsPerFetchPopupLayerView(s14, a22);
      return { clientOnlyGraphics: o15, layerViewsAndGraphics: t11, queryArea: i15, location: p18 };
    }
    async _popupHitTestGraphics(e12, r11) {
      const { results: s14, mapPoint: i15 } = await this.popupHitTest(e12), p18 = s14.filter((e13) => "graphic" === e13.type && this._isValidPopupGraphic(e13.graphic, r11)), a22 = p18.length ? p18[0].mapPoint : null;
      return { clientGraphics: p18.map((e13) => e13.graphic), queryArea: i15, location: i15 || a22 };
    }
    _getFetchPopupLayerViews() {
      const e12 = [];
      return this.allLayerViews.forEach((r11) => {
        this._isValidPopupLayerView(r11) && e12.push(r11);
      }), r(this.graphicsView) && this._isValidPopupLayerView(this.graphicsView) && e12.push(this.graphicsView), e12.reverse();
    }
    _isValidPopupLayerView(e12) {
      return r(e12) && (!("layer" in e12) || !e12.suspended) && "fetchPopupFeatures" in e12;
    }
    _graphicsPerFetchPopupLayerView(e12, r11) {
      const s14 = [], i15 = /* @__PURE__ */ new Map(), p18 = r11.map((e13) => {
        const r12 = [];
        return "layer" in e13 ? i15.set(e13.layer, r12) : i15.set(e13.graphics, r12), { layerView: e13, graphics: r12 };
      });
      for (const a22 of e12) {
        const e13 = i15.get(a22.layer) || i15.get(a22.sourceLayer) || null;
        e13 ? e13.push(a22) : s14.push(a22);
      }
      return { layerViewsAndGraphics: p18, clientOnlyGraphics: s14 };
    }
  };
  return a21 = e([n4("esri.views.PopupView")], a21), a21;
};

// node_modules/@arcgis/core/support/AnalysesCollection.js
var i5 = s.getLogger("esri.support.AnalysesCollection");
var n12 = class extends m3 {
  constructor(e12) {
    super(e12), this.handles.add(this.on("before-add", (e13) => {
      t(e13.item) || e13.item.parent === this.owner && (i5.warn("Analysis inside the collection must be unique. Not adding this element again."), e13.preventDefault());
    }));
  }
  _own(e12) {
    e12.parent = this.owner;
  }
  _release(e12) {
    e12.parent = null;
  }
};
n12 = e([n4("esri.support.AnalysesCollection")], n12);

// node_modules/@arcgis/core/views/BasemapView.js
var p5 = class extends y {
  constructor(e12) {
    super(e12), this.view = null, this.baseLayerViews = new j3(), this.referenceLayerViews = new j3(), this._loadingHandle = l3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    }, (e13) => {
      e13 && e13.load().catch(() => {
      });
    }, h2);
  }
  destroy() {
    this._set("view", null), this._loadingHandle && (this._loadingHandle.remove(), this._loadingHandle = null);
  }
  get suspended() {
    return !this.view || this.view.suspended;
  }
  get updating() {
    var _a, _b;
    if (this.view && this.view.suspended)
      return false;
    const e12 = (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    return !!e12 && (!!e12.loaded && (this.baseLayerViews.some((e13) => e13.updating) || this.referenceLayerViews.some((e13) => e13.updating)));
  }
};
e([d({ constructOnly: true })], p5.prototype, "view", void 0), e([d({ readOnly: true })], p5.prototype, "baseLayerViews", void 0), e([d({ readOnly: true })], p5.prototype, "referenceLayerViews", void 0), e([d({ readOnly: true })], p5.prototype, "suspended", null), e([d({ type: Boolean, readOnly: true })], p5.prototype, "updating", null), p5 = e([n4("esri.views.BasemapView")], p5);

// node_modules/@arcgis/core/views/LayerViewManager.js
var v4 = s.getLogger("esri.views.LayerViewManager");
var V = class {
  constructor(e12, r11, i15) {
    this.layer = e12, this.view = r11, this.layerViewImporter = i15, this._controller = new AbortController(), this._deferred = T(), this._started = false, this.done = false, v(this._controller.signal, () => {
      const r12 = new s2("cancelled:layerview-create", "layerview creation cancelled", { layer: e12 });
      this._deferred.reject(r12);
    });
  }
  get promise() {
    return this._deferred.promise;
  }
  destroy() {
    this._controller.abort();
    const { layerView: e12 } = this;
    if (!e12)
      return;
    const { layer: r11, view: t11 } = this;
    r11.emit("layerview-destroy", { view: t11, layerView: e12 }), t11.emit("layerview-destroy", { layer: r11, layerView: e12 }), this.done = true, this.layer = null, this.layerView = null, this.view = null, this.layerViewImporter = null;
  }
  async start() {
    var _a, _b;
    if (this._started)
      return;
    this._started = true;
    const { _controller: { signal: e12 }, layer: r11, view: i15 } = this;
    this._map = i15.map;
    try {
      let s14, o15;
      if (await r11.load({ signal: e12 }), "prefetchResources" in r11 && await r11.prefetchResources({ signal: e12 }), r11.createLayerView)
        s14 = await r11.createLayerView(i15, { signal: e12 });
      else {
        if (!this.layerViewImporter.hasLayerViewModule(r11))
          throw new s2("layer:view-not-supported", "No layerview implementation was found");
        const a21 = await this.layerViewImporter.importLayerView(r11);
        f(e12), s14 = "default" in a21 ? new a21.default({ layer: r11, view: i15 }) : new a21({ layer: r11, view: i15 });
      }
      const l11 = () => {
        o15 = a2(o15), s14.destroyed || s14.destroy(), s14.layer = null, s14.parent = null, s14.view = null, this.done = true;
      };
      o15 = v(e12, l11), f(e12);
      try {
        await s14.when();
      } catch (a21) {
        throw l11(), a21;
      }
      const y6 = (_b = (_a = this._map) == null ? void 0 : _a.allLayers) == null ? void 0 : _b.includes(r11);
      if (!y6)
        return l11(), void this._deferred.reject(new s2("view:no-layerview-for-layer", "The layer has been removed from the map", { layer: r11 }));
      this.layerView = s14, r11.emit("layerview-create", { view: i15, layerView: s14 }), i15.emit("layerview-create", { layer: r11, layerView: s14 }), this.done = true, this._deferred.resolve(s14);
    } catch (a21) {
      r11.emit("layerview-create-error", { view: i15, error: a21 }), i15.emit("layerview-create-error", { layer: r11, error: a21 }), this.done = true, this._deferred.reject(new s2("layerview:create-error", "layerview creation failed", { layer: r11, error: a21 }));
    }
  }
};
var L4 = class extends d2 {
  constructor(e12) {
    super(e12), this._layerLayerViewInfoMap = /* @__PURE__ */ new Map(), this._watchUpdatingTracking = new c2(), this.supportsGround = true, this._preloadLayerViewModules = () => {
      var _a;
      const e13 = (_a = this.view.map) == null ? void 0 : _a.allLayers;
      if (e13)
        for (const r11 of e13)
          this.layerViewImporter.hasLayerViewModule(r11) && this.layerViewImporter.importLayerView(r11);
    }, this._reschedule = () => (t(this._workPromise) && (this._workPromise = T()), this.handles.remove("reschedule"), this.handles.add(v2(this._doWork), "reschedule"), this._workPromise.promise), this._doWork = () => {
      var _a, _b, _c;
      const e13 = this.view.map;
      if (this._map !== e13 && (this.clear(), this._map = e13), t(this._workPromise))
        return void this.notifyChange("updating");
      this.handles.remove("reschedule"), this.handles.remove("collection-change");
      const t11 = new p2({ getCollections: () => this._rootCollectionNames.map((e14) => this.get(e14)), getChildrenFunction: (e14) => e14 && "layers" in e14 ? e14.layers : null });
      if (!t11)
        return this._workPromise.resolve(), void (this._workPromise = null);
      for (const r11 of t11)
        this._createLayerView(r11);
      this._refreshCollections();
      for (const [r11, s14] of this._layerLayerViewInfoMap)
        t11.includes(r11) || (this._layerLayerViewInfoMap.delete(s14.layer), s14.destroy());
      const i15 = t11.filter((e14) => "group" === e14.type).map((e14) => e14.layers), a21 = [(_a = e13 == null ? void 0 : e13.ground) == null ? void 0 : _a.layers, (_b = e13 == null ? void 0 : e13.basemap) == null ? void 0 : _b.baseLayers, (_c = e13 == null ? void 0 : e13.basemap) == null ? void 0 : _c.referenceLayers, e13 == null ? void 0 : e13.layers, ...i15].filter((e14) => !!e14);
      this.handles.add(a21.map((e14) => this._watchUpdatingTracking.addOnCollectionChange(() => e14, this._reschedule)), "collection-change"), this._workPromise.resolve(), this._workPromise = null;
    };
  }
  initialize() {
    this.handles.add([a3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.allLayers;
    }, "change", this._preloadLayerViewModules, { onListenerAdd: this._preloadLayerViewModules }), l3(() => {
      const e12 = this.view, r11 = e12 == null ? void 0 : e12.map;
      return [r11 == null ? void 0 : r11.basemap, r11 == null ? void 0 : r11.ground, r11 == null ? void 0 : r11.layers, e12 == null ? void 0 : e12.ready];
    }, () => this._reschedule(), w)]), this._preloadLayerViewModules(), this._reschedule();
  }
  destroy() {
    this.clear(), this._watchUpdatingTracking.destroy(), this._map = null;
  }
  get _layersToLayerViews() {
    const e12 = [["view.map.basemap.baseLayers", "view.basemapView.baseLayerViews"], ["view.map.layers", "view.layerViews"], ["view.map.basemap.referenceLayers", "view.basemapView.referenceLayerViews"]];
    return this.supportsGround && e12.push(["view.map.ground.layers", "view.groundView.layerViews"]), new Map(e12);
  }
  get _rootCollectionNames() {
    return Array.from(this._layersToLayerViews.keys());
  }
  get updating() {
    return r(this._workPromise) || this._watchUpdatingTracking.updating || n3(this._layerLayerViewInfoMap, (e12) => !e12.done);
  }
  get updatingRemaining() {
    let e12 = 0;
    for (const r11 of this._layerLayerViewInfoMap.values())
      r11.done || ++e12;
    return e12;
  }
  clear() {
    if (!this.destroyed) {
      for (const e12 of this._layerLayerViewInfoMap.values())
        e12.destroy();
      this._layerLayerViewInfoMap.clear(), this._refreshCollections();
    }
  }
  async whenLayerView(e12) {
    if (await this._reschedule(), !this._layerLayerViewInfoMap.has(e12))
      throw new s2("view:no-layerview-for-layer", "No layerview has been found for the layer", { layer: e12 });
    return this._layerLayerViewInfoMap.get(e12).promise;
  }
  _refreshCollections() {
    for (const [e12, r11] of this._layersToLayerViews)
      this._populateLayerViewsOwners(this.get(e12), this.get(r11), this.view);
    this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
  _populateLayerViewsOwners(e12, r11, t11) {
    if (!e12 || !r11)
      return void (r11 && r11.removeAll());
    let i15 = 0;
    for (const a21 of e12) {
      const e13 = this._layerLayerViewInfoMap.get(a21);
      if (!e13 || !e13.layerView)
        continue;
      const s14 = e13.layerView;
      s14.layer = a21, s14.parent = t11, r11.getItemAt(i15) !== s14 && r11.splice(i15, 0, s14), a21.layers && this._populateLayerViewsOwners(a21.layers, s14.layerViews, s14), i15 += 1;
    }
    i15 < r11.length && r11.splice(i15, r11.length);
  }
  _createLayerView(e12) {
    if (this._layerLayerViewInfoMap.has(e12))
      return this.view.ready && this._layerLayerViewInfoMap.get(e12).start(), this.notifyChange("updating"), void this.notifyChange("updatingRemaining");
    e12.load().catch(() => {
    }), this.layerViewImporter.hasLayerViewModule(e12) && this.layerViewImporter.importLayerView(e12);
    const r11 = new V(e12, this.view, this.layerViewImporter);
    r11.promise.then(() => this._refreshCollections(), (r12) => {
      r12 && (g(r12) || "cancelled:layerview-create" === r12.name) || v4.error(`Failed to create layerview for layer title:'${e12.title ?? "no title"}', id:'${e12.id ?? "no id"}' of type '${e12.type}'.`, { layer: e12, error: r12 }), this._refreshCollections();
    }), this._layerLayerViewInfoMap.set(e12, r11), this.view.ready && r11.start(), this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
};
e([d()], L4.prototype, "_workPromise", void 0), e([d({ readOnly: true })], L4.prototype, "_watchUpdatingTracking", void 0), e([d({ readOnly: true })], L4.prototype, "_layersToLayerViews", null), e([d({ readOnly: true })], L4.prototype, "_rootCollectionNames", null), e([d()], L4.prototype, "layerViewImporter", void 0), e([d()], L4.prototype, "supportsGround", void 0), e([d({ readOnly: true })], L4.prototype, "updating", null), e([d({ readOnly: true })], L4.prototype, "updatingRemaining", null), e([d({ constructOnly: true })], L4.prototype, "view", void 0), L4 = e([n4("esri.views.LayerViewManager")], L4);
var M4 = L4;

// node_modules/@arcgis/core/views/Magnifier.js
var i6 = class extends y {
  constructor(o15) {
    super(o15), this.factor = 1.5, this.offset = c(0, 0), this.position = null, this.size = 120, this.maskUrl = null, this.maskEnabled = true, this.overlayUrl = null, this.overlayEnabled = true, this.visible = true;
  }
  get version() {
    return this.commitProperty("factor"), this.commitProperty("offset"), this.commitProperty("position"), this.commitProperty("visible"), this.commitProperty("size"), this.commitProperty("maskUrl"), this.commitProperty("maskEnabled"), this.commitProperty("overlayUrl"), this.commitProperty("overlayEnabled"), (this._get("version") || 0) + 1;
  }
};
e([d({ type: Number })], i6.prototype, "factor", void 0), e([d({ nonNullable: true })], i6.prototype, "offset", void 0), e([d()], i6.prototype, "position", void 0), e([d({ type: Number, range: { min: 0 } })], i6.prototype, "size", void 0), e([d()], i6.prototype, "maskUrl", void 0), e([d()], i6.prototype, "maskEnabled", void 0), e([d()], i6.prototype, "overlayUrl", void 0), e([d()], i6.prototype, "overlayEnabled", void 0), e([d({ readOnly: true })], i6.prototype, "version", null), e([d({ type: Boolean })], i6.prototype, "visible", void 0), i6 = e([n4("esri.views.Magnifier")], i6);
var p6 = i6;

// node_modules/@arcgis/core/views/3d/support/TextureCollection.js
var i7 = class extends y {
  constructor(e12, t11) {
    super({}), this._stage = e12, this._textureRequests = /* @__PURE__ */ new Map(), this._frameTask = (t11 == null ? void 0 : t11.registerTask(L2.TEXTURE_UNLOAD)) ?? Q;
  }
  normalizeCtorArgs() {
    return {};
  }
  destroy() {
    super.destroy(), this._frameTask.remove(), this._textureRequests.forEach((e12) => this._releaseTextureRequest(e12)), this._textureRequests.clear();
  }
  get updating() {
    return this._frameTask.updating;
  }
  fromData(e12, t11, r11) {
    const s14 = this.makeUid(e12);
    let o15 = this._textureRequests.get(s14);
    return o15 || (o15 = { referenceCount: 0, texture: t11(), textureAsync: null, abortController: null, onRemove: r11 }, this._stage && (this._stage.add(o15.texture), this._stage.loadImmediate(o15.texture)), this._textureRequests.set(s14, o15)), o15.referenceCount++, { uid: s14, texture: o15.texture, release: () => this._release(s14) };
  }
  _release(e12) {
    const t11 = this._textureRequests.get(e12);
    t11 ? (t11.referenceCount < 1 && console.warn("TextureCollection: reference count is < 1 for " + e12), t11.referenceCount--, t11.referenceCount < 1 && this._frameTask.schedule(() => this._releaseNow(e12))) : console.warn(`TextureCollection: texture doesn't exist: '${e12}'`);
  }
  get test() {
    return { textureRequests: this._textureRequests };
  }
  _releaseNow(e12) {
    if (!this._textureRequests)
      return;
    const t11 = this._textureRequests.get(e12);
    !t11 || t11.referenceCount > 0 || (this._releaseTextureRequest(t11), this._textureRequests.delete(e12));
  }
  _releaseTextureRequest(e12) {
    var _a;
    e12.onRemove && e12.onRemove(), e12.texture ? (_a = this._stage) == null ? void 0 : _a.remove(e12.texture) : e12.abortController && (e12.abortController.abort(), e12.abortController = null);
  }
  makeUid(e12, t11 = null) {
    return r(t11) ? `${e12}.${t11}px` : e12;
  }
};
e([d()], i7.prototype, "_frameTask", void 0), e([d()], i7.prototype, "updating", null), i7 = e([n4("esri.views.3d.support.TextureCollection")], i7);

// node_modules/@arcgis/core/views/interactive/interactiveToolUtils.js
var o9 = s.getLogger("esri.views.interactive.interactiveToolUtils");
function i8(e12) {
  return [e12.on("before-add", (t11) => {
    const i15 = t11.item;
    if (null == i15 || e12.includes(i15))
      return o9.warn("Tool is either already in the list of tools or tool is `null`. Not adding tool."), void t11.preventDefault();
    i15.onAdd();
  }), e12.on("after-remove", (e13) => {
    const t11 = e13.item;
    t11.visible = false, t11.active && (t11.view.activeTool = null), t11.destroy();
  })];
}
function r6(e12) {
  return e12.visible && e12.getEditableFlag(o7.USER) && e12.getEditableFlag(o7.MANAGER);
}

// node_modules/@arcgis/core/views/interactive/ToolViewManagerManipulatorState.js
var p7 = class {
  constructor() {
    this._pointerLocations = /* @__PURE__ */ new Map(), this._hoveredManipulators = /* @__PURE__ */ new Map(), this._grabbedManipulators = /* @__PURE__ */ new Map(), this._draggedManipulators = /* @__PURE__ */ new Map(), this._stopDrag = false, this._currentlyActiveTool = null, this._revertToActiveTool = false, this._cursor = null;
  }
  get cursor() {
    return this._cursor;
  }
  handleInputEvent(t11, a21) {
    const s14 = () => t11.stopPropagation();
    switch (t11.type) {
      case "pointer-move":
        c4(t11.pointerType) && this._pointerLocations.set(t11.pointerId, { x: t11.x, y: t11.y, pointerType: t11.pointerType });
        break;
      case "drag":
        this._grabbedManipulators.size > 0 && (this._stopDrag = true), this._stopDrag && (s14(), "end" === t11.action && (this._stopDrag = false));
        break;
      case "pointer-down": {
        if (!u3(t11))
          break;
        const e12 = n10(t11), n23 = this._intersect(e12, t11.pointerType, a21.forEachTool);
        if (t(n23))
          break;
        const p17 = this._findToolAndManipulatorByKey(n23, a21.forEachTool, h5), c14 = o(p17, (t12) => t12.manipulator), d9 = o(p17, (t12) => t12.tool);
        !(r(c14) && r(d9) && c14.interactive) || c14.grabbable && c14.grabbableForEvent(t11) || !c14.grabbing || c14.dragging || this._ungrabManipulatorBeforeDragging(c14, d9, t11), r(c14) && c14.interactive && c14.grabbable && c14.grabbableForEvent(t11) && !c14.grabbing && (this._grabbedManipulators.set(t11.pointerId, { key: n23, start: e12, pointerType: t11.pointerType }), 1 === this._grabbedManipulators.size && a21.activeTool !== n23.tool && (this._currentlyActiveTool = a21.activeTool, this._revertToActiveTool = true, a21.setActiveTool(n23.tool)), c14.grabbing = true, c14.events.emit("grab-changed", { action: "start", pointerType: t11.pointerType, screenPoint: e12 }), s14());
        break;
      }
      case "pointer-up":
        this._handlePointerEnd(t11, a21);
        break;
      case "pointer-drag": {
        if (!u3(t11))
          break;
        const i15 = this._grabbedManipulators.get(t11.pointerId), p17 = this._draggedManipulators.get(t11.pointerId), c14 = o(i15 || p17, ({ key: t12 }) => t12), d9 = this._findManipulatorByKey(c14, a21.forEachTool);
        if (t(d9))
          break;
        const h10 = n10(t11);
        h10.x = o3(h10.x, 0, a21.view.width), h10.y = o3(h10.y, 0, a21.view.height);
        const g10 = e2(i15 || p17).start;
        switch (t11.action) {
          case "start":
          case "update":
            "update" !== t11.action && 1 !== this._grabbedManipulators.size || (d9.dragging = true, p17 ? d9.events.emit("drag", { action: "update", start: g10, screenPoint: h10 }) : d9.events.emit("drag", { action: "start", start: g10, screenPoint: h10, pointerType: t11.pointerType }), this._draggedManipulators.set(t11.pointerId, { key: e2(c14), start: g10 }));
            break;
          case "end":
            d9.dragging = false, p17 && d9.events.emit("drag", { action: "end", start: g10, screenPoint: h10 }), this._draggedManipulators.delete(t11.pointerId), this._handlePointerEnd(t11, a21);
        }
        s14();
        break;
      }
      case "immediate-click": {
        const e12 = n10(t11), r11 = this._intersect(e12, t11.pointerType, a21.forEachTool), n23 = this._findToolAndManipulatorByKey(r11, a21.forEachTool, h5);
        if (d3(t11) || a21.forEachTool((t12) => {
          if ((!r(n23) || n23.tool !== t12 || t12.automaticManipulatorSelection) && t12.manipulators) {
            let e13 = false;
            t12.manipulators.forEach(({ manipulator: t13 }) => {
              t13.selected && (t13.selected = false, e13 = true);
            }), e13 && t12.manipulatorSelectionChanged && t12.manipulatorSelectionChanged();
          }
        }), t(n23))
          break;
        const { manipulator: p17, tool: c14 } = n23;
        if (!p17.interactive)
          break;
        p17.selectable && c14.automaticManipulatorSelection && (p17.selected = !p17.selected, c14.manipulatorSelectionChanged && c14.manipulatorSelectionChanged());
        const u9 = t11.native.shiftKey;
        p17.events.emit("immediate-click", { screenPoint: e12, button: t11.button, pointerType: t11.pointerType, shiftKey: u9, stopPropagation: s14 });
        break;
      }
      case "click": {
        const e12 = n10(t11), i15 = this._intersect(e12, t11.pointerType, a21.forEachTool), r11 = this._findManipulatorByKey(i15, a21.forEachTool);
        if (t(r11) || !r11.interactive)
          break;
        const n23 = t11.native.shiftKey;
        r11.events.emit(t11.type, { screenPoint: e12, button: t11.button, pointerType: t11.pointerType, shiftKey: n23 }), s14();
        break;
      }
      case "double-click": {
        const e12 = n10(t11), i15 = this._intersect(e12, t11.pointerType, a21.forEachTool), r11 = this._findManipulatorByKey(i15, a21.forEachTool);
        if (t(r11) || !r11.interactive)
          break;
        const n23 = t11.native.shiftKey;
        r11.events.emit("double-click", { screenPoint: e12, button: t11.button, pointerType: t11.pointerType, shiftKey: n23, stopPropagation: s14 });
        break;
      }
      case "immediate-double-click": {
        const e12 = n10(t11), i15 = this._intersect(e12, t11.pointerType, a21.forEachTool), r11 = this._findManipulatorByKey(i15, a21.forEachTool);
        if (t(r11) || !r11.interactive)
          break;
        const n23 = t11.native.shiftKey;
        r11.events.emit("immediate-double-click", { screenPoint: e12, button: t11.button, pointerType: t11.pointerType, shiftKey: n23, stopPropagation: s14 });
        break;
      }
    }
    this._onFocusChange(a21.forEachTool);
  }
  _ungrabManipulatorBeforeDragging(t11, e12, o15) {
    t11.grabbing = false, t11.events.emit("grab-changed", { action: "end", pointerType: o15.pointerType, screenPoint: n10(o15) }), this._grabbedManipulators.forEach(({ key: o16 }, i15) => {
      o16.tool === e12 && e12.manipulators.findById(o16.manipulatorId) === t11 && this._grabbedManipulators.delete(i15);
    });
  }
  _handlePointerEnd(t11, e12) {
    const o15 = o(this._grabbedManipulators.get(t11.pointerId), ({ key: t12 }) => t12), n23 = this._findManipulatorByKey(o15, e12.forEachTool);
    r(n23) && !n23.dragging && (1 === this._grabbedManipulators.size && 0 === this._draggedManipulators.size && this._revertToActiveTool && (e12.setActiveTool(this._currentlyActiveTool), this._revertToActiveTool = false, this._currentlyActiveTool = null), n23.grabbing && (n23.grabbing = false, n23.events.emit("grab-changed", { action: "end", pointerType: t11.pointerType, screenPoint: n10(t11) })), this._grabbedManipulators.delete(t11.pointerId));
  }
  _cursorFromMap(e12, o15) {
    let r11 = null;
    return n3(e12, ({ key: t11 }) => {
      const e13 = this._findManipulatorByKey(t11, o15);
      return !!(r(e13) && e13.interactive && "cursor" in e13 && e13.cursor) && (r11 = e13.cursor, true);
    }), r11;
  }
  _onFocusChange(t11) {
    this._updateCursor(t11), this._updateFocusedManipulatorTools(t11);
  }
  _updateCursor(t11) {
    this._grabbedManipulators.size > 0 ? this._cursor = this._cursorFromMap(this._grabbedManipulators, t11) || "grabbing" : this._hoveredManipulators.size > 0 ? this._cursor = this._cursorFromMap(this._hoveredManipulators, t11) || "pointer" : this._cursor = null;
  }
  _updateFocusedManipulatorTools(t11) {
    const e12 = /* @__PURE__ */ new Set();
    this._grabbedManipulators.forEach(({ key: { tool: t12 } }) => {
      e12.add(t12);
    }), this._hoveredManipulators.forEach(({ key: { tool: t12 } }) => {
      e12.add(t12);
    }), t11((t12) => {
      t12.hasFocusedManipulators = e12.has(t12);
    });
  }
  clearPointers(t11, e12, r11 = true, n23) {
    const a21 = (e13) => e13.tool === t11 && (t(n23) || e13.manipulatorId === n23);
    this._grabbedManipulators.forEach(({ key: t12, pointerType: o15 }, r12) => {
      if (a21(t12)) {
        this._grabbedManipulators.delete(r12);
        const n24 = this._findManipulatorByKey(t12, e12);
        r(n24) && (n24.grabbing = false, n24.events.emit("grab-changed", { action: "end", screenPoint: null, pointerType: o15 }));
      }
    }), this._draggedManipulators.forEach(({ key: t12 }, o15) => {
      if (a21(t12)) {
        this._draggedManipulators.delete(o15);
        const r12 = this._findManipulatorByKey(t12, e12);
        r(r12) && (r12.dragging = false, r12.events.emit("drag", { action: "cancel" }));
      }
    }), r11 && this._hoveredManipulators.forEach(({ key: t12 }, o15) => {
      if (a21(t12)) {
        this._hoveredManipulators.delete(o15);
        const r12 = this._findManipulatorByKey(t12, e12);
        r(r12) && (r12.hovering = false);
      }
    }), this._onFocusChange(e12);
  }
  _intersect(t11, e12, i15) {
    let r11 = null;
    return i15((i16) => {
      if (null == i16.manipulators || !r6(i16))
        return false;
      const n23 = i16.manipulators.intersect(t11, e12);
      return !t(n23) && (r11 = { manipulatorId: n23.id, tool: i16 }, true);
    }), r11;
  }
  updateHoveredStateFromKnownPointers(t11) {
    this._pointerLocations.forEach((e12, o15) => {
      this._updateHoveredStateForPointerAtScreenPosition(c(e12.x, e12.y), o15, e12.pointerType, t11);
    });
  }
  handleHoverEvent(t11, e12) {
    "pointer-up" !== t11.type && "immediate-click" !== t11.type && "pointer-move" !== t11.type || !c4(t11.pointerType) || this._updateHoveredStateForPointerAtScreenPosition(n10(t11), t11.pointerId, t11.pointerType, e12);
  }
  _updateHoveredStateForPointerAtScreenPosition(t11, e12, o15, a21) {
    const s14 = this._intersect(t11, o15, a21);
    let l11 = this._findManipulatorByKey(s14, a21);
    const p17 = o(this._hoveredManipulators.get(e12), ({ key: t12 }) => t12), c14 = this._findManipulatorByKey(p17, a21);
    r(l11) && !l11.interactive && (l11 = null), c14 !== l11 && (r(c14) && (c14.hovering = false), r(l11) ? (l11.hovering = true, this._hoveredManipulators.set(e12, { key: e2(s14) })) : this._hoveredManipulators.delete(e12), this._onFocusChange(a21));
  }
  _findManipulatorByKey(t11, e12) {
    return this._findToolAndManipulatorByKey(t11, e12, h5) ? h5.manipulator : null;
  }
  _findToolAndManipulatorByKey(t11, e12, r11) {
    return t(t11) ? null : (r11.tool = null, r11.manipulator = null, e12((e13) => {
      if (e13 !== t11.tool || null == e13.manipulators || !r6(e13))
        return false;
      const o15 = e13.manipulators.findById(t11.manipulatorId);
      return !!r(o15) && (r11.manipulator = o15, r11.tool = e13, true);
    }), r11.manipulator ? r11 : null);
  }
};
function c4(t11) {
  return "mouse" === t11;
}
function u3(t11) {
  return "mouse" !== t11.pointerType || 0 === t11.button;
}
function d3(t11) {
  return !!t11.native.shiftKey;
}
var h5 = { manipulator: null, tool: null };

// node_modules/@arcgis/core/views/ToolViewManager.js
var E2 = s.getLogger("esri.views.ToolViewManager");
var g5 = "attached";
var w3 = "tools";
var y3 = class extends d2 {
  constructor(t11) {
    super(t11), this._manipulatorState = new p7(), this.tools = new j3(), this.cursor = null, this._forEachTool = (t12) => {
      for (const o15 of this.tools.items)
        if (t12(o15))
          return;
    };
  }
  initialize() {
    this.handles.add([this.view.on(r5, (t11) => {
      this._handleInputEvent(t11);
    }, g2.TOOL), ...i8(this.tools), this.tools.on("before-remove", ({ item: t11 }) => {
      this._manipulatorState.clearPointers(t11, this._forEachTool);
    }), this.tools.on("change", () => {
      this._refreshToolWatchers();
    })]);
  }
  destroy() {
    this.detach(), this.handles.removeAll();
  }
  set activeTool(t11) {
    if (r(t11) && !this.view.ready)
      return void E2.error("Cannot set active tool while view is not ready.");
    if (t11 === this.activeTool)
      return;
    const o15 = this.activeTool;
    this._set("activeTool", t11), r(o15) && o15.deactivate(), r(t11) && t11.activate(), this._removeIncompleteTools(t11);
    const e12 = t(this.activeTool);
    for (const i15 of this.tools) {
      i15.setEditableFlag(o7.MANAGER, e12 || i15 === this.activeTool);
      const t12 = r6(i15);
      !e12 && t12 || this._manipulatorState.clearPointers(i15, this._forEachTool, !t12);
    }
    this._updateCursor();
  }
  get updating() {
    var _a;
    return this.updatingHandles.updating || this.tools.some((t11) => t11.updating) || (((_a = this.textures) == null ? void 0 : _a.updating) ?? false);
  }
  attach() {
    "3d" === this.view.type ? (this._set("textures", new i7(this.view._stage, this.view.resourceController.scheduler)), this.handles.add([l3(() => {
      const { state: t11 } = this.view;
      return "camera" in t11 && t11.camera;
    }, () => {
      this._forEachManipulator((t11) => {
        null != t11.onViewChange && t11.onViewChange();
      });
    }), this.view.elevationProvider.on("elevation-change", (t11) => {
      this._forEachManipulator((o15) => {
        null != o15.onElevationChange && o15.onElevationChange(t11);
      });
    }), n(() => this._set("textures", l(this.textures)))], g5)) : this.handles.add(l3(() => this.view.extent, () => {
      this._forEachManipulator((t11) => {
        null != t11.onViewChange && t11.onViewChange();
      });
    }));
  }
  detach() {
    r(this.activeTool) && (this.activeTool = null), this.tools.removeAll(), this.handles.remove(g5);
  }
  _forEachManipulator(t11) {
    this._forEachTool((o15) => {
      o15.manipulators && o15.manipulators.forEach(({ manipulator: e12 }) => t11(e12, o15));
    });
  }
  _handleInputEvent(t11) {
    let o15 = false;
    const e12 = { ...t11, stopPropagation: () => {
      o15 = true, t11.stopPropagation();
    } };
    r(this.activeTool) ? this.activeTool.handleInputEvent && this.activeTool.handleInputEvent(e12) : this._forEachTool((t12) => {
      !o15 && t12.visible && t12.handleInputEvent(e12);
    }), !o15 && "key-down" === t11.type && "Escape" === t11.key && this.activeTool && (t11.stopPropagation(), this.activeTool = null), this._manipulatorState.handleInputEvent(e12, { forEachTool: this._forEachTool, activeTool: this.activeTool, setActiveTool: (t12) => {
      this.activeTool = t12;
    }, view: this.view }), !o15 && r(this.activeTool) && this.activeTool.handleInputEventAfter(e12), this._manipulatorState.handleHoverEvent(e12, this._forEachTool), this._updateCursor();
  }
  _refreshToolWatchers() {
    this.handles.remove(w3), this._forEachTool((t11) => {
      if (t11 instanceof y) {
        const o15 = l3(() => [t11.cursor, t11.visible, t11.editable], () => {
          r6(t11) || this._manipulatorState.clearPointers(t11, this._forEachTool), this._updateCursor();
        });
        this.handles.add(o15, w3);
      }
      t11.manipulators && this.handles.add(t11.manipulators.on("change", (o15) => {
        o15.removed.forEach(({ id: o16 }) => {
          this._manipulatorState.clearPointers(t11, this._forEachTool, true, o16);
        }), this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
      }), w3);
    }), this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
  }
  _updateCursor() {
    const t11 = this._manipulatorState.cursor;
    let o15 = t11;
    this._forEachTool((e12) => !(!r(e12.cursor) || !e12.visible || !t(t11) && e12.preferManipulatorCursor) && (o15 = e12.cursor, true)), this._get("cursor") !== o15 && this._set("cursor", o15);
  }
  _removeIncompleteTools(t11) {
    this.tools.filter((o15) => (t(t11) || o15 !== t11) && !o15.created && o15.removeIncompleteOnCancel).forEach((t12) => {
      this.tools.remove(t12);
    });
  }
};
e([d({ constructOnly: true, nonNullable: true })], y3.prototype, "view", void 0), e([d({ readOnly: true, nonNullable: true })], y3.prototype, "textures", void 0), e([d({ value: null })], y3.prototype, "activeTool", null), e([d({ readOnly: true, type: j3 })], y3.prototype, "tools", void 0), e([d({ readOnly: true })], y3.prototype, "cursor", void 0), e([d({ readOnly: true })], y3.prototype, "updating", null), y3 = e([n4("esri.views.ToolViewManager")], y3);
var j5 = y3;

// node_modules/@arcgis/core/views/input/gamepad/GamepadInputDevice.js
var o10 = class extends y {
  constructor(e12) {
    super(), this.nativeIndex = null, this._detectedDeviceType = "unknown", "standard" === e12.mapping ? this._detectedDeviceType = "standard" : n13.test(e12.id) ? this._detectedDeviceType = "spacemouse" : this._detectedDeviceType = "unknown", this.nativeIndex = e12.index;
  }
  get native() {
    return (navigator.getGamepads ? navigator.getGamepads() : [])[this.nativeIndex];
  }
  get deviceType() {
    return this._detectedDeviceType;
  }
  get axisThreshold() {
    return a9[this.deviceType];
  }
};
e([d({ nonNullable: true, readOnly: true })], o10.prototype, "nativeIndex", void 0), e([d({ type: String, readOnly: true })], o10.prototype, "deviceType", null), e([d({ type: Number, readOnly: true })], o10.prototype, "axisThreshold", null), o10 = e([n4("esri.views.input.gamepad.GamepadInputDevice")], o10);
var n13 = new RegExp("^(3dconnexion|space(mouse|navigator|pilot|explorer))", "i");
var a9 = { standard: 0.15, spacemouse: 0.025, unknown: 0 };
var i9 = o10;

// node_modules/@arcgis/core/views/input/gamepad/GamepadSettings.js
var c5 = class extends y {
  constructor(...e12) {
    super(...e12), this.devices = new j3(), this.enabledFocusMode = "document";
  }
};
e([d({ type: j3.ofType(i9), readOnly: true })], c5.prototype, "devices", void 0), e([d({ type: ["document", "view", "none"] })], c5.prototype, "enabledFocusMode", void 0), c5 = e([n4("esri.views.input.gamepad.GamepadSettings")], c5);
var i10 = c5;

// node_modules/@arcgis/core/views/input/Input.js
var p8 = class extends y {
  constructor() {
    super(...arguments), this.gamepad = new i10();
  }
};
e([d({ readOnly: true })], p8.prototype, "gamepad", void 0), p8 = e([n4("esri.views.input.Input")], p8);
var a10 = p8;

// node_modules/@arcgis/core/views/navigation/gamepad/GamepadSettings.js
var s5 = class extends y {
  constructor(o15) {
    super(o15), this.enabled = true, this.device = null, this.mode = "pan", this.tiltDirection = "forward-down", this.velocityFactor = 1;
  }
};
e([d({ type: Boolean, nonNullable: true })], s5.prototype, "enabled", void 0), e([d({ type: i9 })], s5.prototype, "device", void 0), e([d({ type: ["pan", "zoom"], nonNullable: true })], s5.prototype, "mode", void 0), e([d({ type: ["forward-down", "forward-up"], nonNullable: true })], s5.prototype, "tiltDirection", void 0), e([d({ type: Number, nonNullable: true })], s5.prototype, "velocityFactor", void 0), s5 = e([n4("esri.views.navigation.gamepad.GamepadSettings")], s5);
var a11 = s5;

// node_modules/@arcgis/core/views/navigation/Navigation.js
var a12 = class extends y {
  constructor(o15) {
    super(o15), this.browserTouchPanEnabled = true, this.gamepad = new a11(), this.momentumEnabled = true, this.mouseWheelZoomEnabled = true;
  }
};
e([d({ type: Boolean })], a12.prototype, "browserTouchPanEnabled", void 0), e([d({ type: a11, nonNullable: true })], a12.prototype, "gamepad", void 0), e([d({ type: Boolean })], a12.prototype, "momentumEnabled", void 0), e([d({ type: Boolean })], a12.prototype, "mouseWheelZoomEnabled", void 0), a12 = e([n4("esri.views.navigation.Navigation")], a12);
var p9 = a12;

// node_modules/@arcgis/core/views/support/projectionUtils.js
var n14;
var s6 = null;
async function c6(r11) {
  s6 || (s6 = import("./geometryServiceUtils-62N2A7H4.js").then((e12) => n14 = e12)), await s6, f(r11);
}
async function p10(e12, s14, a21, m8) {
  if (!e12)
    return null;
  const l11 = e12.spatialReference;
  return en() || An(l11, s14) ? rn(e12, s14) : n14 ? n14.projectGeometry(e12, s14, a21, m8) : (await Promise.race([c6(m8), tn(m8)]), p10(e12, s14, a21, m8));
}

// node_modules/@arcgis/core/views/support/DefaultsFromMap.js
var h6 = class extends y {
  constructor(e12) {
    super(e12), this.required = { tileInfo: false, heightModelInfo: false, extent: false }, this.defaultSpatialReference = null, this.userSpatialReference = null, this.sourcePreloadCount = 10, this.priorityCollection = null, this.requiresExtentInSpatialReference = true, this.suspended = false, this._projectExtentTask = { task: null, input: null, output: null, spatialReference: null };
  }
  destroy() {
    this._projectExtentTask.task && (this._projectExtentTask.task = h(this._projectExtentTask.task)), this._set("map", null);
  }
  get ready() {
    return !this._spatialReferenceTask.updating && !this._tileInfoTask.updating && !this._extentTask.updating;
  }
  get heightModelInfoReady() {
    return !this._heightModelInfoTask.updating;
  }
  get spatialReference() {
    return r(this.userSpatialReference) ? this.userSpatialReference : e2(this._spatialReferenceTask.spatialReference);
  }
  get extent() {
    return e2(this._extentTask.extent);
  }
  get heightModelInfo() {
    return e2(this._heightModelInfoTask.heightModelInfo);
  }
  get vcsWkid() {
    return e2(this._heightModelInfoTask.vcsWkid);
  }
  get latestVcsWkid() {
    return e2(this._heightModelInfoTask.latestVcsWkid);
  }
  get viewingMode() {
    return t(this.userSpatialReference) || this.userSpatialReference.equals(e2(this._spatialReferenceTask.spatialReference)) ? e2(this._spatialReferenceTask.viewingMode) : null;
  }
  get tileInfo() {
    return e2(this._tileInfoTask.tileInfo);
  }
  get mapCollections() {
    var _a, _b, _c, _d;
    const e12 = (_a = this.map) == null ? void 0 : _a.call(this), t11 = [];
    return r(this.priorityCollection) && t11.push(this.priorityCollection), t11.push({ parent: e12 == null ? void 0 : e12.basemap, layers: (_b = e12 == null ? void 0 : e12.basemap) == null ? void 0 : _b.baseLayers }, { layers: e12 == null ? void 0 : e12.layers }, { parent: e12 == null ? void 0 : e12.ground, layers: (_c = e12 == null ? void 0 : e12.ground) == null ? void 0 : _c.layers }, { parent: e12 == null ? void 0 : e12.basemap, layers: (_d = e12 == null ? void 0 : e12.basemap) == null ? void 0 : _d.referenceLayers }), t11;
  }
  get _allLayers() {
    return this._collectLayers(this.mapCollections);
  }
  get _spatialReferenceTask() {
    if (this.suspended)
      return this._get("_spatialReferenceTask") ?? { updating: false };
    const { layers: e12, updating: t11 } = this._allLayers;
    let a21 = null;
    for (const i15 of e12) {
      const e13 = this._getSupportedSpatialReferences(i15);
      if (e13.length > 0) {
        const t12 = this._narrowDownSpatialReferenceCandidates(a21, e13);
        r(t12) && (a21 = t12);
      }
      if (r(a21) && 1 === a21.length)
        break;
    }
    if (t11 && (t(a21) || 1 !== a21.length))
      return { updating: true };
    const s14 = this._pickSpatialReferenceCandidate(a21);
    return { spatialReference: r(s14) ? s14.spatialReference : null, viewingMode: r(s14) ? s14.viewingMode : null, updating: false };
  }
  get _tileInfoTask() {
    var _a, _b, _c, _d, _e, _f, _g;
    if (!this.required.tileInfo)
      return this._get("_tileInfoTask") ?? { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const { layers: e12, updating: t11 } = this._collectLayers([{ parent: (_b = (_a = this.map) == null ? void 0 : _a.call(this)) == null ? void 0 : _b.basemap, layers: (_e = (_d = (_c = this.map) == null ? void 0 : _c.call(this)) == null ? void 0 : _d.basemap) == null ? void 0 : _e.baseLayers }, { layers: (_g = (_f = this.map) == null ? void 0 : _f.call(this)) == null ? void 0 : _g.layers }]);
    if (e12 && e12.length > 0 && "tileInfo" in e12[0]) {
      const t12 = e12[0].tileInfo;
      return { tileInfo: t12 && t12.spatialReference.equals(this.spatialReference) ? t12 : null, updating: false };
    }
    return { updating: t11 };
  }
  get _heightModelInfoTask() {
    var _a, _b, _c;
    if (!this.required.heightModelInfo || this.suspended && ((_a = this._get("_heightModelInfoTask")) == null ? void 0 : _a.heightModelInfo))
      return this._get("_heightModelInfoTask") ?? { updating: false };
    const { layers: e12, updating: t11 } = this._allLayers;
    for (const a21 of e12)
      if (g3(a21)) {
        const e13 = h4(a21);
        if (e13)
          return { heightModelInfo: e13, vcsWkid: (_b = a21.spatialReference) == null ? void 0 : _b.vcsWkid, latestVcsWkid: (_c = a21.spatialReference) == null ? void 0 : _c.latestVcsWkid, updating: false };
      }
    return { updating: t11 };
  }
  get _extentCandidatesTask() {
    if (this.suspended || !this.required.extent)
      return this._get("_extentCandidatesTask") ?? { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const e12 = this._allLayers, t11 = e12.updating, a21 = [];
    for (const s14 of e12.layers) {
      const e13 = "fullExtents" in s14 && s14.fullExtents || (r(s14.fullExtent) ? [s14.fullExtent] : []), t12 = this.requiresExtentInSpatialReference ? null : e13[0], i15 = e13.find((e14) => e14.spatialReference.equals(this.spatialReference)) ?? t12;
      if (i15)
        return { candidates: [{ extent: i15, layer: s14 }], updating: false };
      if (this._getSupportedSpatialReferences(s14).length > 0)
        for (const n23 of e13)
          a21.push({ extent: n23, layer: s14 });
    }
    return { candidates: a21, updating: t11 };
  }
  get _extentTask() {
    const { candidates: e12, updating: t11 } = this._extentCandidatesTask;
    if (t11)
      return { updating: t11 };
    if (t(e12) || 0 === e12.length)
      return { updating: false };
    if (!this.spatialReference)
      return { updating: this._spatialReferenceTask.updating };
    const s14 = this._pickExtentCandidate(e12), l11 = this.spatialReference;
    return s14.extent.equals(this._projectExtentTask.input) && l11.equals(this._projectExtentTask.spatialReference) ? { extent: this._projectExtentTask.output, updating: r(this._projectExtentTask.task) && !this._projectExtentTask.task.finished } : (r(this._projectExtentTask.task) && (this._projectExtentTask.task = h(this._projectExtentTask.task)), this._projectExtentTask = { input: s14.extent.clone(), output: null, spatialReference: l11.clone(), task: O(async (e13) => {
      try {
        const t12 = await p10(s14.extent, l11, s14.layer.portalItem, e13);
        this._projectExtentTask = { ...this._projectExtentTask, task: null, output: t12 };
      } catch (t12) {
        if (p(e13))
          return;
        this._projectExtentTask = { ...this._projectExtentTask, task: null };
      }
    }) }, { updating: true });
  }
  _narrowDownSpatialReferenceCandidates(e12, t11) {
    if (t(e12))
      return t11;
    const a21 = [], s14 = (e13, t12) => r(e13) ? r(t12) ? e13 === t12 && e13 : e13 : t12;
    for (const n23 of e12)
      for (const e13 of t11) {
        if (!n23.spatialReference.equals(e13.spatialReference))
          continue;
        const t12 = s14(n23.viewingMode, e13.viewingMode);
        if (false !== t12) {
          a21.push({ spatialReference: n23.spatialReference, viewingMode: t12 });
          break;
        }
      }
    return a21.length > 0 ? a21 : null;
  }
  _pickSpatialReferenceCandidate(e12) {
    const t11 = this.defaultSpatialReference;
    return t(e12) || e12.length < 1 ? r(t11) ? { spatialReference: t11, viewingMode: null } : null : (r(t11) && e12.length > 1 && e12.some(({ spatialReference: e13 }) => e13.equals(t11)) && (e12 = e12.filter(({ spatialReference: e13 }) => e13.equals(t11))), e12.length > 1 && e12.some(({ viewingMode: e13 }) => e13 !== l4.Local) && (e12 = e12.filter(({ viewingMode: e13 }) => e13 !== l4.Local)), e12[0]);
  }
  _getSupportedSpatialReferences(e12) {
    const t11 = "supportedSpatialReferences" in e12 && e12.supportedSpatialReferences || (e12.spatialReference ? [e12.spatialReference] : []);
    if (0 === t11.length)
      return [];
    const a21 = [];
    for (const s14 of t11) {
      const t12 = this.getSpatialReferenceSupport({ spatialReference: s14, layer: e12 });
      if (r(t12)) {
        const e13 = r(t12.constraints) ? t12.constraints : [{ spatialReference: s14, viewingMode: null }];
        for (const { spatialReference: t13, viewingMode: n23 } of e13)
          (!this.requiresExtentInSpatialReference || t(this.userSpatialReference) || t13.equals(this.userSpatialReference)) && a21.push({ spatialReference: t13, viewingMode: n23 });
      }
    }
    return a21;
  }
  _pickExtentCandidate(e12) {
    const t11 = this.spatialReference;
    return e12.find(({ extent: e13 }) => t11.equals(e13.spatialReference)) || e12[0];
  }
  _collectLayers(e12) {
    var _a;
    if ("loaded" !== this._loadMaybe((_a = this.map) == null ? void 0 : _a.call(this)))
      return { layers: [], updating: true };
    const t11 = { layers: [], preloading: -1, updating: false };
    for (const a21 of e12)
      if (this._collectCollection(a21, t11), t11.preloading === this.sourcePreloadCount)
        break;
    return { layers: t11.layers, updating: t11.updating };
  }
  _collectCollection(e12, t11) {
    if (e12.layers) {
      switch (this._loadMaybe(e12.parent)) {
        case "loading":
          return t11.updating = true, void ++t11.preloading;
        case "failed":
          return;
      }
      for (const a21 of e12.layers) {
        switch (this._loadMaybe(a21)) {
          case "failed":
            continue;
          case "loading":
            t11.updating = true, ++t11.preloading;
            break;
          case "loaded":
            t11.updating || t11.layers.push(a21), "layers" in a21 && this._collectCollection({ layers: a21.layers }, t11);
        }
        if (t11.preloading === this.sourcePreloadCount)
          break;
      }
    }
  }
  _loadMaybe(e12) {
    return e12 && "loadStatus" in e12 ? "not-loaded" === e12.loadStatus ? (e12.load(), "loading") : e12.loadStatus : "loaded";
  }
};
e([d()], h6.prototype, "required", void 0), e([d({ constructOnly: true })], h6.prototype, "map", void 0), e([d({ constructOnly: true })], h6.prototype, "getSpatialReferenceSupport", void 0), e([d()], h6.prototype, "defaultSpatialReference", void 0), e([d()], h6.prototype, "userSpatialReference", void 0), e([d()], h6.prototype, "sourcePreloadCount", void 0), e([d()], h6.prototype, "priorityCollection", void 0), e([d()], h6.prototype, "requiresExtentInSpatialReference", void 0), e([d()], h6.prototype, "suspended", void 0), e([d({ readOnly: true })], h6.prototype, "ready", null), e([d({ readOnly: true })], h6.prototype, "heightModelInfoReady", null), e([d({ readOnly: true })], h6.prototype, "spatialReference", null), e([d({ readOnly: true })], h6.prototype, "extent", null), e([d({ readOnly: true })], h6.prototype, "heightModelInfo", null), e([d({ readOnly: true })], h6.prototype, "vcsWkid", null), e([d({ readOnly: true })], h6.prototype, "latestVcsWkid", null), e([d({ readOnly: true })], h6.prototype, "viewingMode", null), e([d({ readOnly: true })], h6.prototype, "tileInfo", null), e([d({ readOnly: true })], h6.prototype, "mapCollections", null), e([d({ readOnly: true })], h6.prototype, "_allLayers", null), e([d({ readOnly: true })], h6.prototype, "_spatialReferenceTask", null), e([d({ readOnly: true })], h6.prototype, "_tileInfoTask", null), e([d({ readOnly: true })], h6.prototype, "_heightModelInfoTask", null), e([d({ readOnly: true })], h6.prototype, "_extentCandidatesTask", null), e([d()], h6.prototype, "_extentTask", null), e([d()], h6.prototype, "_projectExtentTask", void 0), h6 = e([n4("esri.views.support.DefaultsFromMap")], h6);

// node_modules/@arcgis/core/views/View.js
var U2;
var W = s.getLogger("esri.views.View");
var A2 = U2 = class extends a5(n5.EventedMixin(m(y))) {
  constructor(e12) {
    super(e12), this._userSpatialReference = null, this._cursor = null, this.allLayerViews = new p2({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, (_b = this.groundView) == null ? void 0 : _b.layerViews, this.layerViews, (_c = this.basemapView) == null ? void 0 : _c.referenceLayerViews];
    }, getChildrenFunction: (e13) => e13.layerViews }), this.groundView = null, this.animation = null, this.basemapView = null, this.fatalError = null, this.extent = null, this.graphics = new c3(), this.analyses = new n12(), this.navigating = false, this.typeSpecificPreconditionsReady = true, this.layerViews = new j3(), this.magnifier = new p6(), this.padding = { left: 0, top: 0, right: 0, bottom: 0 }, this.ready = false, this.spatialReferenceWarningDelay = 1e3, this.supportsGround = true, this.timeExtent = null, this.type = null, this.scale = null, this.updating = false, this.initialExtentRequired = true, this.input = new a10(), this.navigation = new p9(), this.layerViewManager = null, this.analysisViewManager = null, this.isHeightModelInfoRequired = false, this.width = null, this.height = null, this.resizing = false, this.suspended = false, this.viewEvents = new p3(this), this.persistableViewModels = new j3(), this._isValid = false, this._readyCycleForced = false, this.handles.add(l3(() => this.preconditionsReady, (e13) => {
      var _a, _b;
      e13 ? (this._currentSpatialReference = this.spatialReference, U2.views.add(this)) : (this._currentSpatialReference = null, U2.views.remove(this)), this.notifyChange("spatialReference"), !e13 && this.ready ? ((_a = this.layerViewManager) == null ? void 0 : _a.clear(), (_b = this.toolViewManager) == null ? void 0 : _b.detach(), r(this.analysisViewManager) && this.analysisViewManager.detach(), this._teardown()) : e13 && !this.ready && (this._startup(), r(this.analysisViewManager) && this.analysisViewManager.attach(), this.toolViewManager.attach());
    }, U));
  }
  initialize() {
    this.addResolvingPromise(this.validate().then(() => (this._isValid = true, j4(() => this.ready)))), this.basemapView = new p5({ view: this }), this.layerViewManager = new M4({ view: this, layerViewImporter: { importLayerView: (e12) => this.importLayerView(e12), hasLayerViewModule: (e12) => this.hasLayerViewModule(e12) }, supportsGround: this.supportsGround }), this.toolViewManager = new j5({ view: this }), this._setupSpatialReferenceLogger(), this.handles.add([l3(() => this.initialExtentRequired, (e12) => this.defaultsFromMap.required = { ...this.defaultsFromMap.required, extent: e12 }, { sync: true, initial: true }), l3(() => this.ready, (e12) => {
      this.defaultsFromMap && (this.defaultsFromMap.suspended = e12, this.defaultsFromMap.userSpatialReference = e12 ? this.spatialReference : this._userSpatialReference);
    }, { sync: true }), l3(() => this._userSpatialReference, (e12) => {
      this.defaultsFromMap && (this.defaultsFromMap.userSpatialReference = e12);
    }, { sync: true, initial: true })]);
  }
  _setupSpatialReferenceLogger() {
    let e12 = null;
    this.handles.add([l3(() => {
      var _a;
      return (_a = this.defaultsFromMap) == null ? void 0 : _a.ready;
    }, (t11) => {
      var _a;
      const i15 = ((_a = this.map) == null ? void 0 : _a.allLayers.length) > 0;
      if (t11 && !this.spatialReference && i15) {
        if (r(e12))
          return;
        const t12 = n(() => e12 = h(e12));
        e12 = O(async (t13) => {
          try {
            await L(this.spatialReferenceWarningDelay, null, t13);
          } catch {
            return;
          } finally {
            e12 = null;
          }
          W.warn("#spatialReference", "no spatial reference could be derived from the currently added map layers");
        }), this.handles.add(t12, "spatial-reference-logger-task");
      } else
        this.handles.remove("spatial-reference-logger-task");
    }, { sync: true })]);
  }
  destroy() {
    if (this.destroyed)
      return;
    this.viewEvents.destroy(), this.allLayerViews.destroy(), this.navigation && (this.navigation.destroy(), this._set("navigation", null)), this.graphics = l(this.graphics), this.analyses = l(this.analyses), this.handles.remove("defaultsFromMap"), this.defaultsFromMap.destroy(), this._set("defaultsFromMap", null), l(this.analysisViewManager), this.toolViewManager = l(this.toolViewManager), this.layerViewManager = l(this.layerViewManager), this.basemapView = l(this.basemapView), this.invalidate(), this._emitter.clear(), this.handles.removeAll();
    const e12 = this.map;
    this.map = null, e12 == null ? void 0 : e12.destroy();
  }
  _startup() {
    this._set("ready", true);
  }
  _teardown() {
    this._set("ready", false);
  }
  whenReady() {
    return Promise.resolve(this);
  }
  toMap() {
    return W.error("#toMap()", "Not implemented on this instance of View"), null;
  }
  get _defaultsFromMapSettings() {
    return {};
  }
  get defaultsFromMap() {
    return new h6({ required: { tileInfo: false, heightModelInfo: false, extent: false }, map: () => this.map, getSpatialReferenceSupport: (e12) => this.getSpatialReferenceSupport(e12), ...this._defaultsFromMapSettings });
  }
  get heightModelInfo() {
    return this.getDefaultHeightModelInfo();
  }
  get interacting() {
    return this.navigating;
  }
  get preconditionsReady() {
    var _a;
    return !(this.fatalError || !this._isValid || this._readyCycleForced || !this.map || m2.isLoadable(this.map) && !this.map.loaded || 0 === this.width || 0 === this.height || !this.spatialReference || !this._validateSpatialReference(this.spatialReference) || !this._currentSpatialReference && !((_a = this.defaultsFromMap) == null ? void 0 : _a.ready) || !this.typeSpecificPreconditionsReady);
  }
  set map(e12) {
    e12 !== this._get("map") && ((e12 == null ? void 0 : e12.destroyed) && (W.warn("#map", "The provided map is already destroyed", { map: e12 }), e12 = null), m2.isLoadable(e12) && e12.load().catch(() => {
    }), this.initialized && (this.forceReadyCycle(), this._currentSpatialReference = null), this._set("map", e12));
  }
  get spatialReference() {
    var _a, _b;
    let e12 = this._userSpatialReference || this._currentSpatialReference || this.getDefaultSpatialReference() || null;
    return e12 && ((_b = (_a = this.defaultsFromMap) == null ? void 0 : _a.required) == null ? void 0 : _b.heightModelInfo) && (e12 = e12.clone(), e12.vcsWkid = this.defaultsFromMap.vcsWkid, e12.latestVcsWkid = this.defaultsFromMap.latestVcsWkid), e12;
  }
  set spatialReference(e12) {
    const t11 = !E(e12, this._get("spatialReference"));
    this._set("_userSpatialReference", e12), t11 && (this._set("spatialReference", e12), this._spatialReferenceChanged(e12));
  }
  _spatialReferenceChanged(e12) {
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing;
  }
  get initialExtent() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.extent;
  }
  get cursor() {
    const e12 = this.toolViewManager ? this.toolViewManager.cursor : null;
    return r(e12) ? e12 : this._cursor || "default";
  }
  set cursor(e12) {
    this._cursor = e12, this.notifyChange("cursor");
  }
  get size() {
    return [this.width, this.height];
  }
  whenLayerView(e12) {
    return this.layerViewManager.whenLayerView(e12);
  }
  getDefaultSpatialReference() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.spatialReference;
  }
  getDefaultHeightModelInfo() {
    var _a;
    return (this.map && "heightModelInfo" in this.map ? this.map.heightModelInfo : void 0) ?? ((_a = this.defaultsFromMap) == null ? void 0 : _a.heightModelInfo) ?? null;
  }
  importLayerView(e12) {
    throw new s2("importLayerView() not implemented");
  }
  hasLayerViewModule(e12) {
    return false;
  }
  async validate() {
  }
  invalidate() {
    this._isValid = false;
  }
  getSpatialReferenceSupport() {
    return { constraints: null };
  }
  _validateSpatialReference(e12) {
    return r(this.getSpatialReferenceSupport({ spatialReference: e12 }));
  }
  when(e12, t11) {
    return this.isResolved() && !this.ready && W.warn("#when()", "Calling view.when() while the view is no longer ready but was already resolved once will resolve immediately. Use reactiveUtils.whenOnce(() => view.ready).then(...) instead."), super.when(e12, t11);
  }
  forceReadyCycle() {
    this.ready && (f2(() => false === this.preconditionsReady, () => this._readyCycleForced = false, { once: true }), this._readyCycleForced = true);
  }
  addAndActivateTool(e12) {
    this.toolViewManager.tools.add(e12), this.activeTool = e12;
  }
  tryFatalErrorRecovery() {
    this.fatalError = null;
  }
};
A2.views = new j3(), e([d()], A2.prototype, "_userSpatialReference", void 0), e([o6("toolViewManager.activeTool")], A2.prototype, "activeTool", void 0), e([d({ readOnly: true })], A2.prototype, "allLayerViews", void 0), e([d()], A2.prototype, "groundView", void 0), e([d()], A2.prototype, "animation", void 0), e([d()], A2.prototype, "basemapView", void 0), e([d({ readOnly: true })], A2.prototype, "_defaultsFromMapSettings", null), e([d()], A2.prototype, "defaultsFromMap", null), e([d()], A2.prototype, "fatalError", void 0), e([d({ type: M2 })], A2.prototype, "extent", void 0), e([d(a7(c3, "graphics"))], A2.prototype, "graphics", void 0), e([d(a7(n12, "analyses"))], A2.prototype, "analyses", void 0), e([d({ readOnly: true, type: v3 })], A2.prototype, "heightModelInfo", null), e([d({ readOnly: true })], A2.prototype, "interacting", null), e([d({ readOnly: true })], A2.prototype, "navigating", void 0), e([d({ readOnly: true, dependsOn: ["fatalError", "_isValid", "_readyCycleForced", "map", "map.loaded?", "width", "height", "spatialReference", "_currentSpatialReference", "defaultsFromMap.ready", "typeSpecificPreconditionsReady"] })], A2.prototype, "preconditionsReady", null), e([d({ readOnly: true })], A2.prototype, "typeSpecificPreconditionsReady", void 0), e([d({ type: j3, readOnly: true })], A2.prototype, "layerViews", void 0), e([d({ type: p6 })], A2.prototype, "magnifier", void 0), e([d({ value: null, type: L3 })], A2.prototype, "map", null), e([d()], A2.prototype, "padding", void 0), e([d({ readOnly: true })], A2.prototype, "ready", void 0), e([d({ type: k2 })], A2.prototype, "spatialReference", null), e([d()], A2.prototype, "spatialReferenceWarningDelay", void 0), e([d()], A2.prototype, "stationary", null), e([d({ readOnly: true })], A2.prototype, "supportsGround", void 0), e([d({ type: y2 })], A2.prototype, "timeExtent", void 0), e([o6("toolViewManager.tools")], A2.prototype, "tools", void 0), e([d()], A2.prototype, "toolViewManager", void 0), e([d({ readOnly: true })], A2.prototype, "type", void 0), e([d({ type: Number })], A2.prototype, "scale", void 0), e([d({ readOnly: true })], A2.prototype, "updating", void 0), e([d({ readOnly: true })], A2.prototype, "initialExtentRequired", void 0), e([d({ readOnly: true })], A2.prototype, "initialExtent", null), e([d()], A2.prototype, "cursor", null), e([d({ readOnly: true })], A2.prototype, "input", void 0), e([d({ type: p9, nonNullable: true })], A2.prototype, "navigation", void 0), e([d()], A2.prototype, "layerViewManager", void 0), e([d()], A2.prototype, "analysisViewManager", void 0), e([d()], A2.prototype, "width", void 0), e([d()], A2.prototype, "height", void 0), e([d({ readOnly: true })], A2.prototype, "resizing", void 0), e([d({ value: null, readOnly: true })], A2.prototype, "size", null), e([d({ readOnly: true })], A2.prototype, "suspended", void 0), e([d({ readOnly: true })], A2.prototype, "viewEvents", void 0), e([d({ readOnly: true })], A2.prototype, "persistableViewModels", void 0), e([d()], A2.prototype, "_isValid", void 0), e([d()], A2.prototype, "_readyCycleForced", void 0), e([d()], A2.prototype, "_currentSpatialReference", void 0), A2 = U2 = e([n4("esri.views.View")], A2);
var G = A2;

// node_modules/@arcgis/core/views/ViewAnimation.js
var p11 = class extends _ {
  constructor(t11) {
    super(t11), this.state = "running", this.target = null;
  }
  initialize() {
    this.addResolvingPromise(new Promise((t11, s14) => this._dfd = { resolve: t11, reject: s14 }));
  }
  get done() {
    return "finished" === this.state || "stopped" === this.state;
  }
  stop() {
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "stopped"), this._dfd.reject(new s2("ViewAnimation stopped")));
  }
  finish() {
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "finished"), this._dfd.resolve());
  }
  update(t11, s14) {
    s14 || (s14 = k(t11) ? "waiting-for-target" : "running"), this._set("target", t11), this._set("state", s14);
  }
};
e([d({ readOnly: true })], p11.prototype, "done", null), e([d({ readOnly: true, type: String })], p11.prototype, "state", void 0), e([d()], p11.prototype, "target", void 0), p11 = e([n4("esri.views.ViewAnimation")], p11), function(t11) {
  t11.State = { RUNNING: "running", STOPPED: "stopped", FINISHED: "finished", WAITING_FOR_TARGET: "waiting-for-target" };
}(p11 || (p11 = {}));
var n15 = p11;

// node_modules/@arcgis/core/views/support/WebGLRequirements.js
function i11(i15) {
  const s14 = l5(i15);
  if (!s14.available)
    return new s2("webgl:required", "WebGL is required but not supported.");
  if ("3d" === i15 && s14.majorPerformanceCaveat)
    return new s2("webgl:major-performance-caveat-detected", "Your WebGL implementation doesn't seem to support hardware accelerated rendering. Check your browser settings or if your GPU is in a blocklist.");
  if (!s14.supportsHighPrecisionFragment)
    return new s2("webgl:high-precision-fragment-required", "WebGL support for high precision fragment shaders is required but not supported.");
  if (!s14.supportsVertexShaderSamplers)
    return new s2("webgl:vertex-shader-samplers-required", "WebGL support for vertex shader samplers is required but not supported.");
  if (s14.type === o5.WEBGL1) {
    if (!s14.supportsElementIndexUint)
      return new s2("webgl:element-index-uint-required", "WebGL support for uint vertex indices is required but not supported.");
    if (!s14.supportsStandardDerivatives)
      return new s2("webgl:standard-derivatives-required", "WebGL support for standard derivatives is required but not supported.");
    if (!s14.supportsInstancedArrays)
      return new s2("webgl:instanced-arrays-required", "WebGL support for instanced rendering is required but not supported.");
  }
  return null;
}

// node_modules/@arcgis/core/views/2d/ViewState.js
var V2;
var G2 = [0, 0];
var O3 = V2 = class extends l2 {
  constructor(t11) {
    super(t11), this._viewpoint2D = { center: n9(), rotation: 0, scale: 0, spatialReference: null }, this.center = [0, 0], this.extent = new M2(), this.id = 0, this.inverseTransform = e7(), this.resolution = 0, this.rotation = 0, this.scale = 0, this.transform = e7(), this.transformNoRotation = e7(), this.displayMat3 = e8(), this.displayViewMat3 = e8(), this.viewMat3 = e8(), this.viewMat2d = n8(), this.worldScreenWidth = 0, this.size = [0, 0];
  }
  set pixelRatio(t11) {
    this._set("pixelRatio", t11), this._update();
  }
  set size(t11) {
    this._set("size", t11), this._update();
  }
  set viewpoint(t11) {
    if (t11) {
      const s14 = this._viewpoint2D, i15 = t11.targetGeometry;
      s14.center[0] = i15.x, s14.center[1] = i15.y, s14.rotation = t11.rotation, s14.scale = t11.scale, s14.spatialReference = i15.spatialReference;
    }
    this._update();
  }
  copy(t11) {
    const s14 = this.size, i15 = this.viewpoint;
    return i15 && s14 ? (this.viewpoint = Z(i15, t11.viewpoint), this._set("size", a4(s14, t11.size))) : (this.viewpoint = t11.viewpoint.clone(), this._set("size", [t11.size[0], t11.size[1]])), this._set("pixelRatio", t11.pixelRatio), this;
  }
  clone() {
    return new V2({ size: this.size, viewpoint: this.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
  toMap(t11, s14, i15) {
    return t7(s14) ? z(t11, s14, this.inverseTransform) : (G2[0] = s14, G2[1] = i15, z(t11, G2, this.inverseTransform));
  }
  toScreen(t11, s14, i15) {
    return t7(s14) ? z(t11, s14, this.transform) : (G2[0] = s14, G2[1] = i15, z(t11, G2, this.transform));
  }
  toScreenNoRotation(t11, s14, i15) {
    return t7(s14) ? z(t11, s14, this.transformNoRotation) : (G2[0] = s14, G2[1] = i15, z(t11, G2, this.transformNoRotation));
  }
  getScreenTransform(t11, s14) {
    const { center: i15 } = this._viewpoint2D, e12 = this._get("pixelRatio") || 1, o15 = this._get("size");
    return ut(t11, i15, o15, s14, 0, e12), t11;
  }
  _update() {
    const { center: t11, spatialReference: i15, scale: e12, rotation: o15 } = this._viewpoint2D, c14 = this._get("pixelRatio") || 1, m8 = this._get("size"), d9 = new u2({ targetGeometry: new j2(t11[0], t11[1], i15), scale: e12, rotation: o15 });
    if (this._set("viewpoint", d9), !m8 || !i15 || !e12)
      return;
    this.resolution = ot(d9), this.rotation = o15, this.scale = e12, this.spatialReference = i15, a4(this.center, t11);
    const y6 = 0 !== m8[0] ? 2 / m8[0] : 0, _6 = 0 !== m8[1] ? -2 / m8[1] : 0;
    s4(this.displayMat3, y6, 0, 0, 0, _6, 0, -1, 1, 1);
    const x = r3(this.viewMat3), z2 = t6(m8[0] / 2, m8[1] / 2), g10 = t6(-m8[0] / 2, -m8[1] / 2), b2 = o2(o15);
    M3(x, x, z2), h3(x, x, b2), M3(x, x, g10), i(this.displayViewMat3, this.displayMat3, x);
    const V3 = f4(this.viewMat2d, z2);
    return e5(V3, V3, b2), i2(V3, V3, g10), _2(this.extent, d9, m8), ft(this.transform, d9, m8, c14), r4(this.inverseTransform, this.transform), lt(this.transformNoRotation, d9, m8, c14), this.worldScreenWidth = yt(this.spatialReference, this.resolution), this._set("id", this.id + 1), this;
  }
};
e([d({ readOnly: true })], O3.prototype, "id", void 0), e([d({ value: 1, json: { write: true } })], O3.prototype, "pixelRatio", null), e([d({ json: { write: true } })], O3.prototype, "size", null), e([d()], O3.prototype, "spatialReference", void 0), e([d({ type: u2, json: { write: true } })], O3.prototype, "viewpoint", null), O3 = V2 = e([n4("esri.views.2d.ViewState")], O3);
var U3 = O3;

// node_modules/@arcgis/core/views/input/gamepad/GamepadState.js
function t8(t11) {
  const n23 = t11.native;
  return n23 ? { buttons: n23.buttons.map((t12) => t12.pressed ? t12.value ? t12.value : 1 : 0), axes: n23.axes.map((n24) => s7(n24, t11.axisThreshold)) } : { buttons: [], axes: [] };
}
function n16(t11, n23) {
  if (t11.axes.length !== n23.axes.length)
    return false;
  if (t11.buttons.length !== n23.buttons.length)
    return false;
  for (let e12 = 0; e12 < t11.axes.length; e12++)
    if (t11.axes[e12] !== n23.axes[e12])
      return false;
  for (let e12 = 0; e12 < t11.buttons.length; e12++)
    if (t11.buttons[e12] !== n23.buttons[e12])
      return false;
  return true;
}
function e9(t11) {
  for (let n23 = 0; n23 < t11.axes.length; n23++)
    if (0 !== t11.axes[n23])
      return false;
  for (let n23 = 0; n23 < t11.buttons.length; n23++)
    if (0 !== t11.buttons[n23])
      return false;
  return true;
}
function s7(t11, n23) {
  const e12 = Math.abs(t11);
  return e12 < n23 ? 0 : Math.sign(t11) * (e12 - n23) / (1 - n23);
}

// node_modules/@arcgis/core/views/input/gamepad/GamepadSource.js
var a13 = class {
  constructor(e12, t11) {
    this.element = e12, this.input = t11, this._hasEventListeners = false, this._onConnectGamepad = (e13) => {
      this._connectGamepad(e13.gamepad);
    }, this._onDisconnectGamepad = (e13) => {
      const t12 = e13.gamepad, i16 = t12.index, n24 = this.inputDevices[i16];
      n24 && (this._emitGamepadEvent(t12, t8(n24), false), this.inputDevices.splice(i16, 1), this.latestUpdate.splice(i16, 1), this.input.gamepad.devices.remove(n24), this.ensurePollingState());
    }, this.frameTask = null, this.latestUpdate = new Array(), this.inputDevices = new Array(), this.callback = null;
    const i15 = "getGamepads" in window.navigator, n23 = window.isSecureContext;
    this.supported = i15 && n23, this.supported && (this._forEachGamepad((e13) => this._connectGamepad(e13)), window.addEventListener("gamepadconnected", this._onConnectGamepad), window.addEventListener("gamepaddisconnected", this._onDisconnectGamepad), this.ensurePollingState());
  }
  destroy() {
    this.hasEventListeners = false, this.supported && (window.removeEventListener("gamepadconnected", this._onConnectGamepad), window.removeEventListener("gamepaddisconnected", this._onDisconnectGamepad));
  }
  set hasEventListeners(e12) {
    this._hasEventListeners !== e12 && (this._hasEventListeners = e12, this.ensurePollingState());
  }
  get eventsEnabled() {
    return this.supported && this.inputDevices.length > 0 && this._hasEventListeners;
  }
  set onEvent(e12) {
    this.callback = e12;
  }
  _connectGamepad(e12) {
    const s14 = new i9(e12);
    "unknown" !== s14.deviceType && (this.inputDevices[e12.index] = s14, this.input.gamepad.devices.add(s14)), this.ensurePollingState();
  }
  ensurePollingState() {
    this.eventsEnabled ? this._startPolling() : this._stopPolling();
  }
  _startPolling() {
    null == this.frameTask && (this.frameTask = A({ update: () => this._readGamepadState() }));
  }
  _stopPolling() {
    null != this.frameTask && (this.frameTask.remove(), this.frameTask = null, this.latestUpdate = new Array());
  }
  _readGamepadState() {
    const e12 = document.hasFocus(), t11 = this.element.contains(document.activeElement), a21 = "document" === this.input.gamepad.enabledFocusMode && !e12 || "view" === this.input.gamepad.enabledFocusMode && !t11;
    this._forEachGamepad((e13) => {
      const t12 = this.inputDevices[e13.index];
      if (!t12)
        return;
      const d9 = this.latestUpdate[e13.index], o15 = t8(t12), r11 = a21 || e9(o15);
      if (d9) {
        if (d9.timestamp === e13.timestamp)
          return;
        if (!d9.active && r11)
          return;
        if (n16(d9.state, o15))
          return;
      }
      this._emitGamepadEvent(e13, o15, !r11);
    });
  }
  _forEachGamepad(e12) {
    const t11 = window.navigator.getGamepads();
    for (let s14 = 0; s14 < t11.length; s14++) {
      const i15 = t11[s14];
      this._validate(i15) && e12(i15);
    }
  }
  _emitGamepadEvent(e12, t11, s14) {
    const i15 = this.latestUpdate[e12.index], n23 = i15 && i15.active;
    if (!n23 && !s14)
      return;
    const a21 = !n23 && s14 ? "start" : n23 && s14 ? "update" : "end";
    this.latestUpdate[e12.index] = { timestamp: e12.timestamp, state: t11, active: s14 }, this.callback && this.callback({ device: this.inputDevices[e12.index], state: t11, action: a21 });
  }
  _validate(e12) {
    if (!e12)
      return false;
    if (!e12.connected)
      return false;
    for (let t11 = 0; t11 < e12.axes.length; t11++)
      if (isNaN(e12.axes[t11]))
        return false;
    return true;
  }
};

// node_modules/@arcgis/core/views/input/BrowserEventSource.js
var o11 = a("trident");
var a14 = a("edge");
var s8 = a("chrome");
var r7 = a("ff");
var h7 = a("safari");
var l6 = { touchNone: "esri-view-surface--touch-none", touchPan: "esri-view-surface--touch-pan" };
var u4 = class {
  constructor(e12, t11) {
    this.input = t11, this._active = {}, this._activePointerCaptures = /* @__PURE__ */ new Set(), this._keyDownState = /* @__PURE__ */ new Set(), this._eventId = 1, this._browserTouchPanningEnabled = false, this._element = e12, e12.getAttribute("tabindex") || e12.setAttribute("tabindex", "0"), this._eventHandlers = { "key-down": this._handleKey, "key-up": this._handleKey, "pointer-down": this._handlePointer, "pointer-move": this._handlePointerPreventDefault, "pointer-up": this._handlePointerPreventDefault, "pointer-enter": this._handlePointer, "pointer-leave": this._handlePointer, "pointer-cancel": this._handlePointer, "mouse-wheel": this._handleMouseWheel, "pointer-capture-lost": this._handlePointerCaptureLost }, this._updateTouchAction(), this._element.addEventListener("keydown", this._preventAltKeyDefault), this._gamepadSource = new a13(e12, this.input), this._gamepadSource.onEvent = (e13) => this._callback("gamepad", e13);
  }
  destroy() {
    this._callback = null, this.activeEvents = null, this._activePointerCaptures.forEach((e12) => {
      this._releasePointerCaptureSafe(e12);
    }), this._gamepadSource && (this._gamepadSource.destroy(), this._gamepadSource = null), this._activePointerCaptures = null, this._removeTouchAction(), this._element.removeEventListener("keydown", this._preventAltKeyDefault);
  }
  get browserTouchPanningEnabled() {
    return this._browserTouchPanningEnabled;
  }
  set browserTouchPanningEnabled(e12) {
    this._browserTouchPanningEnabled = e12, this._updateTouchAction(), this._updateTouchEventHandling();
  }
  set onEventReceived(e12) {
    this._callback = e12;
  }
  set activeEvents(e12) {
    for (const t11 in this._active)
      if (!e12 || !e12.has(t11)) {
        const e13 = this._active[t11];
        this._element.removeEventListener(c7[t11], e13), delete this._active[t11];
      }
    e12 && e12.forEach((e13) => {
      if (!this._active[e13] && c7[e13]) {
        const t11 = (this._eventHandlers[e13] || this._handleDefault).bind(this, e13);
        this._element.addEventListener(c7[e13], t11), this._active[e13] = t11;
      }
    }), this._gamepadSource.hasEventListeners = e12 && e12.has("gamepad");
  }
  setPointerCapture(e12, t11) {
    t11 ? (this._element.setPointerCapture(e12.pointerId), this._activePointerCaptures.add(e12.pointerId)) : (this._releasePointerCaptureSafe(e12.pointerId), this._activePointerCaptures.delete(e12.pointerId));
  }
  _updateTouchAction() {
    this._element.classList.remove(this._browserTouchPanningEnabled ? l6.touchNone : l6.touchPan), this._element.classList.add(this._browserTouchPanningEnabled ? l6.touchPan : l6.touchNone);
  }
  _updateTouchEventHandling() {
    this._browserTouchPanningEnabled ? this._element.addEventListener("touchmove", this._preventMultiTouchPanning) : this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _removeTouchAction() {
    this._element.classList.remove(l6.touchNone), this._element.classList.remove(l6.touchPan), this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _releasePointerCaptureSafe(e12) {
    try {
      if (this._element.hasPointerCapture && !this._element.hasPointerCapture(e12))
        return;
      this._element.releasePointerCapture(e12);
    } catch (t11) {
    }
  }
  _updateNormalizedPointerLikeEvent(e12, t11) {
    const n23 = i4(this._element, e12);
    return u4.test.disableSubpixelCoordinates && (n23.x = Math.round(n23.x), n23.y = Math.round(n23.y)), t11.x = n23.x, t11.y = n23.y, t11;
  }
  _handleKey(e12, n23) {
    const i15 = a8(n23);
    i15 && "key-up" === e12 && this._keyDownState.delete(i15);
    const o15 = { native: n23, key: i15, repeat: i15 && this._keyDownState.has(i15) };
    i15 && "key-down" === e12 && this._keyDownState.add(o15.key), this._callback(e12, o15);
  }
  _handlePointer(e12, t11) {
    const n23 = this._updateNormalizedPointerLikeEvent(t11, { native: t11, x: 0, y: 0, pointerType: t11.pointerType, button: t11.button, buttons: t11.buttons, eventId: this._eventId++ });
    this._callback(e12, n23);
  }
  _handlePointerPreventDefault(e12, t11) {
    const n23 = this._updateNormalizedPointerLikeEvent(t11, { native: t11, x: 0, y: 0, pointerType: t11.pointerType, button: t11.button, buttons: t11.buttons, eventId: this._eventId++ });
    t11.preventDefault(), this._callback(e12, n23);
  }
  _handleMouseWheel(e12, t11) {
    let n23 = t11.deltaY;
    switch (t11.deltaMode) {
      case 0:
        (o11 || a14) && (n23 = n23 / document.documentElement.clientHeight * 600);
        break;
      case 1:
        n23 *= 30;
        break;
      case 2:
        n23 *= 900;
    }
    o11 || a14 ? n23 *= 0.7 : s8 || h7 ? n23 *= 0.6 : r7 && (n23 *= 1.375);
    const i15 = 100, l11 = Math.abs(n23);
    if (l11 > i15) {
      const e13 = 0.02;
      n23 = n23 / l11 * 200 / (1 + Math.exp(-e13 * (l11 - i15)));
    }
    const u9 = this._updateNormalizedPointerLikeEvent(t11, { native: t11, x: 0, y: 0, deltaY: n23 });
    this._callback(e12, u9);
  }
  _handlePointerCaptureLost(e12, t11) {
    this._activePointerCaptures.delete(t11.pointerId), this._handleDefault(e12, t11);
  }
  _handleDefault(e12, t11) {
    const n23 = { native: t11 };
    t11.preventDefault(), this._callback(e12, n23);
  }
  _preventAltKeyDefault(e12) {
    "Alt" === e12.key && e12.preventDefault();
  }
  _preventMultiTouchPanning(e12) {
    e12.touches.length > 1 && e12.preventDefault();
  }
};
u4.test = { disableSubpixelCoordinates: false };
var c7 = { "key-down": "keydown", "key-up": "keyup", "pointer-down": "pointerdown", "pointer-up": "pointerup", "pointer-move": "pointermove", "mouse-wheel": "wheel", "pointer-capture-got": "gotpointercapture", "pointer-capture-lost": "lostpointercapture", "context-menu": "contextmenu", "pointer-enter": "pointerenter", "pointer-leave": "pointerleave", "pointer-cancel": "pointercancel", focus: "focus", blur: "blur" };

// node_modules/@arcgis/core/views/input/handlers/PreventContextMenu.js
var e10 = class extends i3 {
  constructor() {
    super(true), this.registerIncoming("context-menu", (t11) => {
      t11.data.native.preventDefault();
    });
  }
};

// node_modules/@arcgis/core/views/input/recognizers/support.js
function e11(t11, e12) {
  return Math.abs(e12.x - t11.x) + Math.abs(e12.y - t11.y);
}
function n17(t11, e12) {
  const n23 = e12.x - t11.x, r11 = e12.y - t11.y;
  return Math.sqrt(n23 * n23 + r11 * r11);
}
function r8(e12, n23) {
  if (n23 ? (n23.radius = 0, n23.center.x = 0, n23.center.y = 0) : n23 = { radius: 0, center: c() }, 0 === e12.length)
    return n23;
  if (1 === e12.length)
    return n23.center.x = e12[0].x, n23.center.y = e12[0].y, n23;
  if (2 === e12.length) {
    const [t11, r12] = e12, [c15, s15] = [r12.x - t11.x, r12.y - t11.y];
    return n23.radius = Math.sqrt(c15 * c15 + s15 * s15) / 2, n23.center.x = (t11.x + r12.x) / 2, n23.center.y = (t11.y + r12.y) / 2, n23;
  }
  let r11 = 0, c14 = 0;
  for (let t11 = 0; t11 < e12.length; t11++)
    r11 += e12[t11].x, c14 += e12[t11].y;
  r11 /= e12.length, c14 /= e12.length;
  const s14 = e12.map((t11) => t11.x - r11), x = e12.map((t11) => t11.y - c14);
  let o15 = 0, y6 = 0, a21 = 0, h10 = 0, l11 = 0, u9 = 0, i15 = 0;
  for (let t11 = 0; t11 < s14.length; t11++) {
    const e13 = s14[t11], n24 = x[t11], r12 = e13 * e13, c15 = n24 * n24;
    o15 += r12, y6 += c15, a21 += e13 * n24, h10 += r12 * e13, l11 += c15 * n24, u9 += e13 * c15, i15 += n24 * r12;
  }
  const f7 = 0.5 * (h10 + u9), g10 = 0.5 * (l11 + i15), M5 = o15 * y6 - a21 * a21, d9 = (f7 * y6 - g10 * a21) / M5, m8 = (o15 * g10 - a21 * f7) / M5, p17 = c(d9 + r11, m8 + c14);
  return { radius: Math.sqrt(d9 * d9 + m8 * m8 + (o15 + y6) / e12.length), center: p17 };
}

// node_modules/@arcgis/core/views/input/recognizers/SingleAndDoubleClick.js
var s9 = { maximumDoubleClickDelay: 250, maximumDoubleClickDistance: 10, maximumDoubleTouchDelay: 350, maximumDoubleTouchDistance: 35 };
var a15 = class extends i3 {
  constructor(t11 = s9.maximumDoubleClickDelay, i15 = s9.maximumDoubleClickDistance, o15 = s9.maximumDoubleTouchDelay, l11 = s9.maximumDoubleTouchDistance, a21 = t3) {
    super(false), this.maximumDoubleClickDelay = t11, this.maximumDoubleClickDistance = i15, this.maximumDoubleTouchDelay = o15, this.maximumDoubleTouchDistance = l11, this._clock = a21, this._pointerState = /* @__PURE__ */ new Map(), this._click = this.registerOutgoing("click"), this._doubleClick = this.registerOutgoing("double-click"), this.registerIncoming("immediate-click", this._handleImmediateClick.bind(this)), this.registerIncoming("pointer-drag", this._handlePointerDrag.bind(this)), this.registerIncoming("drag", this._handleDrag.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((e12) => e12.doubleClickTimeout = a2(e12.doubleClickTimeout));
  }
  get hasPendingInputs() {
    return n3(this._pointerState, (e12) => null != e12.doubleClickTimeout);
  }
  _pointerId(e12) {
    const t11 = e12.native;
    return "mouse" === t11.pointerType ? `${t11.pointerId}:${t11.button}` : `${t11.pointerType}`;
  }
  _handleImmediateClick(e12) {
    const t11 = e12.data, i15 = this._pointerId(t11), o15 = this._pointerState.get(i15);
    if (o15) {
      const s14 = "touch" === t11.native.pointerType ? this.maximumDoubleTouchDistance : this.maximumDoubleClickDistance;
      e11(o15.event.data, t11) > s14 ? (this._clearDoubleClickTimeout(i15, true), this._startClick(e12)) : (this._clearDoubleClickTimeout(i15, false), this._doubleClick.emit(o15.event.data, void 0, o15.event.modifiers));
    } else
      this._startClick(e12);
  }
  _startClick(e12) {
    const t11 = this._pointerId(e12.data), i15 = "touch" === e12.data.native.pointerType ? this.maximumDoubleTouchDelay : this.maximumDoubleClickDelay;
    this._pointerState.set(t11, { event: e12, doubleClickTimeout: this._clock.setTimeout(() => this._doubleClickTimeoutExceeded(t11), i15) }), this.refreshHasPendingInputs();
  }
  _handlePointerDrag(e12) {
    const t11 = this._pointerId(e12.data.currentEvent);
    this._clearDoubleClickTimeout(t11, true);
  }
  _handleDrag(e12) {
    const t11 = this._pointerId(e12.data.pointer);
    this._clearDoubleClickTimeout(t11, true);
  }
  _clearDoubleClickTimeout(e12, t11) {
    const i15 = this._pointerState.get(e12);
    i15 && (i15.doubleClickTimeout.remove(), i15.doubleClickTimeout = null, t11 && this._doubleClickTimeoutExceeded(e12), this._pointerState.delete(e12), this.refreshHasPendingInputs());
  }
  _doubleClickTimeoutExceeded(e12) {
    const t11 = this._pointerState.get(e12);
    this._click.emit(t11.event.data, void 0, t11.event.modifiers), t11.doubleClickTimeout = null, this._pointerState.delete(e12), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/Drag.js
var s10 = class extends i3 {
  constructor(t11) {
    super(false), this.navigationTouch = t11, this.startStateModifiers = /* @__PURE__ */ new Set(), this.activePointerMap = /* @__PURE__ */ new Map(), this.isDragging = false, this.isCurrentDragSuppressed = false, this.drag = this.registerOutgoing("drag"), this.registerIncoming("pointer-drag", this._handlePointerDrag.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-capture-lost", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-cancel", this._handlePointerUpAndPointerLost.bind(this));
  }
  _createPayload(t11, e12, i15, n23) {
    return { action: t11, pointerType: this.pointerType, button: this.mouseButton, buttons: e12.buttons, timestamp: n23, pointers: o12(this.activePointerMap), pointer: e12, angle: i15.angle, radius: i15.radius, center: i15.center };
  }
  _addPointer(t11) {
    const e12 = t11.native.pointerId, i15 = a16(this.activePointerMap).angle, n23 = { event: t11, initialAngle: 0, lastAngle: 0 };
    this.activePointerMap.set(e12, n23);
    const s14 = h8(n23, r9(this.activePointerMap));
    n23.initialAngle = s14, n23.lastAngle = s14, this._updatePointerAngles(i15);
  }
  _updatePointer(t11) {
    if (t11 && null == t11.x && null == t11.y)
      return;
    const e12 = t11.native.pointerId, i15 = this.activePointerMap.get(e12);
    i15 ? i15.event = t11 : this._addPointer(t11);
  }
  _removePointer(t11) {
    const e12 = a16(this.activePointerMap).angle;
    this.activePointerMap.delete(t11), this._updatePointerAngles(e12);
  }
  _updatePointerAngles(t11) {
    const e12 = a16(this.activePointerMap);
    this.activePointerMap.forEach((i15) => {
      i15.initialAngle = h8(i15, e12) - t11, i15.lastAngle = h8(i15, e12) - t11;
    });
  }
  _emitEvent(t11, e12, i15) {
    const n23 = a16(this.activePointerMap);
    this.drag.emit(this._createPayload(t11, e12, n23, i15), void 0, this.startStateModifiers);
  }
  _handlePointerUpAndPointerLost(t11) {
    const i15 = t11.data.native.pointerId, n23 = n2(t11.timestamp);
    this.activePointerMap.get(i15) && (1 === this.activePointerMap.size ? (this._updatePointer(t11.data), !this.isCurrentDragSuppressed && this._emitEvent("end", t11.data, n23), this.isDragging = false, this.isCurrentDragSuppressed = false, this._removePointer(i15)) : (this._removePointer(i15), this._emitEvent("removed", t11.data, n2(t11.timestamp))));
  }
  _handlePointerDrag(t11) {
    const i15 = t11.data, n23 = i15.currentEvent, s14 = n2(t11.timestamp);
    switch (i15.action) {
      case "start":
      case "update":
        this.isDragging ? this.activePointerMap.has(n23.native.pointerId) ? (this._updatePointer(n23), !this.isCurrentDragSuppressed && this._emitEvent("update", n23, s14)) : (this._addPointer(n23), this._emitEvent("added", n23, s14), this.isCurrentDragSuppressed = this.isSuppressed) : (this._updatePointer(n23), this.pointerType = t11.data.startEvent.pointerType, this.mouseButton = t11.data.startEvent.button, this.startStateModifiers = t11.modifiers, this.isDragging = true, this.isCurrentDragSuppressed = this.isSuppressed, !this.isCurrentDragSuppressed && this._emitEvent("start", n23, s14));
    }
  }
  get isSuppressed() {
    return this.navigationTouch && !this.navigationTouch.browserTouchPanEnabled && "touch" === this.pointerType && 1 === this.activePointerMap.size;
  }
};
function r9(e12) {
  const i15 = [];
  return e12.forEach((e13) => {
    i15.push(c(e13.event.x, e13.event.y));
  }), r8(i15);
}
function a16(t11) {
  const e12 = r9(t11);
  let i15 = 0;
  return t11.forEach((t12) => {
    let n23 = h8(t12, e12), s14 = n23 - t12.lastAngle;
    for (; s14 > Math.PI; )
      s14 -= 2 * Math.PI;
    for (; s14 < -Math.PI; )
      s14 += 2 * Math.PI;
    n23 = t12.lastAngle + s14, t12.lastAngle = n23;
    const r11 = n23 - t12.initialAngle;
    i15 += r11;
  }), i15 /= t11.size || 1, { angle: i15, radius: e12.radius, center: e12.center };
}
function o12(t11) {
  const e12 = /* @__PURE__ */ new Map();
  return t11.forEach((t12, i15) => e12.set(i15, t12.event)), e12;
}
function h8(t11, e12) {
  const i15 = t11.event, n23 = i15.x - e12.center.x, s14 = i15.y - e12.center.y;
  return Math.atan2(s14, n23);
}
var p12;
!function(t11) {
  t11[t11.Left = 0] = "Left", t11[t11.Middle = 1] = "Middle", t11[t11.Right = 2] = "Right", t11[t11.Back = 3] = "Back", t11[t11.Forward = 4] = "Forward", t11[t11.Undefined = -1] = "Undefined";
}(p12 || (p12 = {}));

// node_modules/@arcgis/core/views/input/recognizers/ImmediateDoubleClick.js
var n18 = class extends i3 {
  constructor(e12 = s9.maximumDoubleClickDelay, o15 = s9.maximumDoubleClickDistance, n23 = s9.maximumDoubleTouchDelay, a21 = s9.maximumDoubleTouchDistance, s14 = t3) {
    super(false), this.maximumDoubleClickDelay = e12, this.maximumDoubleClickDistance = o15, this.maximumDoubleTouchDelay = n23, this.maximumDoubleTouchDistance = a21, this._clock = s14, this._pointerState = /* @__PURE__ */ new Map(), this._immediateDoubleClick = this.registerOutgoing("immediate-double-click"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", (t11) => {
      this._handlePointerLoss(t11, "pointer-up");
    }), this.registerIncoming("pointer-capture-lost", (t11) => {
      this._handlePointerLoss(t11, "pointer-capture-lost");
    }), this.registerIncoming("pointer-cancel", (t11) => {
      this._handlePointerLoss(t11, "pointer-cancel");
    });
  }
  onUninstall() {
    this._pointerState.forEach((t11) => {
      t11.immediateDoubleClick && t11.immediateDoubleClick.timeoutHandle.remove();
    }), super.onUninstall();
  }
  _handlePointerDown(t11) {
    const e12 = t11.data, i15 = this._pointerId(e12);
    if (!this._pointerState.has(i15)) {
      const t12 = { downButton: e12.native.button, immediateDoubleClick: null };
      this._pointerState.set(i15, t12), this.startCapturingPointer(e12.native);
    }
  }
  _handlePointerLoss(t11, e12) {
    const i15 = t11.data, n23 = this._pointerId(i15), a21 = this._pointerState.get(n23);
    if (a21 && "pointer-up" === e12 && a21.downButton === i15.native.button) {
      const e13 = a21.immediateDoubleClick;
      if (e13) {
        e13.timeoutHandle.remove();
        const n24 = "touch" === t11.data.native.pointerType ? this.maximumDoubleTouchDistance : this.maximumDoubleClickDistance;
        e11(e13, t11.data) > n24 ? this._startImmediateDoubleClick(t11, a21) : (this._immediateDoubleClick.emit(t11.data, void 0, e13.modifiers), this._removeState(i15));
      } else
        this._startImmediateDoubleClick(t11, a21);
    }
  }
  _startImmediateDoubleClick(t11, e12) {
    const i15 = "touch" === t11.data.native.pointerType ? this.maximumDoubleTouchDelay : this.maximumDoubleClickDelay;
    e12.immediateDoubleClick = { x: t11.data.x, y: t11.data.y, modifiers: t11.modifiers, timeoutHandle: this._clock.setTimeout(() => this._removeState(t11.data), i15) };
  }
  _pointerId(t11) {
    const e12 = t11.native;
    return "mouse" === e12.pointerType ? `${e12.pointerId}:${e12.button}` : `${e12.pointerType}`;
  }
  _removeState(t11) {
    const e12 = this._pointerId(t11);
    this._pointerState.delete(e12), this.stopCapturingPointer(t11.native), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/PointerClickHoldAndDrag.js
var n19 = { maximumClickDelay: 300, movementUntilMouseDrag: 1.5, movementUntilPenDrag: 6, movementUntilTouchDrag: 6, holdDelay: 500 };
var o13 = class extends i3 {
  constructor(e12 = n19.maximumClickDelay, i15 = n19.movementUntilMouseDrag, o15 = n19.movementUntilPenDrag, r11 = n19.movementUntilTouchDrag, s14 = n19.holdDelay, a21 = t3) {
    super(false), this.maximumClickDelay = e12, this.movementUntilMouseDrag = i15, this.movementUntilPenDrag = o15, this.movementUntilTouchDrag = r11, this.holdDelay = s14, this._clock = a21, this._pointerState = /* @__PURE__ */ new Map(), this._pointerDrag = this.registerOutgoing("pointer-drag"), this._immediateClick = this.registerOutgoing("immediate-click"), this._pointerHold = this.registerOutgoing("hold"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", (t11) => {
      this._handlePointerLoss(t11, "pointer-up");
    }), this.registerIncoming("pointer-capture-lost", (t11) => {
      this._handlePointerLoss(t11, "pointer-capture-lost");
    }), this.registerIncoming("pointer-cancel", (t11) => {
      this._handlePointerLoss(t11, "pointer-cancel");
    }), this._moveHandle = this.registerIncoming("pointer-move", this._handlePointerMove.bind(this)), this._moveHandle.pause();
  }
  onUninstall() {
    this._pointerState.forEach((t11) => {
      null != t11.holdTimeout && (t11.holdTimeout.remove(), t11.holdTimeout = null);
    }), super.onUninstall();
  }
  _handlePointerDown(t11) {
    const e12 = t11.data, i15 = e12.native.pointerId;
    let n23 = null;
    0 === this._pointerState.size && (n23 = this._clock.setTimeout(() => {
      const e13 = this._pointerState.get(i15);
      if (e13) {
        if (!e13.isDragging) {
          const i16 = e13.previousEvent;
          this._pointerHold.emit(i16, void 0, t11.modifiers), e13.holdEmitted = true;
        }
        e13.holdTimeout = null;
      }
    }, this.holdDelay));
    const o15 = { startEvent: e12, previousEvent: e12, startTimestamp: t11.timestamp, isDragging: false, downButton: e12.native.button, holdTimeout: n23, modifiers: /* @__PURE__ */ new Set() };
    this._pointerState.set(i15, o15), this.startCapturingPointer(e12.native), this._moveHandle.resume(), this._pointerState.size > 1 && this._startDragging(t11);
  }
  _createPointerDragData(t11, e12, i15) {
    return { action: t11, startEvent: e12.startEvent, previousEvent: e12.previousEvent, currentEvent: i15 };
  }
  _handlePointerMove(t11) {
    const e12 = t11.data, n23 = e12.native.pointerId, o15 = this._pointerState.get(n23);
    if (o15) {
      if (o15.isDragging)
        this._pointerDrag.emit(this._createPointerDragData("update", o15, e12), void 0, o15.modifiers);
      else {
        n17(e12, o15.startEvent) > this._getDragThreshold(e12.native.pointerType) && this._startDragging(t11);
      }
      o15.previousEvent = e12;
    }
  }
  _getDragThreshold(t11) {
    switch (t11) {
      case "touch":
        return this.movementUntilTouchDrag;
      case "pen":
        return this.movementUntilPenDrag;
      default:
        return this.movementUntilMouseDrag;
    }
  }
  _startDragging(t11) {
    const e12 = t11.data, i15 = e12.native.pointerId;
    this._pointerState.forEach((n23) => {
      null != n23.holdTimeout && (n23.holdTimeout.remove(), n23.holdTimeout = null), n23.isDragging || (n23.modifiers = t11.modifiers, n23.isDragging = true, i15 === n23.startEvent.native.pointerId ? this._pointerDrag.emit(this._createPointerDragData("start", n23, e12)) : this._pointerDrag.emit(this._createPointerDragData("start", n23, n23.previousEvent), t11.timestamp));
    });
  }
  _handlePointerLoss(t11, e12) {
    const i15 = t11.data, n23 = i15.native.pointerId, o15 = this._pointerState.get(n23);
    if (o15) {
      if (null != o15.holdTimeout && (o15.holdTimeout.remove(), o15.holdTimeout = null), o15.isDragging)
        this._pointerDrag.emit(this._createPointerDragData("end", o15, "pointer-up" === e12 ? i15 : o15.previousEvent), void 0, o15.modifiers);
      else if ("pointer-up" === e12 && o15.downButton === i15.native.button) {
        t11.timestamp - o15.startTimestamp <= this.maximumClickDelay && !o15.holdEmitted && this._immediateClick.emit(i15);
      }
      this._pointerState.delete(n23), this.stopCapturingPointer(i15.native), 0 === this._pointerState.size && this._moveHandle.pause();
    }
  }
};

// node_modules/@arcgis/core/views/ui/Component.js
function i12(t11) {
  return t11 && "nodeType" in t11;
}
function d4(t11) {
  return t11 && "function" == typeof t11.render;
}
var c8 = { component: "esri-component" };
var p13 = class extends y {
  constructor() {
    super(...arguments), this.widget = null;
  }
  destroy() {
    this.widget && this.widget.destroy(), this.node = null;
  }
  get id() {
    return this.get("widget.id") || this.get("node.id");
  }
  set node(t11) {
    const o15 = this._get("node");
    t11 !== o15 && (t11 && t11.classList.add(c8.component), o15 && o15.classList.remove(c8.component), this._set("node", t11));
  }
  castNode(t11) {
    return t11 ? "string" == typeof t11 || i12(t11) ? (this._set("widget", null), e3(t11)) : (d4(t11) && !t11.domNode && (t11.domNode = document.createElement("div")), this._set("widget", t11), t11.domNode) : (this._set("widget", null), null);
  }
};
e([d({ dependsOn: [] })], p13.prototype, "id", null), e([d()], p13.prototype, "node", null), e([s3("node")], p13.prototype, "castNode", null), e([d({ readOnly: true })], p13.prototype, "widget", void 0), p13 = e([n4("esri.views.ui.Component")], p13);
var l7 = p13;

// node_modules/@arcgis/core/views/ui/UI.js
var m5 = { left: 0, top: 0, bottom: 0, right: 0 };
var u5 = { bottom: 30, top: 15, right: 15, left: 15 };
var f5 = "manual";
var _3 = { ui: "esri-ui", corner: "esri-ui-corner", innerContainer: "esri-ui-inner-container", manualContainer: "esri-ui-manual-container", cornerContainer: "esri-ui-corner-container", topLeft: "esri-ui-top-left", topRight: "esri-ui-top-right", bottomLeft: "esri-ui-bottom-left", bottomRight: "esri-ui-bottom-right" };
function g6(t11) {
  return t11 && !t11._started && "function" == typeof t11.postMixInProperties && "function" == typeof t11.buildRendering && "function" == typeof t11.postCreate && "function" == typeof t11.startup;
}
function y4(t11) {
  const o15 = t11, i15 = "object" == typeof o15 && null !== o15 && Object.getPrototypeOf(o15);
  return (null === i15 || i15 === Object.prototype) && ("component" in o15 || "index" in o15 || "position" in o15) ? t11 : null;
}
function C2(t11, { top: o15, bottom: i15, left: e12, right: n23 }) {
  t11.style.top = o15, t11.style.bottom = i15, t11.style.left = e12, t11.style.right = n23;
}
var v5 = class extends n5.EventedAccessor {
  constructor(t11) {
    super(t11), this._cornerNameToContainerLookup = {}, this._positionNameToContainerLookup = {}, this._components = new Array(), this._componentToKey = /* @__PURE__ */ new Map(), this._handles = new u(), this.view = null, this._applyViewPadding = () => {
      const t12 = this.container;
      t12 && C2(t12, this._toPxPosition(this._getViewPadding()));
    }, this._applyUIPadding = () => {
      const t12 = this._innerContainer;
      t12 && C2(t12, this._toPxPosition(this.padding));
    }, this._initContainers();
  }
  initialize() {
    this._handles.add([l3(() => {
      var _a;
      return [(_a = this.view) == null ? void 0 : _a.padding, this.container];
    }, this._applyViewPadding, h2), l3(() => this.padding, this._applyUIPadding, h2)]);
  }
  destroy() {
    this.container = null;
    for (const t11 of this._components)
      t11.destroy();
    this._components.length = 0, this._handles.destroy(), this._componentToKey.clear();
  }
  set container(t11) {
    const i15 = this._get("container");
    t11 !== i15 && (t11 && (t11.classList.add(_3.ui), n7(t11), this._attachContainers(t11)), i15 && (i15.classList.remove(_3.ui), C2(i15, { top: "", bottom: "", left: "", right: "" }), t4(i15)), this._set("container", t11));
  }
  get height() {
    const t11 = this.get("view.height") || 0;
    if (0 === t11)
      return t11;
    const o15 = this._getViewPadding(), i15 = o15.top + o15.bottom;
    return Math.max(t11 - i15, 0);
  }
  get padding() {
    return this._get("padding");
  }
  set padding(t11) {
    t11 ? this._override("padding", t11) : this._clearOverride("padding");
  }
  castPadding(t11) {
    return "number" == typeof t11 ? { bottom: t11, top: t11, right: t11, left: t11 } : { ...u5, ...t11 };
  }
  get width() {
    const t11 = this.get("view.width") || 0;
    if (0 === t11)
      return t11;
    const o15 = this._getViewPadding(), i15 = o15.left + o15.right;
    return Math.max(t11 - i15, 0);
  }
  add(t11, o15) {
    let i15, e12;
    if (Array.isArray(t11))
      return void t11.forEach((t12) => this.add(t12, o15));
    const n23 = y4(t11);
    n23 && ({ index: i15, position: o15, component: t11, key: e12 } = n23), o15 && "object" == typeof o15 && ({ index: i15, key: e12, position: o15 } = o15), !t11 || o15 && !this._isValidPosition(o15) || this._add(t11, o15, i15, e12);
  }
  remove(t11, o15) {
    if (!t11)
      return;
    if (Array.isArray(t11))
      return t11.map((t12) => this.remove(t12, o15));
    const i15 = this._find(t11);
    if (i15) {
      const e12 = this._componentToKey;
      if (e12.has(t11) && e12.get(t11) !== o15)
        return;
      const n23 = this._components.indexOf(i15);
      return i15.node.parentNode && i15.node.parentNode.removeChild(i15.node), this._componentToKey.delete(t11), this._components.splice(n23, 1)[0];
    }
  }
  empty(t11) {
    if (Array.isArray(t11))
      return t11.map((t12) => this.empty(t12)).reduce((t12, o15) => t12.concat(o15));
    if ((t11 = t11 || f5) === f5) {
      return Array.prototype.slice.call(this._manualContainer.children).filter((t12) => !t12.classList.contains(_3.corner)).map((t12) => this.remove(t12));
    }
    return this._isValidPosition(t11) ? Array.prototype.slice.call(this._cornerNameToContainerLookup[t11].children).map(this.remove, this) : null;
  }
  move(t11, o15) {
    if (Array.isArray(t11) && t11.forEach((t12) => this.move(t12, o15)), !t11)
      return;
    let i15;
    const e12 = y4(t11) || y4(o15);
    if (e12 && (i15 = e12.index, o15 = e12.position, t11 = e12.component || t11), o15 && !this._isValidPosition(o15))
      return;
    const n23 = this.remove(t11);
    n23 && this.add(n23, { position: o15, index: i15 });
  }
  find(t11) {
    if (!t11)
      return null;
    const o15 = this._findById(t11);
    return o15 && (o15.widget || o15.node);
  }
  getPosition(t11) {
    for (const o15 in this._positionNameToContainerLookup) {
      if (this._positionNameToContainerLookup[o15].contains(t11))
        return o15;
    }
    return null;
  }
  _add(t11, o15, i15, e12) {
    t11 instanceof l7 || (t11 = new l7({ node: t11 })), this._place({ component: t11, position: o15, index: i15 }), this._components.push(t11), e12 && this._componentToKey.set(t11, e12);
  }
  _find(t11) {
    return t11 ? t11 instanceof l7 ? this._findByComponent(t11) : "string" == typeof t11 ? this._findById(t11) : this._findByNode(t11.domNode || t11) : null;
  }
  _getViewPadding() {
    return this.get("view.padding") || m5;
  }
  _attachContainers(t11) {
    t11.appendChild(this._innerContainer), t11.appendChild(this._manualContainer);
  }
  _initContainers() {
    const t11 = document.createElement("div");
    t11.classList.add(_3.innerContainer), t11.classList.add(_3.cornerContainer);
    const o15 = document.createElement("div");
    o15.classList.add(_3.innerContainer), o15.classList.add(_3.manualContainer);
    const i15 = document.createElement("div");
    i15.classList.add(_3.topLeft), i15.classList.add(_3.corner), t11.appendChild(i15);
    const e12 = document.createElement("div");
    e12.classList.add(_3.topRight), e12.classList.add(_3.corner), t11.appendChild(e12);
    const n23 = document.createElement("div");
    n23.classList.add(_3.bottomLeft), n23.classList.add(_3.corner), t11.appendChild(n23);
    const r11 = document.createElement("div");
    r11.classList.add(_3.bottomRight), r11.classList.add(_3.corner), t11.appendChild(r11), this._innerContainer = t11, this._manualContainer = o15;
    const s14 = f3();
    this._cornerNameToContainerLookup = { "top-left": i15, "top-right": e12, "bottom-left": n23, "bottom-right": r11, "top-leading": s14 ? e12 : i15, "top-trailing": s14 ? i15 : e12, "bottom-leading": s14 ? r11 : n23, "bottom-trailing": s14 ? n23 : r11 }, this._positionNameToContainerLookup = { manual: o15, ...this._cornerNameToContainerLookup };
  }
  _isValidPosition(t11) {
    return !!this._positionNameToContainerLookup[t11];
  }
  _place(t11) {
    const o15 = t11.component, e12 = t11.position || f5, n23 = t11.index, r11 = this._positionNameToContainerLookup[e12], s14 = n23 > -1;
    if (g6(o15.widget) && o15.widget.startup(), !s14)
      return void r11.appendChild(o15.node);
    const a21 = Array.prototype.slice.call(r11.children);
    if (0 === n23)
      return void (r11.firstChild ? o4(o15.node, r11.firstChild) : r11.appendChild(o15.node));
    n23 >= a21.length ? r11.appendChild(o15.node) : o4(o15.node, a21[n23]);
  }
  _toPxPosition(t11) {
    return { top: this._toPxUnit(t11.top), left: this._toPxUnit(t11.left), right: this._toPxUnit(t11.right), bottom: this._toPxUnit(t11.bottom) };
  }
  _toPxUnit(t11) {
    return 0 === t11 ? "0" : t11 + "px";
  }
  _findByComponent(t11) {
    let o15, i15 = null;
    return this._components.some((e12) => (o15 = e12 === t11, o15 && (i15 = e12), o15)), i15;
  }
  _findById(t11) {
    let o15, i15 = null;
    return this._components.some((e12) => (o15 = e12.id === t11, o15 && (i15 = e12), o15)), i15;
  }
  _findByNode(t11) {
    let o15, i15 = null;
    return this._components.some((e12) => (o15 = e12.node === t11, o15 && (i15 = e12), o15)), i15;
  }
};
e([d()], v5.prototype, "container", null), e([d()], v5.prototype, "height", null), e([d({ value: u5 })], v5.prototype, "padding", null), e([s3("padding")], v5.prototype, "castPadding", null), e([d()], v5.prototype, "view", void 0), e([d()], v5.prototype, "width", null), v5 = e([n4("esri.views.ui.UI")], v5);
var L5 = v5;

// node_modules/@arcgis/core/widgets/Attribution/AttributionViewModel.js
function d5(t11, e12) {
  return t11 && "copyright" in t11 && (!e12 || "function" == typeof t11.originOf && "user" === t11.originOf("copyright"));
}
function m6(t11, e12) {
  return t11.length !== e12.length || t11.some((t12, i15) => t12.text !== e12[i15].text);
}
function f6(t11, e12, i15) {
  if (!i15 || !e12)
    return;
  t11.find((t12) => t12.layerView === e12 && t12.text === i15) || t11.push({ text: i15, layerView: e12 });
}
function y5(t11) {
  return "bing-maps" === t11.type;
}
var b = [];
var g7 = class extends d2 {
  constructor(t11) {
    super(t11), this._clear = () => {
      this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.handles.remove("suspension"), this.notifyChange("state");
    }, this._pendingAttributions = /* @__PURE__ */ new Set(), this._fetchedAttributionData = /* @__PURE__ */ new Map(), this.items = new j3(), this.view = null, this._allLayerViewsChange = (t12) => {
      this.handles.remove("suspension");
      const e12 = this.get("view.allLayerViews");
      e12 && this.handles.add(e12.map((t13) => l3(() => {
        var _a;
        return [t13.suspended, (_a = t13.layer) == null ? void 0 : _a.attributionVisible];
      }, () => this._updateAttributionItems())), "suspension"), t12 && t12.removed && t12.removed.forEach((t13) => {
        this._pendingAttributions.delete(t13), this._fetchedAttributionData.delete(t13);
      }), this._updateAttributionItems();
    }, this.handles.add([a3(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.allLayerViews;
    }, "change", (t12) => this._allLayerViewsChange(t12), { onListenerAdd: () => this._allLayerViewsChange(), onListenerRemove: this._clear }), f2(() => {
      var _a;
      return true === ((_a = this.view) == null ? void 0 : _a.stationary);
    }, () => this._updateAttributionItems())]);
  }
  destroy() {
    this.view = null, this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.items.removeAll();
  }
  get state() {
    return this.get("view.ready") ? this._pendingAttributions.size > 0 ? "loading" : "ready" : "disabled";
  }
  _updateAttributionItems() {
    const t11 = this.get("view.allLayerViews");
    b.length = 0, t11 ? (t11.forEach((t12) => {
      var _a;
      if (t12.suspended || !((_a = t12.layer) == null ? void 0 : _a.attributionVisible))
        return;
      const e12 = t12.layer;
      if (d5(e12, "user"))
        return void f6(b, t12, e12.copyright);
      if (e12.hasAttributionData) {
        if (this._fetchedAttributionData.has(t12)) {
          const i16 = this._fetchedAttributionData.get(t12);
          return void (i16 ? f6(b, t12, this._getDynamicAttribution(i16, this.view, e12)) : d5(e12) && f6(b, t12, e12.copyright));
        }
        return void this._fetchAttributionData(t12);
      }
      const i15 = e12.get("portalItem.accessInformation");
      f6(b, t12, i15 || e12.copyright);
    }), m6(this.items, b) && (this.items.removeAll(), this.items.addMany(b)), b.length = 0, this.notifyChange("state")) : this._clear();
  }
  async _fetchAttributionData(t11) {
    if (this._pendingAttributions.has(t11))
      return;
    this._pendingAttributions.add(t11);
    const i15 = await a6(t11.layer.fetchAttributionData());
    if (this._pendingAttributions.has(t11)) {
      const e12 = i15.ok ? this._createContributionIndex(i15.value, y5(t11.layer)) : null;
      this._pendingAttributions.delete(t11), this._fetchedAttributionData.set(t11, e12);
    }
    this._updateAttributionItems();
  }
  _createContributionIndex(t11, e12) {
    const i15 = t11.contributors, r11 = {};
    if (!i15)
      return r11;
    for (let s14 = 0; s14 < i15.length; s14++) {
      const t12 = i15[s14], o15 = t12.coverageAreas;
      if (!o15)
        return;
      for (const i16 of o15) {
        const o16 = i16.bbox, n23 = i16.zoomMin - (e12 && i16.zoomMin ? 1 : 0), a21 = i16.zoomMax - (e12 && i16.zoomMax ? 1 : 0), c14 = { xmin: o16[1], ymin: o16[0], xmax: o16[3], ymax: o16[2], spatialReference: k2.WGS84 }, u9 = { extent: R(c14), attribution: t12.attribution || "", score: null != i16.score ? i16.score : 100, id: s14 };
        for (let t13 = n23; t13 <= a21; t13++)
          r11[t13] = r11[t13] || [], r11[t13].push(u9);
      }
    }
    return r11.maxKey = Math.max.apply(null, Object.keys(r11)), r11;
  }
  _getDynamicAttribution(t11, e12, i15) {
    const { extent: r11, scale: s14 } = e12;
    let o15 = i15.tileInfo.scaleToZoom(s14);
    if (o15 = Math.min(t11.maxKey, Math.round(o15)), !r11 || null == o15 || o15 <= -1)
      return "";
    const n23 = t11[o15], a21 = M(r11.center.clone().normalize(), e12.spatialReference), c14 = {};
    return n23 ? n23.filter((t12) => {
      const e13 = !c14[t12.id] && a21 && r2(t12.extent, a21);
      return e13 && (c14[t12.id] = true), e13;
    }).sort((t12, e13) => e13.score - t12.score || t12.objectId - e13.objectId).map((t12) => t12.attribution).join(", ") : "";
  }
};
e([d({ readOnly: true, type: j3 })], g7.prototype, "items", void 0), e([d({ readOnly: true })], g7.prototype, "state", null), e([d()], g7.prototype, "view", void 0), g7 = e([n4("esri.widgets.Attribution.AttributionViewModel")], g7);
var _4 = g7;

// node_modules/@arcgis/core/widgets/Attribution.js
var d6 = { base: "esri-attribution esri-widget", poweredBy: "esri-attribution__powered-by", sources: "esri-attribution__sources", open: "esri-attribution--open", sourcesOpen: "esri-attribution__sources--open", link: "esri-attribution__link", widgetIcon: "esri-icon-description", interactive: "esri-interactive" };
var l8 = class extends O2 {
  constructor(e12, t11) {
    super(e12, t11), this._isOpen = false, this._attributionTextOverflowed = false, this._prevSourceNodeHeight = 0, this._resizeObserver = new ResizeObserver((e13) => e13.forEach(({ target: e14 }) => this._checkSourceTextOverflow(e14))), this.iconClass = d6.widgetIcon, this.itemDelimiter = " | ", this.label = void 0, this.messages = null, this.view = null, this.viewModel = new _4();
  }
  initialize() {
    this.own(a3(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.items;
    }, "change", () => this.scheduleRender()));
  }
  destroy() {
    var _a;
    (_a = this._resizeObserver) == null ? void 0 : _a.disconnect();
  }
  get _isInteractive() {
    return this._isOpen || this._attributionTextOverflowed;
  }
  get attributionText() {
    return this.viewModel.items.reduce((e12, t11) => (e12.includes(t11.text) || e12.push(t11.text), e12), []).join(this.itemDelimiter);
  }
  render() {
    const e12 = { [d6.open]: this._isOpen };
    return n6("div", { bind: this, class: this.classes(d6.base, e12), dir: "ltr", onclick: this._toggleState, onkeydown: this._toggleState }, this.renderSourcesNode(), this.renderPoweredBy());
  }
  renderPoweredBy() {
    return n6("div", { class: d6.poweredBy }, "Powered by", " ", n6("a", { class: d6.link, href: "http://www.esri.com/", target: "_blank", rel: "noreferrer" }, "Esri"));
  }
  renderSourcesNode() {
    const e12 = this._isOpen, t11 = this._isInteractive, i15 = t11 ? "0" : "", { attributionText: r11 } = this, s14 = { [d6.sourcesOpen]: e12, [d6.interactive]: t11 };
    return n6("div", { afterCreate: this._afterSourcesNodeCreate, bind: this, class: this.classes(d6.sources, s14), innerHTML: r11, tabindex: i15 });
  }
  _afterSourcesNodeCreate(e12) {
    this._prevSourceNodeHeight = e12.clientWidth, this._resizeObserver.observe(e12);
  }
  _checkSourceTextOverflow(e12) {
    let t11 = false;
    const { clientHeight: i15, clientWidth: r11, scrollWidth: s14 } = e12, o15 = s14 > r11, n23 = this._attributionTextOverflowed !== o15;
    if (this._attributionTextOverflowed = o15, n23 && (t11 = true), this._isOpen) {
      const e13 = i15 < this._prevSourceNodeHeight;
      this._prevSourceNodeHeight = i15, e13 && (this._isOpen = false, t11 = true);
    }
    t11 && this.scheduleRender();
  }
  _toggleState() {
    this._isInteractive && (this._isOpen = !this._isOpen);
  }
};
e([d()], l8.prototype, "_isOpen", void 0), e([d()], l8.prototype, "_isInteractive", null), e([d()], l8.prototype, "_attributionTextOverflowed", void 0), e([d()], l8.prototype, "_prevSourceNodeHeight", void 0), e([d({ readOnly: true, dependsOn: ["viewModel.items.length", "itemDelimiter"] })], l8.prototype, "attributionText", null), e([d()], l8.prototype, "iconClass", void 0), e([d()], l8.prototype, "itemDelimiter", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], l8.prototype, "label", void 0), e([d(), e4("esri/widgets/Attribution/t9n/Attribution")], l8.prototype, "messages", void 0), e([o6("viewModel.view")], l8.prototype, "view", void 0), e([d({ type: _4 })], l8.prototype, "viewModel", void 0), e([t5()], l8.prototype, "_toggleState", null), l8 = e([n4("esri.widgets.Attribution")], l8);
var u6 = l8;

// node_modules/@arcgis/core/widgets/Compass/CompassViewModel.js
var p14 = "esri.widgets.CompassViewModel";
var d7 = class extends e6(y) {
  constructor(t11) {
    super(t11), this._handles = new u(), this.orientation = { x: 0, y: 0, z: 0 }, this.view = null, this._updateForCamera = this._updateForCamera.bind(this), this._updateForRotation = this._updateForRotation.bind(this), this._updateRotationWatcher = this._updateRotationWatcher.bind(this);
  }
  initialize() {
    this._handles.add(l3(() => this.view, this._updateRotationWatcher, h2));
  }
  destroy() {
    this._handles = a2(this._handles), this.view = null;
  }
  get canShowNorth() {
    const t11 = this.get("view.spatialReference");
    return !(!t11 || !t11.isWebMercator && !t11.isGeographic);
  }
  get state() {
    return this.get("view.ready") ? this.canShowNorth ? "compass" : "rotation" : "disabled";
  }
  reset() {
    if (!this.get("view.ready"))
      return;
    const t11 = {};
    "2d" === this.view.type ? t11.rotation = 0 : t11.heading = 0, this.callGoTo({ target: t11 });
  }
  _updateForRotation(t11) {
    null != t11 && (this.orientation = { z: t11 });
  }
  _updateForCamera(t11) {
    if (!t11)
      return;
    const o15 = -t11.heading;
    this.orientation = { x: 0, y: 0, z: o15 };
  }
  _updateRotationWatcher(t11) {
    this._handles.removeAll(), t11 && this._handles.add("2d" === t11.type ? l3(() => t11 == null ? void 0 : t11.rotation, this._updateForRotation, h2) : l3(() => t11 == null ? void 0 : t11.camera, this._updateForCamera, h2));
  }
};
e([d({ readOnly: true })], d7.prototype, "canShowNorth", null), e([d()], d7.prototype, "orientation", void 0), e([d({ readOnly: true })], d7.prototype, "state", null), e([d()], d7.prototype, "view", void 0), d7 = e([n4(p14)], d7);
var c9 = d7;

// node_modules/@arcgis/core/widgets/Compass.js
var p15 = { base: "esri-compass esri-widget--button esri-widget", text: "esri-icon-font-fallback-text", icon: "esri-compass__icon", rotationIcon: "esri-icon-dial", northIcon: "esri-icon-compass", widgetIcon: "esri-icon-locate-circled", interactive: "esri-interactive", disabled: "esri-disabled" };
var l9 = class extends O2 {
  constructor(s14, e12) {
    super(s14, e12), this.goToOverride = null, this.iconClass = p15.widgetIcon, this.label = void 0, this.messages = null, this.view = null, this.viewModel = new c9();
  }
  reset() {
    return this.viewModel.reset();
  }
  render() {
    const { orientation: s14, state: e12 } = this.viewModel, o15 = "disabled" === e12, t11 = "compass" === ("rotation" === e12 ? "rotation" : "compass"), r11 = o15 ? -1 : 0, i15 = { [p15.disabled]: o15, [p15.interactive]: !o15 }, a21 = { [p15.northIcon]: t11, [p15.rotationIcon]: !t11 }, { messages: c14 } = this;
    return n6("div", { bind: this, class: this.classes(p15.base, i15), onclick: this._reset, onkeydown: this._reset, role: "button", tabIndex: r11, "aria-label": c14.reset, title: c14.reset }, n6("span", { "aria-hidden": "true", class: this.classes(p15.icon, a21), styles: this._toRotationTransform(s14) }), n6("span", { class: p15.text }, c14.reset));
  }
  _reset() {
    this.viewModel.reset();
  }
  _toRotationTransform(s14) {
    return { transform: `rotateZ(${s14.z}deg)` };
  }
};
e([o6("viewModel.goToOverride")], l9.prototype, "goToOverride", void 0), e([d()], l9.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], l9.prototype, "label", void 0), e([d(), e4("esri/widgets/Compass/t9n/Compass")], l9.prototype, "messages", void 0), e([o6("viewModel.view")], l9.prototype, "view", void 0), e([d({ type: c9 })], l9.prototype, "viewModel", void 0), e([t5()], l9.prototype, "_reset", null), l9 = e([n4("esri.widgets.Compass")], l9);
var d8 = l9;

// node_modules/@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel.js
var a17 = class extends y {
  constructor(t11) {
    super(t11), this._handles = new u(), this.navigationMode = "pan", this.view = null;
  }
  initialize() {
    this._handles.add(f2(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.inputManager;
    }, () => this._setNavigationMode()));
  }
  destroy() {
    this._handles.destroy(), this._handles = null, this.view = null;
  }
  get state() {
    return this.get("view.ready") && "3d" === this.view.type ? "ready" : "disabled";
  }
  toggle() {
    "disabled" !== this.state && (this.navigationMode = "pan" !== this.navigationMode ? "pan" : "rotate", this._setNavigationMode());
  }
  _setNavigationMode() {
    this.get("view.inputManager").primaryDragAction = "pan" === this.navigationMode ? "pan" : "rotate";
  }
};
e([d({ readOnly: true })], a17.prototype, "state", null), e([d()], a17.prototype, "navigationMode", void 0), e([d()], a17.prototype, "view", void 0), a17 = e([n4("esri.widgets.NavigationToggleViewModel")], a17);
var n20 = a17;

// node_modules/@arcgis/core/widgets/NavigationToggle.js
var g8 = { base: "esri-navigation-toggle esri-widget", button: "esri-navigation-toggle__button esri-widget--button", activeButton: "esri-navigation-toggle__button--active", panButton: "esri-navigation-toggle__button--pan", rotateButton: "esri-navigation-toggle__button--rotate", isLayoutHorizontal: "esri-navigation-toggle--horizontal", rotationIcon: "esri-icon-rotate", panIcon: "esri-icon-pan", widgetIcon: "esri-icon-pan2", disabled: "esri-disabled" };
var p16 = class extends O2 {
  constructor(t11, o15) {
    super(t11, o15), this.iconClass = g8.widgetIcon, this.label = void 0, this.messages = null, this.view = null, this.viewModel = new n20();
  }
  set layout(t11) {
    "horizontal" !== t11 && (t11 = "vertical"), this._set("layout", t11);
  }
  toggle() {
    return this.viewModel.toggle();
  }
  render() {
    const t11 = "disabled" === this.get("viewModel.state"), o15 = "pan" === this.get("viewModel.navigationMode"), e12 = { [g8.disabled]: t11, [g8.isLayoutHorizontal]: "horizontal" === this.layout }, s14 = { [g8.activeButton]: o15 }, i15 = { [g8.activeButton]: !o15 }, a21 = t11 ? -1 : 0, r11 = this.messages.toggle;
    return n6("div", { bind: this, class: this.classes(g8.base, e12), onclick: this._toggle, onkeydown: this._toggle, tabIndex: a21, "aria-label": r11, title: r11 }, n6("div", { class: this.classes(g8.button, g8.panButton, s14) }, n6("span", { class: g8.panIcon })), n6("div", { class: this.classes(g8.button, g8.rotateButton, i15) }, n6("span", { class: g8.rotationIcon })));
  }
  _toggle() {
    this.toggle();
  }
};
e([d()], p16.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], p16.prototype, "label", void 0), e([d({ value: "vertical" })], p16.prototype, "layout", null), e([d(), e4("esri/widgets/NavigationToggle/t9n/NavigationToggle")], p16.prototype, "messages", void 0), e([o6("viewModel.view")], p16.prototype, "view", void 0), e([d({ type: n20 })], p16.prototype, "viewModel", void 0), e([t5()], p16.prototype, "_toggle", null), p16 = e([n4("esri.widgets.NavigationToggle")], p16);
var c10 = p16;

// node_modules/@arcgis/core/widgets/Zoom/IconButton.js
var c11 = { button: "esri-widget--button esri-widget", disabled: "esri-disabled", interactive: "esri-interactive", iconText: "esri-icon-font-fallback-text", icon: "esri-icon" };
var n21 = class extends O2 {
  constructor() {
    super(...arguments), this.enabled = true, this.iconClass = "", this.title = "";
  }
  render() {
    const t11 = this.enabled ? 0 : -1, s14 = { [c11.disabled]: !this.enabled, [c11.interactive]: this.enabled }, i15 = { [this.iconClass]: !!this.iconClass };
    return n6("div", { bind: this, class: this.classes(c11.button, s14), onclick: this._triggerAction, onkeydown: this._triggerAction, role: "button", tabIndex: t11, title: this.title }, n6("span", { "aria-hidden": "true", role: "presentation", class: this.classes(c11.icon, i15) }), n6("span", { class: c11.iconText }, this.title));
  }
  _triggerAction() {
    this.action.call(this);
  }
};
e([d()], n21.prototype, "action", void 0), e([d()], n21.prototype, "enabled", void 0), e([d()], n21.prototype, "iconClass", void 0), e([d()], n21.prototype, "title", void 0), e([t5()], n21.prototype, "_triggerAction", null), n21 = e([n4("esri.widgets.IconButton")], n21);
var a18 = n21;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions2D.js
var s11 = class extends y {
  get canZoomIn() {
    if (!this.get("view.ready"))
      return false;
    const e12 = this.get("view.animation.target.scale") || this.get("view.scale"), t11 = this.get("view.constraints.effectiveMaxScale");
    return 0 === t11 || e12 > t11;
  }
  get canZoomOut() {
    if (!this.get("view.ready"))
      return false;
    const e12 = this.get("view.animation.target.scale") || this.get("view.scale"), t11 = this.get("view.constraints.effectiveMinScale");
    return 0 === t11 || e12 < t11;
  }
};
e([d({ readOnly: true })], s11.prototype, "canZoomIn", null), e([d({ readOnly: true })], s11.prototype, "canZoomOut", null), e([d()], s11.prototype, "view", void 0), s11 = e([n4("esri.widgets.Zoom.ZoomConditions2D")], s11);
var i13 = s11;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions3D.js
var s12 = class extends y {
  get canZoomIn() {
    return !!this.get("view.ready");
  }
  get canZoomOut() {
    return !!this.get("view.ready");
  }
};
e([d({ readOnly: true })], s12.prototype, "canZoomIn", null), e([d({ readOnly: true })], s12.prototype, "canZoomOut", null), e([d()], s12.prototype, "view", void 0), s12 = e([n4("esri.widgets.Zoom.ZoomConditions3D")], s12);
var c12 = s12;

// node_modules/@arcgis/core/widgets/Zoom/ZoomViewModel.js
var m7 = class extends y {
  constructor(o15) {
    super(o15), this.canZoomIn = false, this.canZoomOut = false;
  }
  destroy() {
    this.view = null;
  }
  get state() {
    return this.get("view.ready") ? "ready" : "disabled";
  }
  set view(o15) {
    o15 ? "2d" === o15.type ? this._zoomConditions = new i13({ view: o15 }) : "3d" === o15.type && (this._zoomConditions = new c12({ view: o15 })) : this._zoomConditions = null, this._set("view", o15);
  }
  zoomIn() {
    if (!this.canZoomIn)
      return;
    const o15 = this.view;
    "2d" === o15.type ? o15.mapViewNavigation.zoomIn() : j(o15.goTo({ zoomFactor: 2 }));
  }
  zoomOut() {
    if (!this.canZoomOut)
      return;
    const o15 = this.view;
    "2d" === o15.type ? o15.mapViewNavigation.zoomOut() : j(o15.goTo({ zoomFactor: 0.5 }));
  }
};
e([d()], m7.prototype, "_zoomConditions", void 0), e([d({ aliasOf: "_zoomConditions.canZoomIn", readOnly: true })], m7.prototype, "canZoomIn", void 0), e([d({ aliasOf: "_zoomConditions.canZoomOut", readOnly: true })], m7.prototype, "canZoomOut", void 0), e([d({ readOnly: true })], m7.prototype, "state", null), e([d()], m7.prototype, "view", null), m7 = e([n4("esri.widgets.Zoom.ZoomViewModel")], m7);
var a19 = m7;

// node_modules/@arcgis/core/widgets/Zoom.js
var l10 = { base: "esri-zoom esri-widget", horizontalLayout: "esri-zoom--horizontal", zoomInIcon: "esri-icon-plus", zoomOutIcon: "esri-icon-minus", widgetIcon: "esri-icon-zoom-in-magnifying-glass" };
var u7 = class extends O2 {
  constructor(o15, t11) {
    super(o15, t11), this.iconClass = l10.widgetIcon, this.label = void 0, this.messages = null, this.view = null, this.viewModel = new a19();
  }
  initialize() {
    this._zoomInButton = new a18({ action: this.zoomIn.bind(this), iconClass: l10.zoomInIcon }), this._zoomOutButton = new a18({ action: this.zoomOut.bind(this), iconClass: l10.zoomOutIcon });
  }
  destroy() {
    this._zoomInButton.destroy(), this._zoomOutButton.destroy(), this._zoomInButton = null, this._zoomOutButton = null;
  }
  set layout(o15) {
    "horizontal" !== o15 && (o15 = "vertical"), this._set("layout", o15);
  }
  render() {
    const o15 = this.viewModel, t11 = { [l10.horizontalLayout]: "horizontal" === this.layout };
    return this._zoomInButton.enabled = "ready" === o15.state && o15.canZoomIn, this._zoomOutButton.enabled = "ready" === o15.state && o15.canZoomOut, this._zoomInButton.title = this.messages.zoomIn, this._zoomOutButton.title = this.messages.zoomOut, n6("div", { class: this.classes(l10.base, t11) }, this._zoomInButton.render(), this._zoomOutButton.render());
  }
  zoomIn() {
    return this.viewModel.zoomIn();
  }
  zoomOut() {
    return this.viewModel.zoomOut();
  }
};
e([d()], u7.prototype, "iconClass", void 0), e([d({ aliasOf: { source: "messages.widgetLabel", overridable: true } })], u7.prototype, "label", void 0), e([d({ value: "vertical" })], u7.prototype, "layout", null), e([d(), e4("esri/widgets/Zoom/t9n/Zoom")], u7.prototype, "messages", void 0), e([o6("viewModel.view")], u7.prototype, "view", void 0), e([d({ type: a19 })], u7.prototype, "viewModel", void 0), u7 = e([n4("esri.widgets.Zoom")], u7);
var c13 = u7;

// node_modules/@arcgis/core/views/ui/DefaultUI.js
var h9 = "esri.views.ui.DefaultUI";
function u8(t11) {
  return t11 && void 0 !== t11.view;
}
s.getLogger(h9);
var g9 = class extends L5 {
  constructor(t11) {
    super(t11), this._defaultPositionLookup = { attribution: "manual", compass: "top-left", "navigation-toggle": "top-left", zoom: "top-left" }, this.components = [];
  }
  initialize() {
    this._handles.add([l3(() => this.components, this._componentsWatcher.bind(this), h2), l3(() => this.view, this._updateViewAwareWidgets.bind(this), h2)]);
  }
  _add(t11, o15, e12, i15) {
    if ("string" == typeof t11 && this._defaultPositionLookup[t11]) {
      if (this._find(t11))
        return;
      t11 = this._createComponent(t11);
    }
    super._add(t11, o15, e12, i15);
  }
  _removeComponents(t11) {
    t11.forEach((t12) => {
      const o15 = this._find(t12);
      o15 && (this.remove(o15), o15.destroy());
    });
  }
  _updateViewAwareWidgets(t11) {
    this.components.forEach((o15) => {
      const e12 = this._find(o15), i15 = e12 && e12.widget;
      u8(i15) && (i15.view = t11);
    });
  }
  _componentsWatcher(t11, o15) {
    this._removeComponents(o15), this._addComponents(t11), this._adjustPadding(t11);
  }
  _adjustPadding(t11) {
    if (!t11.includes("attribution") && !this._isOverridden("padding")) {
      const { top: t12 } = this.padding;
      this.padding = t12;
    }
  }
  _addComponents(t11) {
    this.initialized && t11.forEach((t12) => this.add(this._createComponent(t12), this._defaultPositionLookup[t12]));
  }
  _createComponent(t11) {
    const o15 = this._createWidget(t11);
    if (o15)
      return new l7({ id: t11, node: o15 });
  }
  _createWidget(t11) {
    return "attribution" === t11 ? this._createAttribution() : "compass" === t11 ? this._createCompass() : "navigation-toggle" === t11 ? this._createNavigationToggle() : "zoom" === t11 ? this._createZoom() : void 0;
  }
  _createAttribution() {
    return new u6({ view: this.view });
  }
  _createCompass() {
    return new d8({ view: this.view });
  }
  _createNavigationToggle() {
    return new c10({ view: this.view });
  }
  _createZoom() {
    return new c13({ view: this.view });
  }
};
e([d()], g9.prototype, "components", void 0), g9 = e([n4(h9)], g9);
var _5 = g9;

// node_modules/@arcgis/core/views/input/handlers/support.js
function t9(t11, r11) {
  switch (r11) {
    case "primary":
      return "touch" === t11.pointerType || 0 === t11.button;
    case "secondary":
      return "touch" !== t11.pointerType && 2 === t11.button;
    case "tertiary":
      return "touch" !== t11.pointerType && 1 === t11.button;
  }
}
function r10(t11, r11) {
  if ("touch" === t11.pointerType)
    return false;
  switch (r11) {
    case "primary":
      return 0 === t11.button;
    case "secondary":
      return 2 === t11.button;
    case "tertiary":
      return 1 === t11.button;
  }
}

// node_modules/@arcgis/core/views/input/DragEventSeparator.js
var t10 = class {
  constructor(t11) {
    this.callbacks = t11, this.currentCount = 0, this.callbacks.condition || (this.callbacks.condition = () => true);
  }
  handle(t11) {
    const s14 = t11.data, i15 = s14.pointers.size;
    switch (s14.action) {
      case "start":
        this.currentCount = i15, this._emitStart(t11);
        break;
      case "added":
        this._emitEnd(this.previousEvent), this.currentCount = i15, this._emitStart(t11);
        break;
      case "update":
        this._emitUpdate(t11);
        break;
      case "removed":
        this.startEvent && this._emitEnd(this.previousEvent), this.currentCount = i15, this._emitStart(t11);
        break;
      case "end":
        this._emitEnd(t11), this.currentCount = 0;
    }
    this.previousEvent = t11;
  }
  _emitStart(t11) {
    this.startEvent = t11, this.callbacks.condition(this.currentCount, t11) && this.callbacks.start(this.currentCount, t11, this.startEvent);
  }
  _emitUpdate(t11) {
    this.callbacks.condition(this.currentCount, t11) && this.callbacks.update(this.currentCount, t11, this.startEvent);
  }
  _emitEnd(t11) {
    this.callbacks.condition(this.currentCount, t11) && this.callbacks.end(this.currentCount, t11, this.startEvent), this.startEvent = null;
  }
};

// node_modules/@arcgis/core/views/navigation/gamepadAndKeyboardUtils.js
function n22(t11) {
  let n23 = t11 * t11;
  return t11 < 0 && (n23 *= -1), n23;
}
function a20(t11) {
  return t11.translation[0] = 0, t11.translation[1] = 0, t11.translation[2] = 0, t11.heading = 0, t11.tilt = 0, t11;
}
function i14(a21, i15, o15) {
  const s14 = o15, e12 = a21.state, r11 = a21.device, l11 = "forward-down" === i15.tiltDirection ? 1 : -1, c14 = 1;
  return "standard" === r11.deviceType ? (s14.translation[0] = n22(e12.axes[0]), s14.translation[1] = n22(e12.axes[1]), s14.translation[2] = n22(e12.buttons[7]) - n22(e12.buttons[6]), s14.heading = n22(e12.axes[2]), s14.tilt = n22(e12.axes[3])) : "spacemouse" === r11.deviceType && (s14.translation[0] = 1.2 * n22(e12.axes[0]), s14.translation[1] = 1.2 * n22(e12.axes[1]), s14.translation[2] = 2 * -n22(e12.axes[2]), s14.heading = 1.2 * n22(e12.axes[5]), s14.tilt = 1.2 * n22(e12.axes[3])), s14.tilt *= l11, q(s14.translation, s14.translation, c14), s14;
}
function o14(t11, n23) {
  const a21 = n23;
  return a21.translation[0] = t11[1] - t11[0], a21.translation[1] = t11[3] - t11[2], a21.translation[2] = t11[4] - t11[5], a21.heading = t11[7] - t11[6], a21.tilt = t11[8] - t11[9], a21.zoom = t11[10] - t11[11], a21;
}
function s13(t11) {
  return 0 === t11.translation[0] && 0 === t11.translation[1] && 0 === t11.translation[2] && 0 === t11.heading && 0 === t11.tilt && 0 === t11.zoom;
}

export {
  w2 as w,
  p4 as p,
  n12 as n,
  i7 as i,
  G,
  n15 as n2,
  U3 as U,
  t9 as t,
  r10 as r,
  t10 as t2,
  a20 as a,
  i14 as i2,
  o14 as o,
  s13 as s,
  u4 as u,
  e10 as e,
  e11 as e2,
  s9 as s2,
  a15 as a2,
  s10 as s3,
  n18 as n3,
  o13 as o2,
  i11 as i3,
  _5 as _
};
//# sourceMappingURL=chunk-IG67ATRS.js.map
