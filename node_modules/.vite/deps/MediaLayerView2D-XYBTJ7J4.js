import {
  a as a4
} from "./chunk-W6C7NF62.js";
import "./chunk-LCW6FHIL.js";
import {
  f as f4
} from "./chunk-VKEKAYXP.js";
import {
  u as u3
} from "./chunk-6UGZAJSY.js";
import {
  a as a3
} from "./chunk-JERZLQLG.js";
import {
  W
} from "./chunk-JWKDNFWF.js";
import "./chunk-ATJYWC6C.js";
import "./chunk-KXE4LGFJ.js";
import "./chunk-SASFTPK5.js";
import "./chunk-UJS24K6P.js";
import "./chunk-UKBGUXUQ.js";
import "./chunk-AKNCAMEF.js";
import "./chunk-UGLXR5OV.js";
import "./chunk-RGZ7VIMW.js";
import {
  I
} from "./chunk-6FQZDXGD.js";
import "./chunk-PNNMRFHO.js";
import "./chunk-YRAX326I.js";
import "./chunk-HH3D3A65.js";
import "./chunk-OA3NMCNZ.js";
import "./chunk-YDPQRKY4.js";
import "./chunk-AGO2OES3.js";
import {
  r as r5
} from "./chunk-ARI6FRU4.js";
import {
  p
} from "./chunk-BBO6WYBO.js";
import "./chunk-TH2ECCFL.js";
import "./chunk-TCBD6DES.js";
import "./chunk-G2GJVIQC.js";
import "./chunk-TZD2AXJG.js";
import "./chunk-FZCDFXBT.js";
import "./chunk-KD6KBT2L.js";
import {
  a as a2
} from "./chunk-RVR2DEVB.js";
import "./chunk-AS3OSZXK.js";
import "./chunk-IYLBVJ6T.js";
import "./chunk-Z7AZMEL6.js";
import {
  f as f3
} from "./chunk-FUKESVWQ.js";
import {
  c as c2
} from "./chunk-T3KDRLPE.js";
import {
  n as n2,
  u as u2
} from "./chunk-EJ7RFMRW.js";
import "./chunk-VQLKKADV.js";
import "./chunk-33INAWJA.js";
import {
  D,
  F,
  G,
  L,
  P
} from "./chunk-FPMD6IB4.js";
import {
  r as r6
} from "./chunk-MLAOYRDT.js";
import "./chunk-RIOXX6J2.js";
import {
  mt
} from "./chunk-4ZEOAETN.js";
import {
  e as e3
} from "./chunk-MEW2XKT2.js";
import {
  t as t2
} from "./chunk-RB3LJE4I.js";
import "./chunk-MV2XZ5BA.js";
import "./chunk-PQO66WZ2.js";
import {
  M as M2,
  f as f2,
  h as h2,
  i as i2,
  r as r4
} from "./chunk-3NPGGTI6.js";
import "./chunk-QNKOXOOY.js";
import "./chunk-AMGAY4O5.js";
import "./chunk-YZNDHJDJ.js";
import "./chunk-ZUDEVIXR.js";
import "./chunk-RTHP2LNT.js";
import "./chunk-FUQI3AAI.js";
import "./chunk-6SWQ7R36.js";
import "./chunk-Z4FD36CT.js";
import "./chunk-OZT6RDST.js";
import {
  z
} from "./chunk-4I3W4KD5.js";
import "./chunk-JNXH4TTS.js";
import "./chunk-PZWU5EHT.js";
import "./chunk-YL26MZEL.js";
import "./chunk-YG6VFATO.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  a,
  f,
  h,
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-CLGCKZUR.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-CF56UYH2.js";
import {
  u
} from "./chunk-56RHM4A6.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import {
  c
} from "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import {
  i
} from "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M,
  s as s3
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  R
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  g,
  r2
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import {
  r as r3
} from "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  e as e2,
  r,
  t
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var _ = class extends a2 {
  constructor(s4) {
    super(), this.elementView = s4, this.isWrapAround = false, this._vertices = new Float32Array(20), this._handles = [], this._handles.push(l(() => this.elementView.element.opacity, (e4) => this.opacity = e4, h), l(() => [this.elementView.coords], () => {
      this.requestRender();
    }, h), f(() => this.elementView.element.loaded, () => {
      const e4 = this.elementView.element;
      this.ready(), "video" === e4.type && r(e4.content) && this._handles.push(r2(e4.content, "play", () => this.requestRender()));
    }, h)), s4.element.load().catch((t3) => {
      s.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s2("element-load-error", "Element cannot be displayed", { element: s4, error: t3 }));
    });
  }
  destroy() {
    var _a;
    this._handles.forEach((e4) => e4.remove()), (_a = this.texture) == null ? void 0 : _a.dispose(), this.texture = null;
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e4) {
    const { context: t3 } = e4, r7 = this.elementView.element.content;
    if (r(r7)) {
      const e5 = r7 instanceof HTMLImageElement, i3 = r7 instanceof HTMLVideoElement, o = e5 ? r7.naturalWidth : i3 ? r7.videoWidth : r7.width, n3 = e5 ? r7.naturalHeight : i3 ? r7.videoHeight : r7.height;
      this.texture ? i3 && !r7.paused && (this.texture.setData(r7), this.requestRender(), (n2(t3.gl) || i(o) && i(n3)) && this.texture.generateMipmap()) : (this.texture = new u2(t3, { pixelFormat: P.RGBA, dataType: G.UNSIGNED_BYTE, samplingMode: L.LINEAR, wrapMode: D.CLAMP_TO_EDGE, width: o, height: n3 }, r7), (n2(t3.gl) || i(o) && i(n3)) && this.texture.generateMipmap(), i3 && !r7.paused && this.requestRender());
    }
    super.beforeRender(e4);
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(e4, t3) {
    const r7 = this.elementView.coords;
    if (t(r7))
      return;
    const [s4, i3, n3, a5] = r7.rings[0], h3 = this._vertices, { x: m, y: l2 } = e4, d2 = 0 !== t3;
    d2 ? h3.set([i3[0] - m, i3[1] - l2, s4[0] - m, s4[1] - l2, n3[0] - m, n3[1] - l2, a5[0] - m, a5[1] - l2, a5[0] - m, a5[1] - l2, i3[0] + t3 - m, i3[1] - l2, i3[0] + t3 - m, i3[1] - l2, s4[0] + t3 - m, s4[1] - l2, n3[0] + t3 - m, n3[1] - l2, a5[0] + t3 - m, a5[1] - l2]) : h3.set([i3[0] - m, i3[1] - l2, s4[0] - m, s4[1] - l2, n3[0] - m, n3[1] - l2, a5[0] - m, a5[1] - l2]), this.isWrapAround = d2;
  }
  getVAO(e4, t3, r7) {
    if (t(this.elementView.coords))
      return null;
    const s4 = this._vertices;
    if (this._vao)
      this._geometryVbo.setData(s4);
    else {
      this._geometryVbo = c2.createVertex(e4, F.DYNAMIC_DRAW, s4);
      const i3 = c2.createVertex(e4, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]));
      this._vao = new f3(e4, r7, t3, { geometry: this._geometryVbo, tex: i3 });
    }
    return this._vao;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js
var M3 = class extends a3 {
  constructor() {
    super(...arguments), this._localOrigin = c(0, 0), this._viewStateId = -1, this._dvsMat3 = e3(), this.requiresDedicatedFBO = false;
  }
  get dvsMat3() {
    return this._dvsMat3;
  }
  beforeRender(t3) {
    this._updateMatrices(t3), this._updateOverlays(t3, this.children);
    for (const e4 of this.children)
      e4.beforeRender(t3);
  }
  prepareRenderPasses(t3) {
    const e4 = t3.registerRenderPass({ name: "overlay", brushes: [W.overlay], target: () => this.children, drawPhase: I.MAP });
    return [...super.prepareRenderPasses(t3), e4];
  }
  _updateMatrices(t3) {
    const { state: e4 } = t3, { id: n3, size: l2, pixelRatio: m, resolution: h3, rotation: f5, viewpoint: u4, displayMat3: M4 } = e4;
    if (this._viewStateId === n3)
      return;
    const v = Math.PI / 180 * f5, _2 = m * l2[0], w2 = m * l2[1], { x: y, y: j2 } = u4.targetGeometry, g2 = z(y, e4.spatialReference);
    this._localOrigin.x = g2, this._localOrigin.y = j2;
    const b = h3 * _2, R3 = h3 * w2, O = r4(this._dvsMat3);
    i2(O, O, M4), M2(O, O, t2(_2 / 2, w2 / 2)), f2(O, O, r6(_2 / b, -w2 / R3, 1)), h2(O, O, -v), this._viewStateId = n3;
  }
  _updateOverlays(e4, s4) {
    const { state: r7 } = e4, { rotation: o, spatialReference: a5, worldScreenWidth: i3, size: n3, viewpoint: c3 } = r7, p2 = this._localOrigin;
    let d2 = 0;
    if (a5.isWrappable) {
      const e5 = n3[0], h3 = n3[1], f5 = 180 / Math.PI * o, u4 = Math.abs(Math.cos(f5)), M4 = Math.abs(Math.sin(f5)), v = Math.round(e5 * u4 + h3 * M4), [_2, w2] = R(a5).valid, y = mt(a5), { x: j2, y: g2 } = c3.targetGeometry, b = [j2, g2], R3 = [0, 0];
      r7.toScreen(R3, b);
      const O = [0, 0];
      let P2;
      P2 = v > i3 ? 0.5 * i3 : 0.5 * v;
      const x = Math.floor((j2 + 0.5 * y) / y), C = _2 + x * y, D2 = w2 + x * y, I2 = [R3[0] + P2, 0];
      r7.toMap(O, I2), O[0] > D2 && (d2 = y), I2[0] = R3[0] - P2, r7.toMap(O, I2), O[0] < C && (d2 = -y);
      for (const r8 of s4) {
        const e6 = r8.elementView.bounds;
        if (t(e6))
          continue;
        const [s5, , o2] = e6;
        s5 < _2 && o2 > _2 ? r8.updateDrawCoords(p2, y) : o2 > w2 && s5 < w2 ? r8.updateDrawCoords(p2, -y) : r8.updateDrawCoords(p2, d2);
      }
    } else
      for (const t3 of s4)
        t3.updateDrawCoords(p2, d2);
  }
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var w = class extends f4(u3) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this.layer = null, this.elements = new j();
  }
  attach() {
    this.handles.add(a(() => this.layer.source, "refresh", () => {
      for (const e4 of this._tileStrategy.tiles)
        this._updateTile(e4);
      this.requestUpdate();
    })), this._overlayContainer = new M3(), this.container.addChild(this._overlayContainer), this._fetchQueue = new p({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e4, t3) => this._queryElements(e4, t3) }), this._tileStrategy = new r5({ cachePolicy: "purge", resampling: true, acquireTile: (e4) => this._acquireTile(e4), releaseTile: (e4) => this._releaseTile(e4), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    this.handles.removeAll(), this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear();
  }
  supportsSpatialReference(e4) {
    return true;
  }
  moveStart() {
    this.requestUpdate();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e4) {
    this._tileStrategy.update(e4);
  }
  async hitTest(e4, t3) {
    var _a;
    const s4 = [], r7 = [e4.x, e4.y];
    for (const l2 of this.elements) {
      const t4 = (_a = e2(l2.georeference)) == null ? void 0 : _a.coords;
      r(t4) && s3(t4.rings, r7) && s4.push({ type: "media", element: l2, layer: this.layer, mapPoint: e4 });
    }
    return s4.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
  }
  _acquireTile(e4) {
    const t3 = new R2(e4.clone());
    return this._updateTile(t3), t3;
  }
  _updateTile(e4) {
    this.updatingHandles.addPromise(this._fetchQueue.push(e4.key).then((t3) => {
      const [s4, r7] = e4.setElements(t3);
      this._acquireElements(e4, s4), this._releaseElements(e4, r7), this.requestUpdate();
    }, (e5) => {
      g(e5) || s.getLogger(this.declaredClass).error(e5);
    }));
  }
  _releaseTile(e4) {
    this._fetchQueue.abort(e4.key.id), e4.elements && this._releaseElements(e4, e4.elements), this.requestUpdate();
  }
  async _queryElements(e4, t3) {
    const s4 = this.layer.source;
    if (t(s4))
      return [];
    this.view.featuresTilingScheme.getTileBounds(T, e4, true);
    const r7 = new M({ xmin: T[0], ymin: T[1], xmax: T[2], ymax: T[3], spatialReference: this.view.spatialReference });
    return s4.queryElements(r7, t3);
  }
  _acquireElements(e4, t3) {
    const s4 = this.layer.source, i3 = this.view.spatialReference;
    if (!t(s4))
      for (const o of t3) {
        r3(this._elementReferences, o.uid, () => {
          const e5 = new a4({ element: o, spatialReference: i3 }), t4 = new _(e5);
          return this._overlayContainer.addChild(t4), this.elements.add(o), { tiles: /* @__PURE__ */ new Set(), projectedElement: e5, overlay: t4 };
        }).tiles.add(e4);
      }
  }
  _releaseElements(e4, t3) {
    for (const s4 of t3) {
      const t4 = this._elementReferences.get(s4.uid);
      t4.tiles.delete(e4), t4.tiles.size || (this._overlayContainer.removeChild(t4.overlay), t4.overlay.destroy(), t4.projectedElement.destroy(), this._elementReferences.delete(s4.uid), this.elements.remove(s4));
    }
  }
};
e([d()], w.prototype, "_fetchQueue", void 0), e([d()], w.prototype, "layer", void 0), e([d({ readOnly: true })], w.prototype, "elements", void 0), w = e([n("esri.views.2d.layers.MediaLayerView2D")], w);
var T = u();
var R2 = class {
  constructor(e4) {
    this.key = e4, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e4) {
    const t3 = [], s4 = new Set(this.elements);
    this.elements = e4;
    for (const r7 of e4)
      s4.has(r7) ? s4.delete(r7) : t3.push(r7);
    return this.isReady = true, [t3, Array.from(s4)];
  }
};
var S = w;
export {
  S as default
};
//# sourceMappingURL=MediaLayerView2D-XYBTJ7J4.js.map
