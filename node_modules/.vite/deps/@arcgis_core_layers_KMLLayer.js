import {
  S,
  d as d2,
  g,
  j as j3
} from "./chunk-CH4NHR4K.js";
import "./chunk-4XBERLPX.js";
import {
  p
} from "./chunk-TMSBC6BS.js";
import {
  n as n3
} from "./chunk-RIWDMEW4.js";
import "./chunk-C7S44TP4.js";
import "./chunk-KUWW4YJ7.js";
import "./chunk-P6I5J7W6.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F2DXUUYL.js";
import "./chunk-EGR3VVZG.js";
import "./chunk-F5A4XAOJ.js";
import "./chunk-4TDLPK3D.js";
import "./chunk-U7B2WKBH.js";
import "./chunk-T7SYNS2R.js";
import "./chunk-WODSLTZT.js";
import "./chunk-JMZLJZMP.js";
import {
  v
} from "./chunk-OG6CQEZJ.js";
import {
  c
} from "./chunk-X5Z3DJQ4.js";
import {
  O
} from "./chunk-BUWXVMJU.js";
import {
  f
} from "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import {
  a
} from "./chunk-D3XXPCBB.js";
import {
  t
} from "./chunk-OWBMOIIV.js";
import {
  b as b2
} from "./chunk-SIH2IMSA.js";
import "./chunk-2AGPHSDM.js";
import "./chunk-JGSSQ5FR.js";
import "./chunk-5OEHY3VV.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-GRILTTJT.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import {
  U,
  j as j2,
  l
} from "./chunk-T7BEWVV3.js";
import "./chunk-ASC3X65B.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-IZCP5QP4.js";
import "./chunk-QFTOW2ST.js";
import "./chunk-I4USSDLI.js";
import "./chunk-VI3TTBSC.js";
import "./chunk-B42HXLDM.js";
import "./chunk-TVXPO7T5.js";
import "./chunk-2EZYA7VW.js";
import "./chunk-OEQ3EDRD.js";
import "./chunk-Z6EP2GTZ.js";
import "./chunk-P6G64ARX.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-BLINZ65M.js";
import "./chunk-TADZYUVR.js";
import "./chunk-C5ULLWJ7.js";
import "./chunk-HFDYAQZS.js";
import "./chunk-HJHWUUQQ.js";
import "./chunk-TMBOFNWA.js";
import "./chunk-ZNEGSJWK.js";
import "./chunk-EI4MOLML.js";
import "./chunk-4SBWV5M2.js";
import "./chunk-CF56UYH2.js";
import "./chunk-5TRUGQDM.js";
import "./chunk-PZG7CR4Y.js";
import "./chunk-2HDG7SIE.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-6DWU2ZQF.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import {
  m
} from "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import {
  j
} from "./chunk-TT2HIXWQ.js";
import {
  n as n2
} from "./chunk-OIPX3EDD.js";
import "./chunk-NWRK6QLX.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import {
  Ut
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-FVPTCNCX.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-43S7PUMG.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import {
  M
} from "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import {
  k2 as k
} from "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import {
  s
} from "./chunk-XRL56EGK.js";
import {
  r as r2
} from "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import {
  u2
} from "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  w
} from "./chunk-U3PSONS6.js";
import "./chunk-HFTNOKM2.js";
import {
  b
} from "./chunk-23NWA6WL.js";
import "./chunk-CVWDM4C7.js";
import {
  u
} from "./chunk-G5JBUC5N.js";
import {
  r
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/layers/support/KMLSublayer.js
var v2;
var j4 = v2 = class extends n2.EventedMixin(u2(m)) {
  constructor() {
    super(...arguments), this._sublayersHandles = null, this.description = null, this.id = null, this.networkLink = null, this.title = null, this.sourceJSON = null, this.fullExtent = null;
  }
  initialize() {
    j2(() => this.networkLink).then(() => j2(() => true === this.visible)).then(() => this.load());
  }
  load(e2) {
    if (!this.networkLink)
      return;
    if (this.networkLink.viewFormat)
      return;
    const t2 = r(e2) ? e2.signal : null, s2 = this._fetchService(this._get("networkLink").href, t2).then((e3) => {
      const t3 = j3(e3.sublayers);
      this.fullExtent = M.fromJSON(t3), this.sourceJSON = e3;
      const s3 = b(j.ofType(v2), S(v2, e3));
      this.sublayers ? this.sublayers.addMany(s3) : this.sublayers = s3, this.layer.emit("sublayer-update"), this.layer && this.layer.notifyChange("visibleSublayers");
    });
    return this.addResolvingPromise(s2), Promise.resolve(this);
  }
  set sublayers(e2) {
    const r3 = this._get("sublayers");
    r3 && (r3.forEach((e3) => {
      e3.parent = null, e3.layer = null;
    }), this._sublayersHandles.forEach((e3) => e3.remove()), this._sublayersHandles = null), e2 && (e2.forEach((e3) => {
      e3.parent = this, e3.layer = this.layer;
    }), this._sublayersHandles = [e2.on("after-add", ({ item: e3 }) => {
      e3.parent = this, e3.layer = this.layer;
    }), e2.on("after-remove", ({ item: e3 }) => {
      e3.parent = null, e3.layer = null;
    })]), this._set("sublayers", e2);
  }
  castSublayers(e2) {
    return b(j.ofType(v2), e2);
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e2) {
    this._get("visible") !== e2 && (this._set("visible", e2), this.layer && this.layer.notifyChange("visibleSublayers"));
  }
  readVisible(e2, r3) {
    return !!r3.visibility;
  }
  set layer(e2) {
    this._set("layer", e2), this.sublayers && this.sublayers.forEach((r3) => r3.layer = e2);
  }
  _fetchService(e2, r3) {
    return g(e2, this.layer.outSpatialReference, this.layer.refreshInterval, r3).then((e3) => d2(e3.data));
  }
};
e([d()], j4.prototype, "description", void 0), e([d()], j4.prototype, "id", void 0), e([d({ readOnly: true, value: null })], j4.prototype, "networkLink", void 0), e([d({ json: { write: { allowNull: true } } })], j4.prototype, "parent", void 0), e([d({ value: null, json: { write: { allowNull: true } } })], j4.prototype, "sublayers", null), e([s("sublayers")], j4.prototype, "castSublayers", null), e([d({ value: null, json: { read: { source: "name", reader: (e2) => u(e2) } } })], j4.prototype, "title", void 0), e([d({ value: true })], j4.prototype, "visible", null), e([o("visible", ["visibility"])], j4.prototype, "readVisible", null), e([d()], j4.prototype, "sourceJSON", void 0), e([d({ value: null })], j4.prototype, "layer", null), e([d({ type: M })], j4.prototype, "fullExtent", void 0), j4 = v2 = e([n("esri.layers.support.KMLSublayer")], j4);
var S2 = j4;

// node_modules/@arcgis/core/layers/KMLLayer.js
var F = ["kml", "xml"];
var O2 = class extends a(n3(t(c(v(O(b2)))))) {
  constructor(...e2) {
    super(...e2), this._visibleFolders = [], this.allSublayers = new p({ getCollections: () => [this.sublayers], getChildrenFunction: (e3) => e3.sublayers }), this.outSpatialReference = k.WGS84, this.path = null, this.legendEnabled = false, this.operationalLayerType = "KML", this.sublayers = null, this.type = "kml", this.url = null;
  }
  initialize() {
    this.own([l(() => this.sublayers, (e2, r3) => {
      r3 && r3.forEach((e3) => {
        e3.parent = null, e3.layer = null;
      }), e2 && e2.forEach((e3) => {
        e3.parent = this, e3.layer = this;
      });
    }, U), this.on("sublayer-update", () => this.notifyChange("fullExtent"))]);
  }
  normalizeCtorArgs(e2, r3) {
    return "string" == typeof e2 ? { url: e2, ...r3 } : e2;
  }
  readSublayersFromItemOrWebMap(e2, r3) {
    this._visibleFolders = r3.visibleFolders;
  }
  readSublayers(e2, r3, t2) {
    return S(S2, r3, t2, this._visibleFolders);
  }
  writeSublayers(e2, r3) {
    const t2 = [], o2 = e2.toArray();
    for (; o2.length; ) {
      const e3 = o2[0];
      e3.networkLink || (e3.visible && t2.push(e3.id), e3.sublayers && o2.push(...e3.sublayers.toArray())), o2.shift();
    }
    r3.visibleFolders = t2;
  }
  get title() {
    const e2 = this._get("title");
    return e2 && "defaults" !== this.originOf("title") ? e2 : this.url ? Ut(this.url, F) || "KML" : e2 || "";
  }
  set title(e2) {
    this._set("title", e2);
  }
  get visibleSublayers() {
    const e2 = this.sublayers, r3 = [], t2 = (e3) => {
      e3.visible && (r3.push(e3), e3.sublayers && e3.sublayers.forEach(t2));
    };
    return e2 && e2.forEach(t2), r3;
  }
  get fullExtent() {
    return this._recomputeFullExtent();
  }
  load(e2) {
    const r3 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["KML"] }, e2).catch(w).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  destroy() {
    super.destroy(), this.allSublayers.destroy();
  }
  async _fetchService(e2) {
    const r3 = await Promise.resolve().then(() => this.resourceInfo ? { ssl: false, data: this.resourceInfo } : g(this.url, this.outSpatialReference, this.refreshInterval, e2)), t2 = d2(r3.data);
    t2 && this.read(t2, { origin: "service" });
  }
  _recomputeFullExtent() {
    let e2 = null;
    r(this.extent) && (e2 = this.extent.clone());
    const r3 = (t2) => {
      if (t2.sublayers)
        for (const s2 of t2.sublayers.items)
          r3(s2), s2.visible && s2.fullExtent && (r(e2) ? e2.union(s2.fullExtent) : e2 = s2.fullExtent.clone());
    };
    return r3(this), e2;
  }
};
e([d({ readOnly: true })], O2.prototype, "allSublayers", void 0), e([d({ type: k })], O2.prototype, "outSpatialReference", void 0), e([d({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], O2.prototype, "path", void 0), e([d({ readOnly: true, json: { read: false, write: false } })], O2.prototype, "legendEnabled", void 0), e([d({ type: ["show", "hide", "hide-children"] })], O2.prototype, "listMode", void 0), e([d({ type: ["KML"] })], O2.prototype, "operationalLayerType", void 0), e([d({})], O2.prototype, "resourceInfo", void 0), e([d({ type: j.ofType(S2), json: { write: { ignoreOrigin: true } } })], O2.prototype, "sublayers", void 0), e([o(["web-map", "portal-item"], "sublayers", ["visibleFolders"])], O2.prototype, "readSublayersFromItemOrWebMap", null), e([o("service", "sublayers", ["sublayers"])], O2.prototype, "readSublayers", null), e([r2("sublayers")], O2.prototype, "writeSublayers", null), e([d({ readOnly: true, json: { read: false } })], O2.prototype, "type", void 0), e([d({ json: { origins: { "web-map": { read: { source: "title" } } }, write: { ignoreOrigin: true } } })], O2.prototype, "title", null), e([d(f)], O2.prototype, "url", void 0), e([d({ readOnly: true })], O2.prototype, "visibleSublayers", null), e([d({ type: M })], O2.prototype, "extent", void 0), e([d()], O2.prototype, "fullExtent", null), O2 = e([n("esri.layers.KMLLayer")], O2);
var M2 = O2;
export {
  M2 as default
};
//# sourceMappingURL=@arcgis_core_layers_KMLLayer.js.map
