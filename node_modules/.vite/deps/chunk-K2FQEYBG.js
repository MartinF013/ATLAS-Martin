import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  U,
  a,
  f,
  l
} from "./chunk-T7BEWVV3.js";
import {
  d,
  n8 as n,
  v,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/core/support/WatchUpdatingTracking.js
var c = class extends y {
  constructor() {
    super(...arguments), this.updating = false, this.handleId = 0, this.handles = new u(), this.scheduleHandleId = 0, this.pendingPromises = /* @__PURE__ */ new Set();
  }
  destroy() {
    this.removeAll(), this.handles.destroy();
  }
  add(e2, s, t2 = {}) {
    return this._installWatch(e2, s, t2, l);
  }
  addWhen(e2, s, t2 = {}) {
    return this._installWatch(e2, s, t2, f);
  }
  addOnCollectionChange(e2, s, { initial: t2 = false, final: i = false } = {}) {
    const n2 = ++this.handleId;
    return this.handles.add([a(e2, "after-changes", this._createSyncUpdatingCallback(), U), a(e2, "change", s, { onListenerAdd: t2 ? (e3) => s({ added: e3.toArray(), removed: [] }) : void 0, onListenerRemove: i ? (e3) => s({ added: [], removed: e3.toArray() }) : void 0 })], n2), { remove: () => this.handles.remove(n2) };
  }
  addPromise(e2) {
    if (t(e2))
      return e2;
    const s = ++this.handleId;
    this.handles.add({ remove: () => {
      this.pendingPromises.delete(e2) && (0 !== this.pendingPromises.size || this.handles.has(p) || this._set("updating", false));
    } }, s), this.pendingPromises.add(e2), this._set("updating", true);
    const t2 = () => this.handles.remove(s);
    return e2.then(t2, t2), e2;
  }
  removeAll() {
    this.pendingPromises.clear(), this.handles.removeAll(), this._set("updating", false);
  }
  _installWatch(e2, s, t2 = {}, i) {
    const n2 = ++this.handleId;
    t2.sync || this._installSyncUpdatingWatch(e2, n2);
    const d2 = i(e2, s, t2);
    return this.handles.add(d2, n2), { remove: () => this.handles.remove(n2) };
  }
  _installSyncUpdatingWatch(e2, s) {
    const t2 = this._createSyncUpdatingCallback(), i = l(e2, t2, { sync: true, equals: () => false });
    return this.handles.add(i, s), i;
  }
  _createSyncUpdatingCallback() {
    return () => {
      this.handles.remove(p), ++this.scheduleHandleId;
      const e2 = this.scheduleHandleId;
      this._get("updating") || this._set("updating", true), this.handles.add(v(() => {
        e2 === this.scheduleHandleId && (this._set("updating", this.pendingPromises.size > 0), this.handles.remove(p));
      }), p);
    };
  }
};
e([d({ readOnly: true })], c.prototype, "updating", void 0), c = e([n("esri.core.support.WatchUpdatingTracking")], c);
var p = -42;
var m;
!function(e2) {
  e2[e2.NONE = 0] = "NONE", e2[e2.SYNC = 1] = "SYNC", e2[e2.INIT = 2] = "INIT";
}(m || (m = {}));

export {
  c
};
//# sourceMappingURL=chunk-K2FQEYBG.js.map
