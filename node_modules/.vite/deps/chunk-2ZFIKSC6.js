import {
  u
} from "./chunk-G4IZ2HTT.js";
import {
  f,
  l as l2,
  w
} from "./chunk-T7BEWVV3.js";
import {
  d,
  n8 as n,
  y3 as y
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import {
  l,
  o,
  r,
  t
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/widgets/support/InteractiveToolViewModel.js
var v = class extends y {
  constructor(e2) {
    super(e2), this.tool = null, this._baseHandles = new u(), this._loggedUnsupportedErrorOnce = false, this.logger = s.getLogger(this.declaredClass), e2 && null != e2.visible && (this.visible = e2.visible);
  }
  initialize() {
    this._baseHandles.add(l2(() => ({ ready: r(this.view) && this.view.ready, supported: this.supported }), ({ ready: e2, supported: t2 }) => {
      !e2 || t2 || this._loggedUnsupportedErrorOnce || (this.logError(this.unsupportedErrorMessage), this._loggedUnsupportedErrorOnce = true);
    }, w));
  }
  destroy() {
    this.removeTool(), this.view = null, this._baseHandles = l(this._baseHandles);
  }
  get supported() {
    return t(this.view) || this.view.type === this.supportedViewType;
  }
  get view() {
    return this._get("view");
  }
  set view(e2) {
    if (e2 === this.view)
      return;
    this.removeTool(), this._set("view", e2);
    const t2 = "tools";
    this._baseHandles.remove(t2), t(e2) || this._baseHandles.add(e2.tools.on("after-remove", (e3) => {
      e3.item === this.tool && this._set("tool", null);
    }), t2);
  }
  set visible(e2) {
    this._set("visible", e2), r(this.tool) && (this.tool.visible = e2);
  }
  get active() {
    return r(this.tool) && this.tool.active;
  }
  get disabled() {
    return t(this.view) || !this.view.ready || !this.supported;
  }
  createTool(e2 = { interactive: false }) {
    if (this.removeTool(), t(this.view) || !this.view.ready || !this.supported)
      return;
    const t2 = this.constructTool();
    t2.created ? (this._set("tool", t2), this.view.tools.add(t2)) : e2.interactive ? (this._set("tool", t2), this.view.addAndActivateTool(t2), f(() => t2.created, () => {
      t2.active && r(this.view) && (this.view.activeTool = null);
    }, { initial: true, once: true })) : t2.destroy();
  }
  removeTool() {
    const e2 = this.tool;
    if (t(e2))
      return;
    const t2 = o(this.view, (e3) => e3.tools);
    r(t2) ? t2.remove(e2) : e2.destroy(), this._set("tool", null);
  }
  logError(...e2) {
    this.logger.error(...e2);
  }
};
e([d({ constructOnly: true })], v.prototype, "tool", void 0), e([d()], v.prototype, "supported", null), e([d({ value: null })], v.prototype, "view", null), e([d({ type: Boolean, value: true })], v.prototype, "visible", null), e([d()], v.prototype, "active", null), e([d()], v.prototype, "disabled", null), v = e([n("esri.widgets.support.InteractiveToolViewModel")], v);

export {
  v
};
//# sourceMappingURL=chunk-2ZFIKSC6.js.map
