import {
  n as n2
} from "./chunk-4SVQENAK.js";
import "./chunk-KETNREBT.js";
import {
  v as v2
} from "./chunk-JJ7VMWJT.js";
import "./chunk-M2WA2LMI.js";
import "./chunk-UQDLDM54.js";
import "./chunk-YL26MZEL.js";
import "./chunk-WBX2MY5R.js";
import "./chunk-3DZ4BNVJ.js";
import {
  s as s3
} from "./chunk-6QQDRYUS.js";
import "./chunk-IFZAYQVB.js";
import "./chunk-HR2OX32D.js";
import "./chunk-7ZPDA3EC.js";
import {
  p as p2
} from "./chunk-GKRQ3NBT.js";
import "./chunk-6GPADSSO.js";
import "./chunk-ORGMKDYR.js";
import "./chunk-F5A4XAOJ.js";
import {
  v
} from "./chunk-OG6CQEZJ.js";
import {
  c
} from "./chunk-X5Z3DJQ4.js";
import {
  O
} from "./chunk-BUWXVMJU.js";
import {
  f as f2
} from "./chunk-JT3LXQ47.js";
import "./chunk-P3QN5DXX.js";
import "./chunk-QKRZMDWG.js";
import "./chunk-TBT57L4K.js";
import {
  b
} from "./chunk-SIH2IMSA.js";
import "./chunk-LJLQIETB.js";
import "./chunk-WKRVG5MO.js";
import "./chunk-JJRJ6TV3.js";
import "./chunk-K2FQEYBG.js";
import "./chunk-G4IZ2HTT.js";
import "./chunk-T7BEWVV3.js";
import "./chunk-KVF4M6PZ.js";
import "./chunk-GD6ALUPQ.js";
import "./chunk-RN2KRYDN.js";
import "./chunk-56RHM4A6.js";
import "./chunk-ACJD5XFJ.js";
import "./chunk-OO2JXX7L.js";
import "./chunk-Q3R7XFM5.js";
import "./chunk-JCPK2OXG.js";
import "./chunk-HVM5D6S5.js";
import "./chunk-JYHTO6QC.js";
import "./chunk-FTLBKDGL.js";
import "./chunk-5Z5455ZY.js";
import "./chunk-D7DLEBS2.js";
import "./chunk-H7JF6Q7A.js";
import "./chunk-TT2HIXWQ.js";
import "./chunk-OIPX3EDD.js";
import "./chunk-HPH3FMVB.js";
import "./chunk-OOZMA7DN.js";
import "./chunk-Y7FSCP47.js";
import {
  U
} from "./chunk-65A2N4LL.js";
import "./chunk-GVELBHGI.js";
import {
  I
} from "./chunk-5N3FSR63.js";
import "./chunk-C4LU7RDX.js";
import "./chunk-EPCCNF3D.js";
import "./chunk-4PRVTUEZ.js";
import "./chunk-DMJWTK32.js";
import "./chunk-BPZGJQOB.js";
import "./chunk-ZOKX6UGH.js";
import "./chunk-PKZEO23A.js";
import "./chunk-AIRC226G.js";
import "./chunk-BNPOKP6A.js";
import "./chunk-CHNDTVQJ.js";
import "./chunk-VLCG72SW.js";
import "./chunk-Q72YFZUL.js";
import "./chunk-YPZEGNLG.js";
import "./chunk-3NMRL5CR.js";
import "./chunk-SN4RUQ4N.js";
import "./chunk-XRL56EGK.js";
import "./chunk-ZIHDQYKE.js";
import {
  o
} from "./chunk-GSRNZQFV.js";
import "./chunk-ICD7AJSY.js";
import {
  d,
  n8 as n
} from "./chunk-2QOWZFCU.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import "./chunk-YAAIZ67O.js";
import "./chunk-5EQKHR4M.js";
import {
  f,
  w
} from "./chunk-U3PSONS6.js";
import {
  s2
} from "./chunk-HFTNOKM2.js";
import "./chunk-23NWA6WL.js";
import {
  s
} from "./chunk-CVWDM4C7.js";
import "./chunk-G5JBUC5N.js";
import {
  p,
  r
} from "./chunk-CBQWMOBK.js";
import "./chunk-AC2VUBZ6.js";

// node_modules/@arcgis/core/layers/ElevationLayer.js
var w2 = s.getLogger("esri.layers.ElevationLayer");
var T = class extends s3(p2(c(v(O(b))))) {
  constructor(...e2) {
    super(...e2), this.copyright = null, this.heightModelInfo = null, this.path = null, this.opacity = 1, this.operationalLayerType = "ArcGISTiledElevationServiceLayer", this.sourceJSON = null, this.type = "elevation", this.url = null, this.version = null, this._lercDecoder = n2();
  }
  normalizeCtorArgs(e2, r2) {
    return "string" == typeof e2 ? { url: e2, ...r2 } : e2;
  }
  destroy() {
    this._lercDecoder = p(this._lercDecoder);
  }
  set minScale(e2) {
    this.constructed && w2.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`);
  }
  get minScale() {
  }
  set maxScale(e2) {
    this.constructed && w2.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`);
  }
  get maxScale() {
  }
  readVersion(e2, r2) {
    let t = r2.currentVersion;
    return t || (t = 9.3), t;
  }
  load(e2) {
    const r2 = r(e2) ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Image Service"], supportsData: false, validateItem: (e3) => {
      for (let r3 = 0; r3 < e3.typeKeywords.length; r3++)
        if ("elevation 3d layer" === e3.typeKeywords[r3].toLowerCase())
          return true;
      throw new s2("portal:invalid-layer-item-type", "Invalid layer item type '${type}', expected '${expectedType}' ", { type: "Image Service", expectedType: "Image Service Elevation 3D Layer" });
    } }, e2).catch(w).then(() => this._fetchImageService(r2))), Promise.resolve(this);
  }
  fetchTile(e2, t, o2, i) {
    const a = r((i = i || { signal: null }).signal) ? i.signal : i.signal = new AbortController().signal, l = { responseType: "array-buffer", signal: a }, n3 = { noDataValue: i.noDataValue, returnFileInfo: true };
    return this.load().then(() => this._fetchTileAvailability(e2, t, o2, i)).then(() => U(this.getTileUrl(e2, t, o2), l)).then((e3) => this._lercDecoder.decode(e3.data, n3, a)).then((e3) => ({ values: e3.pixelData, width: e3.width, height: e3.height, maxZError: e3.fileInfo.maxZError, noDataValue: e3.noDataValue, minValue: e3.minValue, maxValue: e3.maxValue }));
  }
  getTileUrl(e2, r2, t) {
    const o2 = !this.tilemapCache && this.supportsBlankTile, i = I({ ...this.parsedUrl.query, blankTile: !o2 && null });
    return `${this.parsedUrl.path}/tile/${e2}/${r2}/${t}${i ? "?" + i : ""}`;
  }
  async queryElevation(e2, r2) {
    const { ElevationQuery: t } = await import("./ElevationQuery-OWCJHJ4T.js");
    f(r2);
    return new t().query(this, e2, r2);
  }
  async createElevationSampler(e2, r2) {
    const { ElevationQuery: t } = await import("./ElevationQuery-OWCJHJ4T.js");
    f(r2);
    return new t().createSampler(this, e2, r2);
  }
  _fetchTileAvailability(e2, r2, t, o2) {
    return this.tilemapCache ? this.tilemapCache.fetchAvailability(e2, r2, t, o2) : Promise.resolve("unknown");
  }
  async _fetchImageService(e2) {
    if (this.sourceJSON)
      return this.sourceJSON;
    const t = { query: { f: "json", ...this.parsedUrl.query }, responseType: "json", signal: e2 }, o2 = await U(this.parsedUrl.path, t);
    o2.ssl && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = o2.data, this.read(o2.data, { origin: "service", url: this.parsedUrl });
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile.__isDefault__;
  }
};
e([d({ json: { read: { source: "copyrightText" } } })], T.prototype, "copyright", void 0), e([d({ readOnly: true, type: v2 })], T.prototype, "heightModelInfo", void 0), e([d({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], T.prototype, "path", void 0), e([d({ type: ["show", "hide"] })], T.prototype, "listMode", void 0), e([d({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } } })], T.prototype, "minScale", null), e([d({ json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } } })], T.prototype, "maxScale", null), e([d({ json: { read: false, write: false, origins: { "web-document": { read: false, write: false } } } })], T.prototype, "opacity", void 0), e([d({ type: ["ArcGISTiledElevationServiceLayer"] })], T.prototype, "operationalLayerType", void 0), e([d()], T.prototype, "sourceJSON", void 0), e([d({ json: { read: false }, value: "elevation", readOnly: true })], T.prototype, "type", void 0), e([d(f2)], T.prototype, "url", void 0), e([d()], T.prototype, "version", void 0), e([o("version", ["currentVersion"])], T.prototype, "readVersion", null), T = e([n("esri.layers.ElevationLayer")], T), T.prototype.fetchTile.__isDefault__ = true;
var x = T;
export {
  x as default
};
//# sourceMappingURL=ElevationLayer-DCJ536KE.js.map
