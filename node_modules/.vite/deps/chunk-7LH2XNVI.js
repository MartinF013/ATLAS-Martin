import {
  s
} from "./chunk-ZLORWBMB.js";
import {
  p
} from "./chunk-CNL2CHF7.js";
import {
  i as i2
} from "./chunk-6ITXWFMK.js";
import {
  e as e7
} from "./chunk-SV4VP57N.js";
import {
  t as t2
} from "./chunk-DHZ2TSD5.js";
import {
  e as e5
} from "./chunk-YSWURJZW.js";
import {
  n as n2
} from "./chunk-DNPZNIDB.js";
import {
  e as e6
} from "./chunk-WW7VYUQW.js";
import {
  o
} from "./chunk-TEJEYVH4.js";
import {
  t
} from "./chunk-HEZ2ATGC.js";
import {
  e as e4
} from "./chunk-AALA53RH.js";
import {
  u
} from "./chunk-IJHFAZOW.js";
import {
  d
} from "./chunk-YAQGRU5B.js";
import {
  e as e3
} from "./chunk-46N7XS5M.js";
import {
  o as o2
} from "./chunk-A3QLZKCF.js";
import {
  e as e2
} from "./chunk-LGILR4HN.js";
import {
  i2 as i
} from "./chunk-I5UNY2WQ.js";
import {
  n
} from "./chunk-NAB3NF54.js";
import {
  O as O2
} from "./chunk-MDCKEJ7B.js";
import {
  O
} from "./chunk-VMF4NMEB.js";
import {
  e
} from "./chunk-IVBXK6OP.js";
import {
  c
} from "./chunk-CBQWMOBK.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RibbonLineTechniqueConfiguration.js
var r;
!function(o3) {
  o3[o3.BUTT = 0] = "BUTT", o3[o3.SQUARE = 1] = "SQUARE", o3[o3.ROUND = 2] = "ROUND", o3[o3.COUNT = 3] = "COUNT";
}(r || (r = {}));
var s2 = class extends i2 {
  constructor() {
    super(...arguments), this.output = o.Color, this.capType = r.BUTT, this.transparencyPassType = O2.NONE, this.occluder = false, this.hasSlicePlane = false, this.hasPolygonOffset = false, this.writeDepth = false, this.draped = false, this.stippleEnabled = false, this.stippleOffColorEnabled = false, this.stippleScaleWithLineWidth = false, this.stipplePreferContinuous = true, this.roundJoins = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.falloffEnabled = false, this.innerColorEnabled = false, this.hasOccludees = false, this.hasMultipassTerrain = false, this.cullAboveGround = false, this.wireframe = false;
  }
};
e([e7({ count: o.COUNT })], s2.prototype, "output", void 0), e([e7({ count: r.COUNT })], s2.prototype, "capType", void 0), e([e7({ count: O2.COUNT })], s2.prototype, "transparencyPassType", void 0), e([e7()], s2.prototype, "occluder", void 0), e([e7()], s2.prototype, "hasSlicePlane", void 0), e([e7()], s2.prototype, "hasPolygonOffset", void 0), e([e7()], s2.prototype, "writeDepth", void 0), e([e7()], s2.prototype, "draped", void 0), e([e7()], s2.prototype, "stippleEnabled", void 0), e([e7()], s2.prototype, "stippleOffColorEnabled", void 0), e([e7()], s2.prototype, "stippleScaleWithLineWidth", void 0), e([e7()], s2.prototype, "stipplePreferContinuous", void 0), e([e7()], s2.prototype, "roundJoins", void 0), e([e7()], s2.prototype, "vvSize", void 0), e([e7()], s2.prototype, "vvColor", void 0), e([e7()], s2.prototype, "vvOpacity", void 0), e([e7()], s2.prototype, "falloffEnabled", void 0), e([e7()], s2.prototype, "innerColorEnabled", void 0), e([e7()], s2.prototype, "hasOccludees", void 0), e([e7()], s2.prototype, "hasMultipassTerrain", void 0), e([e7()], s2.prototype, "cullAboveGround", void 0), e([e7()], s2.prototype, "wireframe", void 0), e([e7({ constValue: true })], s2.prototype, "stippleRequiresClamp", void 0), e([e7({ constValue: true })], s2.prototype, "stippleRequiresStretchMeasure", void 0), e([e7({ constValue: true })], s2.prototype, "hasVvInstancing", void 0), e([e7({ constValue: true })], s2.prototype, "hasSliceTranslatedView", void 0);

// node_modules/@arcgis/core/chunks/RibbonLine.glsl.js
var x = 1;
function b(b2) {
  const L2 = new i(), w = b2.hasMultipassTerrain && (b2.output === o.Color || b2.output === o.Alpha);
  L2.include(t2), L2.include(s, b2), L2.include(p, b2), b2.output === o.Depth && L2.include(e5, b2), d(L2, b2);
  const { vertex: y, fragment: C } = L2;
  y.uniforms.add([new e3("inverseProjectionMatrix", (e8, t3) => t3.camera.inverseProjectionMatrix), new e2("nearFar", (e8, t3) => t3.camera.nearFar), new o2("miterLimit", (e8) => "miter" !== e8.join ? 0 : e8.miterLimit), new e4("viewport", (e8, t3) => t3.camera.fullViewport)]), y.constants.add("LARGE_HALF_FLOAT", "float", 65500), L2.attributes.add(O.POSITION, "vec3"), L2.attributes.add(O.SUBDIVISIONFACTOR, "float"), L2.attributes.add(O.UV0, "vec2"), L2.attributes.add(O.AUXPOS1, "vec3"), L2.attributes.add(O.AUXPOS2, "vec3"), L2.varyings.add("vColor", "vec4"), L2.varyings.add("vpos", "vec3"), L2.varyings.add("linearDepth", "float"), w && L2.varyings.add("depth", "float");
  const j = b2.capType === r.ROUND, R = b2.stippleEnabled && b2.stippleScaleWithLineWidth || j;
  R && L2.varyings.add("vLineWidth", "float");
  const A = b2.stippleEnabled && b2.stippleScaleWithLineWidth;
  A && L2.varyings.add("vLineSizeInv", "float");
  const F = b2.innerColorEnabled || j;
  F && L2.varyings.add("vLineDistance", "float");
  const P = b2.stippleEnabled && j, E = b2.falloffEnabled || P;
  E && L2.varyings.add("vLineDistanceNorm", "float"), j && (L2.varyings.add("vSegmentSDF", "float"), L2.varyings.add("vReverseSegmentSDF", "float")), y.code.add(n`#define PERPENDICULAR(v) vec2(v.y, -v.x);
float interp(float ncp, vec4 a, vec4 b) {
return (-ncp - a.z) / (b.z - a.z);
}
vec2 rotate(vec2 v, float a) {
float s = sin(a);
float c = cos(a);
mat2 m = mat2(c, -s, s, c);
return m * v;
}`), y.code.add(n`vec4 projectAndScale(vec4 pos) {
vec4 posNdc = proj * pos;
posNdc.xy *= viewport.zw / posNdc.w;
return posNdc;
}`), y.code.add(n`
    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {
      float vnp = nearFar[0] * 0.99;

      if(pos.z > -nearFar[0]) {
        //current pos behind ncp --> we need to clip
        if (!isStartVertex) {
          if(prev.z < -nearFar[0]) {
            //previous in front of ncp
            pos = mix(prev, pos, interp(vnp, prev, pos));
            next = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        } else {
          if(next.z < -nearFar[0]) {
            //next in front of ncp
            pos = mix(pos, next, interp(vnp, pos, next));
            prev = pos;
          } else {
            pos = vec4(0.0, 0.0, 0.0, 1.0);
          }
        }
      } else {
        //current position visible
        if (prev.z > -nearFar[0]) {
          //previous behind ncp
          prev = mix(pos, prev, interp(vnp, pos, prev));
        }
        if (next.z > -nearFar[0]) {
          //next behind ncp
          next = mix(next, pos, interp(vnp, next, pos));
        }
      }

      ${w ? "depth = pos.z;" : ""}
      linearDepth = (-pos.z - nearFar[0]) / (nearFar[1] - nearFar[0]);

      pos = projectAndScale(pos);
      next = projectAndScale(next);
      prev = projectAndScale(prev);
    }
  `), y.uniforms.add(new o2("pixelRatio", (e8, t3) => t3.camera.pixelRatio)), y.code.add(n`
  void main(void) {
    // unpack values from uv0.y
    bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;

    float coverage = 1.0;

    // Check for special value of uv0.y which is used by the Renderer when graphics
    // are removed before the VBO is recompacted. If this is the case, then we just
    // project outside of clip space.
    if (uv0.y == 0.0) {
      // Project out of clip space
      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
    }
    else {
      bool isJoin = abs(uv0.y) < 3.0;

      float lineSize = getSize();
      float lineWidth = lineSize * pixelRatio;

      ${R ? n`vLineWidth = lineWidth;` : ""}
      ${A ? n`vLineSizeInv = 1.0 / lineSize;` : ""}

      // convert sub-pixel coverage to alpha
      if (lineWidth < 1.0) {
        coverage = lineWidth;
        lineWidth = 1.0;
      }else{
        // Ribbon lines cannot properly render non-integer sizes. Round width to integer size if
        // larger than one for better quality. Note that we do render < 1 pixels more or less correctly
        // so we only really care to round anything larger than 1.
        lineWidth = floor(lineWidth + 0.5);
      }

      vec4 pos  = view * vec4(position.xyz, 1.0);
      vec4 prev = view * vec4(auxpos1.xyz, 1.0);
      vec4 next = view * vec4(auxpos2.xyz, 1.0);

      clipAndTransform(pos, prev, next, isStartVertex);

      vec2 left = (pos.xy - prev.xy);
      vec2 right = (next.xy - pos.xy);

      float leftLen = length(left);
      float rightLen = length(right);
  `);
  (b2.stippleEnabled || j) && y.code.add(n`
      float isEndVertex = float(!isStartVertex);
      vec2 segmentOrigin = mix(pos.xy, prev.xy, isEndVertex);
      vec2 segment = mix(right, left, isEndVertex);
      ${j ? n`vec2 segmentEnd = mix(next.xy, pos.xy, isEndVertex);` : ""}
    `), y.code.add(n`left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);
right = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);
vec2 capDisplacementDir = vec2(0, 0);
vec2 joinDisplacementDir = vec2(0, 0);
float displacementLen = lineWidth;
if (isJoin) {
bool isOutside = (left.x * right.y - left.y * right.x) * uv0.y > 0.0;
joinDisplacementDir = normalize(left + right);
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);
if (leftLen > 0.001 && rightLen > 0.001) {
float nDotSeg = dot(joinDisplacementDir, left);
displacementLen /= length(nDotSeg * left - joinDisplacementDir);
if (!isOutside) {
displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));
}
}
if (isOutside && (displacementLen > miterLimit * lineWidth)) {`), b2.roundJoins ? y.code.add(n`
        vec2 startDir = leftLen < 0.001 ? right : left;
        startDir = PERPENDICULAR(startDir);

        vec2 endDir = rightLen < 0.001 ? left : right;
        endDir = PERPENDICULAR(endDir);

        float factor = ${b2.stippleEnabled ? n`min(1.0, subdivisionFactor * ${n.float((x + 2) / (x + 1))})` : n`subdivisionFactor`};

        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));
        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * factor * rotationAngle);
      `) : y.code.add(n`if (leftLen < 0.001) {
joinDisplacementDir = right;
}
else if (rightLen < 0.001) {
joinDisplacementDir = left;
}
else {
joinDisplacementDir = (isStartVertex || subdivisionFactor > 0.0) ? right : left;
}
joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);`);
  const T = b2.capType !== r.BUTT;
  return y.code.add(n`
        displacementLen = lineWidth;
      }
    } else {
      // CAP handling ---------------------------------------------------
      joinDisplacementDir = isStartVertex ? right : left;
      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);

      ${T ? n`capDisplacementDir = isStartVertex ? -right : left;` : ""}
    }
  `), y.code.add(n`
    // Displacement (in pixels) caused by join/or cap
    vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;

    ${E || F ? n`float lineDistNorm = sign(uv0.y) * pos.w;` : ""}

    ${F ? n`vLineDistance = lineWidth * lineDistNorm;` : ""}
    ${E ? n`vLineDistanceNorm = lineDistNorm;` : ""}

    pos.xy += dpos;
  `), j && y.code.add(n`vec2 segmentDir = normalize(segment);
vSegmentSDF = (isJoin && isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentOrigin, segmentDir) * pos.w) ;
vReverseSegmentSDF = (isJoin && !isStartVertex) ? LARGE_HALF_FLOAT : (dot(pos.xy - segmentEnd, -segmentDir) * pos.w);`), b2.stippleEnabled && (b2.draped ? y.uniforms.add(new o2("worldToScreenRatio", (e8, t3) => 1 / t3.screenToPCSRatio)) : y.code.add(n`vec3 segmentCenter = mix((auxpos2 + position) * 0.5, (position + auxpos1) * 0.5, isEndVertex);
float worldToScreenRatio = computeWorldToScreenRatio(segmentCenter);`), y.code.add(n`float segmentLengthScreenDouble = length(segment);
float segmentLengthScreen = segmentLengthScreenDouble * 0.5;
float discreteWorldToScreenRatio = discretizeWorldToScreenRatio(worldToScreenRatio);
float segmentLengthRender = length(mix(auxpos2 - position, position - auxpos1, isEndVertex));
vStipplePatternStretch = worldToScreenRatio / discreteWorldToScreenRatio;`), b2.draped ? y.code.add(n`float segmentLengthPseudoScreen = segmentLengthScreen / pixelRatio * discreteWorldToScreenRatio / worldToScreenRatio;
float startPseudoScreen = uv0.x * discreteWorldToScreenRatio - mix(0.0, segmentLengthPseudoScreen, isEndVertex);`) : y.code.add(n`float startPseudoScreen = mix(uv0.x, uv0.x - segmentLengthRender, isEndVertex) * discreteWorldToScreenRatio;
float segmentLengthPseudoScreen = segmentLengthRender * discreteWorldToScreenRatio;`), y.code.add(n`
      float patternLength = ${b2.stippleScaleWithLineWidth ? "lineSize * " : ""} stipplePatternPixelSize;

      // Compute the coordinates at both start and end of the line segment, because we need both to clamp to in the fragment shader
      vStippleDistanceLimits = computeStippleDistanceLimits(startPseudoScreen, segmentLengthPseudoScreen, segmentLengthScreen, patternLength);

      vStippleDistance = mix(vStippleDistanceLimits.x, vStippleDistanceLimits.y, isEndVertex);

      // Adjust the coordinate to the displaced position (the pattern is shortened/overextended on the in/outside of joins)
      if (segmentLengthScreenDouble >= 0.001) {
        // Project the actual vertex position onto the line segment. Note that the resulting factor is within [0..1] at the
        // original vertex positions, and slightly outside of that range at the displaced positions
        vec2 stippleDisplacement = pos.xy - segmentOrigin;
        float stippleDisplacementFactor = dot(segment, stippleDisplacement) / (segmentLengthScreenDouble * segmentLengthScreenDouble);

        // Apply this offset to the actual vertex coordinate (can be screen or pseudo-screen space)
        vStippleDistance += (stippleDisplacementFactor - isEndVertex) * (vStippleDistanceLimits.y - vStippleDistanceLimits.x);
      }

      // Cancel out perspective correct interpolation because we want this length the really represent the screen distance
      vStippleDistanceLimits *= pos.w;
      vStippleDistance *= pos.w;

      // Disable stipple distance limits on caps
      vStippleDistanceLimits = isJoin ?
                                 vStippleDistanceLimits :
                                 isStartVertex ?
                                  vec2(-1e038, vStippleDistanceLimits.y) :
                                  vec2(vStippleDistanceLimits.x, 1e038);
    `)), y.code.add(n`
      // Convert back into NDC
      pos.xy = (pos.xy / viewport.zw) * pos.w;

      vColor = getColor();
      vColor.a *= coverage;

      ${b2.wireframe && !b2.draped ? "pos.z -= 0.001 * pos.w;" : ""}

      // transform final position to camera space for slicing
      vpos = (inverseProjectionMatrix * pos).xyz;
      gl_Position = pos;
    }
  }
  `), w && L2.include(n2, b2), L2.include(u, b2), C.include(e6), C.code.add(n`
  void main() {
    discardBySlice(vpos);
    ${w ? "terrainDepthTest(gl_FragCoord, depth);" : ""}
  `), b2.wireframe ? C.code.add(n`vec4 finalColor = vec4(1.0, 0.0, 1.0, 1.0);`) : (j && C.code.add(n`
      float sdf = min(vSegmentSDF, vReverseSegmentSDF);
      vec2 fragmentPosition = vec2(
        min(sdf, 0.0),
        vLineDistance
      ) * gl_FragCoord.w;

      float fragmentRadius = length(fragmentPosition);
      float fragmentCapSDF = (fragmentRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float capCoverage = clamp(0.5 - fragmentCapSDF, 0.0, 1.0);

      if (capCoverage < ${n.float(t)}) {
        discard;
      }
    `), P ? C.code.add(n`
      vec2 stipplePosition = vec2(
        min(getStippleSDF() * 2.0 - 1.0, 0.0),
        vLineDistanceNorm * gl_FragCoord.w
      );
      float stippleRadius = length(stipplePosition * vLineWidth);
      float stippleCapSDF = (stippleRadius - vLineWidth) * 0.5; // Divide by 2 to transform from double pixel scale
      float stippleCoverage = clamp(0.5 - stippleCapSDF, 0.0, 1.0);
      float stippleAlpha = step(${n.float(t)}, stippleCoverage);
      `) : C.code.add(n`float stippleAlpha = getStippleAlpha();`), C.uniforms.add(new e4("intrinsicColor", (e8) => e8.color)), C.code.add(n`discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);
vec4 color = intrinsicColor * vColor;`), b2.innerColorEnabled && (C.uniforms.add(new e4("innerColor", (t3) => c(t3.innerColor, t3.color))), C.uniforms.add(new o2("innerWidth", (e8, t3) => e8.innerWidth * t3.camera.pixelRatio)), C.code.add(n`float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;
float innerAA = clamp(0.5 - distToInner, 0.0, 1.0);
float innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);
color = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);`)), C.code.add(n`vec4 finalColor = blendStipple(color, stippleAlpha);`), b2.falloffEnabled && (C.uniforms.add(new o2("falloff", (e8) => e8.falloff)), C.code.add(n`finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);`))), C.code.add(n`
    if (finalColor.a < ${n.float(t)}) {
      discard;
    }

    ${b2.output === o.Alpha ? n`gl_FragColor = vec4(finalColor.a);` : ""}
    ${b2.output === o.Color ? n`gl_FragColor = highlightSlice(finalColor, vpos);` : ""}
    ${b2.output === o.Color && b2.transparencyPassType === O2.Color ? "gl_FragColor = premultiplyAlpha(gl_FragColor);" : ""}
    ${b2.output === o.Highlight ? n`gl_FragColor = vec4(1.0);` : ""}
    ${b2.output === o.Depth ? n`outputDepth(linearDepth);` : ""}
  }
  `), L2;
}
var L = Object.freeze(Object.defineProperty({ __proto__: null, NUM_ROUND_JOIN_SUBDIVISIONS: x, build: b }, Symbol.toStringTag, { value: "Module" }));

export {
  r,
  s2 as s,
  x,
  b,
  L
};
//# sourceMappingURL=chunk-7LH2XNVI.js.map
